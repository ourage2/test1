소스
CREATE -- added during DDL generation.
PROCEDURE          PR_BRD_ADD_HIT_CNT(i_brd_no        in    varchar2,
                                               i_repl_no       in    number,
                                               i_repl_lvl      in    number,
                                               o_result        out   varchar2) as

/**************************************************************************************/
/* 생성일자 : 2013.04.29                                                              */
/* 생성자   : 이용한                                                                  */
/* 업무내용 : 사용자가 게시물을 읽을 때 자동으로 조회수를 증가시켜주는 프로시저로     */
/*            업무로직과 독립적으로  트랜젝션을 처리한다.                             */
/*            (동일 인물이 동일 게시물 조회시 조회수 제외 처리는 하지 않음)           */
/* Parameter: [in] i_brd_no         : 게시물번호                                      */
/*            [in] i_repl_no        : 답변글번호                                      */
/*            [in] i_repl_lvl       : 답변글레벨                                      */
/*            [out]o_hit_cnt        : 증가된 조회수 (반환)                            */
/*            [out]o_result         : 결과결과 정상(OK), 비정상(해당메시지)           */
/**************************************************************************************/

pragma autonomous_transaction;

 begin

    --조회수증가 후 적용
    update TBZZ0402
       set HIT_CNT   = (select nvl(HIT_CNT,0) + 1 from TBZZ0402 where BRD_NO = i_brd_no and REPL_NO = i_repl_no and REPL_LVL = i_repl_lvl)
     where BRD_NO    = i_brd_no
       and REPL_NO   = i_repl_no
       and REPL_LVL  = i_repl_lvl;

    commit;

    --정상처리결과반환
    o_result := 'OK' ;

    exception when others then
              DBMS_OUTPUT.PUT_LINE('PR_BRD_ADD_HIT_CNT ERROR: ' || sqlerrm);
              RAISE_APPLICATION_ERROR(-20010, 'PR_BRD_ADD_HIT_CNT ERROR: ' || sqlerrm);
              rollback;
        o_result := sqlerrm ;

 end;
CREATE OR REPLACE
procedure          PR_CONT_UPDATE_CUST (i_cust_no              in  varchar2,
                                                 o_result               out varchar2 ) as

/****************************************************************************************/
/* 생성일자 : 2013.04.25                                                                */
/* 생성자   : 이정원                                                                    */
/* 업무내용 : 고객관리 화면에서 아래 명시한 파라메터값에 해당하는 정보가 수정처리될     */
/*            시 가입설계,배서,계약마스터 테이블의 피공제자,조합원에 동일하게 해당하는  */
/*            필드들을 수정된 값으로 동일하게 업데이트 처리                             */
/* Parameter: [in] i_cust_no              : 고객번호-조합원고유키                       */
/*            [out]o_result               : 결과 정상(OK), 비정상(해당메시지)           */
/****************************************************************************************/

v_zip_cd_gb                           TBAA0001.ZIP_CD_GB%TYPE;          --고객우편번호신구구분
v_zip_cd                              TBAA0001.ZIP_CD%TYPE;             --고객우편번호
v_addr_1                              TBAA0001.ADDR_1%TYPE;             --고객주소1
v_addr_2                              TBAA0001.ADDR_2%TYPE;             --고객주소2(상세주소)
v_off_tel_ddd                         TBAA0001.OFF_TEL_DDD%TYPE;        --고객직장전화지역번호
v_off_tel                             TBAA0001.OFF_TEL%TYPE;            --고객직장전화번호
v_tel_ddd                             TBAA0001.OFF_TEL_DDD1%TYPE;       --고객전화번호지역번호(자택)
v_tel_no                              TBAA0001.OFF_TEL1%TYPE;           --고객전화번호(자택)
v_hp_no                               TBAA0001.HP_NO1%TYPE;             --고객휴대폰번호
v_isd_fax                             TBAA0001.ISD_FAX%TYPE;            --고객팩스번호

v_cust_gb                             TBAA0001.CUST_GB%TYPE;            --개인,조합원,비조합원 구분
v_bco_no                              TBAA0001.BCO_NO%TYPE;             --조합원사업자등록번호
v_co_no                               TBAA0001.CO_NO%TYPE;              --조합원주민등록번호

v_cust_cd                             varchar2(13);                     --조합원코드


begin
    --반환 초기값 설정
    o_result := 'NOT_OK';

    begin
       --고객정보 SELECT
       select ZIP_CD_GB,              ZIP_CD,           ADDR_1,         ADDR_2,          OFF_TEL_DDD,
              OFF_TEL,                OFF_TEL_DDD1,     OFF_TEL1,       HP_NO1,          ISD_FAX,
              CUST_GB,                BCO_NO,           CO_NO
         into v_zip_cd_gb,            v_zip_cd,         v_addr_1,       v_addr_2,        v_off_tel_ddd,
              v_off_tel,              v_tel_ddd,        v_tel_no,       v_hp_no,         v_isd_fax,
              v_cust_gb,              v_bco_no,         v_co_no
         from TBAA0001
        where CUST_NO  = i_cust_no;

        if    v_cust_gb  = '1' then          --개인일 경우 v_cust_cd 는 주민등록번호
              v_cust_cd := v_co_no;
        else                                 --조합원,비조합원일 경우 v_cust_cd 는 사업자번호
              v_cust_cd := v_bco_no;
        end if;

        exception when no_data_found then
              o_result := '고객정보(TBAA0001) 데이터를 찾을 수 없습니다.';
    end;


    --설계/청약관련 테이블 업데이트
    begin
        --가입설계마스터(TBIB0001)의 피공제자 정보 업데이트
        update TBIB0001
           set ISD_ZIP_CD_GB       = v_zip_cd_gb
             , ISD_ZIP_CD          = v_zip_cd
             , ISD_ADDR_1          = v_addr_1
             , ISD_ADDR_2          = v_addr_2
             , ISD_OFF_TEL_DDD    = v_off_tel_ddd
             , ISD_OFF_TEL         = v_off_tel
             , ISD_TEL_DDD         = v_tel_ddd
             , ISD_TEL_NO          = v_tel_no
             , ISD_HP_NO           = v_hp_no
             , ISD_FAX             = v_isd_fax
         where CUST_NO = i_cust_no
           and TO_CHAR(sysdate,'YYYYMMDD') between TO_CHAR(ENT_DGN_DATE,'YYYYMMDD') and TO_CHAR(IEND_CONT_DATE,'YYYYMMDD');
    end;


    --배서 테이블 업데이트
    begin
        --배서마스터(TBID0001)의 피공제자 정보 업데이트
         update TBID0001
           set ISD_ZIP_CD_GB       = v_zip_cd_gb
             , ISD_ZIP_CD          = v_zip_cd
             , ISD_ADDR_1          = v_addr_1
             , ISD_ADDR_2          = v_addr_2
             , ISD_OFF_TEL_DDD    = v_off_tel_ddd
             , ISD_OFF_TEL         = v_off_tel
             , ISD_TEL_DDD         = v_tel_ddd
             , ISD_TEL_NO          = v_tel_no
             , ISD_HP_NO           = v_hp_no
             , ISD_FAX             = v_isd_fax
         where CUST_NO = i_cust_no
           and TO_CHAR(sysdate,'YYYYMMDD') between TO_CHAR(ENT_DGN_DATE,'YYYYMMDD') and TO_CHAR(IEND_CONT_DATE,'YYYYMMDD');
    end;


    --계약 테이블 업데이트
    begin
        --계약마스터(TBIC0001)의 피공제자 정보 업데이트
         update TBIC0001
           set ISD_ZIP_CD_GB       = v_zip_cd_gb
             , ISD_ZIP_CD          = v_zip_cd
             , ISD_ADDR_1          = v_addr_1
             , ISD_ADDR_2          = v_addr_2
             , ISD_OFF_TEL_DDD    = v_off_tel_ddd
             , ISD_OFF_TEL         = v_off_tel
             , ISD_TEL_DDD         = v_tel_ddd
             , ISD_TEL_NO          = v_tel_no
             , ISD_HP_NO           = v_hp_no
             , ISD_FAX             = v_isd_fax
         where CUST_NO = i_cust_no
           and TO_CHAR(sysdate,'YYYYMMDD') between TO_CHAR(ENT_DGN_DATE,'YYYYMMDD') and TO_CHAR(IEND_CONT_DATE,'YYYYMMDD');
    end;



    --설계/청약관련 테이블 업데이트
    begin
        --가입설계마스터(TBIB0001)의 계약자 정보 업데이트
        update TBIB0001
           set CONT_ZIP_CD_GB      = v_zip_cd_gb
             , CONT_ZIP_CD        = v_zip_cd
             , CONT_ADDR_1        = v_addr_1
             , CONT_ADDR_2        = v_addr_2
             , CONT_OFF_TEL_DDD    = v_off_tel_ddd
             , CONT_OFF_TEL        = v_off_tel
             , CONT_TEL_DDD        = v_tel_ddd
             , CONT_TEL_NO         = v_tel_no
             , CONT_HP_NO          = v_hp_no
             , CONT_FAX            = v_isd_fax
         where CONT_CD = v_cust_cd
           and TO_CHAR(sysdate,'YYYYMMDD') between TO_CHAR(ENT_DGN_DATE,'YYYYMMDD') and TO_CHAR(IEND_CONT_DATE,'YYYYMMDD');
    end;


    --배서 테이블 업데이트
    begin
        --배서마스터(TBID0001)의 계약자 정보 업데이트
         update TBID0001
           set CONT_ZIP_CD_GB      = v_zip_cd_gb
             , CONT_ZIP_CD        = v_zip_cd
             , CONT_ADDR_1        = v_addr_1
             , CONT_ADDR_2        = v_addr_2
             , CONT_OFF_TEL_DDD    = v_off_tel_ddd
             , CONT_OFF_TEL        = v_off_tel
             , CONT_TEL_DDD        = v_tel_ddd
             , CONT_TEL_NO         = v_tel_no
             , CONT_HP_NO          = v_hp_no
             , CONT_FAX            = v_isd_fax
         where CONT_CD = v_cust_cd
           and TO_CHAR(sysdate,'YYYYMMDD') between TO_CHAR(ENT_DGN_DATE,'YYYYMMDD') and TO_CHAR(IEND_CONT_DATE,'YYYYMMDD');
    end;


    --계약 테이블 업데이트
    begin
        --계약마스터(TBIC0001)의 계약자 정보 업데이트
         update TBIC0001
           set CONT_ZIP_CD_GB      = v_zip_cd_gb
             , CONT_ZIP_CD        = v_zip_cd
             , CONT_ADDR_1        = v_addr_1
             , CONT_ADDR_2        = v_addr_2
             , CONT_OFF_TEL_DDD    = v_off_tel_ddd
             , CONT_OFF_TEL        = v_off_tel
             , CONT_TEL_DDD        = v_tel_ddd
             , CONT_TEL_NO         = v_tel_no
             , CONT_HP_NO          = v_hp_no
             , CONT_FAX            = v_isd_fax
         where CONT_CD = v_cust_cd
           and TO_CHAR(sysdate,'YYYYMMDD') between TO_CHAR(ENT_DGN_DATE,'YYYYMMDD') and TO_CHAR(IEND_CONT_DATE,'YYYYMMDD');
    end;




    --정상처리결과반환
    o_result := 'OK';

    exception when others then
              dbms_output.put_line('PR_CONT_UPDATE_CUST ERROR: ' || sqlerrm);
              raise_application_error(-20010, 'PR_CONT_UPDATE_CUST ERROR: ' || sqlerrm);
              o_result := sqlerrm ;

    --Commit과 Rollback은 JAVA Business 로직에서 처리함으로 프로시저에서는 정의하지 않는다.

end ;
CREATE -- added during DDL generation.
procedure          pr_dambo_period_prem( p_PLN_NO varchar2,           p_dmbo_cd varchar2,
                                                  p_DMBO_BASIC_PREM_01 number, p_DMBO_APPY_PREM_01 number,
                                                  p_ISTAR_CONT_DATE date,      p_IEND_CONT_DATE date ) as
     v_istar_valid_date          date;
     v_iend_valid_date           date;
     v_nabib_mm                  number;
begin

                             -- 가입설계번호,                              담보코드,
                             -- 대상기간시작일자,                          대상기간종료일자
                             -- 기본보험료,                                적용보험료


      insert into tbib0014( ent_dgn_no,                                dmbo_cd,
                            calc_fymd,                                 calc_eymd,
                            basic_prem,                                appy_prem )
                    values( p_pln_no,                                  p_dmbo_cd,
                            p_istar_cont_date,                         p_iend_cont_date,
                            p_DMBO_BASIC_PREM_01,                      p_dmbo_appy_prem_01 );

      update tbib0013
         set basic_prem = p_dmbo_basic_prem_01,
             dmbo_start_date = p_istar_cont_date,
             dmbo_end_date   = p_iend_cont_date,
             appy_prem       = p_dmbo_appy_prem_01
       where ent_dgn_no = p_pln_no
         and basic_scont_gb in ( '1', '2' )
         and dmbo_cd    = p_dmbo_cd;

exception when others then
/*
      dbms_output.put_line('chk p_pln_no: '||p_pln_no);
      dbms_output.put_line('chk p_dmbo_cd: '||p_dmbo_cd);
      dbms_output.put_line('chk p_dmbo_basic_prem_01: '||p_dmbo_basic_prem_01);
      dbms_output.put_line('chk p_dmbo_appy_prem_01: '||p_dmbo_appy_prem_01);
      dbms_output.put_line('chk p_istar_cont_date: '||p_istar_cont_date);
      dbms_output.put_line('chk p_iend_cont_date: '||p_iend_cont_date);
*/
                   dbms_output.put_line('pr_dambo_period_prem Main Error: '||sqlerrm);
                   raise_application_error(-20001, 'pr_dambo_period_prem Error: '||sqlerrm);
end;
CREATE -- added during DDL generation.
procedure PR_DELETE_CONTEXPCAR(i_cust_no               in  varchar2,
                                                 i_car_seq               in  number,
                                                 o_result                out varchar2) as
/**********************************************************************************/
/* 생성일자 : 2013.07.05                                                          */
/* 생성자   : 김영인                                                              */
/* 업무내용 : 업체 보험 만기등록 차량 삭제                                        */
/* Parameter: [in] i_cust_no        : 고객번호                                    */
/*            [in] i_car_seq        : 차량순번                                    */
/*            [out]o_result         : 결과                                        */
/**********************************************************************************/

begin
    o_result := 'OK';

    DELETE TBAA0102
     WHERE CUST_NO = i_cust_no
       AND CAR_SEQ = i_car_seq;

    DELETE TBAA0101
     WHERE CUST_NO = i_cust_no
       AND CAR_SEQ = i_car_seq;

    exception when others then
        o_result := 'ERROR';

end;
CREATE -- added during DDL generation.
procedure pr_endor_c_data_del( I_POL_NO in varchar2, I_ENDOR_NO in varchar2, I_WORK_DATE in varchar2 ) as
    /*****************************************************************/
    /* 생성일자 : 2013.02.27                                         */
    /* 생성자   : 최재혁                                             */
    /* 업무내용 : 배서관련 테이블을 삭제한다.                        */
    /*****************************************************************/
    V_ENDOR_STATUS                      TBID0001.ENDOR_STATUS%TYPE;             --배서상태

begin

    SELECT ENDOR_STATUS
      INTO V_ENDOR_STATUS
      FROM TBID0001T
     WHERE POL_NO    = I_POL_NO
       AND ENDOR_NO  = I_ENDOR_NO
       AND WORK_DATE = TO_DATE(I_WORK_DATE, 'YYYYMMDD');

    IF V_ENDOR_STATUS <> '3' THEN                       --배서상태가 수납확정이 아니면 삭제
       -- 배서-계약정보 삭제
        begin
            DELETE TBID0001T
             WHERE POL_NO     = I_POL_NO
               AND ENDOR_NO   = I_ENDOR_NO
               AND WORK_DATE = TO_DATE(I_WORK_DATE, 'YYYYMMDD');
        exception when others then
            dbms_output.put_line('배서(소급)-계약정보(TBID0001T) DELETE ERROR : '||sqlerrm);
        end;

        -- 배서-자동차추가정보 삭제
        begin
            DELETE TBID0011T
             WHERE POL_NO     = I_POL_NO
               AND ENDOR_NO   = I_ENDOR_NO
               AND WORK_DATE  = TO_DATE(I_WORK_DATE, 'YYYYMMDD');
        exception when others then
            dbms_output.put_line('배서(소급)-자동차추가정보(TBID0011T) DELETE ERROR : '||sqlerrm);
        end;

        -- 배서-특약특별요율 삭제
        begin
            DELETE TBID0012T
             WHERE POL_NO     = I_POL_NO
               AND ENDOR_NO   = I_ENDOR_NO
               AND WORK_DATE  = TO_DATE(I_WORK_DATE, 'YYYYMMDD');
        exception when others then
            dbms_output.put_line('배서(소급)-특약특별요율(TBID0012T) DELETE ERROR : '||sqlerrm);
        end;

        -- 배서-담보별보험료 삭제
        begin
            DELETE TBID0013T
             WHERE POL_NO     = I_POL_NO
               AND ENDOR_NO   = I_ENDOR_NO
               AND WORK_DATE  = TO_DATE(I_WORK_DATE, 'YYYYMMDD');
        exception when others then
            dbms_output.put_line('배서(소급)-담보별보험료(TBID0013T) DELETE ERROR : '||sqlerrm);
        end;

        -- 배서 - 담보기간별보험료 삭제
        begin
            DELETE TBID0014T
             WHERE POL_NO     = I_POL_NO
               AND ENDOR_NO   = I_ENDOR_NO
               AND WORK_DATE  = TO_DATE(I_WORK_DATE, 'YYYYMMDD');
        exception when others then
            dbms_output.put_line('배서(소급)-담보기간별보험료(TBID0014T) DELETE ERROR : '||sqlerrm);
        end;

        -- 배서-담보별분납계획 삭제
        begin
            DELETE TBID0015T
             WHERE POL_NO     = I_POL_NO
               AND ENDOR_NO   = I_ENDOR_NO
               AND WORK_DATE  = TO_DATE(I_WORK_DATE, 'YYYYMMDD');
        exception when others then
            dbms_output.put_line('배서(소급)-담보별분납계획(TBID0015T) DELETE ERROR : '||sqlerrm);
        end;

        -- 배서-분납계획 삭제
        begin
            DELETE TBID0016T
             WHERE POL_NO     = I_POL_NO
               AND ENDOR_NO   = I_ENDOR_NO
               AND WORK_DATE  = TO_DATE(I_WORK_DATE, 'YYYYMMDD');
        exception when others then
            dbms_output.put_line('배서(소급)-분납계획(TBID0016T) DELETE ERROR : '||sqlerrm);
        end;

        -- 배서-계약질권정보 삭제
        begin
            DELETE TBID0103T
             WHERE POL_NO     = I_POL_NO
               AND ENDOR_NO   = I_ENDOR_NO
               AND WORK_DATE  = TO_DATE(I_WORK_DATE, 'YYYYMMDD');
        exception when others then
            dbms_output.put_line('배서(소급)-계약질권정보(TBID0103T) DELETE ERROR : '||sqlerrm);
        end;

        -- 배서-계약운전자정보 삭제
        begin
            DELETE TBID0104T
             WHERE POL_NO     = I_POL_NO
               AND ENDOR_NO   = I_ENDOR_NO
               AND WORK_DATE  = TO_DATE(I_WORK_DATE, 'YYYYMMDD');
        exception when others then
            dbms_output.put_line('배서(소급)-계약운전자정보(TBID0104T) DELETE ERROR : '||sqlerrm);
        end;

        -- 계약-변경이력 삭제
        begin
            DELETE TBIC0202T
             WHERE POL_NO     = I_POL_NO
               AND ENDOR_NO   = I_ENDOR_NO
               AND WORK_DATE  = TO_DATE(I_WORK_DATE, 'YYYYMMDD');
        exception when others then
            dbms_output.put_line('계약(소급)-변경이력(TBIC0202T) DELETE ERROR : '||sqlerrm);
        end;

        -- 계약-변경이력명세 삭제
        begin
            DELETE TBIC0203T
             WHERE POL_NO     = I_POL_NO
               AND ENDOR_NO   = I_ENDOR_NO
               AND WORK_DATE  = TO_DATE(I_WORK_DATE, 'YYYYMMDD');
        exception when others then
            dbms_output.put_line('계약(소급)-변경이력명세(TBIC0203T) DELETE ERROR : '||sqlerrm);
        end;

    END IF;
exception when others then
    raise_application_error(-20010, 'pr_endor_c_data_del Main Error: '||sqlerrm);
    rollback;
end;
CREATE -- added during DDL generation.
procedure          pr_endor_data_del( I_POL_NO in varchar2, I_ENDOR_NO in varchar2 ) as
    /*****************************************************************/
    /* 생성일자 : 2013.02.27                                         */
    /* 생성자   : 최재혁                                             */
    /* 업무내용 : 배서관련 테이블을 삭제한다.                        */
    /*****************************************************************/
    V_ENDOR_STATUS                      TBID0001.ENDOR_STATUS%TYPE;             --배서상태

begin

    SELECT ENDOR_STATUS
      INTO V_ENDOR_STATUS
      FROM TBID0001
     WHERE POL_NO    = I_POL_NO
       AND ENDOR_NO  = I_ENDOR_NO;

    IF V_ENDOR_STATUS <> '3' THEN                       --배서상태가 수납확정이 아니면 삭제
       -- 배서-계약정보 삭제
        begin
            DELETE TBID0001
             WHERE POL_NO     = I_POL_NO
               AND ENDOR_NO   = I_ENDOR_NO;
        exception when others then
            dbms_output.put_line('배서-계약정보(TBID0001) DELETE ERROR : '||sqlerrm);
        end;

        -- 배서-자동차추가정보 삭제
        begin
            DELETE TBID0011
             WHERE POL_NO     = I_POL_NO
               AND ENDOR_NO   = I_ENDOR_NO;
        exception when others then
            dbms_output.put_line('배서-자동차추가정보(TBID0011) DELETE ERROR : '||sqlerrm);
        end;

        -- 배서-특약특별요율 삭제
        begin
            DELETE TBID0012
             WHERE POL_NO     = I_POL_NO
               AND ENDOR_NO   = I_ENDOR_NO;
        exception when others then
            dbms_output.put_line('배서-특약특별요율(TBID0012) DELETE ERROR : '||sqlerrm);
        end;

        -- 배서-담보별보험료 삭제
        begin
            DELETE TBID0013
             WHERE POL_NO     = I_POL_NO
               AND ENDOR_NO   = I_ENDOR_NO;
        exception when others then
            dbms_output.put_line('배서-담보별보험료(TBID0013) DELETE ERROR : '||sqlerrm);
        end;

        -- 배서 - 담보기간별보험료 삭제
        begin
            DELETE TBID0014
             WHERE POL_NO     = I_POL_NO
               AND ENDOR_NO   = I_ENDOR_NO;
        exception when others then
            dbms_output.put_line('배서-담보기간별보험료(TBID0014) DELETE ERROR : '||sqlerrm);
        end;

        -- 배서-담보별분납계획 삭제
        begin
            DELETE TBID0015
             WHERE POL_NO     = I_POL_NO
               AND ENDOR_NO   = I_ENDOR_NO;
        exception when others then
            dbms_output.put_line('배서-담보별분납계획(TBID0015) DELETE ERROR : '||sqlerrm);
        end;

        -- 배서-분납계획 삭제
        begin
            DELETE TBID0016
             WHERE POL_NO     = I_POL_NO
               AND ENDOR_NO   = I_ENDOR_NO;
        exception when others then
            dbms_output.put_line('배서-분납계획(TBID0016) DELETE ERROR : '||sqlerrm);
        end;

        -- 배서-계약질권정보 삭제
        begin
            DELETE TBID0103
             WHERE POL_NO     = I_POL_NO
               AND ENDOR_NO   = I_ENDOR_NO;
        exception when others then
            dbms_output.put_line('배서-계약질권정보(TBID0103) DELETE ERROR : '||sqlerrm);
        end;

        -- 배서-계약운전자정보 삭제
        begin
            DELETE TBID0104
             WHERE POL_NO     = I_POL_NO
               AND ENDOR_NO   = I_ENDOR_NO;
        exception when others then
            dbms_output.put_line('배서-계약운전자정보(TBID0104) DELETE ERROR : '||sqlerrm);
        end;

        -- 계약-변경이력 삭제
        begin
            DELETE TBIC0202
             WHERE POL_NO     = I_POL_NO
               AND ENDOR_NO   = I_ENDOR_NO;
        exception when others then
            dbms_output.put_line('계약-변경이력(TBIC0202) DELETE ERROR : '||sqlerrm);
        end;

        -- 계약-변경이력명세 삭제
        begin
            DELETE TBIC0203
             WHERE POL_NO     = I_POL_NO
               AND ENDOR_NO   = I_ENDOR_NO;
        exception when others then
            dbms_output.put_line('계약-변경이력명세(TBIC0203) DELETE ERROR : '||sqlerrm);
        end;

        -- 배서-승인이력 삭제
        begin
            DELETE TBID0201
             WHERE POL_NO     = I_POL_NO
               AND ENDOR_NO   = I_ENDOR_NO;
        exception when others then
            dbms_output.put_line('배서-승인이력명세(TBID0201) DELETE ERROR : '||sqlerrm);
        end;

    END IF;
exception when others then
    raise_application_error(-20010, 'pr_endor_data_del Main Error: '||sqlerrm);
    rollback;
end;
CREATE -- added during DDL generation.
procedure PR_INSERT_ACCOUNTNO(i_cust_no               in  varchar2,
                                                i_bco_co_gb             in  varchar2,
                                                i_bco_co_no             in  varchar2,
                                                i_account_no            in  varchar2,
                                                i_account_code          in  varchar2,
                                                i_account_gubun         in  varchar2,
                                                i_owner_nm              in  varchar2,
                                                i_user_id               in  varchar2) as
/**********************************************************************************/
/* 생성일자 : 2013.04.04                                                          */
/* 생성자   : 김영인                                                              */
/* 업무내용 : 고객 결제계좌 등록                                                  */
/* Parameter: [in] i_cust_no        : 고객번호                                    */
/*            [in] i_bco_co_gb      : 결제계좌 소유자 구분(1:개인,2:사업자)       */
/*            [in] i_bco_co_no      : 결제 계좌 소유자 번호                       */
/*            [in] i_account_no     : 결제계좌(카드/가상계좌번호)                 */
/*            [in] i_account_code   : 결제계과 금융기관                           */
/*            [in] i_account_gubun  : 결제계좌구분(1:카드,2:가상계좌)             */
/*            [in] i_owner_nm       : 결제계좌 소유자 명                          */
/*            [in] i_user_id        : 처리자                                      */
/**********************************************************************************/
v_account_yn           number(1);             -- 결제계좌 존재여부

begin
    /*********************************/
    /* 결제계좌 존재여부 가지고 오기 */
    /*********************************/
    if i_bco_co_gb = '1' then /* 개인일경우*/
            SELECT COUNT(*)
            into v_account_yn
            FROM TBAA0003
            WHERE CUST_NO = i_cust_no
            AND ACCOUNT_GUBUN = i_account_gubun
            AND CO_NO = i_bco_co_no
            AND ACCOUNT_USE_YN = 'Y';
    else /* 사업자일경우*/
            SELECT COUNT(*)
            into v_account_yn
            FROM TBAA0003
            WHERE CUST_NO = i_cust_no
            AND ACCOUNT_GUBUN = i_account_gubun
            AND BCO_NO = i_bco_co_no
            AND ACCOUNT_USE_YN = 'Y';
    end if;

    if v_account_yn = 0 then
        /* 결제계좌가 존재하지 않다면 신규로 등록한다.*/
        if i_bco_co_gb = '1' then                   /* 개인일경우*/
            INSERT INTO TBAA0003
                 ( CUST_NO
                 , ACCOUNT_SEQ
                 , CO_NO
                 , OWNER_NM
                 , ACCOUNT_GUBUN
                 , ACCOUNT_NO
                 , ACCOUNT_CODE
                 , ACCOUNT_USE_YN
                 , USER_ID
                 , IT_PROCESSING
                 )
            VALUES
                 (
                   i_cust_no
                 , (SELECT NVL(MAX(ACCOUNT_SEQ),0)+1
                    FROM TBAA0003
                    WHERE CUST_NO = i_cust_no
                   )
                 , i_bco_co_no
                 , i_owner_nm
                 , i_account_gubun
                 , i_account_no
                 , i_account_code
                 , 'Y'
                 , i_user_id
                 , TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
                 ) ;
        else                                        /* 사업자일경우*/
            INSERT INTO TBAA0003
                 ( CUST_NO
                 , ACCOUNT_SEQ
                 , BCO_NO
                 , OWNER_NM
                 , ACCOUNT_GUBUN
                 , ACCOUNT_NO
                 , ACCOUNT_CODE
                 , ACCOUNT_USE_YN
                 , USER_ID
                 , IT_PROCESSING
                 )
            VALUES
                 (
                   i_cust_no
                 , (SELECT NVL(MAX(ACCOUNT_SEQ),0)+1
                    FROM TBAA0003
                    WHERE CUST_NO = i_cust_no
                   )
                 , i_bco_co_no
                 , i_owner_nm
                 , i_account_gubun
                 , i_account_no
                 , i_account_code
                 , 'Y'
                 , i_user_id
                 , TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
                 ) ;
        end if;
    else
        /* 결제계좌가 존재하면 수정한다.*/
        /* 사업자(주민)번호의 등록한지 오래된 카드번호를 최근에 결제한 카드로 변경처리한다.*/
        if i_bco_co_gb = '1' then                   /* 개인일경우*/
            UPDATE TBAA0003 A
            SET ACCOUNT_NO = i_account_no
              , ACCOUNT_CODE = i_account_code
              , USER_ID = i_user_id
              , IT_PROCESSING = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
            WHERE CUST_NO = i_cust_no
            AND CO_NO = i_bco_co_no
            AND ACCOUNT_GUBUN = i_account_gubun
            AND ACCOUNT_USE_YN = 'Y'
            AND IT_PROCESSING = (SELECT MIN(IT_PROCESSING)
                                 FROM TBAA0003
                                 WHERE CUST_NO = i_cust_no
                                 AND CO_NO = i_bco_co_no
                                 AND ACCOUNT_GUBUN = i_account_gubun
                                 AND ACCOUNT_USE_YN = 'Y'
                                );
        else                                        /* 사업자일경우*/
            UPDATE TBAA0003 A
            SET ACCOUNT_NO = i_account_no
              , ACCOUNT_CODE = i_account_code
              , USER_ID = i_user_id
              , IT_PROCESSING = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
            WHERE CUST_NO = i_cust_no
            AND BCO_NO = i_bco_co_no
            AND ACCOUNT_GUBUN = i_account_gubun
            AND ACCOUNT_USE_YN = 'Y'
            AND IT_PROCESSING = (SELECT MIN(IT_PROCESSING)
                                 FROM TBAA0003
                                 WHERE CUST_NO = i_cust_no
                                 AND BCO_NO = i_bco_co_no
                                 AND ACCOUNT_GUBUN = i_account_gubun
                                 AND ACCOUNT_USE_YN = 'Y'
                                );
        end if;
    end if;


end;
CREATE -- added during DDL generation.
procedure PR_INSERT_BATCH_LOG (i_bat_id varchar2, i_sp_name varchar2, i_log_gubun varchar2, i_log_val varchar2) as
/**************************************************************************************/
/* 생성일자 : 2013.05.30                                                              */
/* 생성자   : 이용한                                                                  */
/* 업무내용 : 배치처리상세정보 저장                                                   */
/* Parameter: [in]i_bat_id    : 배치ID                                                */
/*            [in]i_sp_name   : 배치프로시저이름                                      */
/*            [in]i_log_gubun : 로그구분(설계번호, 증권번호 등등)                     */
/*            [in]i_log_val   : 상세내용                                              */
/**************************************************************************************/
s_seq_no                              number;    --순번

begin
       s_seq_no := 0;

       --다음순번검색
       SELECT MAX(SEQ_NO) + 1 into s_seq_no FROM TBZZ9003 WHERE BAT_ID = i_bat_id;

       --순번이 없을 경우 1로 초기화
       if s_seq_no is null then
          s_seq_no := 1;
       end if;

       INSERT
         INTO TBZZ9003
       SELECT i_bat_id
            , s_seq_no
            , TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
            , i_sp_name
            , i_log_gubun
            , i_log_val
         FROM dual;

        commit;
        exception when others
                  then dbms_output.put_line('PR_INSERT_BATCH_LOG Error: '||sqlerrm);
end;
CREATE -- added during DDL generation.
procedure          pr_insert_log (i_log_date       varchar2
                                          ,i_log_sp_name    varchar2
                                          ,i_log_no         varchar2
                                          ,i_log_gubun      varchar2
                                          ,i_line_no        varchar2
                                          ,i_log_val        varchar2
) as

begin
       insert
         into TBZZ9999
        select i_log_date       /** 로그 Insert 일자   ***/
             , i_log_sp_name    /** SP_NAME (SP 명)    ***/
             , i_log_no         /** LOG_NO(증권/청약번호등 번호 **/
             , i_log_gubun      /** LOG_GUBUN(작업구분)***/
             , i_line_no        /** LINE_NO(LINE번호)  ****/
             , i_log_val        /** LOG_VAL(로그내용)  ****/
          from dual;

        exception when others
                  then dbms_output.put_line('pr_insert_log Error: '||sqlerrm);
end;
CREATE -- added during DDL generation.
PROCEDURE PR_PAYMENT_MANAGEMENT(o_result   out   varchar2) as

/**************************************************************************************/
/* 생성일자 : 2013.05.07                                                              */
/* 생성자   : 은현민                                                                  */
/* 업무내용 : 분납관리현황을 만들기 위한 프로시져이다. (BATCH)                        */
/*            (동일 인물이 동일 게시물 조회시 조회수 제외 처리는 하지 않음)           */
/* Parameter: [out]o_result         : 결과결과 정상(OK), 비정상(해당메시지)           */
/**************************************************************************************/

 begin

    DELETE
      FROM TBZZ8001
     WHERE JOB_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'));


 INSERT INTO TBZZ8001 (
        JOB_DATE               --작업일
      , BNP_NO                 --분납회차
      , POL_NO                 --공제가입증명번호
      , D_30                   --분납일기준30일건수
      , D_30_CUST_NO           --분납일기준30일고객번호
      , D_30_TREATY_CD         --분납일기준30일처리자
      , D_20                   --분납일기준20일건수
      , D_20_CUST_NO           --분납일기준20일고객번호
      , D_20_TREATY_CD         --분납일기준20일처리자
      , D_10                   --분납일기준10일건수
      , D_10_CUST_NO           --분납일기준10일고객번호
      , D_10_TREATY_CD         --분납일기준10일처리자
      , D_5                    --분납일기준05일건수
      , D_5_CUST_NO            --분납일기준05일고객번호
      , D_5_TREATY_CD          --분납일기준05일처리자
      , D_3                    --분납일기준03일건수
      , D_3_CUST_NO            --분납일기준03일고객번호
      , D_3_TREATY_CD          --분납일기준03일처리자
      , D_1                    --분납일기준01일건수
      , D_1_CUST_NO            --분납일기준01일고객번호
      , D_1_TREATY_CD          --분납일기준01일처리자
      , D_0                    --분납일기준건수
      , D_0_CUST_NO            --분납일기준고객번호
      , D_0_TREATY_CD          --분납일기준처리자
      , RETIRE                 --실효건수
      , RETIRE_CUST_NO         --실효건수고객번호
      , RETIRE_TREATY_CD       --실효건수처리자
      , IT_PROCESSING          --전산처리일자
      )
 --분납관리의 기준일차별 건수 검색
 SELECT TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')) AS JOB_DATE
      , BNP_NO                               AS  BNP_NO
      , POL_NO                               AS  POL_NO
      , D_30                                 AS  D_30
      , D_30_CUST_NO
      , D_30_TREATY_CD
      , D_20                                 AS  D_20
      , D_20_CUST_NO
      , D_20_TREATY_CD
      , D_10                                 AS  D_10
      , D_10_CUST_NO
      , D_10_TREATY_CD
      , D_5                                  AS  D_5
      , D_5_CUST_NO
      , D_5_TREATY_CD
      , D_3                                  AS  D_3
      , D_3_CUST_NO
      , D_3_TREATY_CD
      , D_1                                  AS  D_1
      , D_1_CUST_NO
      , D_1_TREATY_CD
      , D_0                                  AS  D_0
      , D_0_CUST_NO
      , D_0_TREATY_CD
      , RETIRE                               AS  RETIRE
      , RETIRE_CUST_NO
      , RETIRE_TREATY_CD
      , TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
  FROM(
       -- 분납 회차별 도래 건수
       SELECT B.BNP_NO AS BNP_NO
            , A.POL_NO
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')) + 30 THEN 1 ELSE 0 END AS D_30
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')) + 30 THEN A.CUST_NO ELSE '' END AS D_30_CUST_NO
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')) + 30 THEN A.TREATY_CD ELSE '' END AS D_30_TREATY_CD
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')) + 20 THEN 1 ELSE 0 END AS D_20
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')) + 20 THEN A.CUST_NO ELSE '' END AS D_20_CUST_NO
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')) + 20 THEN A.TREATY_CD ELSE '' END AS D_20_TREATY_CD
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')) + 10 THEN 1 ELSE 0 END AS D_10
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')) + 10 THEN A.CUST_NO ELSE '' END AS D_10_CUST_NO
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')) + 10 THEN A.TREATY_CD ELSE '' END AS D_10_TREATY_CD
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')) + 5  THEN 1 ELSE 0 END AS D_5
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')) + 5  THEN A.CUST_NO ELSE '' END AS D_5_CUST_NO
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')) + 5  THEN A.TREATY_CD ELSE '' END AS D_5_TREATY_CD
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')) + 3  THEN 1 ELSE 0 END AS D_3
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')) + 3  THEN A.CUST_NO ELSE '' END AS D_3_CUST_NO
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')) + 3  THEN A.TREATY_CD ELSE '' END AS D_3_TREATY_CD
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')) + 1  THEN 1 ELSE 0 END AS D_1
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')) + 1  THEN A.CUST_NO ELSE '' END AS D_1_CUST_NO
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')) + 1  THEN A.TREATY_CD ELSE '' END AS D_1_TREATY_CD
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'))      THEN 1 ELSE 0 END AS D_0
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'))      THEN A.CUST_NO ELSE '' END AS D_0_CUST_NO
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'))      THEN A.TREATY_CD ELSE '' END AS D_0_TREATY_CD
            , 0 AS  RETIRE
            , '' AS RETIRE_CUST_NO
            , '' AS RETIRE_TREATY_CD
         FROM TBIC0001 A
            , TBIC0016 B
        WHERE A.POL_NO    = B.POL_NO
          AND A.CONT_STATE IN ('02','03','05')
          AND B.BNP_NO    > A.END_NAB_NO
          AND B.BNP_DATE <= SYSDATE +30
          AND B.BNP_DATE >= TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'))
          AND RCPT_NO IS NULL
       UNION ALL
       -- 유예건수
       SELECT 9    AS    BNP_NO
            , A.POL_NO
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')) - 30 THEN 1 ELSE 0 END AS D_30
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')) - 30 THEN A.CUST_NO ELSE '' END AS D_30_CUST_NO
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')) - 30 THEN A.TREATY_CD ELSE '' END AS D_30_TREATY_CD
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')) - 20 THEN 1 ELSE 0 END AS D_20
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')) - 20 THEN A.CUST_NO ELSE '' END AS D_20_CUST_NO
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')) - 20 THEN A.TREATY_CD ELSE '' END AS D_20_TREATY_CD
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')) - 10 THEN 1 ELSE 0 END AS D_10
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')) - 10 THEN A.CUST_NO ELSE '' END AS D_10_CUST_NO
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')) - 10 THEN A.TREATY_CD ELSE '' END AS D_10_TREATY_CD
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')) - 5  THEN 1 ELSE 0 END AS D_5
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')) - 5  THEN A.CUST_NO ELSE '' END AS D_5_CUST_NO
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')) - 5  THEN A.TREATY_CD ELSE '' END AS D_5_TREATY_CD
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')) - 3  THEN 1 ELSE 0 END AS D_3
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')) - 3  THEN A.CUST_NO ELSE '' END AS D_3_CUST_NO
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')) - 3  THEN A.TREATY_CD ELSE '' END AS D_3_TREATY_CD
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')) - 1  THEN 1 ELSE 0 END AS D_1
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')) - 1  THEN A.CUST_NO ELSE '' END AS D_1_CUST_NO
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')) - 1  THEN A.TREATY_CD ELSE '' END AS D_1_TREATY_CD
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'))      THEN 1 ELSE 0 END AS D_0
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'))      THEN A.CUST_NO ELSE '' END AS D_0_CUST_NO
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'))      THEN A.TREATY_CD ELSE '' END AS D_0_TREATY_CD
            , 0 AS  RETIRE
            , '' AS RETIRE_CUST_NO
            , '' AS RETIRE_TREATY_CD
         FROM TBIC0001 A
            , TBIC0016 B
        WHERE A.POL_NO    = B.POL_NO
          AND A.CONT_STATE IN ('02','03','05')
          AND B.BNP_NO    > A.END_NAB_NO
          AND B.BNP_DATE >= SYSDATE - 30
          AND B.BNP_DATE <= TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'))
          AND RCPT_NO IS NULL
       UNION ALL
       -- 실효건수
       SELECT B.BNP_NO
            , A.POL_NO
            , 0 AS D_30
            , '' AS D_30_CUST_NO
            , '' AS D_30_TREATY_CD
            , 0 AS D_20
            , '' AS D_20_CUST_NO
            , '' AS D_20_TREATY_CD
            , 0 AS D_10
            , '' AS D_10_CUST_NO
            , '' AS D_10_TREATY_CD
            , 0 AS D_5
            , '' AS D_5_CUST_NO
            , '' AS D_5_TREATY_CD
            , 0 AS D_3
            , '' AS D_3_CUST_NO
            , '' AS D_3_TREATY_CD
            , 0 AS D_1
            , '' AS D_1_CUST_NO
            , '' AS D_1_TREATY_CD
            , 0 AS D_0
            , '' AS D_0_CUST_NO
            , '' AS D_0_TREATY_CD
            , 1 AS RETIRE
            , A.CUST_NO AS RETIRE_CUST_NO
            , A.TREATY_CD AS RETIRE_TREATY_CD
         FROM TBIC0001 A
            , TBIC0016 B
        WHERE A.POL_NO          = B.POL_NO
          AND A.CONT_STATE      = '04'
          AND A.STATE_ADD_DATE >= TO_DATE(TO_CHAR(SYSDATE,'YYYYMM') || '01')
          AND A.STATE_ADD_DATE <= LAST_DAY(TO_CHAR(SYSDATE,'YYYYMMDD'))
          AND B.BNP_NO          = A.END_NAB_NO + 1
          AND RCPT_NO IS NULL
       )
  WHERE (D_30 > 0 OR D_20 > 0 OR D_10 > 0 OR D_5  > 0 OR D_3 > 0 OR D_1 > 0 OR D_0 > 0 OR RETIRE > 0);

    exception when others then
              DBMS_OUTPUT.PUT_LINE('PR_PAYMENT_MANAGEMENT ERROR: ' || sqlerrm);
              RAISE_APPLICATION_ERROR(-20010, 'PR_PAYMENT_MANAGEMENT ERROR: ' || sqlerrm);
        o_result := sqlerrm ;

 end;



CREATE -- added during DDL generation.
procedure          pr_rent_amt_log( p_pln_no_gb varchar2, p_pln_no varchar2, p_seq  varchar2, p_dmbo_cd varchar2, p_vari_nm varchar2, p_log_val varchar2, p_date varchar2) as

begin
       insert into tb_rent_amt_log
       values( p_pln_no_gb, p_pln_no, p_seq, p_dmbo_cd, p_vari_nm, p_log_val, p_date );

exception when others then
                     dbms_output.put_line('pr_rent_amt_log Error: '||sqlerrm);
end;
CREATE -- added during DDL generation.
procedure          PR_RENT_BUNAP_TOT_RATE(i_enter_no                varchar2
                                                  ,i_i_kind_cd               varchar2
                                                  ,i_na_mth                  varchar2
                                                  ,i_spcl_agre_gb            varchar2
                                                  ,i_bnp_cnt                 number
                                                  ,i_dmbo_appy_prem_01       number
                                                  ,i_istar_cont_date         date
                                                  ,i_seq_no                  number ) as
/****************************************************************************************/
/* StoredProcedure 명  : 분납계획 Delete[TBIB0016]   후 Insert                          */
/* Parameter           : [ In] i_enter_no           가입설계번호                        */
/*                       [ In] i_i_kind_cd          보험(공제)종목                      */
/*                       [ In] i_na_mth             납입방법 1:일시납                   */
/*                                                           2:비연속분납               */
/*                                                           3:연속분납                 */
/*                       [ In] i_bnp_cnt            0                                   */
/*                       [ In] i_bnp_cnt            분할방법(2~6회)                     */
/*                       [ In] i_dmbo_appy_prem_01  담보적용보험료                      */
/*                       [ In] i_istar_cont_date    적용시작일                          */
/*                       [ In] i_seq_no             0                                   */
/* Description  :                                                                       */
/****************************************************************************************/
BEGIN
     /**********************************************************************/
     /* 답보별 분납계획(TBIB0015) Select 하여 분납계획(TBIB0016)에 Insert **/
     /**********************************************************************/
     insert into TBIB0016(ENT_DGN_NO
                         ,BNP_NO
                         ,SEQ_NO
                         ,I_KIND_CD
                         ,BNP_RATION
                         ,BNP_DATE
                         ,BNP_PREM
                        )
                   select A.ENT_DGN_NO                        /*설계번호      */
                         ,A.BNP_NO                            /*분납회차      */
                         ,A.SEQ_NO                            /*회차별순번    */
                         ,i_i_kind_cd                         /*보험(공제)종목*/
                         ,(select DVDPAY_RATE
                             from TBIB0205
                            where I_KIND_CD  = i_i_kind_cd
                              and DVDPAY_GB  = i_bnp_cnt
                              and BUNAP_GB   = i_na_mth
                              and NABIB_CNT  = A.BNP_NO
                              and APLY_FYMD   <= i_istar_cont_date
                              and APLY_EYMD   >= i_istar_cont_date
                          )                  as DVDPAY_RATE  /*분납비율       */
                         ,A.ISTAR_VALID_DATE                 /*분납예정일자   */
                         ,sum(DMBO_PREM)     as DMBO_PREM    /*분납보험료     */
                     from TBIB0015 A
                    where A.ENT_DGN_NO = i_enter_no
                    group by A.ENT_DGN_NO, A.BNP_NO, A.SEQ_NO, A.ISTAR_VALID_DATE  ;

     exception when others then dbms_output.put_line('PR_RENT_BUNAP_TOT_RATE Main Error: '||sqlerrm);
                                raise_application_error(-20001, 'PR_RENT_BUNAP_TOT_RATE Error: '||sqlerrm);
END;
CREATE  OR REPLACE-- added during DDL generation.
procedure          KRMA_APP.pr_rent_can_amt( P_PLN_NO_GB in VARCHAR2, P_POL_NO in TBID0001.POL_NO%TYPE, P_ENDOR_NO in TBID0001.ENDOR_NO%TYPE, P_ERR_MSG out VARCHAR2 ) as
    /*****************************************************************/
    /* 생성일자 : 2013.04.08                                         */
    /* 생성자   : 최재혁                                             */
    /* 업무내용 : 배서취소                                           */
    /* Parameters: P_PLN_NO_GB = '2' (배서)                          */
    /*             P_POL_NO = 증권번호                               */
    /*             P_ENDOR_NO = 배서번호                             */
    /*****************************************************************/

    V_ERRTITLE                          VARCHAR2(50);                           --에러 TITLE
    V_ERRMESSAGE                        VARCHAR2(300);                          --에러 메세지
    e_err                               EXCEPTION;

    V_ENDOR_STATUS                      TBID0001.ENDOR_STATUS%TYPE;             --배서상태
    V_TREATY_HQ_CD                      TBID0001.TREATY_HQ_CD%TYPE;             --취급자본부코드
    V_TREATY_BRH_CD                     TBID0001.TREATY_BRH_CD%TYPE;            --취급자관리점코드
    V_TREATY_CD                         TBID0001.TREATY_CD%TYPE;                --취급자코드
    V_USER_ID                           TBID0001.USER_ID%TYPE;                  --USER_ID
    V_APPY_FROM                         TBID0001.APPY_FROM%TYPE;                --적용시작일
    V_BASIS_FROM                        TBID0001.BASIS_FROM%TYPE;               --기준시작일
    V_I_KIND_CD                         TBID0001.I_KIND_CD%TYPE;                --계약종목
    V_APPY_PREM_BEF                     TBIC0202.ENDOR_BEFORE_PREM%TYPE;
    V_DIFF_AMT                          TBIC0202.PREM_DIFF_AMT%TYPE;
    V_TOT_INSUR_AMT                     TBID0001.TOT_INSUR_AMT%TYPE;            --총가입금액
    V_APPY_SUM_PREM                     TBID0001.APPY_SUM_PREM%TYPE;            --적용합계보험료
    V_RIDER_INSUR_AMT                   TBID0001.RIDER_INSUR_AMT%TYPE;          --특약가입금액
    V_RIDER_PREM                        TBID0001.RIDER_PREM%TYPE;               --특약보험료
    V_SUM_PREM                          TBID0001.SUM_PREM%TYPE;                 --합계보험료
    V_END_NAB_NO                        TBID0001.END_NAB_NO%TYPE;               --최종납입회차
    V_ACCI_CHECK                        varchar2(1);                            --사고여부
    V_EMG_CHECK                         varchar2(1);                            --긴출여부

BEGIN

    V_ERRTITLE   := '배서취소(PR_RENT_CAN_AMT)';
    V_ERRMESSAGE := 'START';

    --구분값이 배서일 때만
    IF P_PLN_NO_GB = '2' THEN

        begin
            select decode(nvl(sum(decode(ACCI_CHECK, 'Y', 1, 0)), 0), 0, 'N', 'Y')
              into V_ACCI_CHECK
              from ( select HND_COVER,
                            case when sum(decode(STAT, '3', 1, 0)) > 0                                                                              then 'Y'
                                 when sum(decode(STAT, '3', 1, 0)) = 0 and sum(DC_AMT) > 0 and HND_COVER <> '21'                                    then 'Y'
                                 when sum(decode(STAT, '3', 1, 0)) = 0 and sum(DC_AMT) > 0 and sum(DC_AMT) <> sum(COM_DC_AMT) and HND_COVER = '21'  then 'Y'
                                 else 'N' end ACCI_CHECK
                       from ( select CA02.POL_NO
                                   , CF01.ACCIDENT_NO
                                   , CF01.HND_COVER
                                   , case when CF01.DECIDE_DATE is not null then '1'
                                          when CF01.DC_END_DATE is not null then '2'
                                     else '3' end STAT
                                   , SUM(CE01.DC_AMT) AS DC_AMT
                                   , SUM(CE01.COM_DC_AMT) AS COM_DC_AMT
                                from TBCA0002 CA02
                                   , TBCF0001 CF01
                                   , TBCE0001 CE01
                               where CA02.POL_NO      = P_POL_NO
                                 and CA02.ACCIDENT_NO = CF01.ACCIDENT_NO
                                 and CF01.ACCIDENT_NO = CE01.ACCIDENT_NO(+)
                                 and CF01.HND_COVER   = CE01.HND_COVER(+)
                                 and CF01.DMGE_NO     = CE01.DMGE_NO(+)
                                 and CE01.DECIDE_DATE(+) is not null
                               group by CA02.POL_NO, CF01.ACCIDENT_NO, CF01.HND_COVER, CF01.DECIDE_DATE, CF01.DC_END_DATE )
                      group by HND_COVER );
            exception when no_data_found then
                V_ACCI_CHECK := 'N';
        end;

        --V_ACCI_CHECK := 'Y';

        if  V_ACCI_CHECK = 'Y' then
            V_ERRMESSAGE := '사고가 있어서 취소할 수 없습니다.';
            RAISE e_err;
        end if;

        begin
            select decode(nvl(count(*), 0), 0, 'N', 'Y')
              into V_EMG_CHECK
              from TBCH0001
             where H_GBN='ME400'
               and POL_NO    = P_POL_NO
               and DELETE_YN = 'N'
               and LAST='Y'
               and ACT_SVC_CODE NOT IN ('51','53','54','55');
            exception when no_data_found then
                V_EMG_CHECK := 'N';
        end;

        --V_EMG_CHECK := 'Y';

        if  V_EMG_CHECK = 'Y' then
            V_ERRMESSAGE := '긴급출동 건수가 있어서 취소할 수 없습니다.';
            RAISE e_err;
        end if;

        BEGIN
            --공제일자 SELECT
            select TOT_INSUR_AMT,                   APPY_SUM_PREM,               RIDER_INSUR_AMT,        RIDER_PREM,          SUM_PREM
                 , END_NAB_NO
              into V_TOT_INSUR_AMT,                 V_APPY_SUM_PREM,             V_RIDER_INSUR_AMT,      V_RIDER_PREM,        V_SUM_PREM
                 , V_END_NAB_NO
              from TBID0001
             where POL_NO   = P_POL_NO
               and ENDOR_NO = P_ENDOR_NO - 1;

        EXCEPTION WHEN NO_DATA_FOUND THEN
            V_ERRMESSAGE := '배서-계약정보(TBID0001) 이전 데이터를 찾을 수 없습니다.';
            RAISE e_err;
        END;


        BEGIN
            --배서 상태 확인
            select ENDOR_STATUS,    TREATY_HQ_CD,       TREATY_BRH_CD,      TREATY_CD,      USER_ID
                 , APPY_FROM,       BASIS_FROM,         I_KIND_CD
              into V_ENDOR_STATUS,  V_TREATY_HQ_CD,     V_TREATY_BRH_CD,    V_TREATY_CD,    V_USER_ID
                 , V_APPY_FROM,     V_BASIS_FROM,       V_I_KIND_CD
              from TBID0001
             where POL_NO   = P_POL_NO
               and ENDOR_NO = P_ENDOR_NO;

        EXCEPTION WHEN NO_DATA_FOUND THEN
            V_ERRMESSAGE := '배서-계약정보(TBID0001) 데이터를 찾을 수 없습니다.';
            RAISE e_err;
        END;

        V_ERRMESSAGE := '배서취소 시작';

        --배서상태가 설계인 데이터만 취소
        IF V_ENDOR_STATUS = '1' THEN
            --TBID0013 테이블 데이터 삭제 - 화면에서 등록된 데이터 삭제하고 이전 배서 데이터로 밀어넣기 위해서
            V_ERRMESSAGE := '배서-담보별보험료(TBID0013) 데이터 삭제';
            BEGIN
                delete from TBID0013
                 where POL_NO   = P_POL_NO
                   and ENDOR_NO = P_ENDOR_NO;

            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '배서-담보별보험료(TBID0013) 데이터 삭제 오류';
                RAISE e_err;
            END;

            --TBID0013 테이블 데이터 생성 - 이전 배서 데이터 그대로 밀어넣는다.
            V_ERRMESSAGE := '배서-담보별보험료(TBID0013) 데이터 생성';
            --변경이력
            --2013.04.10 : 담보별 보험료도 모두 0으로 만들자. 강신규 부장님과 협의. APPY_PREM 을 0으로 세팅함.
     --2017.02.07 담보별 요율 , GRP_DMBO_RATE 컬럼추가
            BEGIN
                insert into TBID0013
                    ( POL_NO,           ENDOR_NO,           BASIC_SCONT_GB,         DMBO_CD,            APPY_FROM
                    , ACDNT_RESP_WANT,  MAN_RESP_WANT,      INSUR_AMT,              INSUR_AMT_GB,       DUCT_AMT_GB
                    , BASIC_PREM,       DMBO_START_DATE,    DMBO_END_DATE,          APPY_PREM,          BASIC_RANGE_R
                    , CANCEL_CALC_GB,   APPY_TO,            BASIS_FROM,             BASIS_TO,           IT_PROCESSING
                    , USER_ID,          BASIC_YEAR_PREM,    APPY_YEAR_PREM, GRP_DMBO_RATE )
                select POL_NO,           P_ENDOR_NO,         BASIC_SCONT_GB,         DMBO_CD,            APPY_FROM
                     , ACDNT_RESP_WANT,  MAN_RESP_WANT,      INSUR_AMT,              INSUR_AMT_GB,       DUCT_AMT_GB
                     , BASIC_PREM,       DMBO_START_DATE,    DMBO_END_DATE,          0,                  BASIC_RANGE_R
                     , CANCEL_CALC_GB,   APPY_TO,            BASIS_FROM,             BASIS_TO,           IT_PROCESSING
                     , V_USER_ID,        BASIC_YEAR_PREM,    APPY_YEAR_PREM, GRP_DMBO_RATE
                  from TBID0013
                 where POL_NO   = P_POL_NO
                   and ENDOR_NO = P_ENDOR_NO - 1;

            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '배서-담보별보험료(TBID0013) 데이터 생성시 오류';
                RAISE e_err;
            END;

            --TBID0014 테이블 데이터 생성 - 이전 배서 데이터 그대로 밀어넣는다.
            V_ERRMESSAGE := '배서-담보기간별보험료(TBID0014) 데이터 생성';
            --변경이력
            --2013.04.10 : 담보별 보험료도 모두 0으로 만들자. 강신규 부장님과 협의. APPY_PREM 을 0으로 세팅함.

            BEGIN
                insert into TBID0014
                    ( POL_NO,           ENDOR_NO,           DMBO_CD,            CALC_FYMD
                    , CALC_EYMD,        BASIC_PREM,         APPY_PREM,          APPY_FROM
                    , APPY_TO,          BASIS_FROM,         BASIS_TO,           IT_PROCESSING
                    , USER_ID,          BASIC_YEAR_PREM,    APPY_YEAR_PREM )
                select POL_NO,           P_ENDOR_NO,         DMBO_CD,            CALC_FYMD
                     , CALC_EYMD,        BASIC_PREM,         0,                  APPY_FROM
                     , APPY_TO,          BASIS_FROM,         BASIS_TO,           IT_PROCESSING
                     , V_USER_ID,        BASIC_YEAR_PREM,    APPY_YEAR_PREM
                  from TBID0014
                 where POL_NO   = P_POL_NO
                   and ENDOR_NO = P_ENDOR_NO - 1;

            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '배서-담보기간별보험료(TBID0014) 데이터 생성시 오류';
                RAISE e_err;
            END;

            --TBID0015 테이블 데이터 생성 - 이전 배서 데이터 그대로 밀어넣는다.
            V_ERRMESSAGE := '배서-담보별분납계획(TBID0015) 데이터 생성';

            BEGIN
                insert into TBID0015
                    ( POL_NO,           ENDOR_NO,           BNP_NO,         SEQ_NO
                    , DMBO_CD,          BASIC_PREM,         DMBO_PREM,      ISTAR_VALID_DATE
                    , IEND_VALID_DATE,  OLD_ENDOR_NO,       APPY_FROM,      APPY_TO
                    , BASIS_FROM,       BASIS_TO,           IT_PROCESSING,  USER_ID )
                select POL_NO,           P_ENDOR_NO,         BNP_NO,         SEQ_NO
                     , DMBO_CD,          BASIC_PREM,         DMBO_PREM,      ISTAR_VALID_DATE
                     , IEND_VALID_DATE,  OLD_ENDOR_NO,       APPY_FROM,      APPY_TO
                     , BASIS_FROM,       BASIS_TO,           IT_PROCESSING,  USER_ID
                  from TBID0015
                 where POL_NO   = P_POL_NO
                   and ENDOR_NO = P_ENDOR_NO - 1;

            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '배서-담보별분납계획(TBID0015) 데이터 생성 오류';
                RAISE e_err;
            END;

            --TBID0015 테이블 환불데이터 생성 - 분납계획에서 수납된 데이터만 확인해서 마지막 납입회차에  - 처리한다.
            V_ERRMESSAGE := '배서-담보별분납계획(TBID0015) 환불데이터 생성';

            BEGIN
                insert into TBID0015
                    ( POL_NO,               ENDOR_NO,           BNP_NO,              SEQ_NO
                    , DMBO_CD,              BASIC_PREM,         DMBO_PREM,           ISTAR_VALID_DATE
                    , IEND_VALID_DATE,      OLD_ENDOR_NO,       APPY_FROM,           APPY_TO
                    , BASIS_FROM,           BASIS_TO,           USER_ID )
                select X.POL_NO,            P_ENDOR_NO,         V_END_NAB_NO,        Y.NEW_SEQ_NO
                     , X.DMBO_CD,           X.BASIC_PREM * -1,  X.DMBO_PREM * -1,    Z.ISTAR_VALID_DATE
                     , Z.IEND_VALID_DATE,   Z.OLD_ENDOR_NO,     Z.APPY_FROM,         Z.APPY_TO
                     , Z.BASIS_FROM,        Z.BASIS_TO,         V_USER_ID
                  from (select A.POL_NO, A.DMBO_CD, SUM(A.BASIC_PREM) as BASIC_PREM, SUM(A.DMBO_PREM) as DMBO_PREM
                          from TBID0015 A, TBID0016 B
                         where A.POL_NO      = P_POL_NO
                           and A.ENDOR_NO    = P_ENDOR_NO - 1
                           and A.POL_NO      = B.POL_NO
                           and A.ENDOR_NO    = B.ENDOR_NO
                           and A.BNP_NO      = B.BNP_NO
                           and A.SEQ_NO      = B.SEQ_NO
                           and B.BNP_NO     <= V_END_NAB_NO
                           and B.PROC_STATUS = '5'
                         group by A.POL_NO, A.DMBO_CD) X
                     , (select NVL(MAX(A.SEQ_NO), 0) +1 AS NEW_SEQ_NO
                          from TBID0016 A
                         where A.POL_NO   = P_POL_NO
                           and A.ENDOR_NO = P_ENDOR_NO - 1) Y
                     , (select A.ISTAR_VALID_DATE, IEND_VALID_DATE, OLD_ENDOR_NO, APPY_FROM, APPY_TO, BASIS_FROM, BASIS_TO
                          from TBID0015 A
                         where A.POL_NO   = P_POL_NO
                           and A.ENDOR_NO = P_ENDOR_NO - 1
                           and A.BNP_NO   = V_END_NAB_NO
                           and ROWNUM   = 1) Z;
            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '배서-담보별분납계획(TBID0015) 환불데이터 생성 오류';
                RAISE e_err;
            END;

            --TBID0015 테이블 미수납 데이터 0으로 UPDATE
            V_ERRMESSAGE := '배서-담보별분납계획(TBID0015) 미수납데이터 갱신';

            BEGIN
                update TBID0015
                   set DMBO_PREM = 0
                 where (POL_NO, ENDOR_NO, BNP_NO, SEQ_NO ) in ( select POL_NO, ENDOR_NO + 1, BNP_NO, SEQ_NO
                                                                  from TBID0016
                                                                 where POL_NO   = P_POL_NO
                                                                   and ENDOR_NO = P_ENDOR_NO - 1
                                                                   and NVL(PROC_STATUS, '1') = '1' );

            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '배서-담보별분납계획(TBID0015) 미수납데이터 갱신 오류';
                RAISE e_err;
            END;

            --TBID0016 테이블 데이터 생성 - 이전 배서 데이터 그대로 밀어넣는다.
            V_ERRMESSAGE := '배서-분납계획(TBID0016) 데이터 생성';
            --변경이력
            --2013.04.10 : 분납계획 INSERT 시 미처리 데이터는 0으로 분납보험료 세팅한다.

            BEGIN
                insert into TBID0016
                    ( POL_NO,           ENDOR_NO,           BNP_NO,             SEQ_NO
                    , I_KIND_CD,        RCPT_CD,            NA_DATE,            ACCOUNT_MTH
                    , ACCOUNT_ID,       MANG_NO,            BNP_GUIDE_DATE,     BNP_RATION
                    , BNP_DATE,         BNP_PREM,           BNP_DEDUCT_AMT,     PROC_STATUS
                    , RCPT_GB,          RCPT_NO,            PRINT_CNT,          TREATY_HQ_CD
                    , TREATY_BRH_CD,    TREATY_CD,          APPY_FROM,          APPY_TO
                    , BASIS_FROM,       BASIS_TO,           IT_PROCESSING,      USER_ID )
                select POL_NO,           P_ENDOR_NO,         BNP_NO,             SEQ_NO
                     , I_KIND_CD,        RCPT_CD,            NA_DATE,            ACCOUNT_MTH
                     , ACCOUNT_ID,       MANG_NO,            BNP_GUIDE_DATE,     BNP_RATION
                     , BNP_DATE,         DECODE(NVL(PROC_STATUS, '1'), '1', 0, BNP_PREM),           BNP_DEDUCT_AMT,     PROC_STATUS
                     , RCPT_GB,          RCPT_NO,            PRINT_CNT,          TREATY_HQ_CD
                     , TREATY_BRH_CD,    TREATY_CD,          APPY_FROM,          APPY_TO
                     , BASIS_FROM,       BASIS_TO,           IT_PROCESSING,      USER_ID
                  from TBID0016
                 where POL_NO   = P_POL_NO
                   and ENDOR_NO = P_ENDOR_NO - 1;

            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '배서-분납계획(TBID0016) 데이터 생성 오류';
                RAISE e_err;
            END;

            --TBID0016 테이블 환불데이터 생성 - 담보별분납계획에서 환불처리할 데이터만 등록한다.
            V_ERRMESSAGE := '배서-분납계획(TBID0016) 환불데이터 생성';

            BEGIN
                insert into TBID0016
                     ( POL_NO,                 ENDOR_NO,           BNP_NO,                      SEQ_NO,
                       I_KIND_CD,              RCPT_CD,            BNP_DATE,                    BNP_PREM,
                       PROC_STATUS,            TREATY_HQ_CD,       TREATY_BRH_CD,               TREATY_CD,
                       APPY_FROM,              APPY_TO,            BASIS_FROM,                  BASIS_TO,
                       USER_ID )
                SELECT A.POL_NO,               P_ENDOR_NO,         A.BNP_NO,                    A.SEQ_NO,
                       V_I_KIND_CD,            '8',                to_date(V_APPY_FROM),        SUM(A.DMBO_PREM),
                       '1',                    V_TREATY_HQ_CD,     V_TREATY_BRH_CD,             V_TREATY_CD,
                       to_date(V_APPY_FROM),   B.APPY_TO,          to_date(V_BASIS_FROM),       B.BASIS_TO,
                       V_USER_ID
                  FROM ( SELECT A.POL_NO, A.ENDOR_NO, A.BNP_NO, A.SEQ_NO, A.DMBO_PREM, NVL(B.PROC_STATUS, 'X') AS PROC_STATUS, NVL(B.SEQ_NO, -1) AS SEQ_NO_CHK
                           FROM TBID0015 A, TBID0016 B
                          WHERE A.POL_NO   = P_POL_NO
                            AND A.ENDOR_NO = P_ENDOR_NO
                            AND A.POL_NO   = B.POL_NO(+)
                            AND A.ENDOR_NO = B.ENDOR_NO(+)
                            AND A.BNP_NO   = B.BNP_NO(+)
                            AND A.SEQ_NO   = B.SEQ_NO(+)) A
                      ,( SELECT POL_NO, ENDOR_NO, BNP_NO, MIN(APPY_TO) AS APPY_TO, MIN(BASIS_TO) AS BASIS_TO
                           FROM TBID0016
                          WHERE POL_NO   = P_POL_NO
                            AND ENDOR_NO = P_ENDOR_NO
                          GROUP BY POL_NO, ENDOR_NO, BNP_NO ) B
                 WHERE A.PROC_STATUS = 'X'
                   AND A.SEQ_NO_CHK  = -1
                   AND A.POL_NO      = B.POL_NO
                   AND A.ENDOR_NO    = B.ENDOR_NO
                   AND A.BNP_NO      = B.BNP_NO
                 GROUP BY A.POL_NO, A.ENDOR_NO, A.BNP_NO, A.SEQ_NO, B.APPY_TO, B.BASIS_TO;

            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '배서-분납계획(TBID0016) 환불데이터 생성 오류';
                RAISE e_err;
            END;

            --TBID0001 테이블 이전데이터값 그대로 넣기
            V_ERRMESSAGE := '배서-계약정보(TBID0001) 데이터 수정';

            BEGIN
                update TBID0001
                   set TOT_INSUR_AMT   = 0
                     , APPY_SUM_PREM   = 0
                     , RIDER_INSUR_AMT = 0
                     , RIDER_PREM      = 0
                     , SUM_PREM        = 0
                 where POL_NO          = P_POL_NO
                   and ENDOR_NO        = P_ENDOR_NO;

            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '배서-계약정보(TBID0001) 데이터 수정시 오류'||'('||sqlerrm||')';
                RAISE e_err;
            END;

            --TBIC0202 테이블 SUM데이터 UPDATE
            V_ERRMESSAGE := '계약-변경이력(TBIC0202) 합계데이터 생성';

            BEGIN
                SELECT SUM(DECODE(ENDOR_NO, P_ENDOR_NO-1, APPY_PREM, 0)) AS APPY_PREM_BEF
                     , 0 - SUM(DECODE(ENDOR_NO, P_ENDOR_NO-1, APPY_PREM, 0)) AS DIFF_AMT
                  INTO V_APPY_PREM_BEF, V_DIFF_AMT
                  FROM TBID0013
                 WHERE POL_NO = P_POL_NO
                   AND ENDOR_NO BETWEEN P_ENDOR_NO - 1 AND P_ENDOR_NO;

                UPDATE TBIC0202
                   SET ENDOR_BEFORE_PREM = NVL(V_APPY_PREM_BEF, 0)
                     , ENDOR_AFTER_PREM  = 0
                     , PREM_DIFF_AMT     = NVL(V_DIFF_AMT,0)
                     , GET_GB            = '8'
                 WHERE POL_NO   = P_POL_NO
                   AND ENDOR_NO = P_ENDOR_NO;
            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '계약-변경이력(TBIC0202) 합계데이터 생성 오류';
                RAISE e_err;
            END;

        END IF;

    END IF;

    P_ERR_MSG := '';

EXCEPTION
    WHEN e_err THEN
        ROLLBACK;
        P_ERR_MSG := V_ERRTITLE    || ' : ' ||    V_ERRMESSAGE;
    WHEN OTHERS THEN
        ROLLBACK;
        P_ERR_MSG := V_ERRTITLE || '    : '    || SUBSTR(SQLERRM, 1, 250);
END;
-- GENERATED BY QueryOne AT 2017-02-08 10:32:39
-- USING krma_app@10.100.10.54:8629(krmadb)

CREATE OR REPLACE-- added during DDL generation.
procedure KRMA_APP.pr_rent_c_can_amt( P_PLN_NO_GB in varchar2, P_POL_NO in TBID0001.POL_NO%TYPE, P_ENDOR_NO in TBID0001.ENDOR_NO%TYPE, P_WORK_DATE in varchar2, P_ERR_MSG out varchar2 ) as
    /*****************************************************************/
    /* 생성일자 : 2013.06.27                                         */
    /* 생성자   : 최재혁                                             */
    /* 업무내용 : 배서취소(소급)                                     */
    /* Parameters: P_PLN_NO_GB = '2' (배서)                          */
    /*             P_POL_NO = 증권번호                               */
    /*             P_ENDOR_NO = 배서번호                             */
    /*****************************************************************/

    V_ERRTITLE                          VARCHAR2(50);                           --에러 TITLE
    V_ERRMESSAGE                        VARCHAR2(300);                          --에러 메세지
    e_err                               EXCEPTION;

    V_ENDOR_STATUS                      TBID0001.ENDOR_STATUS%TYPE;             --배서상태
    V_TREATY_HQ_CD                      TBID0001.TREATY_HQ_CD%TYPE;             --취급자본부코드
    V_TREATY_BRH_CD                     TBID0001.TREATY_BRH_CD%TYPE;            --취급자관리점코드
    V_TREATY_CD                         TBID0001.TREATY_CD%TYPE;                --취급자코드
    V_USER_ID                           TBID0001.USER_ID%TYPE;                  --USER_ID
    V_APPY_FROM                         TBID0001.APPY_FROM%TYPE;                --적용시작일
    V_BASIS_FROM                        TBID0001.BASIS_FROM%TYPE;               --기준시작일
    V_I_KIND_CD                         TBID0001.I_KIND_CD%TYPE;                --계약종목
    V_APPY_PREM_BEF                     TBIC0202.ENDOR_BEFORE_PREM%TYPE;
    V_DIFF_AMT                          TBIC0202.PREM_DIFF_AMT%TYPE;
    V_TOT_INSUR_AMT                     TBID0001.TOT_INSUR_AMT%TYPE;            --총가입금액
    V_APPY_SUM_PREM                     TBID0001.APPY_SUM_PREM%TYPE;            --적용합계보험료
    V_RIDER_INSUR_AMT                   TBID0001.RIDER_INSUR_AMT%TYPE;          --특약가입금액
    V_RIDER_PREM                        TBID0001.RIDER_PREM%TYPE;               --특약보험료
    V_SUM_PREM                          TBID0001.SUM_PREM%TYPE;                 --합계보험료
    V_END_NAB_NO                        TBID0001.END_NAB_NO%TYPE;               --최종납입회차
    V_ENDOR_NO_BEF_MAX                  TBID0001.ENDOR_NO%TYPE;                 --이전 배서번호
    V_ACCI_CHECK                        varchar2(1);                            --사고체크
    V_EMG_CHECK                         varchar2(1);                            --긴출체크

BEGIN

    V_ERRTITLE   := '배서취소(PR_RENT_C_CAN_AMT)';
    V_ERRMESSAGE := 'START';

    --구분값이 배서일 때만
    IF P_PLN_NO_GB = '2' THEN
        begin
            select decode(nvl(sum(decode(ACCI_CHECK, 'Y', 1, 0)), 0), 0, 'N', 'Y')
              into V_ACCI_CHECK
              from ( select HND_COVER,
                            case when sum(decode(STAT, '3', 1, 0)) > 0                                                                              then 'Y'
                                 when sum(decode(STAT, '3', 1, 0)) = 0 and sum(DC_AMT) > 0 and HND_COVER <> '21'                                    then 'Y'
                                 when sum(decode(STAT, '3', 1, 0)) = 0 and sum(DC_AMT) > 0 and sum(DC_AMT) <> sum(COM_DC_AMT) and HND_COVER = '21'  then 'Y'
                                 else 'N' end ACCI_CHECK
                       from ( select CA02.POL_NO
                                   , CF01.ACCIDENT_NO
                                   , CF01.HND_COVER
                                   , case when CF01.DECIDE_DATE is not null then '1'
                                          when CF01.DC_END_DATE is not null then '2'
                                     else '3' end STAT
                                   , SUM(CE01.DC_AMT) AS DC_AMT
                                   , SUM(CE01.COM_DC_AMT) AS COM_DC_AMT
                                from TBCA0002 CA02
                                   , TBCF0001 CF01
                                   , TBCE0001 CE01
                               where CA02.POL_NO      = P_POL_NO
                                 and CA02.ACCIDENT_NO = CF01.ACCIDENT_NO
                                 and CF01.ACCIDENT_NO = CE01.ACCIDENT_NO(+)
                                 and CF01.HND_COVER   = CE01.HND_COVER(+)
                                 and CF01.DMGE_NO     = CE01.DMGE_NO(+)
                                 and CE01.DECIDE_DATE(+) is not null
                               group by CA02.POL_NO, CF01.ACCIDENT_NO, CF01.HND_COVER, CF01.DECIDE_DATE, CF01.DC_END_DATE )
                      group by HND_COVER );
            exception when no_data_found then
                V_ACCI_CHECK := 'N';
        end;

        --V_ACCI_CHECK := 'Y';

        if  V_ACCI_CHECK = 'Y' then
            V_ERRMESSAGE := '사고가 있어서 취소할 수 없습니다.';
            RAISE e_err;
        end if;

        begin
            select decode(nvl(count(*), 0), 0, 'N', 'Y')
              into V_EMG_CHECK
              from TBCH0001
             where H_GBN='ME400'
               and POL_NO    = P_POL_NO
               and DELETE_YN = 'N'
               and LAST='Y'
               and ACT_SVC_CODE NOT IN ('51','53','54','55');
            exception when no_data_found then
                V_EMG_CHECK := 'N';
        end;

        --V_EMG_CHECK := 'Y';

        if  V_EMG_CHECK = 'Y' then
            V_ERRMESSAGE := '긴급출동 건수가 있어서 취소할 수 없습니다.';
            RAISE e_err;
        end if;

        select  nvl(max(ENDOR_NO),0)
          into  V_ENDOR_NO_BEF_MAX
          from  TBID0001T
         where  POL_NO         = P_POL_NO
           and  ENDOR_NO       < P_ENDOR_NO
           and  WORK_DATE      = to_date(P_WORK_DATE, 'YYYYMMDD')
           and  ENDOR_STATUS   = '3';

        BEGIN
            --공제일자 SELECT
            select TOT_INSUR_AMT,                   APPY_SUM_PREM,               RIDER_INSUR_AMT,        RIDER_PREM,          SUM_PREM
                 , END_NAB_NO
              into V_TOT_INSUR_AMT,                 V_APPY_SUM_PREM,             V_RIDER_INSUR_AMT,      V_RIDER_PREM,        V_SUM_PREM
                 , V_END_NAB_NO
              from TBID0001T
             where POL_NO    = P_POL_NO
               and ENDOR_NO  = V_ENDOR_NO_BEF_MAX
               and WORK_DATE = to_date(P_WORK_DATE, 'YYYYMMDD');

        EXCEPTION WHEN NO_DATA_FOUND THEN
            V_ERRMESSAGE := '배서-계약정보(TBID0001T) 이전 데이터를 찾을 수 없습니다.';
            RAISE e_err;
        END;


        BEGIN
            --배서 상태 확인
            select ENDOR_STATUS,    TREATY_HQ_CD,       TREATY_BRH_CD,      TREATY_CD,      USER_ID
                 , APPY_FROM,       BASIS_FROM,         I_KIND_CD
              into V_ENDOR_STATUS,  V_TREATY_HQ_CD,     V_TREATY_BRH_CD,    V_TREATY_CD,    V_USER_ID
                 , V_APPY_FROM,     V_BASIS_FROM,       V_I_KIND_CD
              from TBID0001T
             where POL_NO    = P_POL_NO
               and ENDOR_NO  = P_ENDOR_NO
               and WORK_DATE = to_date(P_WORK_DATE, 'YYYYMMDD');

        EXCEPTION WHEN NO_DATA_FOUND THEN
            V_ERRMESSAGE := '배서-계약정보(TBID0001T) 데이터를 찾을 수 없습니다.';
            RAISE e_err;
        END;

        V_ERRMESSAGE := '배서취소 시작';

        --배서상태가 설계인 데이터만 취소
        IF V_ENDOR_STATUS = '1' THEN
            --TBID0013T 테이블 데이터 삭제 - 화면에서 등록된 데이터 삭제하고 이전 배서 데이터로 밀어넣기 위해서
            V_ERRMESSAGE := '배서-담보별보험료(TBID0013T) 데이터 삭제';
            BEGIN
                delete from TBID0013T
                 where POL_NO    = P_POL_NO
                   and ENDOR_NO  = P_ENDOR_NO
                   and WORK_DATE = to_date(P_WORK_DATE, 'YYYYMMDD');

            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '배서-담보별보험료(TBID0013T) 데이터 삭제 오류';
                RAISE e_err;
            END;

            --TBID0013 테이블 데이터 생성 - 이전 배서 데이터 그대로 밀어넣는다.
            V_ERRMESSAGE := '배서-담보별보험료(TBID0013) 데이터 생성';
            --변경이력
            --2013.04.10 : 담보별 보험료도 모두 0으로 만들자. 강신규 부장님과 협의. APPY_PREM 을 0으로 세팅함.
     --2017.02.08 GRP_DMBO_RATE  담보별 단체특성율 컬럼 추가
            BEGIN
                insert into TBID0013T
                    ( POL_NO,           ENDOR_NO,           BASIC_SCONT_GB,         DMBO_CD,            APPY_FROM
                    , ACDNT_RESP_WANT,  MAN_RESP_WANT,      INSUR_AMT,              INSUR_AMT_GB,       DUCT_AMT_GB
                    , BASIC_PREM,       DMBO_START_DATE,    DMBO_END_DATE,          APPY_PREM,          BASIC_RANGE_R
                    , CANCEL_CALC_GB,   APPY_TO,            BASIS_FROM,             BASIS_TO,           IT_PROCESSING
                    , USER_ID,          BASIC_YEAR_PREM,    APPY_YEAR_PREM,         WORK_DATE, GRP_DMBO_RATE )
                select POL_NO,           P_ENDOR_NO,         BASIC_SCONT_GB,         DMBO_CD,            APPY_FROM
                     , ACDNT_RESP_WANT,  MAN_RESP_WANT,      INSUR_AMT,              INSUR_AMT_GB,       DUCT_AMT_GB
                     , BASIC_PREM,       DMBO_START_DATE,    DMBO_END_DATE,          0,                  BASIC_RANGE_R
                     , CANCEL_CALC_GB,   APPY_TO,            BASIS_FROM,             BASIS_TO,           IT_PROCESSING
                     , V_USER_ID,        BASIC_YEAR_PREM,    APPY_YEAR_PREM,         to_date(P_WORK_DATE, 'YYYYMMDD') , GRP_DMBO_RATE
                  from TBID0013T
                 where POL_NO    = P_POL_NO
                   and ENDOR_NO  = V_ENDOR_NO_BEF_MAX
                   and WORK_DATE = to_date(P_WORK_DATE, 'YYYYMMDD');

            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '배서-담보별보험료(TBID0013T) 데이터 생성시 오류';
                RAISE e_err;
            END;

            --TBID0014 테이블 데이터 생성 - 이전 배서 데이터 그대로 밀어넣는다.
            V_ERRMESSAGE := '배서-담보기간별보험료(TBID0014T) 데이터 생성';
            --변경이력
            --2013.04.10 : 담보별 보험료도 모두 0으로 만들자. 강신규 부장님과 협의. APPY_PREM 을 0으로 세팅함.

            BEGIN
                insert into TBID0014T
                    ( POL_NO,           ENDOR_NO,           DMBO_CD,            CALC_FYMD
                    , CALC_EYMD,        BASIC_PREM,         APPY_PREM,          APPY_FROM
                    , APPY_TO,          BASIS_FROM,         BASIS_TO,           IT_PROCESSING
                    , USER_ID,          BASIC_YEAR_PREM,    APPY_YEAR_PREM,     WORK_DATE )
                select POL_NO,           P_ENDOR_NO,         DMBO_CD,            CALC_FYMD
                     , CALC_EYMD,        BASIC_PREM,         0,                  APPY_FROM
                     , APPY_TO,          BASIS_FROM,         BASIS_TO,           IT_PROCESSING
                     , V_USER_ID,        BASIC_YEAR_PREM,    APPY_YEAR_PREM,     to_date(P_WORK_DATE, 'YYYYMMDD')
                  from TBID0014T
                 where POL_NO    = P_POL_NO
                   and ENDOR_NO  = V_ENDOR_NO_BEF_MAX
                   and WORK_DATE = to_date(P_WORK_DATE, 'YYYYMMDD');

            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '배서-담보기간별보험료(TBID0014T) 데이터 생성시 오류';
                RAISE e_err;
            END;

            --TBID0015T 테이블 데이터 생성 - 이전 배서 데이터 그대로 밀어넣는다.
            V_ERRMESSAGE := '배서-담보별분납계획(TBID0015T2) 데이터 생성';

            BEGIN
                insert into TBID0015T
                    ( POL_NO,           ENDOR_NO,           BNP_NO,         SEQ_NO
                    , DMBO_CD,          BASIC_PREM,         DMBO_PREM,      ISTAR_VALID_DATE
                    , IEND_VALID_DATE,  OLD_ENDOR_NO,       APPY_FROM,      APPY_TO
                    , BASIS_FROM,       BASIS_TO,           IT_PROCESSING,  USER_ID
                    , WORK_DATE )
                select POL_NO,           P_ENDOR_NO,         BNP_NO,         SEQ_NO
                     , DMBO_CD,          BASIC_PREM,         DMBO_PREM,      ISTAR_VALID_DATE
                     , IEND_VALID_DATE,  OLD_ENDOR_NO,       APPY_FROM,      APPY_TO
                     , BASIS_FROM,       BASIS_TO,           IT_PROCESSING,  USER_ID
                     , to_date(P_WORK_DATE, 'YYYYMMDD')
                  from TBID0015T
                 where POL_NO    = P_POL_NO
                   and ENDOR_NO  = V_ENDOR_NO_BEF_MAX
                   and WORK_DATE = to_date(P_WORK_DATE, 'YYYYMMDD');

            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '배서-담보별분납계획(TBID0015T) 데이터 생성 오류';
                RAISE e_err;
            END;

            --TBID0015T 테이블 환불데이터 생성 - 분납계획에서 수납된 데이터만 확인해서 마지막 납입회차에  - 처리한다.
            V_ERRMESSAGE := '배서-담보별분납계획(TBID0015T) 환불데이터 생성';

            BEGIN
                insert into TBID0015T
                    ( POL_NO,               ENDOR_NO,           BNP_NO,              SEQ_NO
                    , DMBO_CD,              BASIC_PREM,         DMBO_PREM,           ISTAR_VALID_DATE
                    , IEND_VALID_DATE,      OLD_ENDOR_NO,       APPY_FROM,           APPY_TO
                    , BASIS_FROM,           BASIS_TO,           USER_ID,             WORK_DATE )
                select X.POL_NO,            P_ENDOR_NO,         V_END_NAB_NO,        Y.NEW_SEQ_NO
                     , X.DMBO_CD,           X.BASIC_PREM * -1,  X.DMBO_PREM * -1,    Z.ISTAR_VALID_DATE
                     , Z.IEND_VALID_DATE,   Z.OLD_ENDOR_NO,     Z.APPY_FROM,         Z.APPY_TO
                     , Z.BASIS_FROM,        Z.BASIS_TO,         V_USER_ID,           to_date(P_WORK_DATE, 'YYYYMMDD')
                  from (select A.POL_NO, A.DMBO_CD, SUM(A.BASIC_PREM) as BASIC_PREM, SUM(A.DMBO_PREM) as DMBO_PREM
                          from TBID0015T A, TBID0016T B
                         where A.POL_NO      = P_POL_NO
                           and A.ENDOR_NO    = V_ENDOR_NO_BEF_MAX
                           and A.WORK_DATE   = to_date(P_WORK_DATE, 'YYYYMMDD')
                           and A.POL_NO      = B.POL_NO
                           and A.ENDOR_NO    = B.ENDOR_NO
                           and A.BNP_NO      = B.BNP_NO
                           and A.SEQ_NO      = B.SEQ_NO
                           and B.BNP_NO     <= V_END_NAB_NO
                           and B.PROC_STATUS = '5'
                           and B.WORK_DATE   = to_date(P_WORK_DATE, 'YYYYMMDD')
                         group by A.POL_NO, A.DMBO_CD) X
                     , (select NVL(MAX(A.SEQ_NO), 0) +1 AS NEW_SEQ_NO
                          from TBID0016T A
                         where A.POL_NO    = P_POL_NO
                           and A.ENDOR_NO  = V_ENDOR_NO_BEF_MAX
                           and A.WORK_DATE = to_date(P_WORK_DATE, 'YYYYMMDD')) Y
                     , (select A.ISTAR_VALID_DATE, IEND_VALID_DATE, OLD_ENDOR_NO, APPY_FROM, APPY_TO, BASIS_FROM, BASIS_TO
                          from TBID0015T A
                         where A.POL_NO    = P_POL_NO
                           and A.ENDOR_NO  = V_ENDOR_NO_BEF_MAX
                           and A.WORK_DATE = to_date(P_WORK_DATE, 'YYYYMMDD')
                           and A.BNP_NO    = V_END_NAB_NO
                           and ROWNUM      = 1) Z;
            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '배서-담보별분납계획(TBID0015T) 환불데이터 생성 오류';
                RAISE e_err;
            END;

            --TBID0015 테이블 미수납 데이터 0으로 UPDATE
            V_ERRMESSAGE := '배서-담보별분납계획(TBID0015T) 미수납데이터 갱신';

            BEGIN
                update TBID0015T
                   set DMBO_PREM = 0
                 where (POL_NO, ENDOR_NO, BNP_NO, SEQ_NO, WORK_DATE ) in ( select POL_NO, P_ENDOR_NO, BNP_NO, SEQ_NO, WORK_DATE
                                                                             from TBID0016T
                                                                            where POL_NO   = P_POL_NO
                                                                              and ENDOR_NO = V_ENDOR_NO_BEF_MAX
                                                                              and WORK_DATE = to_date(P_WORK_DATE, 'YYYYMMDD')
                                                                              and NVL(PROC_STATUS, '1') = '1' );

            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '배서-담보별분납계획(TBID0015T) 미수납데이터 갱신 오류';
                RAISE e_err;
            END;

            --TBID0016T 테이블 데이터 생성 - 이전 배서 데이터 그대로 밀어넣는다.
            V_ERRMESSAGE := '배서-분납계획(TBID0016T) 데이터 생성';
            --변경이력
            --2013.04.10 : 분납계획 INSERT 시 미처리 데이터는 0으로 분납보험료 세팅한다.

            BEGIN
                insert into TBID0016T
                    ( POL_NO,           ENDOR_NO,           BNP_NO,             SEQ_NO
                    , I_KIND_CD,        RCPT_CD,            NA_DATE,            ACCOUNT_MTH
                    , ACCOUNT_ID,       MANG_NO,            BNP_GUIDE_DATE,     BNP_RATION
                    , BNP_DATE,         BNP_PREM,           BNP_DEDUCT_AMT,     PROC_STATUS
                    , RCPT_GB,          RCPT_NO,            PRINT_CNT,          TREATY_HQ_CD
                    , TREATY_BRH_CD,    TREATY_CD,          APPY_FROM,          APPY_TO
                    , BASIS_FROM,       BASIS_TO,           IT_PROCESSING,      USER_ID
                    , WORK_DATE )
                select POL_NO,           P_ENDOR_NO,         BNP_NO,             SEQ_NO
                     , I_KIND_CD,        RCPT_CD,            NA_DATE,            ACCOUNT_MTH
                     , ACCOUNT_ID,       MANG_NO,            BNP_GUIDE_DATE,     BNP_RATION
                     , BNP_DATE,         DECODE(NVL(PROC_STATUS, '1'), '1', 0, BNP_PREM),           BNP_DEDUCT_AMT,     PROC_STATUS
                     , RCPT_GB,          RCPT_NO,            PRINT_CNT,          TREATY_HQ_CD
                     , TREATY_BRH_CD,    TREATY_CD,          APPY_FROM,          APPY_TO
                     , BASIS_FROM,       BASIS_TO,           IT_PROCESSING,      USER_ID
                     , to_date(P_WORK_DATE, 'YYYYMMDD')
                  from TBID0016T
                 where POL_NO    = P_POL_NO
                   and ENDOR_NO  = V_ENDOR_NO_BEF_MAX
                   and WORK_DATE = to_date(P_WORK_DATE, 'YYYYMMDD');

            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '배서-분납계획(TBID0016T) 데이터 생성 오류';
                RAISE e_err;
            END;

            --TBID0016T 테이블 환불데이터 생성 - 담보별분납계획에서 환불처리할 데이터만 등록한다.
            V_ERRMESSAGE := '배서-분납계획(TBID0016) 환불데이터 생성';

            BEGIN
                insert into TBID0016T
                     ( POL_NO,                 ENDOR_NO,           BNP_NO,                      SEQ_NO,
                       I_KIND_CD,              RCPT_CD,            BNP_DATE,                    BNP_PREM,
                       PROC_STATUS,            TREATY_HQ_CD,       TREATY_BRH_CD,               TREATY_CD,
                       APPY_FROM,              APPY_TO,            BASIS_FROM,                  BASIS_TO,
                       USER_ID,                WORK_DATE,
                       RCPT_NO)
                SELECT A.POL_NO,               P_ENDOR_NO,         A.BNP_NO,                    A.SEQ_NO,
                       V_I_KIND_CD,            '8',                to_date(V_APPY_FROM),        SUM(A.DMBO_PREM),
                       '1',                    V_TREATY_HQ_CD,     V_TREATY_BRH_CD,             V_TREATY_CD,
                       to_date(V_APPY_FROM),   B.APPY_TO,          to_date(V_BASIS_FROM),       B.BASIS_TO,
                       V_USER_ID,              to_date(P_WORK_DATE, 'YYYYMMDD')
                       ,CASE WHEN SUM(A.DMBO_PREM) < 0 THEN 'COR' ELSE NULL END
                  FROM ( SELECT A.POL_NO, A.ENDOR_NO, A.BNP_NO, A.SEQ_NO, A.DMBO_PREM, NVL(B.PROC_STATUS, 'X') AS PROC_STATUS, NVL(B.SEQ_NO, -1) AS SEQ_NO_CHK
                           FROM TBID0015T A, TBID0016T B
                          WHERE A.POL_NO    = P_POL_NO
                            AND A.ENDOR_NO  = P_ENDOR_NO
                            AND A.WORK_DATE = to_date(P_WORK_DATE, 'YYYYMMDD')
                            AND A.POL_NO    = B.POL_NO(+)
                            AND A.ENDOR_NO  = B.ENDOR_NO(+)
                            AND A.BNP_NO    = B.BNP_NO(+)
                            AND A.SEQ_NO    = B.SEQ_NO(+)
                            AND A.WORK_DATE = B.WORK_DATE(+)) A
                      ,( SELECT POL_NO, ENDOR_NO, BNP_NO, MIN(APPY_TO) AS APPY_TO, MIN(BASIS_TO) AS BASIS_TO
                           FROM TBID0016T
                          WHERE POL_NO    = P_POL_NO
                            AND ENDOR_NO  = P_ENDOR_NO
                            AND WORK_DATE = to_date(P_WORK_DATE, 'YYYYMMDD')
                          GROUP BY POL_NO, ENDOR_NO, BNP_NO ) B
                 WHERE A.PROC_STATUS = 'X'
                   AND A.SEQ_NO_CHK  = -1
                   AND A.POL_NO      = B.POL_NO
                   AND A.ENDOR_NO    = B.ENDOR_NO
                   AND A.BNP_NO      = B.BNP_NO
                 GROUP BY A.POL_NO, A.ENDOR_NO, A.BNP_NO, A.SEQ_NO, B.APPY_TO, B.BASIS_TO;

            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '배서-분납계획(TBID0016T) 환불데이터 생성 오류';
                RAISE e_err;
            END;

            --TBID0001 테이블 이전데이터값 그대로 넣기
            V_ERRMESSAGE := '배서-계약정보(TBID0001T) 데이터 수정';

            BEGIN
                update TBID0001T
                   set TOT_INSUR_AMT   = 0
                     , APPY_SUM_PREM   = 0
                     , RIDER_INSUR_AMT = 0
                     , RIDER_PREM      = 0
                     , SUM_PREM        = 0
                 where POL_NO          = P_POL_NO
                   and ENDOR_NO        = P_ENDOR_NO
                   and WORK_DATE       = to_date(P_WORK_DATE, 'YYYYMMDD');

            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '배서-계약정보(TBID0001T) 데이터 수정시 오류'||'('||sqlerrm||')';
                RAISE e_err;
            END;

            --TBIC0202 테이블 SUM데이터 UPDATE
            V_ERRMESSAGE := '계약-변경이력(TBIC0202T) 합계데이터 생성';

            BEGIN
                SELECT SUM(DECODE(ENDOR_NO, V_ENDOR_NO_BEF_MAX, APPY_PREM, 0)) AS APPY_PREM_BEF
                     , 0 - SUM(DECODE(ENDOR_NO, V_ENDOR_NO_BEF_MAX, APPY_PREM, 0)) AS DIFF_AMT
                  INTO V_APPY_PREM_BEF, V_DIFF_AMT
                  FROM TBID0013T
                 WHERE POL_NO    = P_POL_NO
                   AND ENDOR_NO BETWEEN V_ENDOR_NO_BEF_MAX AND P_ENDOR_NO
                   AND WORK_DATE = to_date(P_WORK_DATE, 'YYYYMMDD');

                UPDATE TBIC0202T
                   SET ENDOR_BEFORE_PREM = NVL(V_APPY_PREM_BEF, 0)
                     , ENDOR_AFTER_PREM  = 0
                     , PREM_DIFF_AMT     = NVL(V_DIFF_AMT,0)
                     , GET_GB            = '8'
                 WHERE POL_NO    = P_POL_NO
                   AND ENDOR_NO  = P_ENDOR_NO
                   AND WORK_DATE = to_date(P_WORK_DATE, 'YYYYMMDD');
            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '계약-변경이력(TBIC0202T) 합계데이터 생성 오류';
                RAISE e_err;
            END;

        END IF;

    END IF;

    P_ERR_MSG := '';

EXCEPTION
    WHEN e_err THEN
        ROLLBACK;
        P_ERR_MSG := V_ERRTITLE    || ' : ' ||    V_ERRMESSAGE;
    WHEN OTHERS THEN
        ROLLBACK;
        P_ERR_MSG := V_ERRTITLE || '    : '    || SUBSTR(SQLERRM, 1, 250);
END;
CREATE or replace
procedure KRMA_APP.PR_RENT_C_ENDOR_BUNAP_TERM( i_pol_no          in  varchar2
                                                         , i_endor_no         in  varchar2
                                                         , i_endor_no_bef_max in varchar2
                                                         , i_user_id          in  varchar2
                                                         , i_treaty_hq_cd     in  varchar2
                                                         , i_treaty_brh_cd    in  varchar2
                                                         , i_treaty_cd        in  varchar2
                                                         , i_end_nab_no       in  number
                                                         , i_bef_15_seq_no    in  number
                                                         , i_work_date        in  varchar2 ) as
/**************************************************************************************************************************/
/* Procedure Name :  PR_RENT_C_ENDOR_BUNAP_TERM                                                                           */
/* Function       :  담보별보험료, 담보별 분납계획 다 생성한후. 전 배서에 해지한 데이터 누락되는 경우를 막는다.           */
/*                   소급에서는 하나 더 추가. 담보별보험료(TBID0013) 와 담보별분납계획(TBID0015) 테이블 차이도 정정한다.  */
/* Parameter  i_pol_no             [ IN] 증권번호                                                                         */
/*            i_endor_no           [ IN] 배서번호                                                                         */
/*            i_user_id            [ IN] 사용자번호                                                                       */
/*            i_treaty_hq_cd       [ IN] 처리자 부서                                                                      */
/*            i_treaty_brh_cd      [ IN] 처리자 부서                                                                      */
/*            i_treaty_cd          [ IN] 처리자 부서                                                                      */
/*            i_end_nab_no         [ IN] 납입횟수                                                                         */
/*            i_bef_15_seq_no      [ IN] Max Seq                                                                          */
/*            o_result             [Out] sp 결과(보험료)                                                                  */
/**************************************************************************************************************************/

V_BASIC_PREM_15              number;
V_DMBO_PREM_15               number;


begin
    /*이전배서에는 있지만 현재배서에는 없는 담보 확인 */
    for REC in ( select DMBO_CD
                   from TBID0013T
                  where POL_NO    = i_pol_no
                    and ENDOR_NO  = i_endor_no_bef_max
                    and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                  group by DMBO_CD
                 minus
                 select DMBO_CD
                   from TBID0013T
                  where POL_NO    = i_pol_no
                    and ENDOR_NO  = i_endor_no
                    and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                  group by DMBO_CD )
    loop
        /*배서-담보별보험료*/
 /* 2017.02.08 담보별단체특성율 추가*/
        begin
            insert into TBID0013T
                 ( POL_NO                 , ENDOR_NO               , BASIC_SCONT_GB         , DMBO_CD                , APPY_FROM
                 , WORK_DATE              , ACDNT_RESP_WANT        , MAN_RESP_WANT          , INSUR_AMT              , INSUR_AMT_GB
                 , DUCT_AMT_GB            , BASIC_PREM             , DMBO_START_DATE        , DMBO_END_DATE          , APPY_PREM
                 , BASIC_RANGE_R          , CANCEL_CALC_GB         , APPY_TO                , BASIS_FROM             , BASIS_TO
                 , BASIC_YEAR_PREM        , APPY_YEAR_PREM         , IT_PROCESSING          , USER_ID, GRP_DMBO_RATE )
            select POL_NO                 , i_endor_no             , BASIC_SCONT_GB         , DMBO_CD                , APPY_FROM
                 , WORK_DATE              , ACDNT_RESP_WANT        , MAN_RESP_WANT          , INSUR_AMT              , INSUR_AMT_GB
                 , DUCT_AMT_GB            , BASIC_PREM             , DMBO_START_DATE        , DMBO_END_DATE          , APPY_PREM
                 , BASIC_RANGE_R          , CANCEL_CALC_GB         , APPY_TO                , BASIS_FROM             , BASIS_TO
                 , BASIC_YEAR_PREM        , APPY_YEAR_PREM         , IT_PROCESSING          , USER_ID, GRP_DMBO_RATE
              from TBID0013T
             where POL_NO    = i_pol_no
               and ENDOR_NO  = i_endor_no_bef_max
               and DMBO_CD   = REC.DMBO_CD
               and WORK_DATE = to_date(i_work_date, 'YYYYMMDD');
        end;

        /*배서-담보기간별보험료*/
        begin
            insert into TBID0014T
                 ( POL_NO             , ENDOR_NO           , DMBO_CD            , CALC_FYMD          , WORK_DATE
                 , CALC_EYMD          , BASIC_PREM         , APPY_PREM          , APPY_FROM          , APPY_TO
                 , BASIS_FROM         , BASIS_TO           , BASIC_YEAR_PREM    , APPY_YEAR_PREM     , IT_PROCESSING
                 , USER_ID )
            select POL_NO             , i_endor_no         , DMBO_CD            , CALC_FYMD          , WORK_DATE
                 , CALC_EYMD          , BASIC_PREM         , APPY_PREM          , APPY_FROM          , APPY_TO
                 , BASIS_FROM         , BASIS_TO           , BASIC_YEAR_PREM    , APPY_YEAR_PREM     , IT_PROCESSING
                 , USER_ID
              from TBID0014T
             where POL_NO    = i_pol_no
               and ENDOR_NO  = i_endor_no_bef_max
               and DMBO_CD   = REC.DMBO_CD
               and WORK_DATE = to_date(i_work_date, 'YYYYMMDD');
        end;

        /*배서-담보별 분납계획*/
        begin
            insert into TBID0015T
                 ( POL_NO              , ENDOR_NO            , BNP_NO              , SEQ_NO              , DMBO_CD
                 , BASIC_PREM          , DMBO_PREM           , ISTAR_VALID_DATE    , IEND_VALID_DATE     , OLD_ENDOR_NO
                 , APPY_FROM           , APPY_TO             , BASIS_FROM          , BASIS_TO            , IT_PROCESSING
                 , USER_ID             , WORK_DATE )
            select POL_NO              , i_endor_no          , BNP_NO              , SEQ_NO              , DMBO_CD
                 , BASIC_PREM          , DMBO_PREM           , ISTAR_VALID_DATE    , IEND_VALID_DATE     , ENDOR_NO
                 , APPY_FROM           , APPY_TO             , BASIS_FROM          , BASIS_TO            , IT_PROCESSING
                 , USER_ID             , WORK_DATE
              from TBID0015T
             where POL_NO    = i_pol_no
               and ENDOR_NO  = i_endor_no_bef_max
               and BNP_NO   <= i_end_nab_no
               and DMBO_CD   = REC.DMBO_CD
               and WORK_DATE = to_date(i_work_date, 'YYYYMMDD');
        end;

    end loop;

    /*15번 테이블에는 있지만 13번에는 없는 담보는 15번에 정정처리한다.*/
    for REC2 in ( select DMBO_CD
                    from TBID0015T
                   where POL_NO    = i_pol_no
                     and ENDOR_NO  = i_endor_no
                     and BNP_NO   <= i_end_nab_no
                     and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                   group by DMBO_CD
                  minus
                  select DMBO_CD
                    from TBID0013T
                   where POL_NO   = i_pol_no
                     and ENDOR_NO = i_endor_no
                     and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                   group by DMBO_CD )
    loop
        /*담보별 분납계획 sum */
        begin
            select NVL(SUM(BASIC_PREM), 0), NVL(SUM(DMBO_PREM), 0)
              into V_BASIC_PREM_15, V_DMBO_PREM_15
              from TBID0015T
             where POL_NO     = i_pol_no
               and ENDOR_NO   = i_endor_no
               and DMBO_CD    = REC2.DMBO_CD
               and BNP_NO    <= i_end_nab_no
               and WORK_DATE  = to_date(i_work_date, 'YYYYMMDD');
        end;

        /*배서-담보별 분납계획*/
        begin
            insert into TBID0015T( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                    DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                    IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                    BASIS_FROM,               BASIS_TO,               USER_ID,                    WORK_DATE )
                             select POL_NO,                   i_endor_no,             BNP_NO,                     i_bef_15_seq_no,
                                    REC2.DMBO_CD,             V_BASIC_PREM_15 * -1,   V_DMBO_PREM_15 * -1,        ISTAR_VALID_DATE,
                                    IEND_VALID_DATE,          i_endor_no_bef_max,     APPY_FROM,                  APPY_TO,
                                    BASIS_FROM,               BASIS_TO,               i_user_id,                  to_date(i_work_date, 'YYYYMMDD')
                               from TBID0015T
                              where POL_NO    = i_pol_no
                                and ENDOR_NO  = i_endor_no
                                and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                                and BNP_NO    = i_end_nab_no
                                and rownum    = 1;
        end;

    end loop;

    /* 13, 15번 데이터 비교해서 차액 발생분을 15에 넣어준다. */
    for REC3 in ( select DMBO_CD , SUM(BASIC_PREM_13T) -  SUM(BASIC_PREM_15T) AS BASIC_PREM
                                 , SUM(APPY_PREM_13T)  -  SUM(APPY_PREM_15T)  AS APPY_PREM
                    from ( select DMBO_CD, SUM(BASIC_PREM) AS BASIC_PREM_13T, SUM(APPY_PREM) AS APPY_PREM_13T, 0 AS BASIC_PREM_15T, 0 AS APPY_PREM_15T
                             from TBID0013T
                            where POL_NO    = i_pol_no
                              and ENDOR_NO  = i_endor_no
                              and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                            group by DMBO_CD
                           union all
                           select DMBO_CD, 0, 0, SUM(BASIC_PREM), SUM(DMBO_PREM)
                             from TBID0015T
                            where POL_NO    = i_pol_no
                              and ENDOR_NO  = i_endor_no
                              and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                            group by DMBO_CD )
                   group by DMBO_CD
                  having  SUM(APPY_PREM_13T) - SUM(APPY_PREM_15T) <> 0 )
    loop
        /*배서-담보별 분납계획*/
        begin
            insert into TBID0015T( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                    DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                    IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                    BASIS_FROM,               BASIS_TO,               USER_ID,                    WORK_DATE )
                             select POL_NO,                   i_endor_no,             BNP_NO,                     i_bef_15_seq_no,
                                    REC3.DMBO_CD,             REC3.BASIC_PREM,        REC3.APPY_PREM,             ISTAR_VALID_DATE,
                                    IEND_VALID_DATE,          i_endor_no_bef_max,     APPY_FROM,                  APPY_TO,
                                    BASIS_FROM,               BASIS_TO,               i_user_id,                  to_date(i_work_date, 'YYYYMMDD')
                               from TBID0015T
                              where POL_NO    = i_pol_no
                                and ENDOR_NO  = i_endor_no
                                and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                                and BNP_NO    = i_end_nab_no
                                and rownum    = 1;
        end;
    end loop;

exception when others then
                   dbms_output.put_line('PR_RENT_C_ENDOR_BUNAP_TERM Main Error1: '||sqlerrm);
                   raise_application_error(-20001, 'PR_RENT_C_ENDOR_BUNAP_TERM Error1: '||sqlerrm);
end;
CREATE -- added during DDL generation.
PROCEDURE PR_RENT_C_ENDOR_BUNAP_TOT_RATE( i_pol_no          in  varchar2
                                                         , i_endor_no           in  varchar2
                                                         , i_endor_no_bef_max   in  varchar2
                                                         , i_i_kind_cd          in  varchar2
                                                         , i_spcl_agre_gb       in  varchar2
                                                         , i_bnp_cnt            in  number
                                                         , i_user_id            in  varchar2
                                                         , i_treaty_hq_cd       in  varchar2
                                                         , i_treaty_brh_cd      in  varchar2
                                                         , i_treaty_cd          in  varchar2
                                                         , i_endor_cd           in  varchar2
                                                         , i_end_nab_no         in  number
                                                         , i_bef_15_seq_no      in  number
                                                         , i_work_date          in  varchar2 ) as
/**************************************************************************************************************************/
/* Procedure Name :  PR_RENT_C_ENDOR_TOT_BUNAP_RATE                                                                       */
/* Function       :  소급배서 담보별, 기간별 분납 회차별 보험료 산정                                                      */
/* Parameter  i_pol_no             [ IN] 증권번호                                                                         */
/*            i_endor_no           [ IN] 배서번호                                                                         */
/*            i_i_kind_cd          [ IN] 보험종목                                                                         */
/*            i_spcl_agre_gb       [ IN] '0'                                                                              */
/*            i_bnp_cnt            [ IN] 분납횟수-1:일시납,2:2분납,3:3분납,4:4분납,5: 5분납,6:6분납,7:7분납,8:8분납(A0007)*/
/*            i_user_id            [ IN] 사용자번호                                                                       */
/*            i_treaty_hq_cd       [ IN] 처리자 부서                                                                      */
/*            i_treaty_brh_cd      [ IN] 처리자 부서                                                                      */
/*            i_treaty_cd          [ IN] 처리자 부서                                                                      */
/*            i_end_nab_no         [ IN] 납입횟수                                                                         */
/*            i_bef_15_seq_no      [ IN] Max Seq                                                                          */
/*            i_work_date          [ IN] 소급배서일                                                                       */
/*            o_result             [Out] sp 결과(보험료)                                                                  */
/**************************************************************************************************************************/

V_CHANGE_GB      varchar2(3);
V_ENDOR_GB       varchar2(2);
V_APPY_DATE      date;

begin

       V_ENDOR_GB := substr(i_endor_cd, 1, 1);

       begin
              select A.CHANGE_GB, B.APPY_DATE
                into V_CHANGE_GB, V_APPY_DATE
                from TBIC0202T A, TBIC0203T B
               where A.POL_NO    = i_pol_no
                 and A.ENDOR_NO  = i_endor_no
                 and A.WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                 and A.POL_NO    = B.POL_NO
                 and A.ENDOR_NO  = B.ENDOR_NO
                 and A.WORK_DATE = B.WORK_DATE
                 and B.ENDOR_SUB_SEQ = 0
               group by A.CHANGE_GB, B.APPY_DATE;

            exception when others then
               V_CHANGE_GB :='0';
               V_APPY_DATE := trunc(SYSDATE);
       end;

       begin
            insert into TBID0016T(POL_NO           ,ENDOR_NO             ,BNP_NO                 ,seq_no
                                  ,I_KIND_CD        ,RCPT_CD              ,NA_DATE                ,ACCOUNT_MTH
                                  ,ACCOUNT_ID       ,MANG_NO              ,BNP_GUIDE_DATE         ,BNP_RATION
                                  ,BNP_DATE         ,BNP_PREM             ,PROC_STATUS            ,RCPT_GB
                                  ,RCPT_NO          ,PRINT_CNT            ,TREATY_HQ_CD           ,TREATY_BRH_CD
                                  ,TREATY_CD        ,APPY_FROM            ,APPY_TO                ,BASIS_FROM
                                  ,BASIS_TO         ,USER_ID              ,WORK_DATE )
                            select POL_NO           ,I_ENDOR_NO           ,BNP_NO                 ,SEQ_NO
                                  ,I_KIND_CD        ,RCPT_CD              ,NA_DATE                ,ACCOUNT_MTH
                                  ,ACCOUNT_ID       ,MANG_NO              ,BNP_GUIDE_DATE         ,BNP_RATION
                                  ,BNP_DATE         ,BNP_PREM             ,PROC_STATUS            ,RCPT_GB
                                  ,RCPT_NO          ,PRINT_CNT            ,TREATY_HQ_CD           ,TREATY_BRH_CD
                                  ,TREATY_CD        ,APPY_FROM            ,APPY_TO                ,BASIS_FROM
                                  ,BASIS_TO         ,I_USER_ID            ,to_date(i_work_date, 'YYYYMMDD')
                              from TBID0016T
                             where POL_NO    = i_pol_no
                               and ENDOR_NO  = i_endor_no_bef_max
                               and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                               and BNP_NO   <= i_end_nab_no;
       end;

       begin
            insert into TBID0016T(POL_NO           ,ENDOR_NO             ,BNP_NO                 ,seq_no
                                  ,I_KIND_CD
                                  ,RCPT_CD
                                  ,NA_DATE          ,ACCOUNT_MTH
                                  ,ACCOUNT_ID       ,MANG_NO              ,BNP_GUIDE_DATE
                                  ,BNP_RATION
                                  ,BNP_DATE
                                  ,BNP_PREM         ,PROC_STATUS          ,RCPT_GB
                                  ,RCPT_NO          ,PRINT_CNT            ,TREATY_HQ_CD           ,TREATY_BRH_CD
                                  ,TREATY_CD        ,APPY_FROM            ,APPY_TO                ,BASIS_FROM
                                  ,BASIS_TO         ,USER_ID              ,WORK_DATE )
                            select A.POL_NO         ,A.ENDOR_NO           ,A.BNP_NO               ,i_bef_15_seq_no
                                  ,i_i_kind_cd
                                  ,case when V_CHANGE_GB = '3'       then '8'
                                        when V_CHANGE_GB = '4'       then '6'
                                        when sum(A.DMBO_PREM) >= 0   then '3'
                                        else                              '4'
                                   end  as RCPT_CD
                                  ,null             ,null
                                  ,null             ,null                 ,null
                                  ,min((select min(A1.BNP_RATION)
                                          from TBID0016T A1
                                         where A1.POL_NO    = i_pol_no
                                           and A1.ENDOR_NO  = i_endor_no_bef_max
                                           and A1.WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                                           and A1.BNP_NO    = A.BNP_NO
                                       ))
                                  ,case when V_APPY_DATE > trunc(SYSDATE) then V_APPY_DATE
                                        else trunc(SYSDATE) end as BNP_DATE
                                  ,sum(A.DMBO_PREM)   ,'1'                ,null
                                  ,'COR'            ,null                 ,i_treaty_hq_cd         ,i_treaty_brh_cd
                                  ,i_treaty_cd      ,min(A.APPY_FROM)     ,min(A.APPY_TO)         ,min(A.BASIS_FROM)
                                  ,min(A.BASIS_TO)       ,i_user_id       ,to_date(i_work_date, 'YYYYMMDD')
                              from TBID0015T A
                             where A.POL_NO    = i_pol_no
                               and A.ENDOR_NO  = i_endor_no
                               and A.WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                               and A.BNP_NO    = i_end_nab_no
                               and A.SEQ_NO    = i_bef_15_seq_no
                              group by A.POL_NO,A.ENDOR_NO,A.BNP_NO;
       end;

       begin
            insert into TBID0016T(POL_NO           ,ENDOR_NO             ,BNP_NO                 ,seq_no
                                  ,I_KIND_CD
                                  ,RCPT_CD
                                  ,NA_DATE          ,ACCOUNT_MTH
                                  ,ACCOUNT_ID       ,MANG_NO              ,BNP_GUIDE_DATE
                                  ,BNP_RATION
                                  ,BNP_DATE
                                  ,BNP_PREM         ,PROC_STATUS          ,RCPT_GB
                                  ,RCPT_NO          ,PRINT_CNT            ,TREATY_HQ_CD           ,TREATY_BRH_CD
                                  ,TREATY_CD        ,APPY_FROM            ,APPY_TO                ,BASIS_FROM
                                  ,BASIS_TO         ,USER_ID              ,WORK_DATE )
                            select A.POL_NO         ,A.ENDOR_NO           ,A.BNP_NO               ,A.SEQ_NO
                                  ,i_i_kind_cd
                                  ,max(case when A.BNP_NO =1 then 1 else 2 end) as RCPT_CD
                                  ,null             ,null
                                  ,null             ,null                 ,null
                                  ,min((select min(A1.BNP_RATION)
                                          from TBID0016T A1
                                         where A1.POL_NO    = i_pol_no
                                           and A1.ENDOR_NO  = i_endor_no_bef_max
                                           and A1.WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                                           and A1.BNP_NO    = A.BNP_NO
                                     ))
                                  ,min((select min(A1.BNP_DATE)
                                          from TBID0016T A1
                                         where A1.POL_NO    = i_pol_no
                                           and A1.ENDOR_NO  = i_endor_no_bef_max
                                           and A1.WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                                           and A1.BNP_NO    = A.BNP_NO
                                     ))
                                  ,sum(DMBO_PREM)   ,'1'                  ,null
                                  ,null             ,null                 ,i_treaty_hq_cd         ,i_treaty_brh_cd
                                  ,i_treaty_cd      ,min(A.APPY_FROM)     ,min(A.APPY_TO)         ,min(A.BASIS_FROM)
                                  ,min(A.BASIS_TO)  ,i_user_id            ,to_date(i_work_date, 'YYYYMMDD')
                              from TBID0015T A
                             where A.POL_NO    = i_pol_no
                               and A.ENDOR_NO  = i_endor_no
                               and A.WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                               and A.BNP_NO    > i_end_nab_no
                             group by A.POL_NO,A.ENDOR_NO,A.BNP_NO,A.SEQ_NO ;
       end;

       if V_ENDOR_GB = '7' then
           begin
               update TBID0016T
                  set RCPT_CD   = '9'    --부활로 수정
                where POL_NO    = i_pol_no
                  and ENDOR_NO  = i_endor_no
                  and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                  and BNP_NO    > i_end_nab_no
                  and BNP_DATE <= V_APPY_DATE
                  and RCPT_NO IS NULL;
           end;
       end if;

exception when others then
                   dbms_output.put_line('PR_RENT_C_ENDOR_BUNAP_TOT_RATE Main Error1: '||sqlerrm);
                   raise_application_error(-20001, 'PR_RENT_C_ENDOR_BUNAP_TOT_RATE Error1: '||sqlerrm);
end;
CREATE -- added during DDL generation.
procedure PR_RENT_C_ENDOR_BUNAP_TRANS( i_pol_no          in  varchar2
                                                         , i_endor_no        in  number
                                                         , i_new_endor_no    in  number
                                                         , i_work_date       in  varchar2
                                                         , i_end_nab_no      in  number
                                                         , i_bef_15_seq_no   in  number
                                                         , o_err_msg         out varchar2 ) as
    /*********************************************************************/
    /* 생성일자 : 2013.06.28                                             */
    /* 생성자   : 최재혁                                                 */
    /* 업무내용 : 정정(소급) 배서후 배서테이블에 옮길때 분납테이블 계산  */
    /* Parameters: i_pol_no = 증권번호                                   */
    /*             i_endor_no = 배서번호                                 */
    /*             i_new_endor_no = 새로운배서번호                       */
    /*             i_work_date = 소급배서일                              */
    /*             o_err_msg = 실행결과                                  */
    /*********************************************************************/

    V_ERRTITLE                          varchar2(100);                           --에러 TITLE
    V_ERRMESSAGE                        varchar2(300);                          --에러 메세지
    V_DMBO_CD                           varchar2(2);                            --연관성 부여시 담보코드
    V_DMBO_SEQ                          number(2);                              --연관성 부여시 순번
    V_NEW_ENDOR_NO                      number(3);                              --배서번호
    V_TREATY_HQ_CD                      TBID0001.TREATY_HQ_CD%TYPE;
    V_TREATY_BRH_CD                     TBID0001.TREATY_BRH_CD%TYPE;
    V_TREATY_CD                         TBID0001.TREATY_CD%TYPE;
    V_USER_ID                           TBID0001.USER_ID%TYPE;
    V_I_KIND_CD                         TBID0001.I_KIND_CD%TYPE;
    e_err                               exception;

V_CHANGE_GB      varchar2(3);
V_APPY_DATE      date;

begin
    o_err_msg := 'NOT_OK';
    V_ERRTITLE := 'START';

    V_ERRTITLE := '배서(소급)-계약정보에서 기초 정보를 가져온다.';

    /* 소급 계약정보에서 기초정보 가져오기 */
    begin
        select TREATY_HQ_CD       , TREATY_BRH_CD       , TREATY_CD       , USER_ID       , I_KIND_CD
          into V_TREATY_HQ_CD     , V_TREATY_BRH_CD     , V_TREATY_CD     , V_USER_ID     , V_I_KIND_CD
          from TBID0001T
         where POL_NO    = i_pol_no
           and ENDOR_NO  = i_endor_no
           and WORK_DATE = to_date(i_work_date, 'YYYYMMDD');
    exception
        when others then
            V_ERRMESSAGE := '배서(소급)-계약정보(TBID0001T) 데이터 검색 오류'||'('||sqlerrm||')';
            raise e_err;
    end;

    V_ERRTITLE := '배서(소급)-담보별 분납계획 생성';

    /* TBID0015 데이터 만들기 */
    begin
        V_ERRTITLE := '배서(소급)-담보별 분납계획 생성(1)';

        /* 1. 최종납입회차 data는 무조건 insert 한다.*/
        begin
            insert into TBID0015
                 ( POL_NO              , ENDOR_NO            , BNP_NO              , SEQ_NO              , DMBO_CD
                 , BASIC_PREM          , DMBO_PREM           , ISTAR_VALID_DATE    , IEND_VALID_DATE     , OLD_ENDOR_NO
                 , APPY_FROM           , APPY_TO             , BASIS_FROM          , BASIS_TO            , IT_PROCESSING
                 , USER_ID )
            select POL_NO              , i_new_endor_no      , BNP_NO              , SEQ_NO              , DMBO_CD
                 , BASIC_PREM          , DMBO_PREM           , ISTAR_VALID_DATE    , IEND_VALID_DATE     , ENDOR_NO
                 , APPY_FROM           , APPY_TO             , BASIS_FROM          , BASIS_TO            , IT_PROCESSING
                 , USER_ID
              from TBID0015
             where POL_NO    = i_pol_no
               and ENDOR_NO  = i_new_endor_no - 1
               and BNP_NO   <= i_end_nab_no;
        exception
            when others then
                V_ERRMESSAGE := '배서(소급)-담보별분납계획(TBID0015) 기존 데이터 등록시 오류'||'('||sqlerrm||')';
                raise e_err;
        end;

        V_ERRTITLE := '배서(소급)-담보별 분납계획 생성(2)';

        /* 2. 소급배서 차액을 최종납입회차의 SUB_SEQ 로 붙인다.*/
        begin
            insert into TBID0015
                 ( POL_NO          , ENDOR_NO               , BNP_NO               , SEQ_NO               , DMBO_CD
                 , BASIC_PREM      , DMBO_PREM              , ISTAR_VALID_DATE     , IEND_VALID_DATE      , OLD_ENDOR_NO
                 , APPY_FROM       , APPY_TO                , BASIS_FROM           , BASIS_TO             , IT_PROCESSING
                 , USER_ID )
            select B.POL_NO        , i_new_endor_no         , B.BNP_NO             , i_bef_15_seq_no      , A.DMBO_CD
                 , 0               , A.AFT_SUM - A.PRE_SUM  , B.ISTAR_VALID_DATE   , B.IEND_VALID_DATE    , i_new_endor_no - 1
                 , B.APPY_FROM     , B.APPY_TO              , B.BASIS_FROM         , B.BASIS_TO           , to_char(sysdate, 'YYYYMMDDHH24MISS')
                 , V_USER_ID
              from ( select DMBO_CD, sum(PRE_SUM) as PRE_SUM, sum(AFT_SUM) as AFT_SUM
                       from ( select B.DMBO_CD, sum(B.DMBO_PREM) as PRE_SUM, 0 as AFT_SUM
                                from TBID0001 A, TBID0015 B
                               where A.POL_NO      = i_pol_no
                                 and A.ENDOR_NO    = i_new_endor_no - 1
                                 and A.POL_NO      = B.POL_NO
                                 and A.ENDOR_NO    = B.ENDOR_NO
                                 and A.END_NAB_NO >= B.BNP_NO
                               group by B.DMBO_CD
                              union all
                              select B.DMBO_CD, 0, sum(B.DMBO_PREM)
                                from TBID0001 A, TBID0015T B
                               where A.POL_NO      = i_pol_no
                                 and A.ENDOR_NO    = i_new_endor_no - 1
                                 and A.POL_NO      = B.POL_NO
                                 and A.END_NAB_NO >= B.BNP_NO
                                 and B.WORK_DATE   = to_date(i_work_date, 'YYYYMMDD')
                                 and B.ENDOR_NO    = i_endor_no
                               group by B.DMBO_CD )
                      group by DMBO_CD
                      having sum(AFT_SUM) - sum(PRE_SUM) <> 0 ) A
                 , ( select POL_NO       , BNP_NO       , ISTAR_VALID_DATE     , IEND_VALID_DATE
                          , APPY_FROM    , APPY_TO      , BASIS_FROM           , BASIS_TO
                       from TBID0015
                      where POL_NO   = i_pol_no
                        and ENDOR_NO = i_new_endor_no -1
                        and BNP_NO   = i_end_nab_no
                        and rownum   = 1 ) B;
        exception
            when others then
                V_ERRMESSAGE := '배서(소급)-담보별분납계획(TBID0015) 변경 데이터 등록시 오류'||'('||sqlerrm||')';
                raise e_err;
        end;

        V_ERRTITLE := '배서(소급)-담보별 분납계획 생성(3)';

        /* 3. 최종납입회차 이후 데이터는 소급테이블에서 Insert 한다. (새로 만들어진 데이터기 때문에)*/
        begin
            insert into TBID0015
                 ( POL_NO              , ENDOR_NO            , BNP_NO              , SEQ_NO              , DMBO_CD
                 , BASIC_PREM          , DMBO_PREM           , ISTAR_VALID_DATE    , IEND_VALID_DATE     , OLD_ENDOR_NO
                 , APPY_FROM           , APPY_TO             , BASIS_FROM          , BASIS_TO            , IT_PROCESSING
                 , USER_ID )
            select POL_NO              , i_new_endor_no      , BNP_NO              , SEQ_NO              , DMBO_CD
                 , BASIC_PREM          , DMBO_PREM           , ISTAR_VALID_DATE    , IEND_VALID_DATE     , i_new_endor_no - 1
                 , APPY_FROM           , APPY_TO             , BASIS_FROM          , BASIS_TO            , IT_PROCESSING
                 , USER_ID
              from TBID0015T
             where POL_NO    = i_pol_no
               and ENDOR_NO  = i_endor_no
               and BNP_NO    > i_end_nab_no
               and WORK_DATE = to_date(i_work_date, 'YYYYMMDD');
        exception
            when others then
                V_ERRMESSAGE := '배서(소급)-담보별분납계획(TBID0015) 최종납입회차 이후 데이터 등록시 오류'||'('||sqlerrm||')';
                raise e_err;
        end;
    end;

    /* TBID0016(분납계획) 데이터 만들기 */
    begin

        V_ERRTITLE := '배서(소급)-변경이력 검색';

        begin
            select A.CHANGE_GB, B.APPY_DATE
              into V_CHANGE_GB, V_APPY_DATE
              from TBIC0202 A, TBIC0203 B
             where A.POL_NO    = i_pol_no
               and A.ENDOR_NO  = i_new_endor_no
               and A.POL_NO    = B.POL_NO
               and A.ENDOR_NO  = B.ENDOR_NO
                and B.ENDOR_SUB_SEQ = 0
             group by A.CHANGE_GB, B.APPY_DATE;

        exception
            when others then
                V_CHANGE_GB :='0';
                V_APPY_DATE := trunc(SYSDATE);
        end;

        V_ERRTITLE := '배서(소급)-분납계획 이전 데이터 등록';

        begin
            insert into TBID0016(POL_NO           ,ENDOR_NO             ,BNP_NO                 ,seq_no
                                ,I_KIND_CD        ,RCPT_CD              ,NA_DATE                ,ACCOUNT_MTH
                                ,ACCOUNT_ID       ,MANG_NO              ,BNP_GUIDE_DATE         ,BNP_RATION
                                ,BNP_DATE         ,BNP_PREM             ,PROC_STATUS            ,RCPT_GB
                                ,RCPT_NO          ,PRINT_CNT            ,TREATY_HQ_CD           ,TREATY_BRH_CD
                                ,TREATY_CD        ,APPY_FROM            ,APPY_TO                ,BASIS_FROM
                                ,BASIS_TO         ,USER_ID )
                          select POL_NO           ,i_new_endor_no       ,BNP_NO                 ,SEQ_NO
                                ,I_KIND_CD        ,RCPT_CD              ,NA_DATE                ,ACCOUNT_MTH
                                ,ACCOUNT_ID       ,MANG_NO              ,BNP_GUIDE_DATE         ,BNP_RATION
                                ,BNP_DATE         ,BNP_PREM             ,PROC_STATUS            ,RCPT_GB
                                ,RCPT_NO          ,PRINT_CNT            ,TREATY_HQ_CD           ,TREATY_BRH_CD
                                ,TREATY_CD        ,APPY_FROM            ,APPY_TO                ,BASIS_FROM
                                ,BASIS_TO         ,V_USER_ID
                            from TBID0016
                           where POL_NO    = i_pol_no
                             and ENDOR_NO  = i_new_endor_no -1
                             and BNP_NO   <= i_end_nab_no;
        exception
            when others then
                V_ERRMESSAGE := '배서(소급)-분납계획(TBID0016) 이전 데이터 등록시 오류'||'('||sqlerrm||')';
                raise e_err;
        end;

        V_ERRTITLE := '배서(소급)-분납계획 변경 데이터 등록';

        begin
            insert into TBID0016(POL_NO           ,ENDOR_NO             ,BNP_NO                 ,seq_no
                                ,I_KIND_CD
                                ,RCPT_CD
                                ,NA_DATE          ,ACCOUNT_MTH
                                ,ACCOUNT_ID       ,MANG_NO              ,BNP_GUIDE_DATE
                                ,BNP_RATION
                                ,BNP_DATE
                                ,BNP_PREM         ,PROC_STATUS          ,RCPT_GB
                                ,RCPT_NO          ,PRINT_CNT            ,TREATY_HQ_CD           ,TREATY_BRH_CD
                                ,TREATY_CD        ,APPY_FROM            ,APPY_TO                ,BASIS_FROM
                                ,BASIS_TO         ,USER_ID )
                          select A.POL_NO         ,A.ENDOR_NO           ,A.BNP_NO               ,i_bef_15_seq_no
                                ,V_I_KIND_CD
                                ,case when V_CHANGE_GB = '3'       then '8'
                                      when V_CHANGE_GB = '4'       then '6'
                                      when sum(A.DMBO_PREM) >= 0   then '3'
                                      else                              '4'
                                 end  as RCPT_CD
                                ,to_date(i_work_date, 'YYYYMMDD')  ,null
                                ,null             ,null                 ,null
                                ,min((select min(A1.BNP_RATION)
                                        from TBID0016 A1
                                       where A1.POL_NO    = i_pol_no
                                         and A1.ENDOR_NO  = i_new_endor_no-1
                                         and A1.BNP_NO    = A.BNP_NO
                                     ))
                                ,case when V_APPY_DATE > trunc(SYSDATE) then V_APPY_DATE
                                      else trunc(SYSDATE) end as BNP_DATE
                                ,sum(A.DMBO_PREM)   ,'1'                ,null
                                ,null             ,null                 ,V_TREATY_HQ_CD         ,V_TREATY_BRH_CD
                                ,V_TREATY_CD      ,min(A.APPY_FROM)     ,min(A.APPY_TO)         ,min(A.BASIS_FROM)
                                ,min(A.BASIS_TO)       ,V_USER_ID
                            from TBID0015 A
                           where A.POL_NO    = i_pol_no
                             and A.ENDOR_NO  = i_new_endor_no
                             and A.BNP_NO    = i_end_nab_no
                             and A.SEQ_NO    = i_bef_15_seq_no
                           group by A.POL_NO,A.ENDOR_NO,A.BNP_NO;
        exception
            when others then
                V_ERRMESSAGE := '배서(소급)-분납계획(TBID0016) 변경 데이터 등록시 오류'||'('||sqlerrm||')';
                raise e_err;
        end;

        V_ERRTITLE := '배서(소급)-분납계획 변경이후 데이터 등록';

        begin
            insert into TBID0016(POL_NO           ,ENDOR_NO             ,BNP_NO                 ,seq_no
                                ,I_KIND_CD
                                ,RCPT_CD
                                ,NA_DATE          ,ACCOUNT_MTH
                                ,ACCOUNT_ID       ,MANG_NO              ,BNP_GUIDE_DATE
                                ,BNP_RATION
                                ,BNP_DATE
                                ,BNP_PREM         ,PROC_STATUS          ,RCPT_GB
                                ,RCPT_NO          ,PRINT_CNT            ,TREATY_HQ_CD           ,TREATY_BRH_CD
                                ,TREATY_CD        ,APPY_FROM            ,APPY_TO                ,BASIS_FROM
                                ,BASIS_TO         ,USER_ID )
                          select A.POL_NO         ,A.ENDOR_NO           ,A.BNP_NO               ,A.SEQ_NO
                                ,V_I_KIND_CD
                                ,max(case when A.BNP_NO =1 then 1 else 2 end) as RCPT_CD
                                ,null             ,null
                                ,null             ,null                 ,null
                                ,min((select min(A1.BNP_RATION)
                                        from TBID0016 A1
                                       where A1.POL_NO    = i_pol_no
                                         and A1.ENDOR_NO  = i_new_endor_no - 1
                                         and A1.BNP_NO    = A.BNP_NO
                                   ))
                                ,min((select min(A1.BNP_DATE)
                                        from TBID0016 A1
                                       where A1.POL_NO    = i_pol_no
                                         and A1.ENDOR_NO  = i_new_endor_no - 1
                                         and A1.BNP_NO    = A.BNP_NO
                                   ))
                                ,sum(DMBO_PREM)   ,'1'                  ,null
                                ,null             ,null                 ,V_TREATY_HQ_CD         ,V_TREATY_BRH_CD
                                ,V_TREATY_CD      ,min(A.APPY_FROM)     ,min(A.APPY_TO)         ,min(A.BASIS_FROM)
                                ,min(A.BASIS_TO)  ,V_USER_ID
                            from TBID0015 A
                           where A.POL_NO    = i_pol_no
                             and A.ENDOR_NO  = i_new_endor_no
                             and A.BNP_NO    > i_end_nab_no
                           group by A.POL_NO,A.ENDOR_NO,A.BNP_NO,A.SEQ_NO ;
        exception
            when others then
                V_ERRMESSAGE := '배서(소급)-분납계획(TBID0016) 변경이후  데이터 등록시 오류'||'('||sqlerrm||')';
                raise e_err;
        end;

    end;

    o_err_msg := 'OK';

exception
    when e_err then
        o_err_msg := V_ERRTITLE    || ' : ' ||    V_ERRMESSAGE;
    when others then
        o_err_msg := V_ERRTITLE || '    : '    || substr(sqlerrm, 1, 250);
end;
-- GENERATED BY QueryOne AT 2017-02-08 10:34:22
-- USING krma_app@10.100.10.54:8629(krmadb)

CREATE OR REPLACE-- added during DDL generation.
procedure KRMA_APP.pr_rent_c_rtn_amt( p_pln_no_gb in varchar2, p_pol_no in TBID0001.POL_NO%type, p_endor_no in TBID0001.ENDOR_NO%type, p_work_date in varchar2, p_err_msg out varchar2 ) as
    /*****************************************************************/
    /* 생성일자 : 2013.04.29                                         */
    /* 생성자   : 최재혁                                             */
    /* 업무내용 : 환입배서                                           */
    /* Parameters: P_PLN_NO_GB = '2' (배서)                          */
    /*             P_POL_NO = 증권번호                               */
    /*             P_ENDOR_NO = 배서번호                             */
    /*****************************************************************/

    V_ERRTITLE                          varchar2(50);                           --에러 TITLE
    V_ERRMESSAGE                        varchar2(300);                          --에러 메세지
    e_err                               exception;

    V_ENDOR_STATUS                      TBID0001.ENDOR_STATUS%type;             --배서상태
    V_TREATY_HQ_CD                      TBID0001.TREATY_HQ_CD%type;             --취급자본부코드
    V_TREATY_BRH_CD                     TBID0001.TREATY_BRH_CD%type;            --취급자관리점코드
    V_TREATY_CD                         TBID0001.TREATY_CD%type;                --취급자코드
    V_USER_ID                           TBID0001.USER_ID%type;                  --USER_ID
    V_APPY_FROM                         TBID0001.APPY_FROM%type;                --적용시작일
    V_BASIS_FROM                        TBID0001.BASIS_FROM%type;               --기준시작일
    V_I_KIND_CD                         TBID0001.I_KIND_CD%type;                --계약종목
    V_APPY_PREM_BEF                     TBIC0202.ENDOR_BEFORE_PREM%type;
    V_APPY_PREM_AFT                     TBIC0202.ENDOR_BEFORE_PREM%type;
    V_DIFF_AMT                          TBIC0202.PREM_DIFF_AMT%type;
    V_TOT_INSUR_AMT                     TBID0001.TOT_INSUR_AMT%type;            --총가입금액
    V_APPY_SUM_PREM                     TBID0001.APPY_SUM_PREM%type;            --적용합계보험료
    V_RIDER_INSUR_AMT                   TBID0001.RIDER_INSUR_AMT%type;          --특약가입금액
    V_RIDER_PREM                        TBID0001.RIDER_PREM%type;               --특약보험료
    V_SUM_PREM                          TBID0001.SUM_PREM%type;                 --합계보험료
    V_END_NAB_NO                        TBID0001.END_NAB_NO%type;               --최종납입회차
    V_MAX_SEQ_NO                        TBID0016.SEQ_NO%type;                   --마지막분납순
    V_ENDOR_NO_BEF                      TBID0001.ENDOR_NO%type;                 --배서전 배서번호
    V_ENDOR_NO_BEF_BEF                  TBID0001.ENDOR_NO%type;                 --배서전전 배서번호

BEGIN

    V_ERRTITLE   := '환입배서(PR_RENT_C_RTN_AMT)';
    V_ERRMESSAGE := 'START';
    p_err_msg := 'NOT_OK';

    --구분값이 배서일 때만
    IF p_pln_no_gb = '2' THEN
        begin
            select max(ENDOR_NO)
              into V_ENDOR_NO_BEF
              from TBID0001T
             where POL_NO       = p_pol_no
               and ENDOR_NO     < p_endor_no
               and WORK_DATE    = to_date(p_work_date, 'YYYYMMDD')
               and ENDOR_STATUS = '3';

            select max(ENDOR_NO)
              into V_ENDOR_NO_BEF_BEF
              from TBID0001T
             where POL_NO       = p_pol_no
               and ENDOR_NO     < V_ENDOR_NO_BEF
               and WORK_DATE    = to_date(p_work_date, 'YYYYMMDD')
               and ENDOR_STATUS = '3';
        exception when no_data_found then
            V_ERRMESSAGE := '배서-계약정보(TBID0001T) 이전 데이터를 찾을 수 없습니다(1).';
            raise e_err;
        END;

        BEGIN
            --공제일자 SELECT
            select TOT_INSUR_AMT       , APPY_SUM_PREM       , RIDER_INSUR_AMT       , RIDER_PREM
                 , SUM_PREM            , END_NAB_NO
              into V_TOT_INSUR_AMT     , V_APPY_SUM_PREM     , V_RIDER_INSUR_AMT     , V_RIDER_PREM
                 , V_SUM_PREM          , V_END_NAB_NO
              from TBID0001T
             where POL_NO    = p_pol_no
               and ENDOR_NO  = V_ENDOR_NO_BEF_BEF
               and WORK_DATE = to_date(p_work_date, 'YYYYMMDD');

        exception when no_data_found then
            V_ERRMESSAGE := '배서-계약정보(TBID0001T) 이전 데이터를 찾을 수 없습니다(2).';
            raise e_err;
        END;

        BEGIN
            --배서 상태 확인
            select ENDOR_STATUS   , TREATY_HQ_CD           , TREATY_BRH_CD          , TREATY_CD
                 , USER_ID        , to_date(APPY_FROM)     , to_date(BASIS_FROM)    , I_KIND_CD
              into V_ENDOR_STATUS , V_TREATY_HQ_CD         , V_TREATY_BRH_CD        , V_TREATY_CD
                 , V_USER_ID      , V_APPY_FROM            , V_BASIS_FROM           , V_I_KIND_CD
              from TBID0001T
             where POL_NO    = p_pol_no
               and ENDOR_NO  = p_endor_no
               and WORK_DATE = to_date(p_work_date, 'YYYYMMDD');

        exception when no_data_found then
            V_ERRMESSAGE := '배서-계약정보(TBID0001T) 데이터를 찾을 수 없습니다.';
            raise e_err;
        END;

        --배서상태가 설계인 데이터만 환입
        IF V_ENDOR_STATUS = '1' THEN
            --TBID0013T 테이블 데이터 삭제 - 화면에서 등록된 데이터 삭제하고 이전 배서 데이터로 밀어넣기 위해서
            V_ERRMESSAGE := '배서-담보별보험료(TBID0013T) 데이터 삭제';
            BEGIN
                delete from TBID0013T
                 where POL_NO    = p_pol_no
                   and ENDOR_NO  = p_endor_no
                   and WORK_DATE = to_date(p_work_date, 'YYYYMMDD');

            exception when others then
                V_ERRMESSAGE := '배서-담보별보험료(TBID0013T) 데이터 삭제 오류';
                raise e_err;
            END;

            --TBID0013T 테이블 데이터 생성 - 이전 배서 데이터 그대로 밀어넣는다.
     --2017.02.08 GRP_DMBO_RATE 담보별 단체특성율 컬럼 추가
            V_ERRMESSAGE := '배서-담보별보험료(TBID0013T) 데이터 생성';

            BEGIN
                insert into TBID0013T
                     ( POL_NO          , ENDOR_NO          , BASIC_SCONT_GB        , DMBO_CD           , APPY_FROM
                     , ACDNT_RESP_WANT , MAN_RESP_WANT     , INSUR_AMT             , INSUR_AMT_GB      , DUCT_AMT_GB
                     , BASIC_PREM      , DMBO_START_DATE   , DMBO_END_DATE         , APPY_PREM         , BASIC_RANGE_R
                     , CANCEL_CALC_GB  , APPY_TO           , BASIS_FROM            , BASIS_TO          , IT_PROCESSING
                     , USER_ID         , BASIC_YEAR_PREM   , APPY_YEAR_PREM        , WORK_DATE  ,GRP_DMBO_RATE)
                select POL_NO          , P_ENDOR_NO        , BASIC_SCONT_GB,         DMBO_CD,            APPY_FROM
                     , ACDNT_RESP_WANT , MAN_RESP_WANT     , INSUR_AMT             , INSUR_AMT_GB      , DUCT_AMT_GB
                     , BASIC_PREM      , DMBO_START_DATE   , DMBO_END_DATE         , APPY_PREM         , BASIC_RANGE_R
                     , CANCEL_CALC_GB  , APPY_TO           , BASIS_FROM            , BASIS_TO          , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
                     , V_USER_ID       , BASIC_YEAR_PREM   , APPY_YEAR_PREM        , to_date(p_work_date, 'YYYYMMDD') , GRP_DMBO_RATE
                  from TBID0013T
                 where POL_NO    = p_pol_no
                   and ENDOR_NO  = V_ENDOR_NO_BEF_BEF
                   and WORK_DATE = to_date(p_work_date, 'YYYYMMDD');

            exception when others then
                V_ERRMESSAGE := '배서-담보별보험료(TBID0013T) 데이터 생성시 오류';
                raise e_err;
            END;

            --TBID0014T 테이블 데이터 생성 - 이전 배서 데이터 그대로 밀어넣는다.
            V_ERRMESSAGE := '배서-담보기간별보험료(TBID0014T) 데이터 생성';

            BEGIN
                insert into TBID0014T
                     ( POL_NO          , ENDOR_NO          , DMBO_CD           , CALC_FYMD
                     , CALC_EYMD       , BASIC_PREM        , APPY_PREM         , APPY_FROM
                     , APPY_TO         , BASIS_FROM        , BASIS_TO          , IT_PROCESSING
                     , USER_ID         , BASIC_YEAR_PREM   , APPY_YEAR_PREM    , WORK_DATE )
                select POL_NO          , P_ENDOR_NO        , DMBO_CD           , CALC_FYMD
                     , CALC_EYMD       , BASIC_PREM        , APPY_PREM         , APPY_FROM
                     , APPY_TO         , BASIS_FROM        , BASIS_TO          , to_char(sysdate, 'YYYYMMDDHH24MISS')
                     , V_USER_ID       , BASIC_YEAR_PREM   , APPY_YEAR_PREM    , to_date(p_work_date, 'YYYYMMDD')
                  from TBID0014T
                 where POL_NO   = p_pol_no
                   and ENDOR_NO = V_ENDOR_NO_BEF_BEF
                   and WORK_DATE = to_date(p_work_date, 'YYYYMMDD');

            exception when others then
                V_ERRMESSAGE := '배서-담보기간별보험료(TBID0014T) 데이터 생성시 오류';
                raise e_err;
            END;


            --마지막 분납순번을 구한다.
            V_ERRMESSAGE := '배서-분납회차 순번(TBID0016T) 조회';

            BEGIN
                select MAX(SEQ_NO)
                  into V_MAX_SEQ_NO
                  from TBID0016T
                 where POL_NO    = p_pol_no
                   and ENDOR_NO  = V_ENDOR_NO_BEF
                   and WORK_DATE = to_date(p_work_date, 'YYYYMMDD');
            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '배서-분납회차 순번(TBID0016T) 조회 오류';
                RAISE e_err;
            END;

            --TBID0015 테이블 데이터 생성 - 취소(해지) 배서 이전 데이터 그대로 밀어넣는다.
            V_ERRMESSAGE := '배서-담보별분납계획(TBID0015T) 데이터 생성';

            BEGIN
                insert into TBID0015T
                     ( POL_NO          , ENDOR_NO          , BNP_NO        , SEQ_NO
                     , DMBO_CD         , BASIC_PREM        , DMBO_PREM     , ISTAR_VALID_DATE
                     , IEND_VALID_DATE , OLD_ENDOR_NO      , APPY_FROM     , APPY_TO
                     , BASIS_FROM      , BASIS_TO          , USER_ID       , WORK_DATE )
                select POL_NO          , P_ENDOR_NO        , BNP_NO        , SEQ_NO
                     , DMBO_CD         , BASIC_PREM        , DMBO_PREM     , ISTAR_VALID_DATE
                     , IEND_VALID_DATE , OLD_ENDOR_NO      , APPY_FROM     , APPY_TO
                     , BASIS_FROM      , BASIS_TO          , USER_ID       , to_date(p_work_date, 'YYYYMMDD')
                  from TBID0015T
                 where POL_NO    = p_pol_no
                   and ENDOR_NO  = V_ENDOR_NO_BEF_BEF
                   and WORK_DATE = to_date(p_work_date, 'YYYYMMDD');

            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '배서-담보별분납계획(TBID0015T) 데이터 생성 오류';
                RAISE e_err;
            END;

            --TBID0015T 테이블 취소,해지 환불데이터 생성
            --이전 배서번호와 그 이전 배서번호를 비교하여 이전 배서번호에 생긴 데이터만 그대로 생성한다.
            V_ERRMESSAGE := '배서-담보별분납계획(TBID0015T) 환불데이터 생성(1)';

            BEGIN
                insert into TBID0015T
                     ( POL_NO              , ENDOR_NO          , BNP_NO             , SEQ_NO
                     , DMBO_CD             , BASIC_PREM        , DMBO_PREM          , ISTAR_VALID_DATE
                     , IEND_VALID_DATE     , OLD_ENDOR_NO      , APPY_FROM          , APPY_TO
                     , BASIS_FROM          , BASIS_TO          , USER_ID            , WORK_DATE )
                select POL_NO              , p_endor_no        , BNP_NO             , SEQ_NO
                     , DMBO_CD             , BASIC_PREM        , DMBO_PREM          , ISTAR_VALID_DATE
                     , IEND_VALID_DATE     , OLD_ENDOR_NO      , APPY_FROM          , APPY_TO
                     , BASIS_FROM          , BASIS_TO          , USER_ID            , to_date(p_work_date, 'YYYYMMDD')
                  from TBID0015T
                 where ( POL_NO, BNP_NO, SEQ_NO, DMBO_CD, WORK_DATE ) in (select POL_NO, BNP_NO, SEQ_NO, DMBO_CD, WORK_DATE
                                                                            from TBID0015T
                                                                           where POL_NO    = p_pol_no
                                                                             and ENDOR_NO  = V_ENDOR_NO_BEF
                                                                             and WORK_DATE = to_date(p_work_date, 'YYYYMMDD')
                                                                           minus
                                                                          select POL_NO, BNP_NO, SEQ_NO, DMBO_CD, WORK_DATE
                                                                            from TBID0015T
                                                                           where POL_NO    = p_pol_no
                                                                             and ENDOR_NO  = V_ENDOR_NO_BEF_BEF
                                                                             and WORK_DATE = to_date(p_work_date, 'YYYYMMDD') )
                   and ENDOR_NO  = V_ENDOR_NO_BEF
                   and WORK_DATE = to_date(p_work_date, 'YYYYMMDD');

            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '배서-담보별분납계획(TBID0015T) 환불데이터 생성 오류(1)';
                RAISE e_err;
            END;

            --TBID0015T 테이블 환불데이터 생성 - 분납계획에서 수납된 데이터만 확인해서 마지막 납입회차에  처리한다.
            --이전 배서번호와 그 이전 배서번호를 비교하여 이전 배서번호에 생긴 데이터만 그대로 역부호 처리하여 생성한다.
            --생성시 max(seq_no)는 별도로 뽑아서 처리한다.
            V_ERRMESSAGE := '배서-담보별분납계획(TBID0015T) 환불데이터 생성(2)';

            BEGIN
                insert into TBID0015T
                     ( POL_NO              , ENDOR_NO          , BNP_NO             , SEQ_NO
                     , DMBO_CD             , BASIC_PREM        , DMBO_PREM          , ISTAR_VALID_DATE
                     , IEND_VALID_DATE     , OLD_ENDOR_NO      , APPY_FROM          , APPY_TO
                     , BASIS_FROM          , BASIS_TO          , USER_ID            , WORK_DATE )
                select POL_NO              , p_endor_no        , BNP_NO             , V_MAX_SEQ_NO + 1
                     , DMBO_CD             , BASIC_PREM * -1   , DMBO_PREM * -1     , ISTAR_VALID_DATE
                     , IEND_VALID_DATE     , OLD_ENDOR_NO      , APPY_FROM          , APPY_TO
                     , BASIS_FROM          , BASIS_TO          , V_USER_ID          , to_date(p_work_date, 'YYYYMMDD')
                  from TBID0015T
                 where ( POL_NO, BNP_NO, SEQ_NO, DMBO_CD, WORK_DATE ) in (select POL_NO, BNP_NO, SEQ_NO, DMBO_CD, WORK_DATE
                                                                            from TBID0015T
                                                                           where POL_NO    = p_pol_no
                                                                             and ENDOR_NO  = V_ENDOR_NO_BEF
                                                                             and WORK_DATE = to_date(p_work_date, 'YYYYMMDD')
                                                                           minus
                                                                          select POL_NO, BNP_NO, SEQ_NO, DMBO_CD, WORK_DATE
                                                                            from TBID0015T
                                                                           where POL_NO    = p_pol_no
                                                                             and ENDOR_NO  = V_ENDOR_NO_BEF_BEF
                                                                             and WORK_DATE = to_date(p_work_date, 'YYYYMMDD') )
                   and ENDOR_NO  = V_ENDOR_NO_BEF
                   and WORK_DATE = to_date(p_work_date, 'YYYYMMDD');
            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '배서-담보별분납계획(TBID0015T) 환불데이터 생성 오류(2)';
                RAISE e_err;
            END;

            --TBID0016 테이블 데이터 생성 - 이전 배서 데이터 그대로 밀어넣는다.
            V_ERRMESSAGE := '배서-분납계획(TBID0016T) 데이터 생성';
            --변경이력
            --2013.04.10 : 분납계획 INSERT 시 미처리 데이터는 0으로 분납보험료 세팅한다.

            BEGIN
                insert into TBID0016T
                     ( POL_NO          , ENDOR_NO          , BNP_NO            , SEQ_NO
                     , I_KIND_CD       , RCPT_CD           , NA_DATE           , ACCOUNT_MTH
                     , ACCOUNT_ID      , MANG_NO           , BNP_GUIDE_DATE    , BNP_RATION
                     , BNP_DATE        , BNP_PREM          , BNP_DEDUCT_AMT    , PROC_STATUS
                     , RCPT_GB         , RCPT_NO           , PRINT_CNT         , TREATY_HQ_CD
                     , TREATY_BRH_CD   , TREATY_CD         , APPY_FROM         , APPY_TO
                     , BASIS_FROM      , BASIS_TO          , IT_PROCESSING     , USER_ID
                     , WORK_DATE )
                select POL_NO          , P_ENDOR_NO        , BNP_NO            , SEQ_NO
                     , I_KIND_CD       , RCPT_CD           , NA_DATE           , ACCOUNT_MTH
                     , ACCOUNT_ID      , MANG_NO           , BNP_GUIDE_DATE    , BNP_RATION
                     , BNP_DATE        , BNP_PREM          , BNP_DEDUCT_AMT    , PROC_STATUS
                     , RCPT_GB         , RCPT_NO           , PRINT_CNT         , TREATY_HQ_CD
                     , TREATY_BRH_CD   , TREATY_CD         , APPY_FROM         , APPY_TO
                     , BASIS_FROM      , BASIS_TO          , IT_PROCESSING     , USER_ID
                     , to_date(p_work_date, 'YYYYMMDD')
                  from TBID0016T
                 where POL_NO    = p_pol_no
                   and ENDOR_NO  = V_ENDOR_NO_BEF_BEF
                   and WORK_DATE = to_date(p_work_date, 'YYYYMMDD');

            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '배서-분납계획(TBID0016T) 데이터 생성 오류';
                RAISE e_err;
            END;

            --TBID0016T 테이블 환불데이터 생성 - 담보별분납계획에서 환불처리할 데이터만 등록한다.
            V_ERRMESSAGE := '배서-분납계획(TBID0016T) 환불데이터 생성(1)';

            BEGIN
                insert into TBID0016T
                     ( POL_NO          , ENDOR_NO          , BNP_NO            , SEQ_NO
                     , I_KIND_CD       , RCPT_CD           , NA_DATE           , ACCOUNT_MTH
                     , ACCOUNT_ID      , MANG_NO           , BNP_GUIDE_DATE    , BNP_RATION
                     , BNP_DATE        , BNP_PREM          , BNP_DEDUCT_AMT    , PROC_STATUS
                     , RCPT_GB         , RCPT_NO           , PRINT_CNT         , TREATY_HQ_CD
                     , TREATY_BRH_CD   , TREATY_CD         , APPY_FROM         , APPY_TO
                     , BASIS_FROM      , BASIS_TO          , IT_PROCESSING     , USER_ID
                     , WORK_DATE )
                select POL_NO          , p_endor_no        , BNP_NO            , SEQ_NO
                     , I_KIND_CD       , RCPT_CD           , NA_DATE           , ACCOUNT_MTH
                     , ACCOUNT_ID      , MANG_NO           , BNP_GUIDE_DATE    , BNP_RATION
                     , BNP_DATE        , BNP_PREM          , BNP_DEDUCT_AMT    , PROC_STATUS
                     , RCPT_GB         , RCPT_NO           , PRINT_CNT         , TREATY_HQ_CD
                     , TREATY_BRH_CD   , TREATY_CD         , APPY_FROM         , APPY_TO
                     , BASIS_FROM      , BASIS_TO          , IT_PROCESSING     , USER_ID
                     , to_date(p_work_date, 'YYYYMMDD')
                  from TBID0016T
                 where ( POL_NO, BNP_NO, SEQ_NO, WORK_DATE ) in ( select POL_NO, BNP_NO, SEQ_NO, WORK_DATE
                                                                    from TBID0016T
                                                                   where POL_NO    = p_pol_no
                                                                     and ENDOR_NO  = V_ENDOR_NO_BEF
                                                                     and WORK_DATE = to_date(p_work_date, 'YYYYMMDD')
                                                                   minus
                                                                  select POL_NO, BNP_NO, SEQ_NO, WORK_DATE
                                                                    from TBID0016T
                                                                   where POL_NO    = p_pol_no
                                                                     and ENDOR_NO  = V_ENDOR_NO_BEF_BEF
                                                                     and WORK_DATE = to_date(p_work_date, 'YYYYMMDD') )
                   and ENDOR_NO  = V_ENDOR_NO_BEF
                   and WORK_DATE = to_date(p_work_date, 'YYYYMMDD');
            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '배서-분납계획(TBID0016T) 환불데이터 생성 오류(1)';
                RAISE e_err;
            END;


            --TBID0016 테이블 환불데이터 생성 - 담보별분납계획에서 환불처리할 데이터만 등록한다.
            V_ERRMESSAGE := '배서-분납계획(TBID0016T) 환불데이터 생성(2)';

            BEGIN
                insert into TBID0016T
                     ( POL_NO          , ENDOR_NO       , BNP_NO           , SEQ_NO
                     , I_KIND_CD       , RCPT_CD        , BNP_DATE         , BNP_PREM
                     , PROC_STATUS     , TREATY_HQ_CD   , TREATY_BRH_CD    , TREATY_CD
                     , APPY_FROM       , APPY_TO        , BASIS_FROM       , BASIS_TO
                     , USER_ID         , WORK_DATE )
                select POL_NO          , p_endor_no     , BNP_NO           , V_MAX_SEQ_NO + 1
                     , I_KIND_CD       , '5'            , V_APPY_FROM      , BNP_PREM * -1
                     , '1'             , V_TREATY_HQ_CD , V_TREATY_BRH_CD  , V_TREATY_CD
                     , APPY_FROM       , APPY_TO        , BASIS_FROM       , BASIS_TO
                     , V_USER_ID       , to_date(p_work_date, 'YYYYMMDD')
                  from TBID0016T
                 where ( POL_NO, BNP_NO, SEQ_NO, WORK_DATE ) in ( select POL_NO, BNP_NO, SEQ_NO, WORK_DATE
                                                                    from TBID0016T
                                                                   where POL_NO    = p_pol_no
                                                                     and ENDOR_NO  = V_ENDOR_NO_BEF
                                                                     and WORK_DATE = to_date(p_work_date, 'YYYYMMDD')
                                                                   minus
                                                                  select POL_NO, BNP_NO, SEQ_NO, WORK_DATE
                                                                    from TBID0016T
                                                                   where POL_NO    = p_pol_no
                                                                     and ENDOR_NO  = V_ENDOR_NO_BEF_BEF
                                                                     and WORK_DATE = to_date(p_work_date, 'YYYYMMDD') )
                   and ENDOR_NO  = V_ENDOR_NO_BEF
                   and WORK_DATE = to_date(p_work_date, 'YYYYMMDD');
            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '배서-분납계획(TBID0016T) 환불데이터 생성 오류(2)';
                RAISE e_err;
            END;

            --TBID0001 테이블 이전데이터값 그대로 넣기
            V_ERRMESSAGE := '배서-계약정보(TBID0001T) 데이터 수정';

            BEGIN
                update TBID0001T
                   set TOT_INSUR_AMT   = V_TOT_INSUR_AMT
                     , APPY_SUM_PREM   = V_APPY_SUM_PREM
                     , RIDER_INSUR_AMT = V_RIDER_INSUR_AMT
                     , RIDER_PREM      = V_RIDER_PREM
                     , SUM_PREM        = V_SUM_PREM
                 where POL_NO          = p_pol_no
                   and ENDOR_NO        = p_endor_no
                   and WORK_DATE       = to_date(p_work_date, 'YYYYMMDD');

            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '배서-계약정보(TBID0001T) 데이터 수정시 오류'||'('||sqlerrm||')';
                RAISE e_err;
            END;

            --TBIC0202 테이블 SUM데이터 UPDATE
            V_ERRMESSAGE := '계약-변경이력(TBIC0202T) 합계데이터 생성';

            BEGIN
                SELECT SUM(DECODE(ENDOR_NO, P_ENDOR_NO-1, APPY_PREM, 0)) AS APPY_PREM_BEF
                     , SUM(DECODE(ENDOR_NO, P_ENDOR_NO, APPY_PREM, 0)) AS APPY_PREM_AFT
                     , SUM(DECODE(ENDOR_NO, P_ENDOR_NO, APPY_PREM, 0)) - SUM(DECODE(ENDOR_NO, P_ENDOR_NO-1, APPY_PREM, 0)) AS DIFF_AMT
                  INTO V_APPY_PREM_BEF, V_APPY_PREM_AFT, V_DIFF_AMT
                  FROM TBID0013T
                 WHERE POL_NO = p_pol_no
                   AND ENDOR_NO BETWEEN V_ENDOR_NO_BEF AND p_endor_no
                   and WORK_DATE = to_date(p_work_date, 'YYYYMMDD');

                UPDATE TBIC0202T
                   SET ENDOR_BEFORE_PREM = nvl(V_APPY_PREM_BEF, 0)
                     , ENDOR_AFTER_PREM  = nvl(V_APPY_PREM_AFT, 0)
                     , PREM_DIFF_AMT     = nvl(V_DIFF_AMT,0)
                     , GET_GB            = '5'
                 WHERE POL_NO    = p_pol_no
                   AND ENDOR_NO  = p_endor_no
                   and WORK_DATE = to_date(p_work_date, 'YYYYMMDD');
            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '계약-변경이력(TBIC0202T) 합계데이터 생성 오류';
                RAISE e_err;
            END;

        END IF;

    END IF;

    p_err_msg := 'OK';

EXCEPTION
    WHEN e_err THEN
        ROLLBACK;
        p_err_msg := V_ERRTITLE    || ' : ' ||    V_ERRMESSAGE;
    WHEN OTHERS THEN
        ROLLBACK;
        p_err_msg := V_ERRTITLE || '    : '    || SUBSTR(SQLERRM, 1, 250);
END;
CREATE -- added during DDL generation.
procedure PR_RENT_C_TERM_CHG( p_pln_no_gb in varchar2, p_pol_no in TBID0001.POL_NO%type, p_endor_no in TBID0001.ENDOR_NO%type, p_work_date in varchar2, p_err_msg out varchar2 ) as
    /*****************************************************************/
    /* 생성일자 : 2013.06.27                                         */
    /* 생성자   : 은현민                                             */
    /* 업무내용 : 소급배서 공제기간 수정                             */
    /* Parameters: P_PLN_NO_GB = '2' (배서)                          */
    /*             P_POL_NO = 증권번호                               */
    /*             P_ENDOR_NO = 배서번호                             */
    /*****************************************************************/

    V_ERRTITLE                          varchar2(50);                           --에러 TITLE
    V_ERRMESSAGE                        varchar2(300);                          --에러 메세지
    e_err                               exception;

    V_APPY_FROM                         TBID0001.APPY_FROM%type;                --적용 시작일자
    V_APPY_TO                           TBID0001.APPY_TO%type;                  --적용 종료일자
    V_BASIS_FROM                        TBID0001.BASIS_FROM%type;               --기준 시작일자
    V_BASIS_TO                          TBID0001.BASIS_TO%type;                 --기준 종료일자
    V_ISTAR_CONT_DATE                   TBID0001.ISTAR_CONT_DATE%type;          --공제시작시기
    V_USER_ID                           TBID0001.USER_ID%type;                  --공제시작시기
    V_TREATY_HQ_CD                      TBID0001.TREATY_HQ_CD%type;             --취급자본부코드
    V_TREATY_BRH_CD                     TBID0001.TREATY_BRH_CD%type;            --취급자대리점코드
    V_TREATY_CD                         TBID0001.TREATY_CD%type;                --취급자
    V_TOT_INSUR_AMT                     TBID0001.TOT_INSUR_AMT%type;            --총가입금액
    V_APPY_SUM_PREM                     TBID0001.APPY_SUM_PREM%type;            --적용합계보험료
    V_RIDER_INSUR_AMT                   TBID0001.RIDER_INSUR_AMT%type;          --특약가입금액
    V_RIDER_PREM                        TBID0001.RIDER_PREM%type;               --특약보험료
    V_SUM_PREM                          TBID0001.SUM_PREM%type;                 --합계보험료

    V_PRE_ENDOR_NO                      TBID0001.ENDOR_NO%type;                 --이전배서번호

    V_CHG_TERM                          number;
    V_DIFF                              number;
    V_APPY_PREM_BEF                     number;


BEGIN

    p_err_msg := 'NOT_OK';
    V_ERRTITLE := 'START';

    --구분값이 배서일 때만
    IF p_pln_no_gb = '2' AND p_endor_no = 1 THEN

        --이전배서번호 SET
        V_PRE_ENDOR_NO := p_endor_no - 1;

        V_ERRTITLE   := '공제기간수정(PR_RENT_C_TERM_CHG)';

        BEGIN
            --공제일자 SELECT
            select TOT_INSUR_AMT,                   APPY_SUM_PREM,               RIDER_INSUR_AMT,        RIDER_PREM,          SUM_PREM
              into V_TOT_INSUR_AMT,                 V_APPY_SUM_PREM,             V_RIDER_INSUR_AMT,      V_RIDER_PREM,        V_SUM_PREM
              from TBID0001T
             where POL_NO    = p_pol_no
               and ENDOR_NO  = V_PRE_ENDOR_NO
               and WORK_DATE = to_date(p_work_date, 'YYYYMMDD');

        exception when no_data_found then
            V_ERRMESSAGE := '배서-계약정보(TBID0001T) 이전 데이터를 찾을 수 없습니다.'||'('||sqlerrm||')';
            raise e_err;
        END;

        BEGIN
            --공제일자 SELECT
            select to_date(ISTAR_CONT_DATE),        to_date(APPY_FROM),          to_date(APPY_TO),       USER_ID
                 , TREATY_HQ_CD,                    TREATY_BRH_CD,               TREATY_CD,              to_date(APPY_FROM) - to_date(ISTAR_CONT_DATE)
              into V_ISTAR_CONT_DATE,               V_APPY_FROM,                 V_APPY_TO,              V_USER_ID
                 , V_TREATY_HQ_CD,                  V_TREATY_BRH_CD,             V_TREATY_CD,            V_CHG_TERM
              from TBID0001T
             where POL_NO    = P_POL_NO
               and ENDOR_NO  = P_ENDOR_NO
               and WORK_DATE = to_date(p_work_date, 'YYYYMMDD');

        exception when no_data_found then
            V_ERRMESSAGE := '배서-계약정보(TBID0001T) 데이터를 찾을 수 없습니다.'||'('||sqlerrm||')';
            raise e_err;
        END;

        BEGIN
            update TBID0011T
               set APPY_TO   = APPY_TO  + V_CHG_TERM
                 , BASIS_TO  = BASIS_TO + V_CHG_TERM
             where POL_NO    = p_pol_no
               and ENDOR_NO  = p_endor_no
               and WORK_DATE = to_date(p_work_date, 'YYYYMMDD');

        exception when others then
            V_ERRMESSAGE := '배서-자동차추가정보(TBID0011T) 데이터 수정시 오류'||'('||sqlerrm||')';
            raise e_err;
        END;

        BEGIN
            update TBID0012T
               set APPY_TO   = APPY_TO  + V_CHG_TERM
                 , BASIS_TO  = BASIS_TO + V_CHG_TERM
             where POL_NO    = p_pol_no
               and ENDOR_NO  = p_endor_no
               and WORK_DATE = to_date(p_work_date, 'YYYYMMDD');

        exception when others then
            V_ERRMESSAGE := '배서-계약 특약특별요율(TBID0012T) 데이터 수정시 오류'||'('||sqlerrm||')';
            raise e_err;
        END;

        --배서프로시저를 돌리고 나서 공제기간 변경이 되도록 변경_20130429최재혁
        BEGIN
            update TBID0013T
               set APPY_FROM       = APPY_FROM + V_CHG_TERM
                 , DMBO_START_DATE = DMBO_START_DATE + V_CHG_TERM
                 , DMBO_END_DATE   = DMBO_END_DATE + V_CHG_TERM
                 , APPY_TO         = APPY_TO + V_CHG_TERM
                 , BASIS_FROM      = BASIS_FROM + V_CHG_TERM
                 , BASIS_TO        = BASIS_TO + V_CHG_TERM
             where POL_NO          = p_pol_no
               and ENDOR_NO        = p_endor_no
               and WORK_DATE       = to_date(p_work_date, 'YYYYMMDD');
        exception when others then
            V_ERRMESSAGE := '배서-계약 담보별분담금(TBID0013T) 데이터 수정시 오류'||'('||sqlerrm||')';
            raise e_err;
        END;

       --배서프로시저를 돌리고 나서 공제기간 변경이 되도록 변경_20130429최재혁
        BEGIN
            update TBID0014T
               set CALC_FYMD       = CALC_FYMD + V_CHG_TERM
                 , CALC_EYMD       = CALC_EYMD + V_CHG_TERM
                 , APPY_FROM       = APPY_FROM + V_CHG_TERM
                 , APPY_TO         = APPY_TO + V_CHG_TERM
                 , BASIS_FROM      = BASIS_FROM + V_CHG_TERM
                 , BASIS_TO        = BASIS_TO + V_CHG_TERM
                 , USER_ID         = V_USER_ID
             where POL_NO          = p_pol_no
               and ENDOR_NO        = p_endor_no
               and WORK_DATE       = to_date(p_work_date, 'YYYYMMDD');
        exception when others then
            V_ERRMESSAGE := '배서-계약 담보기간별분담금(TBID0014T) 데이터 생성시 오류'||'('||sqlerrm||')';
            raise e_err;
        END;

       --배서프로시저를 돌리고 나서 공제기간 변경이 되도록 변경_20130429최재혁
        BEGIN
            update TBID0015T
               set ISTAR_VALID_DATE  = ISTAR_VALID_DATE + V_CHG_TERM
                 , IEND_VALID_DATE   = IEND_VALID_DATE + V_CHG_TERM
                 , APPY_FROM         = APPY_FROM + V_CHG_TERM
                 , APPY_TO           = APPY_TO + V_CHG_TERM
                 , BASIS_FROM        = BASIS_FROM + V_CHG_TERM
                 , BASIS_TO          = BASIS_TO + V_CHG_TERM
                 , USER_ID           = V_USER_ID
             where POL_NO            = p_pol_no
               and ENDOR_NO          = p_endor_no
               and WORK_DATE         = to_date(p_work_date, 'YYYYMMDD');
        exception when others then
            V_ERRMESSAGE := '배서-계약 담보별분납계획(TBID0015T) 데이터 생성시 오류'||'('||sqlerrm||')';
            raise e_err;
        END;

       --배서프로시저를 돌리고 나서 공제기간 변경이 되도록 변경_20130429최재혁
        BEGIN
            --계약 담보별분담금 공제기간, 적용일자, 기준일자 변경
            update TBID0016T
               set BNP_GUIDE_DATE  = BNP_GUIDE_DATE + V_CHG_TERM
                 , BNP_DATE        = BNP_DATE + V_CHG_TERM
                 , APPY_FROM       = APPY_FROM + V_CHG_TERM
                 , APPY_TO         = APPY_TO + V_CHG_TERM
                 , BASIS_FROM      = BASIS_FROM + V_CHG_TERM
                 , BASIS_TO        = BASIS_TO + V_CHG_TERM
                 , TREATY_HQ_CD    = V_TREATY_HQ_CD
                 , TREATY_BRH_CD   = V_TREATY_BRH_CD
                 , TREATY_CD       = V_TREATY_CD
                 , USER_ID         = V_USER_ID
             where POL_NO          = p_pol_no
               and ENDOR_NO        = p_endor_no
               and WORK_DATE       = to_date(p_work_date, 'YYYYMMDD');
        exception when others then
            V_ERRMESSAGE := '배서-계약 분납계획(TBID0016T) 데이터 생성시 오류'||'('||sqlerrm||')';
            raise e_err;
        END;


        BEGIN
            update TBID0103T
               set APPY_TO   = APPY_TO  + V_CHG_TERM
                 , BASIS_TO  = BASIS_TO + V_CHG_TERM
             where POL_NO    = p_pol_no
               and ENDOR_NO  = p_endor_no
               and WORK_DATE = to_date(p_work_date, 'YYYYMMDD');

        exception when others then
            V_ERRMESSAGE := '배서-질권정보(TBID0103T) 데이터 수정시 오류'||'('||sqlerrm||')';
            raise e_err;
        END;

        BEGIN
            update TBID0104T
               set APPY_TO   = APPY_TO  + V_CHG_TERM
                 , BASIS_TO  = BASIS_TO + V_CHG_TERM
             where POL_NO    = p_pol_no
               and ENDOR_NO  = p_endor_no
               and WORK_DATE = to_date(p_work_date, 'YYYYMMDD');

        exception when others then
            V_ERRMESSAGE := '배서-운전자정보(TBID0104T) 데이터 수정시 오류'||'('||sqlerrm||')';
            raise e_err;
        END;

        BEGIN
            update TBID0001T
               set ISTAR_CONT_DATE = ISTAR_CONT_DATE + V_CHG_TERM
                 , IEND_CONT_DATE  = IEND_CONT_DATE + V_CHG_TERM
                 , END_CHANGE_DATE = to_date(SYSDATE)
                 , APPY_TO         = APPY_TO  + V_CHG_TERM
                 , BASIS_TO        = BASIS_TO + V_CHG_TERM
                 , TOT_INSUR_AMT   = V_TOT_INSUR_AMT
                 , APPY_SUM_PREM   = V_APPY_SUM_PREM
                 , RIDER_INSUR_AMT = V_RIDER_INSUR_AMT
                 , RIDER_PREM      = V_RIDER_PREM
                 , SUM_PREM        = V_SUM_PREM
             where POL_NO          = p_pol_no
               and ENDOR_NO        = p_endor_no
               and WORK_DATE       = to_date(p_work_date, 'YYYYMMDD');

        exception when others then
            V_ERRMESSAGE := '배서-계약정보(TBID0001T) 데이터 수정시 오류'||'('||sqlerrm||')';
            raise e_err;
        END;

        BEGIN
            update TBID0001T
               set CONT_STATE  = '08'
             where POL_NO      = p_pol_no
               and ENDOR_NO    = V_PRE_ENDOR_NO
               and WORK_DATE   = to_date(p_work_date, 'YYYYMMDD');

        exception when others then
            V_ERRMESSAGE := '배서-계약정보(TBID0001T) 이전 데이터 수정시 오류'||'('||sqlerrm||')';
            raise e_err;
        END;

        --TBIC0202 테이블 SUM데이터 UPDATE
        V_ERRMESSAGE := '계약-변경이력(TBIC0202T) 합계데이터 생성';

        BEGIN
            SELECT SUM(DECODE(ENDOR_NO, P_ENDOR_NO-1, APPY_PREM, 0)) AS APPY_PREM_BEF
              INTO V_APPY_PREM_BEF
              FROM TBID0013T
             WHERE POL_NO = p_pol_no
               AND ENDOR_NO BETWEEN p_endor_no - 1 AND p_endor_no
               and WORK_DATE = to_date(p_work_date, 'YYYYMMDD');

            UPDATE TBIC0202T
               SET APPY_TO           = APPY_TO + V_CHG_TERM
                 , BASIS_TO          = BASIS_TO + V_CHG_TERM
                 , CALC_TO           = CALC_TO + V_CHG_TERM
                 , ENDOR_BEFORE_PREM = NVL(V_APPY_PREM_BEF, 0)
                 , ENDOR_AFTER_PREM  = NVL(V_APPY_PREM_BEF, 0)
                 , PREM_DIFF_AMT     = 0
                 , GET_GB            = '9'
             WHERE POL_NO    = p_pol_no
               AND ENDOR_NO  = p_endor_no
               and WORK_DATE = to_date(p_work_date, 'YYYYMMDD');
        exception when others then
            V_ERRMESSAGE := '계약-변경이력(TBIC0202T) 합계데이터 생성 오류';
            raise e_err;
        END;

        p_err_msg := 'OK';

    END IF;

exception
    when e_err then
        p_err_msg := V_ERRTITLE    || ' : ' ||    V_ERRMESSAGE;
    when others then
        p_err_msg := V_ERRTITLE || '    : '    || substr(sqlerrm, 1, 250);
END;
CREATE -- added during DDL generation.
PROCEDURE PR_RENT_D_BUNAP_RATE( i_enter_no             varchar2
                                                         , i_dmbo_cd              varchar2
                                                         , i_na_mth               varchar2
                                                         , i_spcl_agre_gb         varchar2
                                                         , i_dmbo_basic_prem      number
                                                         , i_dmbo_appy_prem       number
                                                         , i_bnp_cnt              number
                                                         , i_istar_cont_date      date
                                                         , i_seq_no               number
                                                         , i_i_kind_cd            varchar2
                                                         , i_iend_cont_date       date
                                                         , i_basic_year_prem      number
                                                         , i_appy_year_prem       number) as
/************************************************************************************/
/* StoredProcedure 명  : 담보기간별,담보별 분담계획 Insert  (일일자차)              */
/* Parameter           : [ In] i_enter_no           가입설계번호                    */
/*                       [ In] i_dmbo_cd            담보코드                        */
/*                       [ In] i_na_mth             납입방법 1:일시납               */
/*                                                           2:비연속분납           */
/*                                                           3:연속분납             */
/*                       [ In] i_spcl_agre_gb       특약코드('0')                   */
/*                       [ In] i_dmbo_basic_prem 담보 기본보험료(분담금)            */
/*                       [ In] i_dmbo_appy_prem  담보 적용보험료(분담금)            */
/*                       [ In] i_bnp_cnt            분할방법(2~6회)                 */
/*                       [ In] i_istar_cont_date    적용시작일                      */
/*                       [ In] i_seq_no             0                               */
/*                       [ In] i_i_kind_cd          보험(공제)종목                  */
/*                       [ In] i_iend_cont_date     적용종료일                      */
/*                       [ In] i_basic_year_prem    년간기본보험료                  */
/*                       [ In] i_appy_year_prem     년간적용보험료                  */
/* Description  :                                                                   */
/*  3회연속분납의 기준분담금이(i_dmbo_basic_prem) 가 50000원인 경우분담금 계산      */
/*                                                                                  */
/*          분납률(DVDPAY_RATE)                                                     */
/*     1회차           33.4                                                         */
/*     2회차           33.3                                                         */
/*     3회차           33.3                                                         */
/*                                                                                  */
/* 1. 1회차 이후의 분납금을 SUM 한다                                                */
/*   - nvl(sum(round(i_dmbo_basic_prem * (DVDPAY_RATE / 100),-1)),0)                */
/* 2. 1회차 분납금 계산                                                             */
/*   - i_dmbo_basic_prem -  V_SUM_BASIC_PREM (1회차이후 분납금 Sum)                 */
/* 3. 2회차 이후의 분납금 계산                                                      */
/*   - round(i_dmbo_basic_prem * (DVDPAY_RATE / 100),-1)                            */
/************************************************************************************/
V_BASIC_PREM            TBIB0015.BASIC_PREM%type;
V_DMBO_PREM             TBIB0015.DMBO_PREM%type;
V_SUM_BASIC_PREM        number :=0;
V_SUM_APPY_PREM         number :=0;

BEGIN
--     delete from tbib0015 where ent_dgn_no = i_enter_no;

    /***************************************************************************/
    /* 담보코드 21(긴급출동),22(휴업손해),23(분담금할증한정)은 1회에 모두 납부 */
    /***************************************************************************/
    if    i_dmbo_cd not in ('21','22','23')  then
          /******************************************/
          /*****1회차 이후의 분납금 Sum을 한다********/
          /******************************************/
          select nvl(sum(round(i_dmbo_basic_prem * (DVDPAY_RATE / 100),-1)),0)
               , nvl(sum(round(i_dmbo_appy_prem  * (DVDPAY_RATE / 100),-1)),0)
            into V_SUM_BASIC_PREM
               , V_SUM_APPY_PREM
            from TBIB0205 A1
           where BUNAP_GB     = to_char(to_number(i_na_mth))
             and DVDPAY_GB    = to_char(i_bnp_cnt)
             and I_KIND_CD    = i_i_kind_cd
             and SPCL_AGRE_GB = i_spcl_agre_gb
             and APLY_FYMD   <= to_date(i_istar_cont_date)
             and APLY_EYMD   >= to_date(i_istar_cont_date)
             and NABIB_CNT    > 1 ;

          insert into TBIB0015
                       (ENT_DGN_NO
                      , BNP_NO
                      , SEQ_NO
                      , DMBO_CD
                      , BASIC_PREM
                      , DMBO_PREM
                      , ISTAR_VALID_DATE
                      , IEND_VALID_DATE
                       )
                 select i_enter_no
                      , NABIB_CNT            -- 납입횟차
                      , i_seq_no
                      , i_dmbo_cd
                      , i_dmbo_basic_prem -  V_SUM_BASIC_PREM  as NABIB_AMT     -- 1회차 기준분담금
                      , i_dmbo_appy_prem  -  V_SUM_APPY_PREM   as NABIB_AMT1    -- 1회차 적용분담금
                      , to_date(i_istar_cont_date)
                      , to_date(i_iend_cont_date)
                  FROM  TBIB0205
                 where  BUNAP_GB     = to_char(to_number(i_na_mth))
                   and  DVDPAY_GB    = to_char(i_bnp_cnt)
                   and  I_KIND_CD    = i_i_kind_cd
                   and  SPCL_AGRE_GB = i_spcl_agre_gb
                   and  APLY_FYMD   <= to_date(i_istar_cont_date)
                   and  APLY_EYMD   >= to_date(i_istar_cont_date)
                   and  NABIB_CNT    = 1
                  UNION ALL
                 select i_enter_no
                      , NABIB_CNT            -- 납입횟차
                      , i_seq_no
                      , i_dmbo_cd
                      , round(i_dmbo_basic_prem * (DVDPAY_RATE / 100),-1)  as NABIB_AMT     -- 1회차 이후 기준분담금
                      , round(i_dmbo_appy_prem  * (DVDPAY_RATE / 100),-1)  as NABIB_AMT1    -- 1회차 이후 적용분담금
                      , to_date(i_istar_cont_date)
                      , to_date(i_iend_cont_date)
                  FROM  TBIB0205
                 where  BUNAP_GB     = to_char(to_number(i_na_mth))
                   and  DVDPAY_GB    = to_char(i_bnp_cnt)
                   and  I_KIND_CD    = i_i_kind_cd
                   and  SPCL_AGRE_GB = i_spcl_agre_gb
                   and  APLY_FYMD   <= to_date(i_istar_cont_date)
                   and  APLY_EYMD   >= to_date(i_istar_cont_date)
                   and  NABIB_CNT    > 1 ;

    else
          insert into TBIB0015
                     ( ENT_DGN_NO
                     , BNP_NO
                     , SEQ_NO
                     , DMBO_CD
                     , BASIC_PREM
                     , DMBO_PREM
                     , ISTAR_VALID_DATE
                     , IEND_VALID_DATE
                     )
                select i_enter_no
                     , 1                                 -- 납입횟차
                     , i_seq_no
                     , i_dmbo_cd
                     , i_dmbo_basic_prem
                     , i_dmbo_appy_prem
                     , to_date(i_istar_cont_date)
                     , to_date(i_iend_cont_date)
                 from  dual;
    end if;

    /***********************************************/
    /***가입설계-담보별분납계획 담보별 Sum을 구함 **/
    /***********************************************/
    BEGIN
          select sum(BASIC_PREM)
               , sum(DMBO_PREM)
            into V_BASIC_PREM
               , V_DMBO_PREM
            from TBIB0015
           where ENT_DGN_NO = i_enter_no
             and DMBO_CD    = i_dmbo_cd;
    END;

    /***********************************************/
    /***TBTB0015 보험료 Sum을 TBIB0014에 Insert **/
    /***********************************************/
    BEGIN
          insert into TBIB0014
                       ( ENT_DGN_NO
                       , DMBO_CD
                       , CALC_FYMD
                       , CALC_EYMD
                       , BASIC_PREM
                       , APPY_PREM
                       )
                  select i_enter_no
                       , i_dmbo_cd
                       , i_istar_cont_date
                       , i_iend_cont_date
                       , V_BASIC_PREM
                       , V_DMBO_PREM
                    from dual;

    /***********************************************/
    /***TBTB0015 보험료 Sum을 TBIB0013에 Update  **/
    /***********************************************/
          update TBIB0013
             set DMBO_START_DATE = i_istar_cont_date,
                 DMBO_END_DATE   = i_iend_cont_date,
                 APPY_PREM       = V_DMBO_PREM,
                 BASIC_PREM      = V_BASIC_PREM,
                 BASIC_YEAR_PREM = i_basic_year_prem,
                 APPY_YEAR_PREM  = i_appy_year_prem
           where ENT_DGN_NO      = i_enter_no
             and BASIC_SCONT_GB in ( '1', '2' )
             and DMBO_CD        = i_dmbo_cd;
    END;

    exception when others
              then dbms_output.put_line('PR_RENT_D_BUNAP_RATE Main Error: '||sqlerrm);
                    raise_application_error(-20001, 'PR_RENT_D_BUNAP_RATE Error: '||sqlerrm);
END;
CREATE -- added during DDL generation.
PROCEDURE PR_RENT_D_BUNAP_TOT_RATE( i_enter_no                varchar2
                                                             , i_i_kind_cd               varchar2
                                                             , i_na_mth                  varchar2
                                                             , i_spcl_agre_gb            varchar2
                                                             , i_bnp_cnt                 number
                                                             , i_dmbo_appy_prem_01       number
                                                             , i_istar_cont_date         date
                                                             , i_seq_no                  number ) as
/****************************************************************************************/
/* StoredProcedure 명  : 분납계획 Delete[TBIB0016]   후 Insert  (일일자차)              */
/* Parameter           : [ In] i_enter_no           가입설계번호                        */
/*                       [ In] i_i_kind_cd          보험(공제)종목                      */
/*                       [ In] i_na_mth             납입방법 1:일시납                   */
/*                                                           2:비연속분납               */
/*                                                           3:연속분납                 */
/*                       [ In] i_bnp_cnt            0                                   */
/*                       [ In] i_bnp_cnt            분할방법(2~6회)                     */
/*                       [ In] i_dmbo_appy_prem_01  담보적용보험료                      */
/*                       [ In] i_istar_cont_date    적용시작일                          */
/*                       [ In] i_seq_no             0                                   */
/* Description  :                                                                       */
/****************************************************************************************/
BEGIN
     /**********************************************************************/
     /* 답보별 분납계획(TBIB0015) Select 하여 분납계획(TBIB0016)에 Insert **/
     /**********************************************************************/
     insert into TBIB0016(ENT_DGN_NO
                         ,BNP_NO
                         ,SEQ_NO
                         ,I_KIND_CD
                         ,BNP_RATION
                         ,BNP_DATE
                         ,BNP_PREM
                        )
                   select A.ENT_DGN_NO                        /*설계번호      */
                         ,A.BNP_NO                            /*분납회차      */
                         ,A.SEQ_NO                            /*회차별순번    */
                         ,i_i_kind_cd                         /*보험(공제)종목*/
                         ,(select DVDPAY_RATE
                             from TBIB0205
                            where I_KIND_CD  = i_i_kind_cd
                              and DVDPAY_GB  = i_bnp_cnt
                              and BUNAP_GB   = i_na_mth
                              and NABIB_CNT  = A.BNP_NO
                              and APLY_FYMD   <= to_date(i_istar_cont_date)
                              and APLY_EYMD   >= to_date(i_istar_cont_date)
                          )                  as DVDPAY_RATE  /*분납비율       */
                         ,A.ISTAR_VALID_DATE                 /*분납예정일자   */
                         ,sum(DMBO_PREM)     as DMBO_PREM    /*분납보험료     */
                     from TBIB0015 A
                    where A.ENT_DGN_NO = i_enter_no
                    group by A.ENT_DGN_NO, A.BNP_NO, A.SEQ_NO, A.ISTAR_VALID_DATE ;

     exception when others then dbms_output.put_line('PR_RENT_D_BUNAP_TOT_RATE Main Error: '||sqlerrm);
                                raise_application_error(-20001, 'PR_RENT_D_BUNAP_TOT_RATE Error: '||sqlerrm);
END;
-- GENERATED BY QueryOne AT 2017-02-08 09:02:43
-- USING krma_app@10.100.10.12:8629(krmadb)

CREATE OR REPLACE-- added during DDL generation.
PROCEDURE KRMA_APP.pr_rent_d_can_amt( i_pln_no_gb in varchar2, i_pol_no in varchar2, i_endor_no in varchar2, o_err_msg out varchar2 ) as
    /*****************************************************************/
    /* 생성일자 : 2013.04.08                                         */
    /* 생성자   : 최재혁                                             */
    /* 업무내용 : 배서취소                                           */
    /* Parameters: i_pln_no_gb = '2' (배서)                          */
    /*             i_pol_no = 증권번호                               */
    /*             i_endor_no = 배서번호                             */
    /*****************************************************************/

    V_ERRTITLE                          varchar2(50);                           --에러 TITLE
    V_ERRMESSAGE                        varchar2(300);                          --에러 메세지
    e_err                               exception;

    V_ENDOR_STATUS                      TBID0001.ENDOR_STATUS%type;             --배서상태
    V_TREATY_HQ_CD                      TBID0001.TREATY_HQ_CD%type;             --취급자본부코드
    V_TREATY_BRH_CD                     TBID0001.TREATY_BRH_CD%type;            --취급자관리점코드
    V_TREATY_CD                         TBID0001.TREATY_CD%type;                --취급자코드
    V_USER_ID                           TBID0001.USER_ID%type;                  --USER_ID
    V_APPY_FROM                         TBID0001.APPY_FROM%type;                --적용시작일
    V_BASIS_FROM                        TBID0001.BASIS_FROM%type;               --기준시작일
    V_I_KIND_CD                         TBID0001.I_KIND_CD%type;                --계약종목
    V_APPY_PREM_BEF                     TBIC0202.ENDOR_BEFORE_PREM%type;
    V_DIFF_AMT                          TBIC0202.PREM_DIFF_AMT%type;
    V_TOT_INSUR_AMT                     TBID0001.TOT_INSUR_AMT%type;            --총가입금액
    V_APPY_SUM_PREM                     TBID0001.APPY_SUM_PREM%type;            --적용합계보험료
    V_RIDER_INSUR_AMT                   TBID0001.RIDER_INSUR_AMT%type;          --특약가입금액
    V_RIDER_PREM                        TBID0001.RIDER_PREM%type;               --특약보험료
    V_SUM_PREM                          TBID0001.SUM_PREM%type;                 --합계보험료
    V_END_NAB_NO                        TBID0001.END_NAB_NO%type;               --최종납입회차

    s_loop_idx                          number;                                 --반복횟수
    s_pol_no                            varchar2(20);                           --for loop 실행값(증권번호)
    s_endor_no                          varchar2(5);                            --for loop 실행값(배서번호)

BEGIN

    V_ERRTITLE   := '배서취소(PR_RENT_D_CAN_AMT)';
    V_ERRMESSAGE := 'START';

    --증권번호 가 없을 경우 에러처리
    if i_pol_no is null or i_pol_no = '' then
        V_ERRMESSAGE := '증권번호 입력 오류';
        raise e_err;
    end if;

    --배서이면서 배서번호가 없을 경우 에러처리
    if i_pln_no_gb = '2' and (i_endor_no is null or i_endor_no = '') then
        V_ERRMESSAGE := 'i_endor_no NOT FOUND' ;
        raise e_err;
    end if;

    --증권번호 수 만큼 루프 돌리기 위해서
    s_loop_idx := length(i_pol_no) - length(replace(i_pol_no,',','')) + 1;

    --구분값이 배서일 때만
    if i_pln_no_gb = '2' then

        for rec_idx in 1..s_loop_idx loop

            s_pol_no   := regexp_substr(i_pol_no,   '[^,]+', 1, rec_idx) ;
            s_endor_no := i_endor_no ;

            begin
                --공제일자 SELECT
                select TOT_INSUR_AMT,                   APPY_SUM_PREM,               RIDER_INSUR_AMT,        RIDER_PREM,          SUM_PREM
                     , END_NAB_NO
                  into V_TOT_INSUR_AMT,                 V_APPY_SUM_PREM,             V_RIDER_INSUR_AMT,      V_RIDER_PREM,        V_SUM_PREM
                     , V_END_NAB_NO
                  from TBID0001
                 where POL_NO   = s_pol_no
                   and ENDOR_NO = s_endor_no - 1;

            exception when no_data_found then
                V_ERRMESSAGE := '배서-계약정보(TBID0001) 이전 데이터를 찾을 수 없습니다.';
                raise e_err;
            end;


            begin
                --배서 상태 확인
                select ENDOR_STATUS,    TREATY_HQ_CD,       TREATY_BRH_CD,      TREATY_CD,      USER_ID
                     , APPY_FROM,       BASIS_FROM,         I_KIND_CD
                  into V_ENDOR_STATUS,  V_TREATY_HQ_CD,     V_TREATY_BRH_CD,    V_TREATY_CD,    V_USER_ID
                     , V_APPY_FROM,     V_BASIS_FROM,       V_I_KIND_CD
                  from TBID0001
                 where POL_NO   = s_pol_no
                   and ENDOR_NO = s_endor_no;

            exception when no_data_found then
                V_ERRMESSAGE := '배서-계약정보(TBID0001) 데이터를 찾을 수 없습니다.';
                raise e_err;
            end;

            V_ERRMESSAGE := '배서취소 시작';

            --배서상태가 설계인 데이터만 취소
            if V_ENDOR_STATUS = '1' then
                --TBID0013 테이블 데이터 삭제 - 화면에서 등록된 데이터 삭제하고 이전 배서 데이터로 밀어넣기 위해서
                V_ERRMESSAGE := '배서-담보별보험료(TBID0013) 데이터 삭제';
                begin
                    delete from TBID0013
                     where POL_NO   = s_pol_no
                       and ENDOR_NO = s_endor_no;

                exception when others then
                    V_ERRMESSAGE := '배서-담보별보험료(TBID0013) 데이터 삭제 오류';
                    raise e_err;
                end;

                --TBID0013 테이블 데이터 생성 - 이전 배서 데이터 그대로 밀어넣는다.
                V_ERRMESSAGE := '배서-담보별보험료(TBID0013) 데이터 생성';
                --변경이력
                --2013.04.10 : 담보별 보험료도 모두 0으로 만들자. 강신규 부장님과 협의. APPY_PREM 을 0으로 세팅함.

                begin
                    insert into TBID0013
                        ( POL_NO,           ENDOR_NO,           BASIC_SCONT_GB,         DMBO_CD,            APPY_FROM
                        , ACDNT_RESP_WANT,  MAN_RESP_WANT,      INSUR_AMT,              INSUR_AMT_GB,       DUCT_AMT_GB
                        , BASIC_PREM,       DMBO_START_DATE,    DMBO_END_DATE,          APPY_PREM,          BASIC_RANGE_R
                        , CANCEL_CALC_GB,   APPY_TO,            BASIS_FROM,             BASIS_TO,           IT_PROCESSING
                        , USER_ID,          BASIC_YEAR_PREM,    APPY_YEAR_PREM )
                    select POL_NO,           s_endor_no,         BASIC_SCONT_GB,         DMBO_CD,            APPY_FROM
                         , ACDNT_RESP_WANT,  MAN_RESP_WANT,      INSUR_AMT,              INSUR_AMT_GB,       DUCT_AMT_GB
                         , BASIC_PREM,       DMBO_START_DATE,    DMBO_END_DATE,          0,                  BASIC_RANGE_R
                         , CANCEL_CALC_GB,   APPY_TO,            BASIS_FROM,             BASIS_TO,           IT_PROCESSING
                         , V_USER_ID,        BASIC_YEAR_PREM,    APPY_YEAR_PREM
                      from TBID0013
                     where POL_NO   = s_pol_no
                       and ENDOR_NO = s_endor_no - 1;

                exception when others then
                    V_ERRMESSAGE := '배서-담보별보험료(TBID0013) 데이터 생성시 오류';
                    raise e_err;
                end;

                --TBID0014 테이블 데이터 생성 - 이전 배서 데이터 그대로 밀어넣는다.
                V_ERRMESSAGE := '배서-담보기간별보험료(TBID0014) 데이터 생성';
                --변경이력
                --2013.04.10 : 담보별 보험료도 모두 0으로 만들자. 강신규 부장님과 협의. APPY_PREM 을 0으로 세팅함.

                begin
                    insert into TBID0014
                        ( POL_NO,           ENDOR_NO,           DMBO_CD,            CALC_FYMD
                        , CALC_EYMD,        BASIC_PREM,         APPY_PREM,          APPY_FROM
                        , APPY_TO,          BASIS_FROM,         BASIS_TO,           IT_PROCESSING
                        , USER_ID,          BASIC_YEAR_PREM,    APPY_YEAR_PREM )
                    select POL_NO,           s_endor_no,         DMBO_CD,            CALC_FYMD
                         , CALC_EYMD,        BASIC_PREM,         0,                  APPY_FROM
                         , APPY_TO,          BASIS_FROM,         BASIS_TO,           IT_PROCESSING
                         , V_USER_ID,        BASIC_YEAR_PREM,    APPY_YEAR_PREM
                      from TBID0014
                     where POL_NO   = s_pol_no
                       and ENDOR_NO = s_endor_no - 1;

                exception when others then
                    V_ERRMESSAGE := '배서-담보기간별보험료(TBID0014) 데이터 생성시 오류';
                    raise e_err;
                end;

                --TBID0015 테이블 데이터 생성 - 이전 배서 데이터 그대로 밀어넣는다.
                V_ERRMESSAGE := '배서-담보별분납계획(TBID0015) 데이터 생성';

                begin
                    insert into TBID0015
                        ( POL_NO,           ENDOR_NO,           BNP_NO,         SEQ_NO
                        , DMBO_CD,          BASIC_PREM,         DMBO_PREM,      ISTAR_VALID_DATE
                        , IEND_VALID_DATE,  OLD_ENDOR_NO,       APPY_FROM,      APPY_TO
                        , BASIS_FROM,       BASIS_TO,           IT_PROCESSING,  USER_ID )
                    select POL_NO,           s_endor_no,         BNP_NO,         SEQ_NO
                         , DMBO_CD,          BASIC_PREM,         DMBO_PREM,      ISTAR_VALID_DATE
                         , IEND_VALID_DATE,  OLD_ENDOR_NO,       APPY_FROM,      APPY_TO
                         , BASIS_FROM,       BASIS_TO,           IT_PROCESSING,  USER_ID
                      from TBID0015
                     where POL_NO   = s_pol_no
                       and ENDOR_NO = s_endor_no - 1;

                exception when others then
                    V_ERRMESSAGE := '배서-담보별분납계획(TBID0015) 데이터 생성 오류';
                    raise e_err;
                end;

                --TBID0015 테이블 환불데이터 생성 - 분납계획에서 수납된 데이터만 확인해서 마지막 납입회차에  - 처리한다.
                V_ERRMESSAGE := '배서-담보별분납계획(TBID0015) 환불데이터 생성';

                begin
                    insert into TBID0015
                        ( POL_NO,               ENDOR_NO,           BNP_NO,              SEQ_NO
                        , DMBO_CD,              BASIC_PREM,         DMBO_PREM,           ISTAR_VALID_DATE
                        , IEND_VALID_DATE,      OLD_ENDOR_NO,       APPY_FROM,           APPY_TO
                        , BASIS_FROM,           BASIS_TO,           USER_ID )
                    select X.POL_NO,            s_endor_no,         V_END_NAB_NO,        Y.NEW_SEQ_NO
                         , X.DMBO_CD,           X.BASIC_PREM * -1,  X.DMBO_PREM * -1,    Z.ISTAR_VALID_DATE
                         , Z.IEND_VALID_DATE,   Z.OLD_ENDOR_NO,     Z.APPY_FROM,         Z.APPY_TO
                         , Z.BASIS_FROM,        Z.BASIS_TO,         V_USER_ID
                      from (select A.POL_NO, A.DMBO_CD, sum(A.BASIC_PREM) as BASIC_PREM, sum(A.DMBO_PREM) as DMBO_PREM
                              from TBID0015 A, TBID0016 B
                             where A.POL_NO      = s_pol_no
                               and A.ENDOR_NO    = s_endor_no - 1
                               and A.POL_NO      = B.POL_NO
                               and A.ENDOR_NO    = B.ENDOR_NO
                               and A.BNP_NO      = B.BNP_NO
                               and A.SEQ_NO      = B.SEQ_NO
                               and B.BNP_NO     <= V_END_NAB_NO
                               and B.PROC_STATUS = '5'
                             group by A.POL_NO, A.DMBO_CD) X
                         , (select nvl(max(A.SEQ_NO), 0) +1 AS NEW_SEQ_NO
                              from TBID0016 A
                             where A.POL_NO   = s_pol_no
                               and A.ENDOR_NO = s_endor_no - 1) Y
                         , (select A.ISTAR_VALID_DATE, IEND_VALID_DATE, OLD_ENDOR_NO, APPY_FROM, APPY_TO, BASIS_FROM, BASIS_TO
                              from TBID0015 A
                             where A.POL_NO   = s_pol_no
                               and A.ENDOR_NO = s_endor_no - 1
                               and A.BNP_NO   = V_END_NAB_NO
                               and rownum   = 1) Z;
                exception when others then
                    V_ERRMESSAGE := '배서-담보별분납계획(TBID0015) 환불데이터 생성 오류';
                    raise e_err;
                end;

                --TBID0015 테이블 미수납 데이터 0으로 UPDATE
                V_ERRMESSAGE := '배서-담보별분납계획(TBID0015) 미수납데이터 갱신';

                begin
                    update TBID0015
                       set DMBO_PREM = 0
                     where (POL_NO, ENDOR_NO, BNP_NO, SEQ_NO ) in ( select POL_NO, ENDOR_NO + 1, BNP_NO, SEQ_NO
                                                                      from TBID0016
                                                                     where POL_NO   = s_pol_no
                                                                       and ENDOR_NO = s_endor_no - 1
                                                                       and NVL(PROC_STATUS, '1') = '1' );

                exception when others then
                    V_ERRMESSAGE := '배서-담보별분납계획(TBID0015) 미수납데이터 갱신 오류';
                    raise e_err;
                end;

                --TBID0016 테이블 데이터 생성 - 이전 배서 데이터 그대로 밀어넣는다.
                V_ERRMESSAGE := '배서-분납계획(TBID0016) 데이터 생성';
                --변경이력
                --2013.04.10 : 분납계획 INSERT 시 미처리 데이터는 0으로 분납보험료 세팅한다.

                begin
                    insert into TBID0016
                        ( POL_NO,           ENDOR_NO,           BNP_NO,             SEQ_NO
                        , I_KIND_CD,        RCPT_CD,            NA_DATE,            ACCOUNT_MTH
                        , ACCOUNT_ID,       MANG_NO,            BNP_GUIDE_DATE,     BNP_RATION
                        , BNP_DATE,         BNP_PREM,           BNP_DEDUCT_AMT,     PROC_STATUS
                        , RCPT_GB,          RCPT_NO,            PRINT_CNT,          TREATY_HQ_CD
                        , TREATY_BRH_CD,    TREATY_CD,          APPY_FROM,          APPY_TO
                        , BASIS_FROM,       BASIS_TO,           IT_PROCESSING,      USER_ID )
                    select POL_NO,           s_endor_no,         BNP_NO,             SEQ_NO
                         , I_KIND_CD,        RCPT_CD,            NA_DATE,            ACCOUNT_MTH
                         , ACCOUNT_ID,       MANG_NO,            BNP_GUIDE_DATE,     BNP_RATION
                         , BNP_DATE,         decode(nvl(PROC_STATUS, '1'), '1', 0, BNP_PREM),           BNP_DEDUCT_AMT,     PROC_STATUS
                         , RCPT_GB,          RCPT_NO,            PRINT_CNT,          TREATY_HQ_CD
                         , TREATY_BRH_CD,    TREATY_CD,          APPY_FROM,          APPY_TO
                         , BASIS_FROM,       BASIS_TO,           IT_PROCESSING,      USER_ID
                      from TBID0016
                     where POL_NO   = s_pol_no
                       and ENDOR_NO = s_endor_no - 1;

                exception when others then
                    V_ERRMESSAGE := '배서-분납계획(TBID0016) 데이터 생성 오류';
                    raise e_err;
                end;

                --TBID0016 테이블 환불데이터 생성 - 담보별분납계획에서 환불처리할 데이터만 등록한다.
                V_ERRMESSAGE := '배서-분납계획(TBID0016) 환불데이터 생성';

                begin
                    insert into TBID0016
                         ( POL_NO,                 ENDOR_NO,           BNP_NO,                      SEQ_NO,
                           I_KIND_CD,              RCPT_CD,            BNP_DATE,                    BNP_PREM,
                           PROC_STATUS,            TREATY_HQ_CD,       TREATY_BRH_CD,               TREATY_CD,
                           APPY_FROM,              APPY_TO,            BASIS_FROM,                  BASIS_TO,
                           USER_ID )
                    select A.POL_NO,               s_endor_no,         A.BNP_NO,                    A.SEQ_NO,
                           V_I_KIND_CD,            '8',                to_date(V_APPY_FROM),        sum(A.DMBO_PREM),
                           '1',                    V_TREATY_HQ_CD,     V_TREATY_BRH_CD,             V_TREATY_CD,
                           to_date(V_APPY_FROM),   B.APPY_TO,          to_date(V_BASIS_FROM),       B.BASIS_TO,
                           V_USER_ID
                      from ( select A.POL_NO, A.ENDOR_NO, A.BNP_NO, A.SEQ_NO, A.DMBO_PREM, nvl(B.PROC_STATUS, 'X') as PROC_STATUS, nvl(B.SEQ_NO, -1) as SEQ_NO_CHK
                               from TBID0015 A, TBID0016 B
                              where A.POL_NO   = s_pol_no
                                and A.ENDOR_NO = s_endor_no
                                and A.POL_NO   = B.POL_NO(+)
                                and A.ENDOR_NO = B.ENDOR_NO(+)
                                and A.BNP_NO   = B.BNP_NO(+)
                                and A.SEQ_NO   = B.SEQ_NO(+)) A
                          ,( select POL_NO, ENDOR_NO, BNP_NO, min(APPY_TO) as APPY_TO, min(BASIS_TO) as BASIS_TO
                               from TBID0016
                              where POL_NO   = s_pol_no
                                and ENDOR_NO = s_endor_no
                              group by POL_NO, ENDOR_NO, BNP_NO ) B
                     where A.PROC_STATUS = 'X'
                       and A.SEQ_NO_CHK  = -1
                       and A.POL_NO      = B.POL_NO
                       and A.ENDOR_NO    = B.ENDOR_NO
                       and A.BNP_NO      = B.BNP_NO
                     group by A.POL_NO, A.ENDOR_NO, A.BNP_NO, A.SEQ_NO, B.APPY_TO, B.BASIS_TO;

                exception when others then
                    V_ERRMESSAGE := '배서-분납계획(TBID0016) 환불데이터 생성 오류';
                    raise e_err;
                end;

                --TBID0001 테이블 이전데이터값 그대로 넣기
                V_ERRMESSAGE := '배서-계약정보(TBID0001) 데이터 수정';

                begin
                    update TBID0001
                       set TOT_INSUR_AMT   = 0
                         , APPY_SUM_PREM   = 0
                         , RIDER_INSUR_AMT = 0
                         , RIDER_PREM      = 0
                         , SUM_PREM        = 0
                     where POL_NO          = s_pol_no
                       and ENDOR_NO        = s_endor_no;

                exception when others then
                    V_ERRMESSAGE := '배서-계약정보(TBID0001) 데이터 수정시 오류'||'('||sqlerrm||')';
                    raise e_err;
                end;

                --TBIC0202 테이블 SUM데이터 UPDATE
                V_ERRMESSAGE := '계약-변경이력(TBIC0202) 합계데이터 생성';

                begin
                    select sum(decode(ENDOR_NO, s_endor_no-1, APPY_PREM, 0)) as APPY_PREM_BEF
                         , 0 - sum(decode(ENDOR_NO, s_endor_no-1, APPY_PREM, 0)) as DIFF_AMT
                      into V_APPY_PREM_BEF, V_DIFF_AMT
                      from TBID0013
                     where POL_NO = s_pol_no
                       and ENDOR_NO between s_endor_no - 1 and s_endor_no;

                    update TBIC0202
                       set ENDOR_BEFORE_PREM = nvl(V_APPY_PREM_BEF, 0)
                         , ENDOR_AFTER_PREM  = 0
                         , PREM_DIFF_AMT     = nvl(V_DIFF_AMT,0)
                         , GET_GB            = '8'
                     where POL_NO   = s_pol_no
                       and ENDOR_NO = s_endor_no;
                exception when others then
                    V_ERRMESSAGE := '계약-변경이력(TBIC0202) 합계데이터 생성 오류';
                    raise e_err;
                end;

            end if;

        end loop;

        o_err_msg := '';

    end if;

EXCEPTION
    when e_err then
        o_err_msg := V_ERRTITLE    || ' : ' ||    V_ERRMESSAGE;
    when others then
        o_err_msg := V_ERRTITLE || '    : '    || SUBSTR(SQLERRM, 1, 250);
END;
CREATE -- added during DDL generation.
PROCEDURE          PR_RENT_D_ENDOR_BUNAP_TOT_RATE( i_pol_no          in  varchar2
                                                                   , i_endor_no        in  varchar2
                                                                   , i_i_kind_cd       in  varchar2
                                                                   , i_spcl_agre_gb    in  varchar2
                                                                   , i_bnp_cnt         in  number
                                                                   , i_user_id         in  varchar2
                                                                   , i_treaty_hq_cd    in  varchar2
                                                                   , i_treaty_brh_cd   in  varchar2
                                                                   , i_treaty_cd       in  varchar2
                                                                   , i_end_nab_no      in  number
                                                                   , i_bef_15_seq_no   in  number ) as
/**************************************************************************************************************************/
/* Procedure Name :  PR_RENT_D_ENDOR_TOT_BUNAP_RATE                                                                       */
/* Function       :  배서 담보별, 기간별 분납 회차별 보험료 산정   (일일자차)                                             */
/* Parameter  i_pol_no             [ IN] 증권번호                                                                         */
/*            i_endor_no           [ IN] 배서번호                                                                         */
/*            i_i_kind_cd          [ IN] 보험종목                                                                         */
/*            i_spcl_agre_gb       [ IN] '0'                                                                              */
/*            i_bnp_cnt            [ IN] 분납횟수-1:일시납,2:2분납,3:3분납,4:4분납,5: 5분납,6:6분납,7:7분납,8:8분납(A0007)*/
/*            i_user_id            [ IN] 사용자번호                                                                       */
/*            i_treaty_hq_cd       [ IN] 처리자 부서                                                                      */
/*            i_treaty_brh_cd      [ IN] 처리자 부서                                                                      */
/*            i_treaty_cd          [ IN] 처리자 부서                                                                      */
/*            i_end_nab_no         [ IN] 납입횟수                                                                         */
/*            i_bef_15_seq_no      [ IN] Max Seq                                                                          */
/*            o_result             [Out] sp 결과(보험료)                                                                  */
/**************************************************************************************************************************/

V_CHANGE_GB      varchar2(3);
V_APPY_FROM      date;

begin

       begin
              select CHANGE_GB, TO_DATE(APPY_FROM)
                into V_CHANGE_GB, V_APPY_FROM
                from TBIC0202
               where POL_NO    = i_pol_no
              and ENDOR_NO  = i_endor_no ;
            exception when others then   V_CHANGE_GB :='0';
       end;

       begin
            insert into TBID0016(POL_NO           ,ENDOR_NO             ,BNP_NO                 ,seq_no
                                ,I_KIND_CD        ,RCPT_CD              ,NA_DATE                ,ACCOUNT_MTH
                                ,ACCOUNT_ID       ,MANG_NO              ,BNP_GUIDE_DATE         ,BNP_RATION
                                ,BNP_DATE         ,BNP_PREM             ,PROC_STATUS            ,RCPT_GB
                                ,RCPT_NO          ,PRINT_CNT            ,TREATY_HQ_CD           ,TREATY_BRH_CD
                                ,TREATY_CD        ,APPY_FROM            ,APPY_TO                ,BASIS_FROM
                                ,BASIS_TO         ,USER_ID )
                          select POL_NO           ,I_ENDOR_NO           ,BNP_NO                 ,SEQ_NO
                                ,I_KIND_CD        ,RCPT_CD              ,NA_DATE                ,ACCOUNT_MTH
                                ,ACCOUNT_ID       ,MANG_NO              ,BNP_GUIDE_DATE         ,BNP_RATION
                                ,BNP_DATE         ,BNP_PREM             ,PROC_STATUS            ,RCPT_GB
                                ,RCPT_NO          ,PRINT_CNT            ,TREATY_HQ_CD           ,TREATY_BRH_CD
                                ,TREATY_CD        ,APPY_FROM            ,APPY_TO                ,BASIS_FROM
                                ,BASIS_TO         ,I_USER_ID
                            from TBID0016
                           where POL_NO    = i_pol_no
                             and ENDOR_NO  = i_endor_no -1
                             and BNP_NO   <= i_end_nab_no;
       end;

       begin
            insert into TBID0016(POL_NO           ,ENDOR_NO             ,BNP_NO                 ,seq_no
                                ,I_KIND_CD
                                ,RCPT_CD
                                ,NA_DATE          ,ACCOUNT_MTH
                                ,ACCOUNT_ID       ,MANG_NO              ,BNP_GUIDE_DATE
                                ,BNP_RATION
                                ,BNP_DATE
                                ,BNP_PREM         ,PROC_STATUS          ,RCPT_GB
                                ,RCPT_NO          ,PRINT_CNT            ,TREATY_HQ_CD           ,TREATY_BRH_CD
                                ,TREATY_CD        ,APPY_FROM            ,APPY_TO                ,BASIS_FROM
                                ,BASIS_TO         ,USER_ID )
                          select A.POL_NO         ,A.ENDOR_NO           ,A.BNP_NO               ,i_bef_15_seq_no
                                ,i_i_kind_cd
                                ,case when V_CHANGE_GB = '2'       then '8'
                                      when V_CHANGE_GB = '3'       then '6'
                                      when sum(A.DMBO_PREM) >= 0   then '3'
                                      else                              '4'
                                 end  as RCPT_CD
                                ,null             ,null
                                ,null             ,null                 ,null
                                ,min((select min(A1.BNP_RATION)
                                       from TBID0016 A1
                                      where A1.POL_NO    = i_pol_no
                                        and A1.ENDOR_NO  = i_endor_no-1
                                        and A1.BNP_NO    = A.BNP_NO
                                     ))
                                 ,V_APPY_FROM
                                ,sum(A.DMBO_PREM)   ,'1'                ,null
                                ,null             ,null                 ,i_treaty_hq_cd         ,i_treaty_brh_cd
                                ,i_treaty_cd      ,min(A.APPY_FROM)     ,min(A.APPY_TO)         ,min(A.BASIS_FROM)
                                ,min(A.BASIS_TO)       ,i_user_id
                            from TBID0015 A
                           where A.POL_NO    = i_pol_no
                             and A.ENDOR_NO  = i_endor_no
                             and A.BNP_NO    = i_end_nab_no
                             and A.SEQ_NO    = i_bef_15_seq_no
                            group by A.POL_NO,A.ENDOR_NO,A.BNP_NO;
       end;

       begin
            insert into TBID0016(POL_NO           ,ENDOR_NO             ,BNP_NO                 ,seq_no
                                ,I_KIND_CD
                                ,RCPT_CD
                                ,NA_DATE          ,ACCOUNT_MTH
                                ,ACCOUNT_ID       ,MANG_NO              ,BNP_GUIDE_DATE
                                ,BNP_RATION
                                ,BNP_DATE
                                ,BNP_PREM         ,PROC_STATUS          ,RCPT_GB
                                ,RCPT_NO          ,PRINT_CNT            ,TREATY_HQ_CD           ,TREATY_BRH_CD
                                ,TREATY_CD        ,APPY_FROM            ,APPY_TO                ,BASIS_FROM
                                ,BASIS_TO         ,USER_ID )
                          select A.POL_NO         ,A.ENDOR_NO           ,A.BNP_NO               ,A.SEQ_NO
                                ,i_i_kind_cd
                                ,max(case when A.BNP_NO =1 then 1 else 2 end) as RCPT_CD
                                ,null             ,null
                                ,null             ,null                 ,null
                                ,min((select min(A1.BNP_RATION)
                                       from TBID0016 A1
                                      where A1.POL_NO    = i_pol_no
                                        and A1.ENDOR_NO  = i_endor_no-1
                                        and A1.BNP_NO    = A.BNP_NO
                                     ))
                                ,min((select min(A1.BNP_DATE)
                                       from TBID0016 A1
                                      where A1.POL_NO    = i_pol_no
                                        and A1.ENDOR_NO  = i_endor_no-1
                                        and A1.BNP_NO    = A.BNP_NO
                                     ))
                                ,sum(DMBO_PREM)   ,'1'                  ,null
                                ,null             ,null                 ,i_treaty_hq_cd         ,i_treaty_brh_cd
                                ,i_treaty_cd      ,min(A.APPY_FROM)     ,min(A.APPY_TO)         ,min(A.BASIS_FROM)
                                ,min(A.BASIS_TO)  ,i_user_id
                            from TBID0015 A
                           where A.POL_NO    = i_pol_no
                             and A.ENDOR_NO  = i_endor_no
                             and A.BNP_NO    > i_end_nab_no
                           group by A.POL_NO,A.ENDOR_NO,A.BNP_NO,A.SEQ_NO ;
       end;


exception when others then
                   dbms_output.put_line('PR_RENT_D_ENDOR_BUNAP_TOT_RATE Main Error1: '||sqlerrm);
                   raise_application_error(-20001, 'PR_RENT_D_ENDOR_BUNAP_TOT_RATE Error1: '||sqlerrm);
end;
CREATE -- added during DDL generation.
PROCEDURE PR_RENT_D_SPECIAL_RATE( i_job_gubun            in varchar2
                                                           , i_enter_no             in varchar2
                                                           , i_endor_no             in number
                                                           , i_i_kind_cd            in TBID0001.I_KIND_CD%TYPE
                                                           , i_car_kind_cd          in TBID0001.CAR_KIND_CD%TYPE
                                                           , i_car_type_cd          in TBID0001.CAR_TYPE_CD%TYPE
                                                           , i_aply_date            in TBID0001.ISTAR_CONT_DATE%TYPE
                                                           , i_dmbo_cd              in TBIB0203.DMBO_CD%TYPE
                                                           , i_0012_info            in varchar2
                                                           , o_special_rate         out number
                                                           , o_treat_rate           out number ) as
/******************************************************************************************************/
/* Procedure Name :  PR_RENT_D_SPECIAL_RATE                                                           */
/* Function       :  특약 및 특별요율 산정  (일일자차)                                                */
/* Parameter  i_job_gubun          [ IN] 작업구분(1:가입설계 2: 배서)                                 */
/*            i_pol_no             [ IN] 증권번호                                                     */
/*            i_endor_no           [ IN] 배서번호                                                     */
/*            i_i_kind_cd          [ IN] 보험종목                                                     */
/*            i_car_kind_cd        [ IN] '0'                                                          */
/*            i_car_type_cd        [ IN] 차종코드                                                     */
/*            i_aply_date          [ IN] 차형태코드                                                   */
/*            i_dmbo_cd            [ IN] 담보코드                                                     */
/*            i_0012_info          [ IN] 특약 및 특별 담보 코드 정보                                  */
/*            o_special_rate       [Out] 특별요율                                                     */
/*            o_treat_rate         [Out] 연령한정 요율                                                */
/******************************************************************************************************/
V_SPECIAL_INFO        varchar2(1000);

s_special_info        varchar2(100);
s_rate_cd             varchar2(10);
s_aply_rate           number;
s_idx1                number;
s_idx2                number;

s_treat_age_rt        TBID0012.APPY_R%TYPE := 1.0;
s_special_rate        TBID0012.APPY_R%TYPE := 100;

BEGIN
      if    i_0012_info is not null then
          begin
               select WM_CONCAT(RATE_CD || '|' || APLY_RATE)
                 into V_SPECIAL_INFO
                 from TBIB0206
                where I_KIND_CD         = i_i_kind_cd
                  and CO_GB             = '0'
                  and SPCL_AGRE_KEY_GB1 = '00'
                  and SPCL_AGRE_KEY_GB2 = '00'
                  and CAR_KIND          = i_car_kind_cd
                  and CAR_KIND2         = i_car_type_cd
                  and DMBO_CD           = i_dmbo_cd
                  and APLY_FYMD        <= i_aply_date
                  and APLY_EYMD        >= i_aply_date
                  and regexp_like(RATE_CD,i_0012_info);

                exception when no_data_found then V_SPECIAL_INFO :=null;
                          when others        then dbms_output.put_line('PR_RENT_SPECIAL_RATE Main Error: '||sqlerrm);
                                                  raise_application_error(-20011, 'PR_RENT_SPECIAL_RATE Main Error: '||sqlerrm);
          end;


          if    V_SPECIAL_INFO is not null then
                s_idx1 :=  length(V_SPECIAL_INFO) - length(replace(V_SPECIAL_INFO,',','')) + 1 ;
                s_idx2 :=  0;

                Loop
                     s_idx2 := s_idx2 +1;

                     if    s_idx2 > s_idx1 then
                           exit;
                     end if;

                     s_special_info  := regexp_substr(V_SPECIAL_INFO,'[^,]+',1,s_idx2);

                     s_rate_cd       := regexp_substr(s_special_info,'[^|]+',1,1);
                     s_aply_rate     := to_number(regexp_substr(s_special_info,'[^|]+',1,2));

                     if    s_rate_cd in ( '41', '42', '43') then
                           s_treat_age_rt  := nvl(s_aply_rate, 100)/100;
                     else
                           s_special_rate  := s_special_rate + (nvl(s_aply_rate,100) - 100 ) ;
                     end if;

                end Loop;

           end if;

      end if;

      o_special_rate := s_special_rate;
      o_treat_rate   := s_treat_age_rt;

      exception when others then dbms_output.put_line('PR_RENT_D_SPECIAL_RATE Main Error: '||sqlerrm);
                                 raise_application_error(-20011, 'PR_RENT_D_SPECIAL_RATE Main Error: '||sqlerrm);
END;
-- GENERATED BY QueryOne AT 2017-02-08 14:00:27
-- USING krma_app@10.100.10.54:8629(krmadb)

CREATE OR REPLACE-- added during DDL generation.
procedure KRMA_APP.PR_RENT_ENDOR_BUNAP_TERM( i_pol_no          in  varchar2
                                                         , i_endor_no        in  varchar2
                                                         , i_user_id         in  varchar2
                                                         , i_treaty_hq_cd    in  varchar2
                                                         , i_treaty_brh_cd   in  varchar2
                                                         , i_treaty_cd       in  varchar2
                                                         , i_end_nab_no      in  number
                                                         , i_bef_15_seq_no   in  number ) as
/**************************************************************************************************************************/
/* Procedure Name :  PR_RENT_ENDOR_BUNAP_TERM                                                                             */
/* Function       :  담보별보험료, 담보별 분납계획 다 생성한후. 전 배서에 해지한 데이터 누락되는 경우를 막는다.           */
/* Parameter  i_pol_no             [ IN] 증권번호                                                                         */
/*            i_endor_no           [ IN] 배서번호                                                                         */
/*            i_user_id            [ IN] 사용자번호                                                                       */
/*            i_treaty_hq_cd       [ IN] 처리자 부서                                                                      */
/*            i_treaty_brh_cd      [ IN] 처리자 부서                                                                      */
/*            i_treaty_cd          [ IN] 처리자 부서                                                                      */
/*            i_end_nab_no         [ IN] 납입횟수                                                                         */
/*            i_bef_15_seq_no      [ IN] Max Seq                                                                          */
/*            o_result             [Out] sp 결과(보험료)                                                                  */
/**************************************************************************************************************************/

begin
    /*이전배서에는 있지만 현재배서에는 없는 담보 확인 */
    for REC in ( select DMBO_CD
                   from TBID0013
                  where POL_NO   = i_pol_no
                    and ENDOR_NO = i_endor_no - 1
                  group by DMBO_CD
                 minus
                 select DMBO_CD
                   from TBID0013
                  where POL_NO   = i_pol_no
                    and ENDOR_NO = i_endor_no
                  group by DMBO_CD )
    loop
        /*배서-담보별보험료*/
 /*2017.02.08 담보별 단체특성율 추가 */
        begin
            insert into TBID0013
                 ( POL_NO                 , ENDOR_NO               , BASIC_SCONT_GB         , DMBO_CD                , APPY_FROM
                                          , ACDNT_RESP_WANT        , MAN_RESP_WANT          , INSUR_AMT              , INSUR_AMT_GB
                 , DUCT_AMT_GB            , BASIC_PREM             , DMBO_START_DATE        , DMBO_END_DATE          , APPY_PREM
                 , BASIC_RANGE_R          , CANCEL_CALC_GB         , APPY_TO                , BASIS_FROM             , BASIS_TO
                 , BASIC_YEAR_PREM        , APPY_YEAR_PREM         , IT_PROCESSING          , USER_ID, GRP_DMBO_RATE )
            select POL_NO                 , i_endor_no             , BASIC_SCONT_GB         , DMBO_CD                , APPY_FROM
                                          , ACDNT_RESP_WANT        , MAN_RESP_WANT          , INSUR_AMT              , INSUR_AMT_GB
                 , DUCT_AMT_GB            , BASIC_PREM             , DMBO_START_DATE        , DMBO_END_DATE          , APPY_PREM
                 , BASIC_RANGE_R          , CANCEL_CALC_GB         , APPY_TO                , BASIS_FROM             , BASIS_TO
                 , BASIC_YEAR_PREM        , APPY_YEAR_PREM         , IT_PROCESSING          , USER_ID, GRP_DMBO_RATE
              from TBID0013
             where POL_NO    = i_pol_no
               and ENDOR_NO  = i_endor_no - 1
               and DMBO_CD   = REC.DMBO_CD;
        end;

        /*배서-담보기간별보험료*/
        begin
            insert into TBID0014
                 ( POL_NO             , ENDOR_NO           , DMBO_CD            , CALC_FYMD
                 , CALC_EYMD          , BASIC_PREM         , APPY_PREM          , APPY_FROM          , APPY_TO
                 , BASIS_FROM         , BASIS_TO           , BASIC_YEAR_PREM    , APPY_YEAR_PREM     , IT_PROCESSING
                 , USER_ID )
            select POL_NO             , i_endor_no         , DMBO_CD            , CALC_FYMD
                 , CALC_EYMD          , BASIC_PREM         , APPY_PREM          , APPY_FROM          , APPY_TO
                 , BASIS_FROM         , BASIS_TO           , BASIC_YEAR_PREM    , APPY_YEAR_PREM     , IT_PROCESSING
                 , USER_ID
              from TBID0014
             where POL_NO    = i_pol_no
               and ENDOR_NO  = i_endor_no - 1
               and DMBO_CD   = REC.DMBO_CD;
        end;

        /*배서-담보별 분납계획*/
        begin
            insert into TBID0015
                 ( POL_NO              , ENDOR_NO            , BNP_NO              , SEQ_NO              , DMBO_CD
                 , BASIC_PREM          , DMBO_PREM           , ISTAR_VALID_DATE    , IEND_VALID_DATE     , OLD_ENDOR_NO
                 , APPY_FROM           , APPY_TO             , BASIS_FROM          , BASIS_TO            , IT_PROCESSING
                 , USER_ID )
            select POL_NO              , i_endor_no          , BNP_NO              , SEQ_NO              , DMBO_CD
                 , BASIC_PREM          , DMBO_PREM           , ISTAR_VALID_DATE    , IEND_VALID_DATE     , ENDOR_NO
                 , APPY_FROM           , APPY_TO             , BASIS_FROM          , BASIS_TO            , IT_PROCESSING
                 , USER_ID
              from TBID0015
             where POL_NO    = i_pol_no
               and ENDOR_NO  = i_endor_no - 1
               and BNP_NO   <= i_end_nab_no
               and DMBO_CD   = REC.DMBO_CD;
        end;

    end loop;

exception when others then
                   dbms_output.put_line('PR_RENT_ENDOR_BUNAP_TERM Main Error1: '||sqlerrm);
                   raise_application_error(-20001, 'PR_RENT_ENDOR_BUNAP_TERM Error1: '||sqlerrm);
end;
CREATE -- added during DDL generation.
procedure          PR_RENT_ENDOR_BUNAP_TOT_RATE( i_pol_no          in  varchar2
                                                         , i_endor_no        in  varchar2
                                                         , i_i_kind_cd       in  varchar2
                                                         , i_spcl_agre_gb    in  varchar2
                                                         , i_bnp_cnt         in  number
                                                         , i_user_id         in  varchar2
                                                         , i_treaty_hq_cd    in  varchar2
                                                         , i_treaty_brh_cd   in  varchar2
                                                         , i_treaty_cd       in  varchar2
                                                         , i_endor_cd        in  varchar2
                                                         , i_end_nab_no      in  number
                                                         , i_bef_15_seq_no   in  number ) as
/**************************************************************************************************************************/
/* Procedure Name :  PR_RENT_ENDOR_TOT_BUNAP_RATE                                                                         */
/* Function       :  배서 담보별, 기간별 분납 회차별 보험료 산정                                                          */
/* Parameter  i_pol_no             [ IN] 증권번호                                                                         */
/*            i_endor_no           [ IN] 배서번호                                                                         */
/*            i_i_kind_cd          [ IN] 보험종목                                                                         */
/*            i_spcl_agre_gb       [ IN] '0'                                                                              */
/*            i_bnp_cnt            [ IN] 분납횟수-1:일시납,2:2분납,3:3분납,4:4분납,5: 5분납,6:6분납,7:7분납,8:8분납(A0007)*/
/*            i_user_id            [ IN] 사용자번호                                                                       */
/*            i_treaty_hq_cd       [ IN] 처리자 부서                                                                      */
/*            i_treaty_brh_cd      [ IN] 처리자 부서                                                                      */
/*            i_treaty_cd          [ IN] 처리자 부서                                                                      */
/*            i_end_nab_no         [ IN] 납입횟수                                                                         */
/*            i_bef_15_seq_no      [ IN] Max Seq                                                                          */
/*            o_result             [Out] sp 결과(보험료)                                                                  */
/**************************************************************************************************************************/

V_CHANGE_GB      varchar2(3);
V_ENDOR_GB       varchar2(2);
V_APPY_DATE      date;
V_APPY_PREM      NUMBER(13);-- LJM 추가 20151124
V_BILL_PREM      NUMBER(13);-- LJM 추가 20151124
V_ENDOR_PREM      NUMBER(13);-- LJM 추가 20151229
V_ROW_CNT        NUMBER(2);-- LJM 추가 20151124
V_FREE_INFO      varchar2(300);
V_FREE_ROW_INFO  varchar2(300);
V_DMBO_CD        varchar2(2);
V_DMBO_FREE      NUMBER(13);-- LJM 추가 20151124
V_CURR_CNT       NUMBER    := 1;
l_log_data                   varchar2(4000);

begin

       V_ENDOR_GB := substr(i_endor_cd, 1, 1);

       begin
              select A.CHANGE_GB, B.APPY_DATE
                into V_CHANGE_GB, V_APPY_DATE
                from TBIC0202 A, TBIC0203 B
               where A.POL_NO    = i_pol_no
                 and A.ENDOR_NO  = i_endor_no
                 and A.POL_NO    = B.POL_NO
                 and A.ENDOR_NO  = B.ENDOR_NO
                 and B.ENDOR_SUB_SEQ = 0
               group by A.CHANGE_GB, B.APPY_DATE;

            exception when others then
               V_CHANGE_GB :='0';
               V_APPY_DATE := trunc(SYSDATE);
       end;

       begin
            insert into TBID0016(POL_NO           ,ENDOR_NO             ,BNP_NO                 ,seq_no
                                ,I_KIND_CD        ,RCPT_CD              ,NA_DATE                ,ACCOUNT_MTH
                                ,ACCOUNT_ID       ,MANG_NO              ,BNP_GUIDE_DATE         ,BNP_RATION
                                ,BNP_DATE         ,BNP_PREM             ,PROC_STATUS            ,RCPT_GB
                                ,RCPT_NO          ,PRINT_CNT            ,TREATY_HQ_CD           ,TREATY_BRH_CD
                                ,TREATY_CD        ,APPY_FROM            ,APPY_TO                ,BASIS_FROM
                                ,BASIS_TO         ,USER_ID )
                          select POL_NO           ,I_ENDOR_NO           ,BNP_NO                 ,SEQ_NO
                                ,I_KIND_CD        ,RCPT_CD              ,NA_DATE                ,ACCOUNT_MTH
                                ,ACCOUNT_ID       ,MANG_NO              ,BNP_GUIDE_DATE         ,BNP_RATION
                                ,BNP_DATE         ,BNP_PREM             ,PROC_STATUS            ,RCPT_GB
                                ,RCPT_NO          ,PRINT_CNT            ,TREATY_HQ_CD           ,TREATY_BRH_CD
                                ,TREATY_CD        ,APPY_FROM            ,APPY_TO                ,BASIS_FROM
                                ,BASIS_TO         ,I_USER_ID
                            from TBID0016
                           where POL_NO    = i_pol_no
                            and ENDOR_NO  = i_endor_no -1
                             and BNP_NO   <= i_end_nab_no;
       end;

       begin
            insert into TBID0016(POL_NO           ,ENDOR_NO             ,BNP_NO                 ,seq_no
                                ,I_KIND_CD
                                ,RCPT_CD
                                ,NA_DATE          ,ACCOUNT_MTH
                                ,ACCOUNT_ID       ,MANG_NO              ,BNP_GUIDE_DATE
                                ,BNP_RATION
                                ,BNP_DATE
                                ,BNP_PREM         ,PROC_STATUS          ,RCPT_GB
                                ,RCPT_NO          ,PRINT_CNT            ,TREATY_HQ_CD           ,TREATY_BRH_CD
                                ,TREATY_CD        ,APPY_FROM            ,APPY_TO                ,BASIS_FROM
                                ,BASIS_TO         ,USER_ID )
                          select A.POL_NO         ,A.ENDOR_NO           ,A.BNP_NO               ,i_bef_15_seq_no
                                ,i_i_kind_cd
                                ,case when V_CHANGE_GB = '3'       then '8'
                                      when V_CHANGE_GB = '4'       then '6'
                                      when sum(A.DMBO_PREM) >= 0   then '3'
                                      else                              '4'
                                 end  as RCPT_CD
                                ,null             ,null
                                ,null             ,null                 ,null
                                ,min((select min(A1.BNP_RATION)
                                       from TBID0016 A1
                                      where A1.POL_NO    = i_pol_no
                                        and A1.ENDOR_NO  = i_endor_no-1
                                        and A1.BNP_NO    = A.BNP_NO
                                     ))
                                ,case when V_APPY_DATE > trunc(SYSDATE) then V_APPY_DATE
                                      else trunc(SYSDATE) end as BNP_DATE
                                ,sum(A.DMBO_PREM)   ,'1'                ,null
                                ,null             ,null                 ,i_treaty_hq_cd         ,i_treaty_brh_cd
                                ,i_treaty_cd      ,min(A.APPY_FROM)     ,min(A.APPY_TO)         ,min(A.BASIS_FROM)
                                ,min(A.BASIS_TO)       ,i_user_id
                            from TBID0015 A
                           where A.POL_NO    = i_pol_no
                             and A.ENDOR_NO  = i_endor_no
                             and A.BNP_NO    = i_end_nab_no
                             and A.SEQ_NO    = i_bef_15_seq_no
                            group by A.POL_NO,A.ENDOR_NO,A.BNP_NO;
       end;

       begin
            insert into TBID0016(POL_NO           ,ENDOR_NO             ,BNP_NO                 ,seq_no
                                ,I_KIND_CD
                                ,RCPT_CD
                                ,NA_DATE          ,ACCOUNT_MTH
                                ,ACCOUNT_ID       ,MANG_NO              ,BNP_GUIDE_DATE
                                ,BNP_RATION
                                ,BNP_DATE
                                ,BNP_PREM         ,PROC_STATUS          ,RCPT_GB
                                ,RCPT_NO          ,PRINT_CNT            ,TREATY_HQ_CD           ,TREATY_BRH_CD
                                ,TREATY_CD        ,APPY_FROM            ,APPY_TO                ,BASIS_FROM
                                ,BASIS_TO         ,USER_ID )
                          select A.POL_NO         ,A.ENDOR_NO           ,A.BNP_NO               ,A.SEQ_NO
                                ,i_i_kind_cd
                                ,max(case when A.BNP_NO =1 then 1 else 2 end) as RCPT_CD
                                ,null             ,null
                                ,null             ,null                 ,null
                                ,min((select min(A1.BNP_RATION)
                                       from TBID0016 A1
                                      where A1.POL_NO    = i_pol_no
                                        and A1.ENDOR_NO  = i_endor_no-1
                                        and A1.BNP_NO    = A.BNP_NO
                                     ))
                                ,min((select min(A1.BNP_DATE)
                                       from TBID0016 A1
                                      where A1.POL_NO    = i_pol_no
                                        and A1.ENDOR_NO  = i_endor_no-1
                                        and A1.BNP_NO    = A.BNP_NO
                                     ))
                                ,sum(DMBO_PREM)   ,'1'                  ,null
                                ,null             ,null                 ,i_treaty_hq_cd         ,i_treaty_brh_cd
                                ,i_treaty_cd      ,min(A.APPY_FROM)     ,min(A.APPY_TO)         ,min(A.BASIS_FROM)
                                ,min(A.BASIS_TO)  ,i_user_id
                            from TBID0015 A
                           where A.POL_NO    = i_pol_no
                             and A.ENDOR_NO  = i_endor_no
                             and A.BNP_NO    > i_end_nab_no
                           group by A.POL_NO,A.ENDOR_NO,A.BNP_NO,A.SEQ_NO ;
       end;

       --LJM 추징환급 보험료가 0인면 데이타 삭제 처리
       BEGIN
            DELETE FROM TBID0016
            WHERE POL_NO = i_pol_no
            AND ENDOR_NO  = i_endor_no
            AND BNP_NO    = i_end_nab_no
            AND BNP_PREM  = 0;

       END;

       if V_ENDOR_GB = '7' then
           begin
               update TBID0016
                  set RCPT_CD   = '9'    --부활로 수정
                where POL_NO    = i_pol_no
                  and ENDOR_NO  = i_endor_no
                  and BNP_NO    > i_end_nab_no
                  and BNP_DATE <= V_APPY_DATE
                  and RCPT_NO IS NULL;
           end;
       end if;

exception when others then
                   dbms_output.put_line('PR_RENT_ENDOR_BUNAP_TOT_RATE Main Error1: '||sqlerrm);
                   raise_application_error(-20001, 'PR_RENT_ENDOR_BUNAP_TOT_RATE Error1: '||sqlerrm);
end;
CREATE  OR REPLACE-- added during DDL generation.
procedure KRMA_APP.pr_rent_rtn_amt( p_pln_no_gb in varchar2, p_pol_no in TBID0001.POL_NO%type, p_endor_no in TBID0001.ENDOR_NO%type, p_err_msg out varchar2 ) as
    /*****************************************************************/
    /* 생성일자 : 2013.04.29                                         */
    /* 생성자   : 최재혁                                             */
    /* 업무내용 : 배서취소                                           */
    /* Parameters: P_PLN_NO_GB = '2' (배서)                          */
    /*             P_POL_NO = 증권번호                               */
    /*             P_ENDOR_NO = 배서번호                             */
    /*****************************************************************/

    V_ERRTITLE                          varchar2(50);                           --에러 TITLE
    V_ERRMESSAGE                        varchar2(300);                          --에러 메세지
    e_err                               exception;

    V_ENDOR_STATUS                      TBID0001.ENDOR_STATUS%type;             --배서상태
    V_TREATY_HQ_CD                      TBID0001.TREATY_HQ_CD%type;             --취급자본부코드
    V_TREATY_BRH_CD                     TBID0001.TREATY_BRH_CD%type;            --취급자관리점코드
    V_TREATY_CD                         TBID0001.TREATY_CD%type;                --취급자코드
    V_USER_ID                           TBID0001.USER_ID%type;                  --USER_ID
    V_APPY_FROM                         TBID0001.APPY_FROM%type;                --적용시작일
    V_BASIS_FROM                        TBID0001.BASIS_FROM%type;               --기준시작일
    V_I_KIND_CD                         TBID0001.I_KIND_CD%type;                --계약종목
    V_APPY_PREM_BEF                     TBIC0202.ENDOR_BEFORE_PREM%type;
    V_APPY_PREM_AFT                     TBIC0202.ENDOR_BEFORE_PREM%type;
    V_DIFF_AMT                          TBIC0202.PREM_DIFF_AMT%type;
    V_TOT_INSUR_AMT                     TBID0001.TOT_INSUR_AMT%type;            --총가입금액
    V_APPY_SUM_PREM                     TBID0001.APPY_SUM_PREM%type;            --적용합계보험료
    V_RIDER_INSUR_AMT                   TBID0001.RIDER_INSUR_AMT%type;          --특약가입금액
    V_RIDER_PREM                        TBID0001.RIDER_PREM%type;               --특약보험료
    V_SUM_PREM                          TBID0001.SUM_PREM%type;                 --합계보험료
    V_END_NAB_NO                        TBID0001.END_NAB_NO%type;               --최종납입회차
    V_MAX_SEQ_NO                        TBID0016.SEQ_NO%type;                   --마지막분납순

BEGIN

    V_ERRTITLE   := '환입배서(PR_RENT_RTN_AMT)';
    V_ERRMESSAGE := 'START';
    p_err_msg := 'NOT_OK';

    --구분값이 배서일 때만
    IF p_pln_no_gb = '2' THEN

        BEGIN
            --공제일자 SELECT
            select TOT_INSUR_AMT       , APPY_SUM_PREM       , RIDER_INSUR_AMT       , RIDER_PREM
                 , SUM_PREM            , END_NAB_NO
              into V_TOT_INSUR_AMT     , V_APPY_SUM_PREM     , V_RIDER_INSUR_AMT     , V_RIDER_PREM
                 , V_SUM_PREM          , V_END_NAB_NO
              from TBID0001
             where POL_NO   = p_pol_no
               and ENDOR_NO = p_endor_no - 2;

        exception when no_data_found then
            V_ERRMESSAGE := '배서-계약정보(TBID0001) 이전 데이터를 찾을 수 없습니다.';
            raise e_err;
        END;

        BEGIN
            --배서 상태 확인
            select ENDOR_STATUS   , TREATY_HQ_CD           , TREATY_BRH_CD          , TREATY_CD
                 , USER_ID        , to_date(APPY_FROM)     , to_date(BASIS_FROM)    , I_KIND_CD
              into V_ENDOR_STATUS , V_TREATY_HQ_CD         , V_TREATY_BRH_CD        , V_TREATY_CD
                 , V_USER_ID      , V_APPY_FROM            , V_BASIS_FROM           , V_I_KIND_CD
              from TBID0001
             where POL_NO   = p_pol_no
               and ENDOR_NO = p_endor_no;

        exception when no_data_found then
            V_ERRMESSAGE := '배서-계약정보(TBID0001) 데이터를 찾을 수 없습니다.';
            raise e_err;
        END;

        --배서상태가 설계인 데이터만 환입
        IF V_ENDOR_STATUS = '1' THEN
            --TBID0013 테이블 데이터 삭제 - 화면에서 등록된 데이터 삭제하고 이전 배서 데이터로 밀어넣기 위해서
            V_ERRMESSAGE := '배서-담보별보험료(TBID0013) 데이터 삭제';
            BEGIN
                delete from TBID0013
                 where POL_NO   = p_pol_no
                   and ENDOR_NO = p_endor_no;

            exception when others then
                V_ERRMESSAGE := '배서-담보별보험료(TBID0013) 데이터 삭제 오류';
                raise e_err;
            END;

            --TBID0013 테이블 데이터 생성 - 이전 배서 데이터 그대로 밀어넣는다.
     --2017.02.07 담보별 요율 GRP_DMBO_RATE 컬럼추가
            V_ERRMESSAGE := '배서-담보별보험료(TBID0013) 데이터 생성';

            BEGIN
                insert into TBID0013
                     ( POL_NO          , ENDOR_NO          , BASIC_SCONT_GB        , DMBO_CD           , APPY_FROM
                     , ACDNT_RESP_WANT , MAN_RESP_WANT     , INSUR_AMT             , INSUR_AMT_GB      , DUCT_AMT_GB
                     , BASIC_PREM      , DMBO_START_DATE   , DMBO_END_DATE         , APPY_PREM         , BASIC_RANGE_R
                     , CANCEL_CALC_GB  , APPY_TO           , BASIS_FROM            , BASIS_TO          , IT_PROCESSING
                     , USER_ID         , BASIC_YEAR_PREM   , APPY_YEAR_PREM  ,GRP_DMBO_RATE)
                select POL_NO          , P_ENDOR_NO        , BASIC_SCONT_GB,         DMBO_CD,            APPY_FROM
                     , ACDNT_RESP_WANT , MAN_RESP_WANT     , INSUR_AMT             , INSUR_AMT_GB      , DUCT_AMT_GB
                     , BASIC_PREM      , DMBO_START_DATE   , DMBO_END_DATE         , APPY_PREM         , BASIC_RANGE_R
                     , CANCEL_CALC_GB  , APPY_TO           , BASIS_FROM            , BASIS_TO          , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
                     , V_USER_ID       , BASIC_YEAR_PREM   , APPY_YEAR_PREM ,GRP_DMBO_RATE
                  from TBID0013
                 where POL_NO   = p_pol_no
                   and ENDOR_NO = p_endor_no - 2;

            exception when others then
                V_ERRMESSAGE := '배서-담보별보험료(TBID0013) 데이터 생성시 오류';
                raise e_err;
            END;

            --TBID0014 테이블 데이터 생성 - 이전 배서 데이터 그대로 밀어넣는다.
            V_ERRMESSAGE := '배서-담보기간별보험료(TBID0014) 데이터 생성';

            BEGIN
                insert into TBID0014
                     ( POL_NO          , ENDOR_NO          , DMBO_CD           , CALC_FYMD
                     , CALC_EYMD       , BASIC_PREM        , APPY_PREM         , APPY_FROM
                     , APPY_TO         , BASIS_FROM        , BASIS_TO          , IT_PROCESSING
                     , USER_ID         , BASIC_YEAR_PREM   , APPY_YEAR_PREM )
                select POL_NO          , P_ENDOR_NO        , DMBO_CD           , CALC_FYMD
                     , CALC_EYMD       , BASIC_PREM        , APPY_PREM         , APPY_FROM
                     , APPY_TO         , BASIS_FROM        , BASIS_TO          , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
                     , V_USER_ID       , BASIC_YEAR_PREM   , APPY_YEAR_PREM
                  from TBID0014
                 where POL_NO   = p_pol_no
                   and ENDOR_NO = p_endor_no - 2;

            exception when others then
                V_ERRMESSAGE := '배서-담보기간별보험료(TBID0014) 데이터 생성시 오류';
                raise e_err;
            END;


            --마지막 분납순번을 구한다.
            V_ERRMESSAGE := '배서-분납회차 순번(TBID0016) 조회';

            BEGIN
                select MAX(SEQ_NO)
                  into V_MAX_SEQ_NO
                  from TBID0016
                 where POL_NO   = p_pol_no
                   and ENDOR_NO = p_endor_no - 1;
            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '배서-분납회차 순번(TBID0016) 조회 오류';
                RAISE e_err;
            END;

            --TBID0015 테이블 데이터 생성 - 취소(해지) 배서 이전 데이터 그대로 밀어넣는다.
            V_ERRMESSAGE := '배서-담보별분납계획(TBID0015) 데이터 생성';

            BEGIN
                insert into TBID0015
                     ( POL_NO          , ENDOR_NO          , BNP_NO        , SEQ_NO
                     , DMBO_CD         , BASIC_PREM        , DMBO_PREM     , ISTAR_VALID_DATE
                     , IEND_VALID_DATE , OLD_ENDOR_NO      , APPY_FROM     , APPY_TO
                     , BASIS_FROM      , BASIS_TO          , USER_ID )
                select POL_NO          , P_ENDOR_NO        , BNP_NO        , SEQ_NO
                     , DMBO_CD         , BASIC_PREM        , DMBO_PREM     , ISTAR_VALID_DATE
                     , IEND_VALID_DATE , OLD_ENDOR_NO      , APPY_FROM     , APPY_TO
                     , BASIS_FROM      , BASIS_TO          , USER_ID
                  from TBID0015
                 where POL_NO   = p_pol_no
                   and ENDOR_NO = p_endor_no - 2;

            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '배서-담보별분납계획(TBID0015) 데이터 생성 오류';
                RAISE e_err;
            END;

            --TBID0015 테이블 취소,해지 환불데이터 생성
            --이전 배서번호와 그 이전 배서번호를 비교하여 이전 배서번호에 생긴 데이터만 그대로 생성한다.
            V_ERRMESSAGE := '배서-담보별분납계획(TBID0015) 환불데이터 생성(1)';

            BEGIN
                insert into TBID0015
                     ( POL_NO              , ENDOR_NO          , BNP_NO             , SEQ_NO
                     , DMBO_CD             , BASIC_PREM        , DMBO_PREM          , ISTAR_VALID_DATE
                     , IEND_VALID_DATE     , OLD_ENDOR_NO      , APPY_FROM          , APPY_TO
                     , BASIS_FROM          , BASIS_TO          , USER_ID )
                select POL_NO              , p_endor_no        , BNP_NO             , SEQ_NO
                     , DMBO_CD             , BASIC_PREM        , DMBO_PREM          , ISTAR_VALID_DATE
                     , IEND_VALID_DATE     , OLD_ENDOR_NO      , APPY_FROM          , APPY_TO
                     , BASIS_FROM          , BASIS_TO          , USER_ID
                  from TBID0015
                 where ( POL_NO, BNP_NO, SEQ_NO, DMBO_CD ) in (select POL_NO, BNP_NO, SEQ_NO, DMBO_CD
                                                                 from TBID0015
                                                                where POL_NO   = p_pol_no
                                                                  and ENDOR_NO = p_endor_no - 1
                                                               minus
                                                               select POL_NO, BNP_NO, SEQ_NO, DMBO_CD
                                                                 from TBID0015
                                                                where POL_NO   = p_pol_no
                                                                  and ENDOR_NO = p_endor_no - 2 )
                   and ENDOR_NO = p_endor_no - 1;
            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '배서-담보별분납계획(TBID0015) 환불데이터 생성 오류(1)';
                RAISE e_err;
            END;


            --TBID0015 테이블 환불데이터 생성 - 분납계획에서 수납된 데이터만 확인해서 마지막 납입회차에  처리한다.
            --이전 배서번호와 그 이전 배서번호를 비교하여 이전 배서번호에 생긴 데이터만 그대로 역부호 처리하여 생성한다.
            --생성시 max(seq_no)는 별도로 뽑아서 처리한다.
            V_ERRMESSAGE := '배서-담보별분납계획(TBID0015) 환불데이터 생성(2)';

            BEGIN
                insert into TBID0015
                     ( POL_NO              , ENDOR_NO          , BNP_NO             , SEQ_NO
                     , DMBO_CD             , BASIC_PREM        , DMBO_PREM          , ISTAR_VALID_DATE
                     , IEND_VALID_DATE     , OLD_ENDOR_NO      , APPY_FROM          , APPY_TO
                     , BASIS_FROM          , BASIS_TO          , USER_ID )
                select POL_NO              , p_endor_no        , BNP_NO             , V_MAX_SEQ_NO + 1
                     , DMBO_CD             , BASIC_PREM * -1   , DMBO_PREM * -1     , ISTAR_VALID_DATE
                     , IEND_VALID_DATE     , OLD_ENDOR_NO      , APPY_FROM          , APPY_TO
                     , BASIS_FROM          , BASIS_TO          , V_USER_ID
                  from TBID0015
                 where ( POL_NO, BNP_NO, SEQ_NO, DMBO_CD ) in (select POL_NO, BNP_NO, SEQ_NO, DMBO_CD
                                                                 from TBID0015
                                                                where POL_NO   = p_pol_no
                                                                  and ENDOR_NO = p_endor_no - 1
                                                               minus
                                                               select POL_NO, BNP_NO, SEQ_NO, DMBO_CD
                                                                 from TBID0015
                                                                where POL_NO   = p_pol_no
                                                                  and ENDOR_NO = p_endor_no - 2 )
                   and ENDOR_NO = p_endor_no - 1;
            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '배서-담보별분납계획(TBID0015) 환불데이터 생성 오류(2)';
                RAISE e_err;
            END;

            --TBID0016 테이블 데이터 생성 - 이전 배서 데이터 그대로 밀어넣는다.
            V_ERRMESSAGE := '배서-분납계획(TBID0016) 데이터 생성';
            --변경이력
            --2013.04.10 : 분납계획 INSERT 시 미처리 데이터는 0으로 분납보험료 세팅한다.

            BEGIN
                insert into TBID0016
                     ( POL_NO          , ENDOR_NO          , BNP_NO            , SEQ_NO
                     , I_KIND_CD       , RCPT_CD           , NA_DATE           , ACCOUNT_MTH
                     , ACCOUNT_ID      , MANG_NO           , BNP_GUIDE_DATE    , BNP_RATION
                     , BNP_DATE        , BNP_PREM          , BNP_DEDUCT_AMT    , PROC_STATUS
                     , RCPT_GB         , RCPT_NO           , PRINT_CNT         , TREATY_HQ_CD
                     , TREATY_BRH_CD   , TREATY_CD         , APPY_FROM         , APPY_TO
                     , BASIS_FROM      , BASIS_TO          , IT_PROCESSING     , USER_ID )
                select POL_NO          , P_ENDOR_NO        , BNP_NO            , SEQ_NO
                     , I_KIND_CD       , RCPT_CD           , NA_DATE           , ACCOUNT_MTH
                     , ACCOUNT_ID      , MANG_NO           , BNP_GUIDE_DATE    , BNP_RATION
                     , BNP_DATE        , BNP_PREM          , BNP_DEDUCT_AMT    , PROC_STATUS
                     , RCPT_GB         , RCPT_NO           , PRINT_CNT         , TREATY_HQ_CD
                     , TREATY_BRH_CD   , TREATY_CD         , APPY_FROM         , APPY_TO
                     , BASIS_FROM      , BASIS_TO          , IT_PROCESSING     , USER_ID
                  from TBID0016
                 where POL_NO   = p_pol_no
                   and ENDOR_NO = p_endor_no - 2;

            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '배서-분납계획(TBID0016) 데이터 생성 오류';
                RAISE e_err;
            END;

            --TBID0016 테이블 환불데이터 생성 - 담보별분납계획에서 환불처리할 데이터만 등록한다.
            V_ERRMESSAGE := '배서-분납계획(TBID0016) 환불데이터 생성(1)';

            BEGIN
                insert into TBID0016
                     ( POL_NO          , ENDOR_NO          , BNP_NO            , SEQ_NO
                     , I_KIND_CD       , RCPT_CD           , NA_DATE           , ACCOUNT_MTH
                     , ACCOUNT_ID      , MANG_NO           , BNP_GUIDE_DATE    , BNP_RATION
                     , BNP_DATE        , BNP_PREM          , BNP_DEDUCT_AMT    , PROC_STATUS
                     , RCPT_GB         , RCPT_NO           , PRINT_CNT         , TREATY_HQ_CD
                     , TREATY_BRH_CD   , TREATY_CD         , APPY_FROM         , APPY_TO
                     , BASIS_FROM      , BASIS_TO          , IT_PROCESSING     , USER_ID )
                select POL_NO          , p_endor_no        , BNP_NO            , SEQ_NO
                     , I_KIND_CD       , RCPT_CD           , NA_DATE           , ACCOUNT_MTH
                     , ACCOUNT_ID      , MANG_NO           , BNP_GUIDE_DATE    , BNP_RATION
                     , BNP_DATE        , BNP_PREM          , BNP_DEDUCT_AMT    , PROC_STATUS
                     , RCPT_GB         , RCPT_NO           , PRINT_CNT         , TREATY_HQ_CD
                     , TREATY_BRH_CD   , TREATY_CD         , APPY_FROM         , APPY_TO
                     , BASIS_FROM      , BASIS_TO          , IT_PROCESSING     , USER_ID
                  from TBID0016
                 where ( POL_NO, BNP_NO, SEQ_NO ) in ( select POL_NO, BNP_NO, SEQ_NO
                                                         from TBID0016
                                                        where POL_NO   = p_pol_no
                                                          and ENDOR_NO = p_endor_no - 1
                                                       minus
                                                       select POL_NO, BNP_NO, SEQ_NO
                                                         from TBID0016
                                                        where POL_NO   = p_pol_no
                                                          and ENDOR_NO = p_endor_no - 2 )
                   and ENDOR_NO = p_endor_no - 1;
            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '배서-분납계획(TBID0016) 환불데이터 생성 오류(1)';
                RAISE e_err;
            END;


            --TBID0016 테이블 환불데이터 생성 - 담보별분납계획에서 환불처리할 데이터만 등록한다.
            V_ERRMESSAGE := '배서-분납계획(TBID0016) 환불데이터 생성(2)';

            BEGIN
                insert into TBID0016
                     ( POL_NO          , ENDOR_NO       , BNP_NO           , SEQ_NO
                     , I_KIND_CD       , RCPT_CD        , BNP_DATE         , BNP_PREM
                     , PROC_STATUS     , TREATY_HQ_CD   , TREATY_BRH_CD    , TREATY_CD
                     , APPY_FROM       , APPY_TO        , BASIS_FROM       , BASIS_TO
                     , USER_ID )
                select POL_NO          , p_endor_no     , BNP_NO           , V_MAX_SEQ_NO + 1
                     , I_KIND_CD       , '5'            , V_APPY_FROM      , BNP_PREM * -1
                     , '1'             , V_TREATY_HQ_CD , V_TREATY_BRH_CD  , V_TREATY_CD
                     , APPY_FROM       , APPY_TO        , BASIS_FROM       , BASIS_TO
                     , V_USER_ID
                  from TBID0016
                 where ( POL_NO, BNP_NO, SEQ_NO ) in ( select POL_NO, BNP_NO, SEQ_NO
                                                         from TBID0016
                                                        where POL_NO   = p_pol_no
                                                          and ENDOR_NO = p_endor_no - 1
                                                       minus
                                                       select POL_NO, BNP_NO, SEQ_NO
                                                         from TBID0016
                                                        where POL_NO   = p_pol_no
                                                          and ENDOR_NO = p_endor_no - 2 )
                   and ENDOR_NO = p_endor_no - 1;
            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '배서-분납계획(TBID0016) 환불데이터 생성 오류(2)';
                RAISE e_err;
            END;

            --TBID0001 테이블 이전데이터값 그대로 넣기
            V_ERRMESSAGE := '배서-계약정보(TBID0001) 데이터 수정';

            BEGIN
                update TBID0001
                   set TOT_INSUR_AMT   = V_TOT_INSUR_AMT
                     , APPY_SUM_PREM   = V_APPY_SUM_PREM
                     , RIDER_INSUR_AMT = V_RIDER_INSUR_AMT
                     , RIDER_PREM      = V_RIDER_PREM
                     , SUM_PREM        = V_SUM_PREM
                 where POL_NO          = p_pol_no
                   and ENDOR_NO        = p_endor_no;

            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '배서-계약정보(TBID0001) 데이터 수정시 오류'||'('||sqlerrm||')';
                RAISE e_err;
            END;

            --TBIC0202 테이블 SUM데이터 UPDATE
            V_ERRMESSAGE := '계약-변경이력(TBIC0202) 합계데이터 생성';

            BEGIN
                SELECT SUM(DECODE(ENDOR_NO, P_ENDOR_NO-1, APPY_PREM, 0)) AS APPY_PREM_BEF
                     , SUM(DECODE(ENDOR_NO, P_ENDOR_NO, APPY_PREM, 0)) AS APPY_PREM_AFT
                     , SUM(DECODE(ENDOR_NO, P_ENDOR_NO, APPY_PREM, 0)) - SUM(DECODE(ENDOR_NO, P_ENDOR_NO-1, APPY_PREM, 0)) AS DIFF_AMT
                  INTO V_APPY_PREM_BEF, V_APPY_PREM_AFT, V_DIFF_AMT
                  FROM TBID0013
                 WHERE POL_NO = p_pol_no
                   AND ENDOR_NO BETWEEN p_endor_no - 1 AND p_endor_no;

                UPDATE TBIC0202
                   SET ENDOR_BEFORE_PREM = nvl(V_APPY_PREM_BEF, 0)
                     , ENDOR_AFTER_PREM  = nvl(V_APPY_PREM_AFT, 0)
                     , PREM_DIFF_AMT     = nvl(V_DIFF_AMT,0)
                     , GET_GB            = '5'
                 WHERE POL_NO   = p_pol_no
                   AND ENDOR_NO = p_endor_no;
            EXCEPTION WHEN OTHERS THEN
                V_ERRMESSAGE := '계약-변경이력(TBIC0202) 합계데이터 생성 오류';
                RAISE e_err;
            END;

        END IF;

    END IF;

    p_err_msg := 'OK';

EXCEPTION
    WHEN e_err THEN
        ROLLBACK;
        p_err_msg := V_ERRTITLE    || ' : ' ||    V_ERRMESSAGE;
    WHEN OTHERS THEN
        ROLLBACK;
        p_err_msg := V_ERRTITLE || '    : '    || SUBSTR(SQLERRM, 1, 250);
END;
CREATE OR REPLACE -- added during DDL generation.
procedure KRMA_APP.PR_RENT_SPECIAL_RATE( i_job_gubun            in varchar2
                                                          , i_enter_no             in varchar2
                                                          , i_endor_no             in number
                                                          , i_i_kind_cd            in TBID0001.I_KIND_CD%TYPE
                                                          , i_car_kind_cd          in TBID0001.CAR_KIND_CD%TYPE
                                                          , i_car_type_cd          in TBID0001.CAR_TYPE_CD%TYPE
                                                          , i_aply_date            in TBID0001.ISTAR_CONT_DATE%TYPE
                                                          , i_dmbo_cd              in TBIB0203.DMBO_CD%TYPE
                                                          , i_0012_info            in varchar2
                                                          , o_special_rate         out number
                                                          , o_treat_rate           out number ) as
/******************************************************************************************************/
/* Procedure Name :  PR_RENT_SPECIAL_RATE                                                             */
/* Function       :  특약 및 특별요율 산정                                                            */
/* Parameter  i_job_gubun          [ IN] 작업구분(1:가입설계 2: 배서)                                 */
/*            i_pol_no             [ IN] 증권번호                                                     */
/*            i_endor_no           [ IN] 배서번호                                                     */
/*            i_i_kind_cd          [ IN] 보험종목                                                     */
/*            i_car_kind_cd        [ IN] '0'                                                          */
/*            i_car_type_cd        [ IN] 차종코드                                                     */
/*            i_aply_date          [ IN] 차형태코드                                                   */
/*            i_dmbo_cd            [ IN] 담보코드                                                     */
/*            i_0012_info          [ IN] 특약 및 특별 담보 코드 정보                                  */
/*            o_special_rate       [Out] 특별요율                                                     */
/*            o_treat_rate         [Out] 연령한정 요율                                                */
/******************************************************************************************************/
V_SPECIAL_INFO        varchar2(1000);

s_special_info        varchar2(100);
s_rate_cd             varchar2(10);
s_cust_no             varchar2(10); --2017.02.08 고객번호
s_age_rate VARCHAR2(10); --2017.02.08 연령배서 코드 조회..
s_aply_rate           number;
s_idx1                number;
s_idx2                number;

s_treat_age_rt        TBID0012.APPY_R%TYPE := 1.0;
s_special_rate        TBID0012.APPY_R%TYPE := 100;

BEGIN
      if    i_0012_info is not null THEN
   IF TO_CHAR(i_aply_date,'YYYYMMDD')  < '20170401' THEN
     begin
       select WM_CONCAT(RATE_CD || '|' || APLY_RATE)
      into V_SPECIAL_INFO
      from TBIB0206
     where I_KIND_CD         = i_i_kind_cd
       and CO_GB             = '0'
       and SPCL_AGRE_KEY_GB1 = '00'
       and SPCL_AGRE_KEY_GB2 = '00'
       and CAR_KIND          = i_car_kind_cd
       and CAR_KIND2         = i_car_type_cd
       and DMBO_CD           = i_dmbo_cd
       and APLY_FYMD        <= i_aply_date
       and APLY_EYMD        >= i_aply_date
       and regexp_like(RATE_CD,i_0012_info);

     exception when no_data_found then V_SPECIAL_INFO :=null;
         when others        then dbms_output.put_line('PR_RENT_SPECIAL_RATE Main Error: '||sqlerrm);
               raise_application_error(-20011, 'PR_RENT_SPECIAL_RATE Main Error: '||sqlerrm);
     end;
   ELSE
   IF   i_job_gubun = '1' THEN
   BEGIN
    SELECT CUST_NO INTO s_cust_no FROM TBIB0001 WHERE ENT_DGN_NO = i_enter_no;
   END;
   ELSE
   BEGIN
    --SELECT CUST_NO INTO s_cust_no FROM TBID0001 WHERE POL_NO = i_enter_no AND ENDOR_NO = i_endor_no;
    SELECT CUST_NO INTO s_cust_no FROM TBID0001 WHERE POL_NO = i_enter_no AND ROWNUM = 1;
   END;
   END if;

  BEGIN
   SELECT  CASE WHEN INSTR(i_0012_info, '41') > 0 THEN '41'
      WHEN INSTR(i_0012_info, '42') >0 THEN '42'
      WHEN INSTR(i_0012_info, '43') >0 THEN '43'
     END
    into s_age_rate
   from dual;
  END;

  BEGIN
   select WM_CONCAT (RATE_CD || '|' || CASE WHEN RATE_CD = '71' THEN ( SELECT TO_NUMBER(DECODE(RATE_CD_08, NULL, APLY_RATE, RATE_CD_08) ) AS RATE_CD_08
                       FROM TBAA0006
                      WHERE CUST_NO = s_cust_no
                     AND CODE_LIST = i_car_kind_cd||s_age_rate||DECODE(i_dmbo_cd,'01','00','13','03',i_dmbo_cd)
                     AND LAST_YN = 'Y'
                     AND i_aply_date BETWEEN APPY_START AND APPY_END)
                WHEN RATE_CD = '93' THEN  ( SELECT TO_NUMBER(DECODE(RATE_CD_09, NULL,APLY_RATE, RATE_CD_09) ) AS RATE_CD_09
                       FROM TBAA0006
                      WHERE CUST_NO = s_cust_no
                     AND CODE_LIST = i_car_kind_cd||s_age_rate||DECODE(i_dmbo_cd,'01','00','13','03',i_dmbo_cd)
                     AND LAST_YN = 'Y'
                     AND i_aply_date BETWEEN APPY_START AND APPY_END)
                WHEN RATE_CD = '94' THEN  ( SELECT TO_NUMBER(DECODE(RATE_CD_10, NULL,APLY_RATE, RATE_CD_10) ) AS RATE_CD_10
                       FROM TBAA0006
                      WHERE CUST_NO = s_cust_no
                     AND CODE_LIST = i_car_kind_cd||s_age_rate||DECODE(i_dmbo_cd,'01','00','13','03',i_dmbo_cd)
                     AND LAST_YN = 'Y'
                     AND i_aply_date BETWEEN APPY_START AND APPY_END)
                ELSE APLY_RATE END )
    into V_SPECIAL_INFO
    from TBIB0206
    where I_KIND_CD         = i_i_kind_cd
    and CO_GB             = '0'
    and SPCL_AGRE_KEY_GB1 = '00'
    and SPCL_AGRE_KEY_GB2 = '00'
    and CAR_KIND          = i_car_kind_cd
    and CAR_KIND2         = i_car_type_cd
    and DMBO_CD           = i_dmbo_cd
    and APLY_FYMD        <= i_aply_date
    and APLY_EYMD        >= i_aply_date
    and regexp_like(RATE_CD,i_0012_info);

   exception when no_data_found then V_SPECIAL_INFO :=null;
     when others        then dbms_output.put_line('PR_RENT_SPECIAL_RATE Main Error: '||sqlerrm);
         raise_application_error(-20011, 'PR_RENT_SPECIAL_RATE Main Error: '||sqlerrm);
  END;
   END IF;


          if    V_SPECIAL_INFO is not null then
                s_idx1 :=  length(V_SPECIAL_INFO) - length(replace(V_SPECIAL_INFO,',','')) + 1 ;
                s_idx2 :=  0;

                Loop
                     s_idx2 := s_idx2 +1;

                     if    s_idx2 > s_idx1 then
                           exit;
                     end if;

                     s_special_info  := regexp_substr(V_SPECIAL_INFO,'[^,]+',1,s_idx2);

                     s_rate_cd       := regexp_substr(s_special_info,'[^|]+',1,1);
                     s_aply_rate     := to_number(regexp_substr(s_special_info,'[^|]+',1,2));

                     if    s_rate_cd in ( '41', '42', '43') then
                           s_treat_age_rt  := nvl(s_aply_rate, 100)/100;
                     else
                           s_special_rate  := s_special_rate + (nvl(s_aply_rate,100) - 100 ) ;
                     end if;

                end Loop;

           end if;

      end if;

      o_special_rate := s_special_rate;
      o_treat_rate   := s_treat_age_rt;

      exception when others then dbms_output.put_line('PR_RENT_SPECIAL_RATE Main Error: '||sqlerrm);
                                 raise_application_error(-20011, 'PR_RENT_SPECIAL_RATE Main Error: '||sqlerrm);
END;
CREATE -- added during DDL generation.
procedure PR_RENT_TERM_CHG( p_pln_no_gb in varchar2, p_pol_no in TBID0001.POL_NO%type, p_endor_no in TBID0001.ENDOR_NO%type, p_err_msg out varchar2 ) as
    /*****************************************************************/
    /* 생성일자 : 2013.04.08                                         */
    /* 생성자   : 은현민                                             */
    /* 업무내용 : 공제기간 수정                                      */
    /* Parameters: P_PLN_NO_GB = '2' (배서)                          */
    /*             P_POL_NO = 증권번호                               */
    /*             P_ENDOR_NO = 배서번호                             */
    /*****************************************************************/

    V_ERRTITLE                          varchar2(50);                           --에러 TITLE
    V_ERRMESSAGE                        varchar2(300);                          --에러 메세지
    e_err                               exception;

    V_APPY_FROM                         TBID0001.APPY_FROM%type;                --적용 시작일자
    V_APPY_TO                           TBID0001.APPY_TO%type;                  --적용 종료일자
    V_BASIS_FROM                        TBID0001.BASIS_FROM%type;               --기준 시작일자
    V_BASIS_TO                          TBID0001.BASIS_TO%type;                 --기준 종료일자
    V_ISTAR_CONT_DATE                   TBID0001.ISTAR_CONT_DATE%type;          --공제시작시기
    V_USER_ID                           TBID0001.USER_ID%type;                  --공제시작시기
    V_TREATY_HQ_CD                      TBID0001.TREATY_HQ_CD%type;             --취급자본부코드
    V_TREATY_BRH_CD                     TBID0001.TREATY_BRH_CD%type;            --취급자대리점코드
    V_TREATY_CD                         TBID0001.TREATY_CD%type;                --취급자
    V_TOT_INSUR_AMT                     TBID0001.TOT_INSUR_AMT%type;            --총가입금액
    V_APPY_SUM_PREM                     TBID0001.APPY_SUM_PREM%type;            --적용합계보험료
    V_RIDER_INSUR_AMT                   TBID0001.RIDER_INSUR_AMT%type;          --특약가입금액
    V_RIDER_PREM                        TBID0001.RIDER_PREM%type;               --특약보험료
    V_SUM_PREM                          TBID0001.SUM_PREM%type;                 --합계보험료
    V_SHORT_DAY_GB                      TBID0001.SHORT_DAY_GB%type;             --일할, 단기 계약 구분
    V_CHG_DATE                          TBID0001.IEND_CONT_DATE%type;           --변경할 일자

    V_PRE_ENDOR_NO                      TBID0001.ENDOR_NO%type;                 --이전배서번호

    V_CONT_DD                           number;
    V_CHG_TERM                          number;
    V_DIFF                              number;
    V_APPY_PREM_BEF                     number;


BEGIN

    p_err_msg := 'NOT_OK';
    V_ERRTITLE := 'START';

    --구분값이 배서일 때만
    IF p_pln_no_gb = '2' AND p_endor_no = 1 THEN

        --이전배서번호 SET
        V_PRE_ENDOR_NO := p_endor_no - 1;

        V_ERRTITLE   := '공제기간수정(PR_RENT_TERM_CHG)';

        BEGIN
            --공제일자 SELECT
            select TOT_INSUR_AMT,     APPY_SUM_PREM,       RIDER_INSUR_AMT,      RIDER_PREM,      SUM_PREM,          SHORT_DAY_GB
              into V_TOT_INSUR_AMT,   V_APPY_SUM_PREM,     V_RIDER_INSUR_AMT,    V_RIDER_PREM,    V_SUM_PREM,        V_SHORT_DAY_GB
              from TBID0001
             where POL_NO   = p_pol_no
               and ENDOR_NO = V_PRE_ENDOR_NO;

        exception when no_data_found then
            V_ERRMESSAGE := '배서-계약정보(TBID0001) 이전 데이터를 찾을 수 없습니다.'||'('||sqlerrm||')';
            raise e_err;
        END;

        --단기계약
        if V_SHORT_DAY_GB = '2' then

            BEGIN
                --공제일자 SELECT
                select to_date(ISTAR_CONT_DATE),        to_date(APPY_FROM),          to_date(APPY_TO),       USER_ID
                     , TREATY_HQ_CD,                    TREATY_BRH_CD,               TREATY_CD
                     , to_date(APPY_FROM) - to_date(ISTAR_CONT_DATE)
                     , to_date(IEND_CONT_DATE) - to_date(ISTAR_CONT_DATE)
                  into V_ISTAR_CONT_DATE,               V_APPY_FROM,                 V_APPY_TO,              V_USER_ID
                     , V_TREATY_HQ_CD,                  V_TREATY_BRH_CD,             V_TREATY_CD
                     , V_CHG_TERM
                     , V_CONT_DD
                  from TBID0001
                 where POL_NO   = P_POL_NO
                   and ENDOR_NO = P_ENDOR_NO;

                V_CHG_DATE := V_APPY_FROM + V_CONT_DD;

            exception when no_data_found then
                V_ERRMESSAGE := '배서-계약정보(TBID0001) 데이터를 찾을 수 없습니다.'||'('||sqlerrm||')';
                raise e_err;
            END;
        --일할계약
        else
            BEGIN
                --공제일자 SELECT
                select to_date(ISTAR_CONT_DATE),          to_date(APPY_FROM),          to_date(APPY_TO),       USER_ID
                     , TREATY_HQ_CD,                      TREATY_BRH_CD,               TREATY_CD
                     , to_date(APPY_FROM) - to_date(ISTAR_CONT_DATE)
                     , add_months(to_date(APPY_FROM), 12)
                  into V_ISTAR_CONT_DATE,                 V_APPY_FROM,                 V_APPY_TO,              V_USER_ID
                     , V_TREATY_HQ_CD,                    V_TREATY_BRH_CD,             V_TREATY_CD
                     , V_CHG_TERM
                     , V_CHG_DATE
                  from TBID0001
                 where POL_NO   = P_POL_NO
                   and ENDOR_NO = P_ENDOR_NO;

            exception when no_data_found then
                V_ERRMESSAGE := '배서-계약정보(TBID0001) 데이터를 찾을 수 없습니다.'||'('||sqlerrm||')';
                raise e_err;
            END;
        end if;

        BEGIN
            update TBID0011
               set APPY_TO  = to_date(to_char(V_CHG_DATE, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                 , BASIS_TO = to_date(to_char(V_CHG_DATE, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
             where POL_NO   = p_pol_no
               and ENDOR_NO = p_endor_no;

        exception when others then
            V_ERRMESSAGE := '배서-자동차추가정보(TBID0011) 데이터 수정시 오류'||'('||sqlerrm||')';
            raise e_err;
        END;

        BEGIN
            update TBID0012
               set APPY_TO  = to_date(to_char(V_CHG_DATE, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                 , BASIS_TO = to_date(to_char(V_CHG_DATE, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
             where POL_NO   = p_pol_no
               and ENDOR_NO = p_endor_no;

        exception when others then
            V_ERRMESSAGE := '배서-계약 특약특별요율(TBID0012) 데이터 수정시 오류'||'('||sqlerrm||')';
            raise e_err;
        END;

        BEGIN
            update TBID0013
               set APPY_FROM       = to_date(to_char(V_APPY_FROM, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                 , DMBO_START_DATE = to_date(to_char(V_APPY_FROM, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                 , DMBO_END_DATE   = to_date(to_char(V_CHG_DATE, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                 , APPY_TO         = to_date(to_char(V_CHG_DATE, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                 , BASIS_FROM      = to_date(to_char(V_APPY_FROM, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                 , BASIS_TO        = to_date(to_char(V_CHG_DATE, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
             where POL_NO          = p_pol_no
               and ENDOR_NO        = p_endor_no;
        exception when others then
            V_ERRMESSAGE := '배서-계약 담보별분담금(TBID0013) 데이터 수정시 오류'||'('||sqlerrm||')';
            raise e_err;
        END;

       --배서프로시저를 돌리고 나서 공제기간 변경이 되도록 변경_20130429최재혁
        BEGIN
            update TBID0014
               set CALC_FYMD       = to_date(to_char(V_APPY_FROM, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                 , CALC_EYMD       = to_date(to_char(V_CHG_DATE, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                 , APPY_FROM       = to_date(to_char(V_APPY_FROM, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                 , APPY_TO         = to_date(to_char(V_CHG_DATE, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                 , BASIS_FROM      = to_date(to_char(V_APPY_FROM, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                 , BASIS_TO        = to_date(to_char(V_CHG_DATE, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                 , USER_ID         = V_USER_ID
             where POL_NO          = p_pol_no
               and ENDOR_NO        = p_endor_no;
        exception when others then
            V_ERRMESSAGE := '배서-계약 담보기간별분담금(TBID0014) 데이터 생성시 오류'||'('||sqlerrm||')';
            raise e_err;
        END;

       --배서프로시저를 돌리고 나서 공제기간 변경이 되도록 변경_20130429최재혁
        BEGIN
            update TBID0015
               set ISTAR_VALID_DATE  = ISTAR_VALID_DATE + V_CHG_TERM
                 , IEND_VALID_DATE   = IEND_VALID_DATE + V_CHG_TERM
                 , APPY_FROM         = APPY_FROM + V_CHG_TERM
                 , APPY_TO           = APPY_TO + V_CHG_TERM
                 , BASIS_FROM        = BASIS_FROM + V_CHG_TERM
                 , BASIS_TO          = BASIS_TO + V_CHG_TERM
                 , USER_ID           = V_USER_ID
             where POL_NO            = p_pol_no
               and ENDOR_NO          = p_endor_no;
        exception when others then
            V_ERRMESSAGE := '배서-계약 담보별분납계획(TBID0015) 데이터 생성시 오류'||'('||sqlerrm||')';
            raise e_err;
        END;

       --배서프로시저를 돌리고 나서 공제기간 변경이 되도록 변경_20130429최재혁
        BEGIN
            --계약 담보별분담금 공제기간, 적용일자, 기준일자 변경
            update TBID0016
               set BNP_GUIDE_DATE  = BNP_GUIDE_DATE + V_CHG_TERM
                 , BNP_DATE        = BNP_DATE + V_CHG_TERM
                 , APPY_FROM       = APPY_FROM + V_CHG_TERM
                 , APPY_TO         = APPY_TO + V_CHG_TERM
                 , BASIS_FROM      = BASIS_FROM + V_CHG_TERM
                 , BASIS_TO        = BASIS_TO + V_CHG_TERM
                 , TREATY_HQ_CD    = V_TREATY_HQ_CD
                 , TREATY_BRH_CD   = V_TREATY_BRH_CD
                 , TREATY_CD       = V_TREATY_CD
                 , USER_ID         = V_USER_ID
             where POL_NO          = p_pol_no
               and ENDOR_NO        = p_endor_no;
        exception when others then
            V_ERRMESSAGE := '배서-계약 담보별분납계획(TBID0015) 데이터 생성시 오류'||'('||sqlerrm||')';
            raise e_err;
        END;


        BEGIN
            update TBID0103
               set APPY_TO  = to_date(to_char(V_CHG_DATE, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                 , BASIS_TO = to_date(to_char(V_CHG_DATE, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
             where POL_NO   = p_pol_no
               and ENDOR_NO = p_endor_no;

        exception when others then
            V_ERRMESSAGE := '배서-질권정보(TBID0103) 데이터 수정시 오류'||'('||sqlerrm||')';
            raise e_err;
        END;

        BEGIN
            update TBID0104
               set APPY_TO  = to_date(to_char(V_CHG_DATE, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                 , BASIS_TO = to_date(to_char(V_CHG_DATE, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
             where POL_NO   = p_pol_no
               and ENDOR_NO = p_endor_no;

        exception when others then
            V_ERRMESSAGE := '배서-운전자정보(TBID0104) 데이터 수정시 오류'||'('||sqlerrm||')';
            raise e_err;
        END;

        BEGIN
            update TBID0001
               set ISTAR_CONT_DATE = to_date(to_char(V_APPY_FROM, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                 , IEND_CONT_DATE  = to_date(to_char(V_CHG_DATE, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                 , END_CHANGE_DATE = to_date(SYSDATE)
                 , APPY_TO         = to_date(to_char(V_CHG_DATE, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                 , BASIS_TO        = to_date(to_char(V_CHG_DATE, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                 , TOT_INSUR_AMT   = V_TOT_INSUR_AMT
                 , APPY_SUM_PREM   = V_APPY_SUM_PREM
                 , RIDER_INSUR_AMT = V_RIDER_INSUR_AMT
                 , RIDER_PREM      = V_RIDER_PREM
                 , SUM_PREM        = V_SUM_PREM
             where POL_NO          = p_pol_no
               and ENDOR_NO        = p_endor_no;

        exception when others then
            V_ERRMESSAGE := '배서-계약정보(TBID0001) 데이터 수정시 오류'||'('||sqlerrm||')';
            raise e_err;
        END;

        BEGIN
            update TBID0001
               set CONT_STATE  = '08'
             where POL_NO      = p_pol_no
               and ENDOR_NO    = V_PRE_ENDOR_NO;

        exception when others then
            V_ERRMESSAGE := '배서-계약정보(TBID0001) 이전 데이터 수정시 오류'||'('||sqlerrm||')';
            raise e_err;
        END;

        --TBIC0202 테이블 SUM데이터 UPDATE
        V_ERRMESSAGE := '계약-변경이력(TBIC0202) 합계데이터 생성';

        BEGIN
            SELECT SUM(DECODE(ENDOR_NO, P_ENDOR_NO-1, APPY_PREM, 0)) AS APPY_PREM_BEF
              INTO V_APPY_PREM_BEF
              FROM TBID0013
             WHERE POL_NO = p_pol_no
               AND ENDOR_NO BETWEEN p_endor_no - 1 AND p_endor_no;

            UPDATE TBIC0202
               SET APPY_TO           = to_date(to_char(V_CHG_DATE, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                 , BASIS_TO          = to_date(to_char(V_CHG_DATE, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                 , CALC_TO           = to_date(to_char(V_CHG_DATE, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                 , ENDOR_BEFORE_PREM = NVL(V_APPY_PREM_BEF, 0)
                 , ENDOR_AFTER_PREM  = NVL(V_APPY_PREM_BEF, 0)
                 , PREM_DIFF_AMT     = 0
                 , GET_GB            = '9'
             WHERE POL_NO   = p_pol_no
               AND ENDOR_NO = p_endor_no;
        exception when others then
            V_ERRMESSAGE := '계약-변경이력(TBIC0202) 합계데이터 생성 오류';
            raise e_err;
        END;

        p_err_msg := 'OK';

    END IF;

exception
    when e_err then
        p_err_msg := V_ERRTITLE    || ' : ' ||    V_ERRMESSAGE;
    when others then
        p_err_msg := V_ERRTITLE || '    : '    || substr(sqlerrm, 1, 250);
END;
CREATE -- added during DDL generation.
procedure          PR_TBAA0004_INSERT
(i_cust_no        varchar2,    /*:고객번호-조합원고유키        */
 i_car_seq        number,      /*차량aeq                       */
 i_history_seq    number,      /*table seq                     */
 i_change_channel varchar2,    /*변경요청 channel              */
 i_change_table   varchar2,    /*변경table                     */
 i_change_item    varchar2,    /*변경항목                      */
 i_change_group   varchar2,    /*변경항목 그룹                 */
 i_change_pgm     varchar2,    /*변경한 프로그램(화면명)       */
 i_before_data    varchar2,    /*이전DATA                      */
 i_after_data     varchar2,    /*이후DATA                      */
 i_change_id      varchar2,    /*변경자                        */
 i_change_name    varchar2     /*변경자 명                     */
 ) AS
/********************************************************************/
/* 생성일자 : 2013.02.27                                            */
/* 생성자   : 강신규                                                */
/* 업무내용 : 고객정보 및 출자금변경 내역 insert                    */
/* Parameter:고객번호-조합원고유키                                  */
/********************************************************************/
begin
    insert into TBAA0004(
            TBAA0004_SEQ,
            CUST_NO,
            CAR_SEQ,
            HISTORY_SEQ,
            CHANGE_CHANNEL,
            CHANGE_TABLE,
            CHANGE_ITEM,
            CHANGE_GROUP,
            CHANGE_PGM,
            BEFORE_DATA,
            AFTER_DATA,
            CHANGE_ID,
            CHANGE_NAME,
            IT_PROCESSING
            )
    values (
            SQ_TBAA0004.NEXTVAL,
            i_cust_no,
            i_car_seq,
            i_history_seq,
            i_change_channel,
            i_change_table,
            i_change_item,
            i_change_group,
            i_change_pgm,
            i_before_data,
            i_after_data,
            i_change_id,
            i_change_name,
            TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
            );

exception when others then
    dbms_output.put_line('PR_TBAA0004_INSERT Main Error: '||sqlerrm);
    raise_application_error(-20010, 'PR_TBAA0004_INSERT Main Error: '||sqlerrm);

end ;
CREATE -- added during DDL generation.
PROCEDURE          PR_UPDATE_START_DATE(I_POL_NO      in  varchar2,
                                                 I_START_DATE  in  varchar2,
                                                 I_USER_ID     in  varchar2,
                                                 O_RESULT      out varchar2) AS

/**************************************************************************************/
/* 생성일자 : 2013.04.22                                                              */
/* 생성자   : 이용한                                                                  */
/* 업무내용 : 수납처리 완료 시 신규계약건이면서 신차일 경우 공제시기 관련 모든 컬럼을 */
/*            영수일시로 업데이트 처리한다.                                           */
/* Parameter: [in] i_pol_no         : 증권번호                                        */
/*            [in] i_start_date     : 변경할 시작일시 포맷(2014/01/01 14:23:11)       */
/*            [in] i_user_id        : 처리자 ID                                       */
/*            [out]o_result         : 결과결과 정상(OK), 비정상(해당메시지)           */
/**************************************************************************************/

V_ENDOR_NO          NUMBER(1) :=0;      -- 신규계약건만 처리함으로 배서번호는 0번으로 설정한다.

BEGIN
    --반환 초기값 설정
    O_RESULT := 'NOT_OK' ;

    --설계마스터, 계약마스터, 배서마스터는 수납처리 완료 시 JAVA영역에서 별도로 다른 필드와 함께
    --처리하기 때문에 해당 프로시저에서는 처리하지 않는다.

    --설계/청약관련 테이블 업데이트
    BEGIN
        --가입설계-담보별분담금(TBIB0013)의 담보시기 업데이트
        UPDATE TBIB0013
           SET DMBO_START_DATE = TO_DATE(I_START_DATE,'YYYY/MM/DD HH24:MI:SS')
         WHERE ENT_DGN_NO      = (SELECT MAX(ENT_DGN_NO) FROM TBID0001 WHERE POL_NO = I_POL_NO);

        --가입설계-담보기간별분담금(TBIB0014)의 대상기간시작일시 업데이트
        UPDATE TBIB0014
           SET CALC_FYMD       = TO_DATE(I_START_DATE,'YYYY/MM/DD HH24:MI:SS')
         WHERE ENT_DGN_NO      = (SELECT MAX(ENT_DGN_NO) FROM TBID0001 WHERE POL_NO = I_POL_NO);
    END;

    --배서 테이블 업데이트
    BEGIN
        --배서-계약자동차추가정보(TBID0011)의 적용시작일자, 기준시작일자 업데이트
        UPDATE TBID0011
           SET APPY_FROM       = TO_DATE(I_START_DATE,'YYYY/MM/DD HH24:MI:SS')
             , BASIS_FROM      = TO_DATE(I_START_DATE,'YYYY/MM/DD HH24:MI:SS')
             , USER_ID         = I_USER_ID
             , IT_PROCESSING   = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
         WHERE POL_NO          = I_POL_NO
           AND ENDOR_NO        = V_ENDOR_NO;

        --배서-계약 특약특별요율정보(TBID0012)의 적용시작일자, 기준시작일자 업데이트
        UPDATE TBID0012
           SET APPY_FROM       = TO_DATE(I_START_DATE,'YYYY/MM/DD HH24:MI:SS')
             , BASIS_FROM      = TO_DATE(I_START_DATE,'YYYY/MM/DD HH24:MI:SS')
             , USER_ID         = I_USER_ID
             , IT_PROCESSING   = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
         WHERE POL_NO          = I_POL_NO
           AND ENDOR_NO        = V_ENDOR_NO;

        --배서-계약 담보별분담금정보(TBID0013)의 담보시기, 적용시작일자, 기준시작일자 업데이트
        UPDATE TBID0013
           SET DMBO_START_DATE = TO_DATE(I_START_DATE,'YYYY/MM/DD HH24:MI:SS')
             , APPY_FROM       = TO_DATE(I_START_DATE,'YYYY/MM/DD HH24:MI:SS')
             , BASIS_FROM      = TO_DATE(I_START_DATE,'YYYY/MM/DD HH24:MI:SS')
             , USER_ID         = I_USER_ID
             , IT_PROCESSING   = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
         WHERE POL_NO          = I_POL_NO
           AND ENDOR_NO        = V_ENDOR_NO;

        --배서-계약 담보기간별분담금정보(TBID0014)의 대상기간시작일자, 적용시작일자, 기준시작일자 업데이트
        UPDATE TBID0014
           SET CALC_FYMD       = TO_DATE(I_START_DATE,'YYYY/MM/DD HH24:MI:SS')
             , APPY_FROM       = TO_DATE(I_START_DATE,'YYYY/MM/DD HH24:MI:SS')
             , BASIS_FROM      = TO_DATE(I_START_DATE,'YYYY/MM/DD HH24:MI:SS')
             , USER_ID         = I_USER_ID
             , IT_PROCESSING   = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
         WHERE POL_NO          = I_POL_NO
           AND ENDOR_NO        = V_ENDOR_NO;

        --배서-계약질권정보(TBID0103)의 적용시작일자, 기준시작일자 업데이트
        UPDATE TBID0103
           SET APPY_FROM       = TO_DATE(I_START_DATE,'YYYY/MM/DD HH24:MI:SS')
             , BASIS_FROM      = TO_DATE(I_START_DATE,'YYYY/MM/DD HH24:MI:SS')
             , USER_ID         = I_USER_ID
             , IT_PROCESSING   = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
         WHERE POL_NO          = I_POL_NO
           AND ENDOR_NO        = V_ENDOR_NO;

        --배서-계약운전자정보(TBID0104)의 적용시작일자, 기준시작일자 업데이트
        UPDATE TBID0104
           SET APPY_FROM       = TO_DATE(I_START_DATE,'YYYY/MM/DD HH24:MI:SS')
             , BASIS_FROM      = TO_DATE(I_START_DATE,'YYYY/MM/DD HH24:MI:SS')
             , USER_ID         = I_USER_ID
             , IT_PROCESSING   = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
         WHERE POL_NO          = I_POL_NO
           AND ENDOR_NO        = V_ENDOR_NO;

        --배서-변경이력(TBIC0202)의 적용시작일자, 기준시작일자 업데이트
        UPDATE TBIC0202
           SET APPY_FROM       = TO_DATE(I_START_DATE,'YYYY/MM/DD HH24:MI:SS')
             , BASIS_FROM      = TO_DATE(I_START_DATE,'YYYY/MM/DD HH24:MI:SS')
             , USER_ID         = I_USER_ID
             , IT_PROCESSING   = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
         WHERE POL_NO          = I_POL_NO
           AND ENDOR_NO        = V_ENDOR_NO;
    END;


    --계약 테이블 업데이트
    BEGIN
        --계약-계약자동차추가정보(TBIC0011)의 적용시작일자, 기준시작일자 업데이트
        UPDATE TBIC0011
           SET APPY_FROM       = TO_DATE(I_START_DATE,'YYYY/MM/DD HH24:MI:SS')
             , BASIS_FROM      = TO_DATE(I_START_DATE,'YYYY/MM/DD HH24:MI:SS')
             , USER_ID         = I_USER_ID
             , IT_PROCESSING   = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
         WHERE POL_NO          = I_POL_NO
           AND ENDOR_NO        = V_ENDOR_NO;

        --계약-계약 특약특별요율정보(TBIC0012)의 적용시작일자, 기준시작일자 업데이트
        UPDATE TBIC0012
           SET APPY_FROM       = TO_DATE(I_START_DATE,'YYYY/MM/DD HH24:MI:SS')
             , BASIS_FROM      = TO_DATE(I_START_DATE,'YYYY/MM/DD HH24:MI:SS')
             , USER_ID         = I_USER_ID
             , IT_PROCESSING   = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
         WHERE POL_NO          = I_POL_NO
           AND ENDOR_NO        = V_ENDOR_NO;

        --계약-계약 담보별분담금정보(TBIC0013)의 담보시기, 적용시작일자, 기준시작일자 업데이트
        UPDATE TBIC0013
           SET DMBO_START_DATE = TO_DATE(I_START_DATE,'YYYY/MM/DD HH24:MI:SS')
             , APPY_FROM       = TO_DATE(I_START_DATE,'YYYY/MM/DD HH24:MI:SS')
             , BASIS_FROM      = TO_DATE(I_START_DATE,'YYYY/MM/DD HH24:MI:SS')
             , USER_ID         = I_USER_ID
             , IT_PROCESSING   = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
         WHERE POL_NO          = I_POL_NO
           AND ENDOR_NO        = V_ENDOR_NO;

        --계약-계약 담보기간별분담금정보(TBIC0014)의 대상기간시작일자, 적용시작일자, 기준시작일자 업데이트
        UPDATE TBIC0014
           SET CALC_FYMD       = TO_DATE(I_START_DATE,'YYYY/MM/DD HH24:MI:SS')
             , APPY_FROM       = TO_DATE(I_START_DATE,'YYYY/MM/DD HH24:MI:SS')
             , BASIS_FROM      = TO_DATE(I_START_DATE,'YYYY/MM/DD HH24:MI:SS')
             , USER_ID         = I_USER_ID
             , IT_PROCESSING   = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
         WHERE POL_NO          = I_POL_NO
           AND ENDOR_NO        = V_ENDOR_NO;

        --계약-계약질권정보(TBIC0103)의 적용시작일자, 기준시작일자 업데이트
        UPDATE TBIC0103
           SET APPY_FROM       = TO_DATE(I_START_DATE,'YYYY/MM/DD HH24:MI:SS')
             , BASIS_FROM      = TO_DATE(I_START_DATE,'YYYY/MM/DD HH24:MI:SS')
             , USER_ID         = I_USER_ID
             , IT_PROCESSING   = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
         WHERE POL_NO          = I_POL_NO
           AND ENDOR_NO        = V_ENDOR_NO;

        --계약-계약운전자정보(TBIC0104)의 적용시작일자, 기준시작일자 업데이트
        UPDATE TBIC0104
           SET APPY_FROM       = TO_DATE(I_START_DATE,'YYYY/MM/DD HH24:MI:SS')
             , BASIS_FROM      = TO_DATE(I_START_DATE,'YYYY/MM/DD HH24:MI:SS')
             , USER_ID         = I_USER_ID
             , IT_PROCESSING   = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
         WHERE POL_NO          = I_POL_NO
           AND ENDOR_NO        = V_ENDOR_NO;
    END;


    --정상처리결과반환
    O_RESULT := 'OK' ;

    EXCEPTION WHEN OTHERS THEN
              DBMS_OUTPUT.PUT_LINE('PR_UPDATE_START_DATE ERROR: ' || SQLERRM);
              RAISE_APPLICATION_ERROR(-20010, 'PR_UPDATE_START_DATE ERROR: ' || SQLERRM);
              O_RESULT := SQLERRM ;

    --Commit과 Rollback은 JAVA Business 로직에서 처리함으로 프로시저에서는 정의하지 않는다.

END ;
                                   AND HND_COVER = CD01IN.HND_COVER
                                   AND DMGE_NO = CD01IN.DMGE_NO
                                   AND IT_PROCESSING BETWEEN to_char(TO_DATE(v_from_dt||'000000','YYYYMMDDHH24MISS'),'YYYYMMDDHH24MISS') AND to_char(TO_DATE(v_to_dt||'235959','YYYYMMDDHH24MISS'),'YYYYMMDDHH24MISS')
                                   AND CD01_SER_NO='001'
                                )
           ) CD01S
     WHERE CD01.ACCIDENT_NO = CD01S.ACCIDENT_NO
       AND CD01.HND_COVER = CD01S.HND_COVER
       AND CD01.DMGE_NO = CD01S.DMGE_NO
       AND CD01.SERIAL_NO='001'
       AND CD01.ACCT_REGI_DATE BETWEEN TO_DATE(v_from_dt|| '000000', 'YYYYMMDDHH24MISS') AND TO_DATE(v_to_dt || '235959', 'YYYYMMDDHH24MISS')
     GROUP BY CD01S.HND_COVER, CD01S.CENTER, CD01S.TEAM, CD01S.STAFF
   ),

   CC01_BEFORE AS (
    SELECT CENTER, TEAM, STAFF, HND_COVER, SUM(EST_AMT) EST_AMT, SUM(REST_AMT) REST_AMT, COUNT(*) CNT, STAT
      FROM (
            SELECT CF01.ACCIDENT_NO
                 , CF01.HND_COVER
                 , CF01.DMGE_NO
                 , CF01.WRITE_DATE
                 , CF01.DECIDE_DATE
                 , CF01.END_DECIDE_DATE
                 , CC01.ACCT_REGI_DATE
                 , (NVL(CC02.CM_EST_AMT, 0) + NVL(CC02.OP_EST_AMT, 0)) EST_AMT
                 , (NVL(CC02.CM_REST_AMT,0) + NVL(CC02.OP_REST_AMT,0)) REST_AMT
                 , CC01S.CENTER
                 , CC01S.TEAM
                 , CC01S.STAFF
                 , CASE WHEN (CF01.DECIDE_DATE IS NULL OR CF01.DECIDE_DATE > TO_DATE(v_from_dt|| '000000', 'YYYYMMDDHH24MISS') )  --기간전 면책이 아닌 조건
                              AND (CF01.END_DECIDE_DATE IS NULL OR CF01.END_DECIDE_DATE > TO_DATE(v_from_dt|| '000000', 'YYYYMMDDHH24MISS'))  --기간전 종결이 아닌조건
                        THEN '1'
                        ELSE '2'
                   END STAT        --1:전기미결, 2: 추가
              FROM (
                    SELECT CF01.*
                         , CE01.DC_DATE END_DATE
                         , CE01.DECIDE_DATE END_DECIDE_DATE
                      FROM TBCF0001 CF01
                         , (
                            SELECT CE01IN.*
                              FROM TBCE0001 CE01IN
                             WHERE DC_NO = (
                                            SELECT MIN(DC_NO) FROM TBCE0001
                                             WHERE ACCIDENT_NO = CE01IN.ACCIDENT_NO
                                               AND HND_COVER = CE01IN.HND_COVER
                                               AND DMGE_NO = CE01IN.DMGE_NO
                                               AND DC_DIV='2'
                                           )
                           ) CE01
                     WHERE CF01.ACCIDENT_NO = CE01.ACCIDENT_NO(+)
                       AND CF01.HND_COVER = CE01.HND_COVER(+)
                       AND CF01.DMGE_NO = CE01.DMGE_NO(+)
                   ) CF01
                 , TBCC0001 CC01
                 , (
                    SELECT * FROM TBCZ0010 CC01IN
                     WHERE SERIAL_NO = (
                                        SELECT MAX(SERIAL_NO) FROM TBCZ0010
                                         WHERE ACCIDENT_NO = CC01IN.ACCIDENT_NO
                                           AND HND_COVER = CC01IN.HND_COVER
                                           AND DMGE_NO = CC01IN.DMGE_NO
                                           AND (IT_PROCESSING <to_char(TO_DATE(v_from_dt||'000000','YYYYMMDDHH24MISS'),'YYYYMMDDHH24MISS') OR (CC01_SER_NO='001' AND IT_PROCESSING <to_char(TO_DATE(v_to_dt||'235959','YYYYMMDDHH24MISS'),'YYYYMMDDHH24MISS')))
                                       )
                   ) CC01S
                 , (
                    SELECT * FROM TBCC0002 CC02IN
                     WHERE SERIAL_NO = (
                                        SELECT MAX(SERIAL_NO) FROM TBCC0002
                                         WHERE ACCIDENT_NO = CC02IN.ACCIDENT_NO
                                           AND HND_COVER = CC02IN.HND_COVER
                                           AND DMGE_NO = CC02IN.DMGE_NO
                                           AND DECIDE_DATE IS NOT NULL AND DECIDE_DATE < TO_DATE(v_from_dt|| '000000', 'YYYYMMDDHH24MISS')
                                       )
                   ) CC02
             WHERE 1=1
               AND CF01.ACCIDENT_NO = CC01.ACCIDENT_NO
               AND CF01.HND_COVER = CC01.HND_COVER
               AND CF01.DMGE_NO = CC01.DMGE_NO
               AND CC01.SERIAL_NO = '001'
               AND CC01.ACCT_REGI_DATE < TO_DATE(v_from_dt|| '000000', 'YYYYMMDDHH24MISS')
               AND CF01.ACCIDENT_NO = CC01S.ACCIDENT_NO
               AND CF01.HND_COVER = CC01S.HND_COVER
               AND CF01.DMGE_NO = CC01S.DMGE_NO
               AND CF01.ACCIDENT_NO = CC02.ACCIDENT_NO(+)
               AND CF01.HND_COVER = CC02.HND_COVER(+)
               AND CF01.DMGE_NO = CC02.DMGE_NO(+)
               AND ((CF01.DECIDE_DATE IS NULL OR CF01.DECIDE_DATE > TO_DATE(v_from_dt|| '000000', 'YYYYMMDDHH24MISS'))  --기간전 면책이 아닌 조건
                    AND (CF01.END_DECIDE_DATE IS NULL OR CF01.END_DECIDE_DATE > TO_DATE(v_from_dt|| '000000', 'YYYYMMDDHH24MISS'))  --기간전 종결이 아닌조건
                    OR (NVL(CC02.CM_REST_AMT,0) + NVL(CC02.OP_REST_AMT,0)) > 0 --잔여추산이 0보다 큰거
                   )
           )
     GROUP BY CENTER, TEAM, STAFF, HND_COVER, STAT
      ),

   CD01_BEFORE AS (
    SELECT CENTER, TEAM, STAFF, HND_COVER, SUM(EST_AMT) EST_AMT, SUM(REST_AMT) REST_AMT, COUNT(*) CNT, STAT
      FROM (
            SELECT CF01.ACCIDENT_NO
                 , CF01.HND_COVER
                 , CF01.DMGE_NO
                 , CF01.WRITE_DATE
                 , CF01.DECIDE_DATE
                 , CF01.END_DECIDE_DATE
                 , CD01.ACCT_REGI_DATE
                 , (NVL(CD01B.DIRECT_AMT, 0) + NVL(CD01B.INDIRECT_AMT, 0)) EST_AMT
                 , (NVL(CD01B.CM_REST_AMT,0) + NVL(CD01B.OP_REST_AMT,0)) REST_AMT
                 , CD01S.CENTER
                 , CD01S.TEAM
                 , CD01S.STAFF
                 , CASE WHEN (CF01.DECIDE_DATE IS NULL OR CF01.DECIDE_DATE > TO_DATE(v_from_dt|| '000000', 'YYYYMMDDHH24MISS') )  --기간전 면책이 아닌 조건
                              AND (CF01.END_DECIDE_DATE IS NULL OR CF01.END_DECIDE_DATE > TO_DATE(v_from_dt|| '000000', 'YYYYMMDDHH24MISS'))  --기간전 종결이 아닌조건
                        THEN '1'
                        ELSE '2'
                   END STAT        --1:전기미결, 2: 추가
              FROM (
              SELECT CF01.*
                   , CE01.DC_DATE END_DATE
                   , CE01.DECIDE_DATE END_DECIDE_DATE
                FROM TBCF0001 CF01
                   , (
             SELECT CE01IN.*
                        FROM TBCE0001 CE01IN
                       WHERE DC_NO = (
                          SELECT MIN(DC_NO) FROM TBCE0001
                                  WHERE ACCIDENT_NO = CE01IN.ACCIDENT_NO
                                    AND HND_COVER = CE01IN.HND_COVER
                                    AND DMGE_NO = CE01IN.DMGE_NO
                                    AND DC_DIV='2'
                )
                     ) CE01
               WHERE CF01.ACCIDENT_NO = CE01.ACCIDENT_NO(+)
                 AND CF01.HND_COVER = CE01.HND_COVER(+)
                 AND CF01.DMGE_NO = CE01.DMGE_NO(+)
             ) CF01
                 , TBCD0001 CD01
                 , (
           SELECT * FROM TBCZ0010 CD01IN
            WHERE SERIAL_NO = (
                            SELECT MAX(SERIAL_NO) FROM TBCZ0010
              WHERE ACCIDENT_NO = CD01IN.ACCIDENT_NO
                AND HND_COVER = CD01IN.HND_COVER
                AND DMGE_NO = CD01IN.DMGE_NO
                AND (IT_PROCESSING <to_char(TO_DATE(v_from_dt||'000000','YYYYMMDDHH24MISS'),'YYYYMMDDHH24MISS') or (CD01_SER_NO='001' and IT_PROCESSING <to_char(TO_DATE(v_to_dt||'235959','YYYYMMDDHH24MISS'),'YYYYMMDDHH24MISS')))
                  )
                   ) CD01S
                 , (
           SELECT * FROM TBCD0001 CD01IN
            WHERE SERIAL_NO = (
                            SELECT MAX(SERIAL_NO) FROM TBCD0001
              WHERE ACCIDENT_NO = CD01IN.ACCIDENT_NO
                AND HND_COVER = CD01IN.HND_COVER
                AND DMGE_NO = CD01IN.DMGE_NO
                AND DECIDE_DATE IS NOT NULL AND DECIDE_DATE < TO_DATE(v_from_dt|| '000000', 'YYYYMMDDHH24MISS')
               )
                   ) CD01B
             WHERE 1=1
               AND CF01.ACCIDENT_NO  = CD01.ACCIDENT_NO
               AND CF01.HND_COVER  = CD01.HND_COVER
               AND CF01.DMGE_NO   = CD01.DMGE_NO
               AND CD01.SERIAL_NO='001'
               AND CD01.ACCT_REGI_DATE <= TO_DATE(v_from_dt|| '000000', 'YYYYMMDDHH24MISS')
               AND CF01.ACCIDENT_NO  = CD01S.ACCIDENT_NO
               AND CF01.HND_COVER  = CD01S.HND_COVER
               AND CF01.DMGE_NO   = CD01S.DMGE_NO
               AND CF01.ACCIDENT_NO  = CD01B.ACCIDENT_NO(+)
               AND CF01.HND_COVER  = CD01B.HND_COVER(+)
               AND CF01.DMGE_NO   = CD01B.DMGE_NO(+)
               AND ((CF01.DECIDE_DATE IS NULL OR CF01.DECIDE_DATE > TO_DATE(v_from_dt|| '000000', 'YYYYMMDDHH24MISS') )  --기간전 면책이 아닌 조건
                     AND (CF01.END_DECIDE_DATE IS NULL OR CF01.END_DECIDE_DATE > TO_DATE(v_from_dt|| '000000', 'YYYYMMDDHH24MISS'))  --기간전 종결이 아닌조건
                     OR
                    (NVL(CD01B.CM_REST_AMT,0) + NVL(CD01B.OP_REST_AMT,0)) > 0
                   )
           )
     GROUP BY CENTER, TEAM, STAFF, HND_COVER, STAT
   ),

   CC01_SUM AS (
    SELECT CF01.ACCIDENT_NO
         , CF01.HND_COVER
         , CF01.DMGE_NO
         , NVL((SELECT SUM(DC_AMT) FROM TBCE0001 WHERE ACCIDENT_NO = CF01.ACCIDENT_NO AND HND_COVER = CF01.HND_COVER AND DMGE_NO = CF01.DMGE_NO
                   AND DECIDE_DATE IS NOT NULL AND DECIDE_DATE BETWEEN TO_DATE(v_from_dt|| '000000', 'YYYYMMDDHH24MISS') AND TO_DATE(v_to_dt || '235959', 'YYYYMMDDHH24MISS')),0) DC_AMT
         , (NVL(CC02.CM_EST_AMT, 0) + NVL(CC02.OP_EST_AMT, 0)) EST_AMT
         , (NVL(CC02.CM_REST_AMT,0) + NVL(CC02.OP_REST_AMT,0)) REST_AMT
         , CASE WHEN CF01.DECIDE_DATE BETWEEN TO_DATE(v_from_dt|| '000000', 'YYYYMMDDHH24MISS') AND TO_DATE(v_to_dt || '235959', 'YYYYMMDDHH24MISS')
                     AND CF01.DECIDE_DATE IS NOT NULL
                THEN '1'
                WHEN CF01.END_DECIDE_DATE BETWEEN TO_DATE(v_from_dt|| '000000', 'YYYYMMDDHH24MISS') AND TO_DATE(v_to_dt || '235959', 'YYYYMMDDHH24MISS')
                THEN '2'
                WHEN (CF01.DECIDE_DATE IS NULL OR CF01.DECIDE_DATE > TO_DATE(v_to_dt || '235959', 'YYYYMMDDHH24MISS') )  --기간내 면책이 아닌 조건
                     AND (CF01.END_DECIDE_DATE IS NULL OR CF01.END_DECIDE_DATE > TO_DATE(v_to_dt || '235959', 'YYYYMMDDHH24MISS'))  --기간내 종결이 아닌조건
                THEN '3'
                ELSE '4'
           END STAT     --1:면책, 2:종결,3:미결, 4:추가
         , CC01S.CENTER
         , CC01S.TEAM
         , CC01S.STAFF
      FROM (
            SELECT CF01.*
                 , CE01.DC_DATE END_DATE
                 , CE01.DECIDE_DATE END_DECIDE_DATE
                 , CE01.DC_NO END_DC_NO
              FROM TBCF0001 CF01
                 , (SELECT CE01IN.*
                      FROM TBCE0001 CE01IN
                     WHERE DC_NO = (SELECT MIN(DC_NO) FROM TBCE0001
                                     WHERE ACCIDENT_NO = CE01IN.ACCIDENT_NO
                                       AND HND_COVER = CE01IN.HND_COVER
                                       AND DMGE_NO = CE01IN.DMGE_NO
                                       AND DC_DIV='2'
                                   )
                   ) CE01
             WHERE CF01.ACCIDENT_NO = CE01.ACCIDENT_NO(+)
               AND CF01.HND_COVER = CE01.HND_COVER(+)
               AND CF01.DMGE_NO = CE01.DMGE_NO(+)
           ) CF01
         , TBCC0001 CC01
         , (SELECT *
              FROM TBCZ0010 CC01IN
             WHERE SERIAL_NO = (
                          SELECT MAX(SERIAL_NO) FROM TBCZ0010
                           WHERE ACCIDENT_NO = CC01IN.ACCIDENT_NO
                             AND HND_COVER = CC01IN.HND_COVER
                             AND DMGE_NO = CC01IN.DMGE_NO
                             AND IT_PROCESSING <=v_to_dt||'235959'
                         )
           ) CC01S
         , (SELECT *
              FROM TBCC0002 CC02IN
             WHERE SERIAL_NO = (
                                SELECT MAX(SERIAL_NO) FROM TBCC0002
                                 WHERE ACCIDENT_NO = CC02IN.ACCIDENT_NO
                                   AND HND_COVER = CC02IN.HND_COVER
                                   AND DMGE_NO = CC02IN.DMGE_NO
                                   AND DECIDE_DATE IS NOT NULL AND DECIDE_DATE <= TO_DATE(v_to_dt || '235959', 'YYYYMMDDHH24MISS')
                               )
           ) CC02
     WHERE 1=1
       AND CF01.ACCIDENT_NO  = CC01.ACCIDENT_NO
       AND CF01.HND_COVER  = CC01.HND_COVER
       AND CF01.DMGE_NO   = CC01.DMGE_NO
       AND CC01.SERIAL_NO='001'
       AND CC01.ACCT_REGI_DATE <= TO_DATE(v_to_dt || '235959', 'YYYYMMDDHH24MISS')
       AND CF01.ACCIDENT_NO  = CC01S.ACCIDENT_NO
       AND CF01.HND_COVER  = CC01S.HND_COVER
       AND CF01.DMGE_NO   = CC01S.DMGE_NO
       AND CF01.ACCIDENT_NO  = CC02.ACCIDENT_NO(+)
       AND CF01.HND_COVER  = CC02.HND_COVER(+)
       AND CF01.DMGE_NO   = CC02.DMGE_NO(+)
       AND (
            CF01.DECIDE_DATE BETWEEN TO_DATE(v_from_dt|| '000000', 'YYYYMMDDHH24MISS') AND TO_DATE(v_to_dt || '235959', 'YYYYMMDDHH24MISS')AND CF01.DECIDE_DATE IS NOT NULL    --기간내 면책
            OR
            CF01.END_DECIDE_DATE BETWEEN TO_DATE(v_from_dt|| '000000', 'YYYYMMDDHH24MISS') AND TO_DATE(v_to_dt || '235959', 'YYYYMMDDHH24MISS') --기간내 종결
            OR
            NVL((SELECT count(*) FROM TBCE0001 WHERE ACCIDENT_NO = CF01.ACCIDENT_NO AND HND_COVER = CF01.HND_COVER AND DMGE_NO = CF01.DMGE_NO AND DC_NO > CF01.END_DC_NO
                AND DECIDE_DATE IS NOT NULL AND TO_CHAR(DECIDE_DATE, 'YYYYMMDD') BETWEEN v_from_dt AND v_to_dt),0) > 0            --기간내 추가건
            OR
            (CF01.DECIDE_DATE IS NULL OR CF01.DECIDE_DATE > TO_DATE(v_to_dt || '235959', 'YYYYMMDDHH24MISS') )  --기간내 면책이 아닌 조건
             AND (CF01.END_DECIDE_DATE IS NULL OR CF01.END_DECIDE_DATE > TO_DATE(v_to_dt || '235959', 'YYYYMMDDHH24MISS'))  --기간내 종결이 아닌조건
            OR
            (NVL(CC02.CM_REST_AMT,0) + NVL(CC02.OP_REST_AMT,0)) > 0 --잔여추산이 0보다 큰거
           )
   ),

   CD01_SUM AS (
    SELECT CF01.ACCIDENT_NO
         , CF01.HND_COVER
         , CF01.DMGE_NO
         , NVL((SELECT SUM(DC_AMT) FROM TBCE0001 WHERE ACCIDENT_NO = CF01.ACCIDENT_NO AND HND_COVER = CF01.HND_COVER AND DMGE_NO = CF01.DMGE_NO
         AND DECIDE_DATE IS NOT NULL AND TO_CHAR(DECIDE_DATE, 'YYYYMMDD') BETWEEN v_from_dt AND v_to_dt),0) DC_AMT
         , (NVL(CD01B.DIRECT_AMT, 0) + NVL(CD01B.INDIRECT_AMT, 0)) EST_AMT
         , (NVL(CD01B.CM_REST_AMT,0) + NVL(CD01B.OP_REST_AMT,0)) REST_AMT
         , CASE WHEN CF01.DECIDE_DATE BETWEEN TO_DATE(v_from_dt|| '000000', 'YYYYMMDDHH24MISS') AND TO_DATE(v_to_dt || '235959', 'YYYYMMDDHH24MISS')  AND CF01.DECIDE_DATE IS NOT NULL THEN '1'
                WHEN CF01.END_DECIDE_DATE BETWEEN TO_DATE(v_from_dt|| '000000', 'YYYYMMDDHH24MISS') AND TO_DATE(v_to_dt || '235959', 'YYYYMMDDHH24MISS')  THEN '2'
                WHEN (CF01.DECIDE_DATE IS NULL OR CF01.DECIDE_DATE > TO_DATE(v_to_dt || '235959', 'YYYYMMDDHH24MISS')  )  --기간내 면책이 아닌 조건
                AND (CF01.END_DECIDE_DATE IS NULL OR CF01.END_DECIDE_DATE > TO_DATE(v_to_dt || '235959', 'YYYYMMDDHH24MISS') )  --기간내 종결이 아닌조건
                THEN '3'
                ELSE '4'
            END STAT     --1:면책, 2:종결,3:미결, 4:추가
         , CD01S.CENTER
         , CD01S.TEAM
         , CD01S.STAFF
      FROM (
            SELECT CF01.*
                 , CE01.DC_DATE END_DATE
                 , CE01.DECIDE_DATE END_DECIDE_DATE
                 , CE01.DC_NO END_DC_NO
              FROM TBCF0001 CF01
                 , (SELECT CE01IN.*
                      FROM TBCE0001 CE01IN
                     WHERE DC_NO = (SELECT MIN(DC_NO) FROM TBCE0001
                                     WHERE ACCIDENT_NO = CE01IN.ACCIDENT_NO
                                       AND HND_COVER = CE01IN.HND_COVER
                                       AND DMGE_NO = CE01IN.DMGE_NO
                                       AND DC_DIV='2'
                             )
                   ) CE01
               WHERE CF01.ACCIDENT_NO = CE01.ACCIDENT_NO(+)
                 AND CF01.HND_COVER = CE01.HND_COVER(+)
                 AND CF01.DMGE_NO = CE01.DMGE_NO(+)
        ) CF01
           , TBCD0001 CD01
           , (SELECT *
                FROM TBCZ0010 CD01IN
               WHERE SERIAL_NO = (SELECT MAX(SERIAL_NO) FROM TBCZ0010 WHERE ACCIDENT_NO = CD01IN.ACCIDENT_NO AND HND_COVER = CD01IN.HND_COVER AND DMGE_NO = CD01IN.DMGE_NO
                 AND IT_PROCESSING <= v_to_dt||'235959')
             ) CD01S
           , (SELECT *
                FROM TBCD0001 CD01IN
               WHERE SERIAL_NO = (SELECT MAX(SERIAL_NO) FROM TBCD0001 WHERE ACCIDENT_NO = CD01IN.ACCIDENT_NO AND HND_COVER = CD01IN.HND_COVER AND DMGE_NO = CD01IN.DMGE_NO
                 AND DECIDE_DATE IS NOT NULL AND DECIDE_DATE <= TO_DATE(v_to_dt || '235959', 'YYYYMMDDHH24MISS') )
           ) CD01B
     WHERE 1=1
       AND CF01.ACCIDENT_NO  = CD01.ACCIDENT_NO
       AND CF01.HND_COVER  = CD01.HND_COVER
       AND CF01.DMGE_NO   = CD01.DMGE_NO
       AND CD01.SERIAL_NO='001'
       AND CD01.ACCT_REGI_DATE <= TO_DATE(v_to_dt || '235959', 'YYYYMMDDHH24MISS')
       AND CF01.ACCIDENT_NO  = CD01S.ACCIDENT_NO
       AND CF01.HND_COVER  = CD01S.HND_COVER
       AND CF01.DMGE_NO   = CD01S.DMGE_NO
       AND CF01.ACCIDENT_NO  = CD01B.ACCIDENT_NO(+)
       AND CF01.HND_COVER  = CD01B.HND_COVER(+)
       AND CF01.DMGE_NO   = CD01B.DMGE_NO(+)
       AND (
            CF01.DECIDE_DATE BETWEEN TO_DATE(v_from_dt|| '000000', 'YYYYMMDDHH24MISS') AND TO_DATE(v_to_dt || '235959', 'YYYYMMDDHH24MISS')  AND CF01.DECIDE_DATE IS NOT NULL    --기간내 면책
            OR
            CF01.END_DECIDE_DATE BETWEEN TO_DATE(v_from_dt|| '000000', 'YYYYMMDDHH24MISS') AND TO_DATE(v_to_dt || '235959', 'YYYYMMDDHH24MISS')  --기간내 종결
            OR
            NVL((SELECT count(*) FROM TBCE0001 WHERE ACCIDENT_NO = CF01.ACCIDENT_NO AND HND_COVER = CF01.HND_COVER AND DMGE_NO = CF01.DMGE_NO AND DC_NO > CF01.END_DC_NO
                AND DECIDE_DATE IS NOT NULL AND TO_CHAR(DECIDE_DATE, 'YYYYMMDD') BETWEEN v_from_dt AND v_to_dt),0) > 0            --기간내 추가건
            OR
            (CF01.DECIDE_DATE IS NULL OR CF01.DECIDE_DATE > TO_DATE(v_to_dt || '235959', 'YYYYMMDDHH24MISS')  )  --기간내 면책이 아닌 조건
            AND (CF01.END_DECIDE_DATE IS NULL OR CF01.END_DECIDE_DATE > TO_DATE(v_to_dt|| '235959', 'YYYYMMDDHH24MISS'))  --기간내 종결이 아닌조건
            OR
            (NVL(CD01B.CM_REST_AMT,0) + NVL(CD01B.OP_REST_AMT,0)) > 0      --잔여추산이 0보다 큰거
           )
   ),

   TRANSFER AS (
    SELECT ACCIDENT_NO
         , HND_COVER
         , DMGE_NO
         , TRANSFER_DATE
         , BEFORE_CENTER
         , BEFORE_TEAM
         , BEFORE_STAFF
         , AFTER_CENTER
         , AFTER_TEAM
         , AFTER_STAFF
      FROM TBCZ0011 CZ11
     WHERE CZ11.TRANSFER_DATE BETWEEN TO_DATE(v_from_dt|| '000000', 'YYYYMMDDHH24MISS') AND TO_DATE(v_to_dt || '235959', 'YYYYMMDDHH24MISS')
   ),

   HND_COVER_CODE AS (
    SELECT CZ02.CODE_DIV2_NAME HND_COVER_NAME, CZ02.CODE_CD HND_COVER, CZ02.CODE_SORT
      FROM TBCZ0002 CZ02
     WHERE CZ02.CODE_TYPE='C0001'
   ),

   STAFF_CODE AS (
    SELECT CENTER, TEAM, STAFF, FN_GET_DEPTNAME(CENTER,'','') CENTER_NM, FN_GET_DEPTNAME(TEAM,'','') TEAM_NM, FN_GET_USERNAME(STAFF) STAFF_NM
      FROM (
            SELECT CENTER, TEAM, STAFF
            FROM CC01_REGI
            UNION ALL
            SELECT CENTER, TEAM, STAFF
            FROM CD01_REGI
            UNION ALL
            SELECT CENTER, TEAM, STAFF
            FROM CC01_BEFORE
            UNION ALL
            SELECT CENTER, TEAM, STAFF
            FROM CD01_BEFORE
            UNION ALL
            SELECT CENTER, TEAM, STAFF
            FROM CC01_SUM
            UNION ALL
            SELECT CENTER, TEAM, STAFF
            FROM CD01_SUM
           )
     GROUP BY CENTER, TEAM, STAFF
   )

   --사원기준 쿼리
   SELECT o_tota_cnt
        , v_from_dt FMDT
        , v_to_dt TODT
        , DC.CENTER
        , DC.TEAM
        , DC.STAFF
        , CENTER_NM
        , TEAM_NM
        , STAFF_NM
        , NVL(NVL((SELECT SUM(CNT) FROM CA01_REGI WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF),0),0) ACCT_CNT                                   --사고건
        , NVL(NVL((SELECT SUM(CNT) FROM CC01_BEFORE WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND STAT='1'),0),0) BEFORE_CNT_IN               --전기미결인
        , ROUND(NVL(NVL((SELECT SUM(REST_AMT) FROM CC01_BEFORE WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF),0),0)/1000) BEFORE_REST_AMT_IN      --전기미결인_잔여추산
        , NVL(NVL((SELECT SUM(CNT) FROM CD01_BEFORE WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND STAT='1'),0),0) BEFORE_CNT_MUL              --전기미결물
        , ROUND(NVL(NVL((SELECT SUM(REST_AMT) FROM CD01_BEFORE WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF),0),0)/1000) BEFORE_REST_AMT_MUL     --전기미결물_잔여추산
        , NVL(NVL((SELECT SUM(CNT) FROM CD01_BEFORE WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND STAT='1'),0)
              + NVL((SELECT SUM(CNT) FROM CC01_BEFORE WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND STAT='1'),0),0) BEFORE_CNT                --전기미결
        , ROUND(NVL(NVL((SELECT SUM(REST_AMT) FROM CD01_BEFORE WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF),0)
                    + NVL((SELECT SUM(REST_AMT) FROM CC01_BEFORE WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF),0),0)/1000) BEFORE_REST_AMT       --전기미결_잔여추산
        , NVL(NVL((SELECT SUM(CNT) FROM CC01_REGI WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND HND_COVER IN ('11','21')),0),0) REGI_CNT_21   --발생건
        , NVL(NVL((SELECT SUM(CNT) FROM CC01_REGI WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND HND_COVER IN ('44')),0),0) REGI_CNT_44        --발생건
        , NVL(NVL((SELECT SUM(CNT) FROM CC01_REGI WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND HND_COVER IN ('45')),0),0) REGI_CNT_45        --발생건
        , NVL(NVL((SELECT SUM(CNT) FROM CC01_REGI WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND HND_COVER IN ('55')),0),0) REGI_CNT_55        --발생건
        , NVL(NVL((SELECT SUM(CNT) FROM CC01_REGI WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF ),0),0) REGI_CNT_IN                               --발생건
        , NVL(NVL((SELECT SUM(CNT) FROM CD01_REGI WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND HND_COVER IN ('33')),0),0) REGI_CNT_33        --발생건
        , NVL(NVL((SELECT SUM(CNT) FROM CD01_REGI WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND HND_COVER IN ('66')),0),0) REGI_CNT_66        --발생건
        , NVL(NVL((SELECT SUM(CNT) FROM CD01_REGI WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND HND_COVER IN ('77')),0),0) REGI_CNT_77        --발생건
        , NVL(NVL((SELECT SUM(CNT) FROM CD01_REGI WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF),0),0) REGI_CNT_MUL                               --발생건
        , NVL(NVL((SELECT SUM(CNT) FROM CD01_REGI WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF),0)
              + NVL((SELECT SUM(CNT) FROM CC01_REGI WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF),0),0) REGI_CNT                                 --발생건
        , NVL((SELECT COUNT(*) FROM TRANSFER WHERE BEFORE_CENTER= DC.CENTER AND BEFORE_TEAM = DC.TEAM AND BEFORE_STAFF = DC.STAFF),0) GIVE_CNT                      --이첩(보내는거)
        , NVL((SELECT COUNT(*) FROM TRANSFER WHERE AFTER_CENTER= DC.CENTER AND AFTER_TEAM = DC.TEAM AND AFTER_STAFF = DC.STAFF),0) TAKE_CNT                         --내첩(받는거)
        , NVL(NVL((SELECT count(*) FROM CC01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND STAT='2'),0),0) END_CNT_IN                     --인종결건
        , NVL(NVL((SELECT count(*) FROM CC01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND STAT='1'),0),0) EXP_CNT_IN                     --인면책건
        , NVL(NVL((SELECT count(*) FROM CC01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND STAT='2'),0)
              + NVL((SELECT count(*) FROM CC01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND STAT='1'),0),0) END_EXP_CNT_IN               --종결면책건인
        , NVL(NVL((SELECT count(*) FROM CD01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND STAT='2'),0),0) END_CNT_MUL                    --물종결건
        , NVL(NVL((SELECT count(*) FROM CD01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND STAT='1'),0),0) EXP_CNT_MUL                    --물면책건
        , NVL(NVL((SELECT count(*) FROM CD01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND STAT='2'),0)
              + NVL((SELECT count(*) FROM CD01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND STAT='1'),0),0) END_EXP_CNT_MUL              --종결면책건물
        , NVL(NVL((SELECT count(*) FROM CD01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND STAT='2'),0)
              + NVL((SELECT count(*) FROM CC01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND STAT='2'),0)
              + NVL((SELECT count(*) FROM CD01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND STAT='1'),0)
              + NVL((SELECT count(*) FROM CC01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND STAT='1'),0),0) END_EXP_CNT                  --종결/면책건
        , NVL(NVL((SELECT count(*) FROM CC01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND STAT='3' AND EST_AMT = 0 ),0),0) UND_CNT_IN1   --미결건인_미일보
        , NVL(NVL((SELECT count(*) FROM CC01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND STAT='3' AND EST_AMT > 0 ),0),0) UND_CNT_IN2   --미결건인_일보
        , NVL(NVL((SELECT count(*) FROM CD01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND STAT='3' AND EST_AMT = 0 ),0),0) UND_CNT_MUL1  --미결건물_미일보
        , NVL(NVL((SELECT count(*) FROM CD01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND STAT='3' AND EST_AMT > 0 ),0),0) UND_CNT_MUL2  --미결건물_미일보
        , NVL(NVL((SELECT count(*) FROM CD01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND STAT='3'),0)
              + NVL((SELECT count(*) FROM CC01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND STAT='3'),0),0) UND_CNT                      --미결건
        , ROUND(NVL(NVL((SELECT SUM(DC_AMT) FROM CC01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND HND_COVER IN ('11','21')),0),0)/1000) DC_AMT_21      --지급공제금_21
        , ROUND(NVL(NVL((SELECT SUM(DC_AMT) FROM CC01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND HND_COVER IN ('44')),0),0)/1000) DC_AMT_44           --지급공제금_44
        , ROUND(NVL(NVL((SELECT SUM(DC_AMT) FROM CC01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND HND_COVER IN ('45')),0),0)/1000) DC_AMT_45           --지급공제금_45
        , ROUND(NVL(NVL((SELECT SUM(DC_AMT) FROM CC01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND HND_COVER IN ('55')),0),0)/1000) DC_AMT_55           --지급공제금_55
        , ROUND(NVL(NVL((SELECT SUM(DC_AMT) FROM CC01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF),0),0)/1000) DC_AMT_IN                                   --지급공제금_인
        , ROUND(NVL(NVL((SELECT SUM(DC_AMT) FROM CD01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND HND_COVER IN ('33')),0),0)/1000) DC_AMT_33           --지급공제금_33
        , ROUND(NVL(NVL((SELECT SUM(DC_AMT) FROM CD01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND HND_COVER IN ('66')),0),0)/1000) DC_AMT_66           --지급공제금_66
        , ROUND(NVL(NVL((SELECT SUM(DC_AMT) FROM CD01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND HND_COVER IN ('77')),0),0)/1000) DC_AMT_77           --지급공제금_77
        , ROUND(NVL(NVL((SELECT SUM(DC_AMT) FROM CD01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF),0),0)/1000) DC_AMT_MUL                                  --지급공제금_물
        , ROUND(NVL(NVL((SELECT SUM(DC_AMT) FROM CD01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF),0)
                    + NVL((SELECT SUM(DC_AMT) FROM CC01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF),0),0)/1000) DC_AMT                                    --지급공제금
        , ROUND(NVL(NVL((SELECT SUM(REST_AMT) FROM CC01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND HND_COVER IN ('11','21')),0),0)/1000) REST_AMT_21  --잔여추산_21
        , ROUND(NVL(NVL((SELECT SUM(REST_AMT) FROM CC01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND HND_COVER IN ('44')),0),0)/1000) REST_AMT_44       --잔여추산_44
        , ROUND(NVL(NVL((SELECT SUM(REST_AMT) FROM CC01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND HND_COVER IN ('45')),0),0)/1000) REST_AMT_45       --잔여추산_45
        , ROUND(NVL(NVL((SELECT SUM(REST_AMT) FROM CC01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND HND_COVER IN ('55')),0),0)/1000) REST_AMT_55       --잔여추산_55
        , ROUND(NVL(NVL((SELECT SUM(REST_AMT) FROM CC01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF),0),0)/1000) REST_AMT_IN                               --잔여추산_인
        , ROUND(NVL(NVL((SELECT SUM(REST_AMT) FROM CD01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND HND_COVER IN ('33')),0),0)/1000) REST_AMT_33       --잔여추산_33
        , ROUND(NVL(NVL((SELECT SUM(REST_AMT) FROM CD01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND HND_COVER IN ('66')),0),0)/1000) REST_AMT_66       --잔여추산_66
        , ROUND(NVL(NVL((SELECT SUM(REST_AMT) FROM CD01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF AND HND_COVER IN ('77')),0),0)/1000) REST_AMT_77       --잔여추산_77
        , ROUND(NVL(NVL((SELECT SUM(REST_AMT) FROM CD01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF),0),0)/1000) REST_AMT_MUL                              --잔여추산_물
        , ROUND(NVL(NVL((SELECT SUM(REST_AMT) FROM CD01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF),0)
                    + NVL((SELECT SUM(REST_AMT) FROM CC01_SUM WHERE CENTER= DC.CENTER AND TEAM = DC.TEAM AND STAFF = DC.STAFF),0),0)/1000) REST_AMT                                --잔여추산
     FROM STAFF_CODE DC
    UNION ALL
   SELECT o_tota_cnt
        , v_from_dt FMDT
        , v_to_dt TODT
        , '99999999' CENTER
        , '99999999' TEAM
        , '99999999' STAFF
        , ' 합계' CENTER_NM
        , ' 합계' TEAM_NM
        , ' 합계' STAFF_NM
        , NVL(NVL((SELECT SUM(CNT) FROM CA01_REGI),0),0) ACCT_CNT                                                              --사고건
        , NVL(NVL((SELECT SUM(CNT) FROM CC01_BEFORE WHERE STAT='1'),0),0) BEFORE_CNT_IN                                        --전기미결인
        , ROUND(NVL(NVL((SELECT SUM(REST_AMT) FROM CC01_BEFORE ),0),0)/1000) BEFORE_REST_AMT_IN                                --전기미결인_잔여추산
        , NVL(NVL((SELECT SUM(CNT) FROM CD01_BEFORE WHERE STAT='1'),0),0) BEFORE_CNT_MUL                                       --전기미결물
        , ROUND(NVL(NVL((SELECT SUM(REST_AMT) FROM CD01_BEFORE ),0),0)/1000) BEFORE_REST_AMT_MUL                               --전기미결물_잔여추산
        , NVL(NVL((SELECT SUM(CNT) FROM CD01_BEFORE WHERE STAT='1'),0)
              + NVL((SELECT SUM(CNT) FROM CC01_BEFORE WHERE STAT='1'),0),0) BEFORE_CNT                                         --전기미결
        , ROUND(NVL(NVL((SELECT SUM(REST_AMT) FROM CD01_BEFORE ),0)
                    + NVL((SELECT SUM(REST_AMT) FROM CC01_BEFORE ),0),0)/1000) BEFORE_REST_AMT                                 --전기미결_잔여추산
        , NVL(NVL((SELECT SUM(CNT) FROM CC01_REGI  WHERE HND_COVER IN ('11','21')),0),0) REGI_CNT_21                           --발생건
        , NVL(NVL((SELECT SUM(CNT) FROM CC01_REGI  where HND_COVER IN ('44')),0),0) REGI_CNT_44                                --발생건
        , NVL(NVL((SELECT SUM(CNT) FROM CC01_REGI  where HND_COVER IN ('45')),0),0) REGI_CNT_45                                --발생건
        , NVL(NVL((SELECT SUM(CNT) FROM CC01_REGI  where HND_COVER IN ('55')),0),0) REGI_CNT_55                                --발생건
        , NVL(NVL((SELECT SUM(CNT) FROM CC01_REGI  ),0),0) REGI_CNT_IN                                                         --발생건
        , NVL(NVL((SELECT SUM(CNT) FROM CD01_REGI  where HND_COVER IN ('33')),0),0) REGI_CNT_33                                --발생건
        , NVL(NVL((SELECT SUM(CNT) FROM CD01_REGI  where HND_COVER IN ('66')),0),0) REGI_CNT_66                                --발생건
        , NVL(NVL((SELECT SUM(CNT) FROM CD01_REGI  where HND_COVER IN ('77')),0),0) REGI_CNT_77                                --발생건
        , NVL(NVL((SELECT SUM(CNT) FROM CD01_REGI ),0),0) REGI_CNT_MUL                                                         --발생건
        , NVL(NVL((SELECT SUM(CNT) FROM CD01_REGI ),0)
              + NVL((SELECT SUM(CNT) FROM CC01_REGI ),0),0) REGI_CNT                                                           --발생건
        , NVL((SELECT COUNT(*) FROM TRANSFER ),0) GIVE_CNT                                                                     --이첩(보내는거)
        , NVL((SELECT COUNT(*) FROM TRANSFER ),0) TAKE_CNT                                                                     --내첩(받는거)
        , NVL(NVL((SELECT count(*) FROM CC01_SUM  WHERE STAT='2'),0),0) END_CNT_IN                                             --인종결건
        , NVL(NVL((SELECT count(*) FROM CC01_SUM  WHERE STAT='1'),0),0) EXP_CNT_IN                                             --인면책건
        , NVL(NVL((SELECT count(*) FROM CC01_SUM  WHERE STAT='2'),0)
              + NVL((SELECT count(*) FROM CC01_SUM  WHERE STAT='1'),0),0) END_EXP_CNT_IN                                       --종결면책건인
        , NVL(NVL((SELECT count(*) FROM CD01_SUM  WHERE STAT='2'),0),0) END_CNT_MUL                                            --물종결건
        , NVL(NVL((SELECT count(*) FROM CD01_SUM  WHERE STAT='1'),0),0) EXP_CNT_MUL                                            --물면책건
        , NVL(NVL((SELECT count(*) FROM CD01_SUM  WHERE STAT='2'),0)
              + NVL((SELECT count(*) FROM CD01_SUM  WHERE STAT='1'),0),0) END_EXP_CNT_MUL                                      --종결면책건물
        , NVL(NVL((SELECT count(*) FROM CD01_SUM  WHERE STAT='2'),0)
              + NVL((SELECT count(*) FROM CC01_SUM  WHERE STAT='2'),0)
              + NVL((SELECT count(*) FROM CD01_SUM  WHERE STAT='1'),0)
              + NVL((SELECT count(*) FROM CC01_SUM  WHERE STAT='1'),0),0) END_EXP_CNT                                          --종결/면책건
        , NVL(NVL((SELECT count(*) FROM CC01_SUM  WHERE STAT='3' AND (EST_AMT = 0 or EST_AMT is null)),0),0) UND_CNT_IN1       --미결건인_미일보
        , NVL(NVL((SELECT count(*) FROM CC01_SUM  WHERE STAT='3' AND EST_AMT > 0 ),0),0) UND_CNT_IN2                           --미결건인_일보
        , NVL(NVL((SELECT count(*) FROM CD01_SUM  WHERE STAT='3' AND (EST_AMT = 0 or EST_AMT is null)),0),0) UND_CNT_MUL1      --미결건물_미일보
        , NVL(NVL((SELECT count(*) FROM CD01_SUM  WHERE STAT='3' AND EST_AMT > 0 ),0),0) UND_CNT_MUL1                          --미결건물_미일보
        , NVL(NVL((SELECT count(*) FROM CD01_SUM  WHERE STAT='3'),0)
              + NVL((SELECT count(*) FROM CC01_SUM  WHERE STAT='3'),0),0) UND_CNT                                              --미결건
        , ROUND(NVL(NVL((SELECT SUM(DC_AMT) FROM CC01_SUM  where HND_COVER IN ('11','21')),0),0)/1000) DC_AMT_21               --지급공제금_21
        , ROUND(NVL(NVL((SELECT SUM(DC_AMT) FROM CC01_SUM  where HND_COVER IN ('44')),0),0)/1000) DC_AMT_44                    --지급공제금_44
        , ROUND(NVL(NVL((SELECT SUM(DC_AMT) FROM CC01_SUM  where HND_COVER IN ('45')),0),0)/1000) DC_AMT_45                    --지급공제금_45
        , ROUND(NVL(NVL((SELECT SUM(DC_AMT) FROM CC01_SUM  where HND_COVER IN ('55')),0),0)/1000) DC_AMT_55                    --지급공제금_55
        , ROUND(NVL(NVL((SELECT SUM(DC_AMT) FROM CC01_SUM ),0),0)/1000) DC_AMT_IN                                              --지급공제금_인
        , ROUND(NVL(NVL((SELECT SUM(DC_AMT) FROM CD01_SUM  where HND_COVER IN ('33')),0),0)/1000) DC_AMT_33                    --지급공제금_33
        , ROUND(NVL(NVL((SELECT SUM(DC_AMT) FROM CD01_SUM  where HND_COVER IN ('66')),0),0)/1000) DC_AMT_66                    --지급공제금_66
        , ROUND(NVL(NVL((SELECT SUM(DC_AMT) FROM CD01_SUM  where HND_COVER IN ('77')),0),0)/1000) DC_AMT_77                    --지급공제금_77
        , ROUND(NVL(NVL((SELECT SUM(DC_AMT) FROM CD01_SUM ),0),0)/1000) DC_AMT_MUL                                             --지급공제금_물
        , ROUND(NVL(NVL((SELECT SUM(DC_AMT) FROM CD01_SUM ),0)
                    + NVL((SELECT SUM(DC_AMT) FROM CC01_SUM ),0),0)/1000) DC_AMT                                               --지급공제금
        , ROUND(NVL(NVL((SELECT SUM(REST_AMT) FROM CC01_SUM  where HND_COVER IN ('11','21')),0),0)/1000) REST_AMT_21           --잔여추산_21
        , ROUND(NVL(NVL((SELECT SUM(REST_AMT) FROM CC01_SUM  where HND_COVER IN ('44')),0),0)/1000) REST_AMT_44                --잔여추산_44
        , ROUND(NVL(NVL((SELECT SUM(REST_AMT) FROM CC01_SUM  where HND_COVER IN ('45')),0),0)/1000) REST_AMT_45                --잔여추산_45
        , ROUND(NVL(NVL((SELECT SUM(REST_AMT) FROM CC01_SUM  where HND_COVER IN ('55')),0),0)/1000) REST_AMT_55                --잔여추산_55
        , ROUND(NVL(NVL((SELECT SUM(REST_AMT) FROM CC01_SUM ),0),0)/1000) REST_AMT_IN                                          --잔여추산_인
        , ROUND(NVL(NVL((SELECT SUM(REST_AMT) FROM CD01_SUM  where HND_COVER IN ('33')),0),0)/1000) REST_AMT_33                --잔여추산_33
        , ROUND(NVL(NVL((SELECT SUM(REST_AMT) FROM CD01_SUM  where HND_COVER IN ('66')),0),0)/1000) REST_AMT_66                --잔여추산_66
        , ROUND(NVL(NVL((SELECT SUM(REST_AMT) FROM CD01_SUM  where HND_COVER IN ('77')),0),0)/1000) REST_AMT_77                --잔여추산_77
        , ROUND(NVL(NVL((SELECT SUM(REST_AMT) FROM CD01_SUM ),0),0)/1000) REST_AMT_MUL                                         --잔여추산_물
        , ROUND(NVL(NVL((SELECT SUM(REST_AMT) FROM CD01_SUM ),0)
                + NVL((SELECT SUM(REST_AMT) FROM CC01_SUM ),0),0)/1000) REST_AMT                                               --잔여추산
     FROM dual DC
    ORDER BY 3,4,5;

      o_succ_cnt := o_succ_cnt + 1;
      COMMIT;

      --성공처리상세배치저장
      PR_INSERT_BATCH_LOG(i_bat_id, 'PR_BATCH_ACCTREGISTATICS', v_from_dt||','||v_to_dt, '[성공][정상적으로 갱신되었습니다.]' );
      --Server LOG
      o_result := o_result || chr(13) || chr(10) || '[성공]['||v_from_dt||','||v_to_dt||']';

      EXCEPTION WHEN OTHERS THEN
        o_fail_cnt := o_fail_cnt + 1;
        ROLLBACK;
        --실패처리상세배치저장
        PR_INSERT_BATCH_LOG(i_bat_id, 'PR_BATCH_ACCTREGISTATICS', v_from_dt||','||v_to_dt, '[실패][오류메시지:' || sqlerrm || ']');
        --Server LOG
        o_result := o_result || chr(13) || chr(10) || '[실패]['||v_from_dt||','||v_to_dt||']';

    END;
  END LOOP;
  exception when others then
    DBMS_OUTPUT.PUT_LINE('PR_BATCH_ACCTREGISTATICS ERROR: ' || sqlerrm);
    RAISE_APPLICATION_ERROR(-20010, 'PR_BATCH_ACCTREGISTATICS ERROR: ' || sqlerrm);
    o_result := sqlerrm ;
    --실패처리
    PR_INSERT_BATCH_LOG(i_bat_id, 'PR_BATCH_ACCTREGISTATICS','ERROR' ,'[실패][오류메시지:' || sqlerrm ||']' );

end;
CREATE OR replace
PROCEDURE PR_BATCH_ACCTREGISTATICS(i_bat_id in varchar, o_tota_cnt out number, o_succ_cnt out number, o_fail_cnt out number, o_result   out   varchar2) as

/**************************************************************************************/
/* 생성일자 : 2014.12.15                                                              */
/* 생성자   : 김영인                                                                  */
/* 업무내용 : 전일기준 보상 발생처리미결 현황 집계  (BATCH)                           */
/* Parameter: [out]o_result         : 결과결과 정상(OK), 비정상(해당메시지)           */
/**************************************************************************************/

v_from_dt  VARCHAR2(8);
v_to_dt  VARCHAR2(8);

begin
  o_result := '';
  o_tota_cnt := 0;
  o_succ_cnt := 0;
  o_fail_cnt := 0;

  DELETE FROM TBZZ8004;
  COMMIT;

  FOR REC IN(
             SELECT TO_CHAR(SYSDATE-1,'YYYYMM')||'01' AS FROM_DT, TO_CHAR(SYSDATE-1,'YYYYMMDD') AS TO_DT FROM DUAL
               UNION ALL
             SELECT TO_CHAR(SYSDATE-1,'YYYY')||'0101' AS FROM_DT, TO_CHAR(SYSDATE-1,'YYYYMMDD') AS TO_DT FROM DUAL
            )
  LOOP
    BEGIN
      o_tota_cnt := o_tota_cnt + 1;
      v_from_dt := REC.FROM_DT;
      v_to_dt := REC.TO_DT;


      INSERT INTO TBZZ8004(WORK_GB, FMDT,TODT,CENTER,TEAM,STAFF,CENTER_NM,TEAM_NM,STAFF_NM,ACCT_CNT,BEFORE_CNT_IN,BEFORE_REST_AMT_IN,BEFORE_CNT_MUL,BEFORE_REST_AMT_MUL,BEFORE_CNT,BEFORE_REST_AMT,
                           REGI_CNT_21,REGI_CNT_44,REGI_CNT_45,REGI_CNT_55,REGI_CNT_IN,REGI_CNT_33,REGI_CNT_66,REGI_CNT_77,REGI_CNT_MUL,REGI_CNT,GIVE_CNT,TAKE_CNT,END_CNT_IN,EXP_CNT_IN,END_EXP_CNT_IN,END_CNT_MUL,
                           EXP_CNT_MUL,END_EXP_CNT_MUL,END_EXP_CNT,UND_CNT_IN1,UND_CNT_IN2,UND_CNT_MUL1,UND_CNT_MUL2,UND_CNT,DC_AMT_21,DC_AMT_44,DC_AMT_45,DC_AMT_55,DC_AMT_IN,DC_AMT_33,DC_AMT_66,DC_AMT_77,DC_AMT_MUL,DC_AMT,
                           REST_AMT_21,REST_AMT_44,REST_AMT_45,REST_AMT_55,REST_AMT_IN,REST_AMT_33,REST_AMT_66,REST_AMT_77,REST_AMT_MUL,REST_AMT
      )
   WITH CA01_REGI AS (
    SELECT CA01.CENTER, CA01.TEAM, CA01.STAFF, COUNT(*) CNT
      FROM TBCA0001 CA01
     WHERE 1=1
       AND CA01.LAST = 'Y'
       AND CA01.ACCT_REGI_DATE BETWEEN TO_CHAR(TO_DATE(v_from_dt, 'YYYYMMDD'), 'YYYYMMDD') AND TO_CHAR(TO_DATE(v_to_dt, 'YYYYMMDD'), 'YYYYMMDD')
     GROUP BY CA01.CENTER, CA01.TEAM, CA01.STAFF
   ),

   CC01_REGI AS (
    SELECT CC01S.HND_COVER, CC01S.CENTER, CC01S.TEAM, CC01S.STAFF, COUNT(*) CNT
      FROM TBCC0001 CC01
         , (SELECT *
              FROM TBCZ0010 CC01IN
             WHERE SERIAL_NO = (
                                SELECT MAX(SERIAL_NO)
                                  FROM TBCZ0010
                                 WHERE ACCIDENT_NO = CC01IN.ACCIDENT_NO
                                   AND HND_COVER = CC01IN.HND_COVER
                                   AND DMGE_NO = CC01IN.DMGE_NO
                                   AND IT_PROCESSING BETWEEN to_char(TO_DATE(v_from_dt||'000000','YYYYMMDDHH24MISS'),'YYYYMMDDHH24MISS') AND to_char(TO_DATE(v_to_dt||'235959','YYYYMMDDHH24MISS'),'YYYYMMDDHH24MISS')
                                   AND CC01_SER_NO='001'
                               )
           ) CC01S
     WHERE CC01.ACCIDENT_NO = CC01S.ACCIDENT_NO
       AND CC01.HND_COVER = CC01S.HND_COVER
       AND CC01.DMGE_NO = CC01S.DMGE_NO
       AND CC01.SERIAL_NO='001'
       AND CC01.ACCT_REGI_DATE BETWEEN TO_DATE(v_from_dt|| '000000', 'YYYYMMDDHH24MISS') AND TO_DATE(v_to_dt || '235959', 'YYYYMMDDHH24MISS')
     GROUP BY CC01S.HND_COVER, CC01S.CENTER, CC01S.TEAM, CC01S.STAFF
   ),

   CD01_REGI AS (
    SELECT CD01S.HND_COVER, CD01S.CENTER, CD01S.TEAM, CD01S.STAFF, COUNT(*) CNT
      FROM TBCD0001 CD01
         , (
            SELECT * FROM TBCZ0010 CD01IN
             WHERE SERIAL_NO = (
                                SELECT MAX(SERIAL_NO)
                                  FROM TBCZ0010
                                 WHERE ACCIDENT_NO = CD01IN.ACCIDENT_NO
CREATE -- added during DDL generation.
PROCEDURE PR_BATCH_GRACEPERIOD(i_bat_id in varchar, o_tota_cnt out number, o_succ_cnt out number, o_fail_cnt out number, o_result   out   varchar2) as

/**************************************************************************************/
/* 생성일자 : 2013.05.10                                                              */
/* 생성자   : 은현민                                                                  */
/* 업무내용 : 분납일이 지나 유예기간이 된 계약데이터를 UPDATE 해줌  (BATCH)           */
/* Parameter: [out]o_result         : 결과결과 정상(OK), 비정상(해당메시지)           */
/**************************************************************************************/
    v_pol_no   TBIC0001.POL_NO%TYPE;
    v_endor_no TBIC0001.ENDOR_NO%TYPE;

 begin

    o_result := '';

    o_tota_cnt := 0;
    o_succ_cnt := 0;
    o_fail_cnt := 0;

    FOR REC IN (SELECT A.POL_NO, A.ENDOR_NO
                  FROM TBIC0001 A
                     , TBIC0016 B
                 WHERE A.POL_NO     = B.POL_NO
                   AND A.CONT_STATE = '02'
                   AND B.BNP_NO     = A.END_NAB_NO + 1
                   AND B.SEQ_NO     = 0
                   AND B.BNP_DATE   < TRUNC(SYSDATE)
                   AND B.RCPT_NO IS NULL )
    LOOP
        o_tota_cnt := o_tota_cnt + 1;

        BEGIN
            UPDATE TBIC0001
               SET CONT_STATE        = '03'
                 , STATE_ADD_DATE  = SYSDATE
                 , END_CHANGE_DATE = SYSDATE
                 , IT_PROCESSING   = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
                 , USER_ID         = 'SYSTEM'
             WHERE POL_NO        = REC.POL_NO;

            UPDATE TBID0001
               SET CONT_STATE        = '03'
                 , STATE_ADD_DATE  = SYSDATE
                 , END_CHANGE_DATE = SYSDATE
                 , IT_PROCESSING   = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
                 , USER_ID         = 'SYSTEM'
             WHERE POL_NO        = REC.POL_NO
               AND ENDOR_NO      = REC.ENDOR_NO;


            o_succ_cnt := o_succ_cnt + 1;

            COMMIT;

            --성공처리상세배치저장
            PR_INSERT_BATCH_LOG(i_bat_id, 'PR_BATCH_GRACEPERIOD', REC.POL_NO||','||REC.ENDOR_NO, '[성공][정상적으로 갱신되었습니다.]' );
            --Server LOG
            o_result := o_result || chr(13) || chr(10) || '[성공]['||REC.POL_NO||','||REC.ENDOR_NO||']';



        EXCEPTION WHEN OTHERS THEN
                   o_fail_cnt := o_fail_cnt + 1;
                   ROLLBACK;
                   --실패처리상세배치저장
                   PR_INSERT_BATCH_LOG(i_bat_id, 'PR_BATCH_GRACEPERIOD', REC.POL_NO||','||REC.ENDOR_NO, '[실패][오류메시지:' || sqlerrm || ']');
                   --Server LOG
                   o_result := o_result || chr(13) || chr(10) || '[실패]['||REC.POL_NO||','||REC.ENDOR_NO||']';
         END;

    END LOOP;

    exception when others then
              DBMS_OUTPUT.PUT_LINE('PR_BATCH_GRACEPERIOD ERROR: ' || sqlerrm);
              RAISE_APPLICATION_ERROR(-20010, 'PR_BATCH_GRACEPERIOD ERROR: ' || sqlerrm);
              o_result := sqlerrm ;
              --실패처리
              PR_INSERT_BATCH_LOG(i_bat_id, 'PR_BATCH_GRACEPERIOD','ERROR' ,'[실패][오류메시지:' || sqlerrm || ']');

 end;
CREATE -- added during DDL generation.
PROCEDURE          PR_BATCH_LAPSED(i_bat_id in varchar, o_tota_cnt out number, o_succ_cnt out number, o_fail_cnt out number, o_result   out   varchar2) as

/**************************************************************************************/
/* 생성일자 : 2013.05.10                                                              */
/* 생성자   : 은현민                                                                  */
/* 업무내용 : 유효기간이지나 실효가된  계약데이터를 UPDATE 해줌  (BATCH)              */
/* Parameter: [out]o_result         : 결과결과 정상(OK), 비정상(해당메시지)           */
/**************************************************************************************/
    v_pol_no   TBIC0001.POL_NO%TYPE;
    v_endor_no TBIC0001.ENDOR_NO%TYPE;
    v_endor_sub_seq TBIC0203.ENDOR_SUB_SEQ%TYPE;


 begin
    o_result := '';
    o_tota_cnt := 0;
    o_succ_cnt := 0;
    o_fail_cnt := 0;
    FOR REC IN (SELECT A.POL_NO , A.ENDOR_NO
                  FROM TBIC0001 A
                     , TBIC0016 B
                 WHERE A.POL_NO = B.POL_NO
                   AND A.CONT_STATE      = '03'
                   AND B.BNP_NO          = A.END_NAB_NO + 1
                   AND B.SEQ_NO          = 0
                   AND B.BNP_DATE       >= TRUNC(ADD_MONTHS(SYSDATE, -2), 'MM')
                   AND B.BNP_DATE       <  TRUNC(ADD_MONTHS(SYSDATE, -1), 'MM')
                   AND B.RCPT_NO IS NULL )
    LOOP
        o_tota_cnt := o_tota_cnt + 1;

        BEGIN
            UPDATE TBIC0001
               SET IT_PROCESSING   = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
                 , STATE_ADD_DATE  = TRUNC(SYSDATE)
                 , END_CHANGE_DATE = TRUNC(SYSDATE)
                 , CONT_STATE      = '04'
                 , USER_ID         = 'SYSTEM'
             WHERE POL_NO          = REC.POL_NO;

            UPDATE TBID0001
               SET IT_PROCESSING   = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
                 , STATE_ADD_DATE  = TRUNC(SYSDATE)
                 , END_CHANGE_DATE = TRUNC(SYSDATE)
                 , CONT_STATE      = '04'
                 , USER_ID         = 'SYSTEM'
             WHERE POL_NO          = REC.POL_NO
               AND ENDOR_NO        = REC.ENDOR_NO;

            --실효 작업시 살아있는 담보에 대해서 적용종료일 담보적용종료일을 UPDATE 한다. (계약 담보테이블)
            UPDATE TBIC0013
               SET APPY_TO         = TO_DATE(TO_CHAR(SYSDATE - 1, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                 , DMBO_END_DATE   = TO_DATE(TO_CHAR(SYSDATE - 1, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                 , IT_PROCESSING   = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
                 , USER_ID         = 'SYSTEM'
             WHERE POL_NO          = REC.POL_NO
               AND ENDOR_NO        = REC.ENDOR_NO
               AND APPY_FROM      <  TO_DATE(TO_CHAR(SYSDATE - 1, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
               AND APPY_TO        >= TO_DATE(TO_CHAR(SYSDATE - 1, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');

            --실효 작업시 살아있는 담보에 대해서 적용종료일 담보적용종료일을 UPDATE 한다. (배서 담보테이블)
            UPDATE TBID0013
               SET APPY_TO         = TO_DATE(TO_CHAR(SYSDATE - 1, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                 , DMBO_END_DATE   = TO_DATE(TO_CHAR(SYSDATE - 1, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                 , IT_PROCESSING   = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
                 , USER_ID         = 'SYSTEM'
             WHERE POL_NO          = REC.POL_NO
               AND ENDOR_NO        = REC.ENDOR_NO
               AND APPY_FROM      <  TO_DATE(TO_CHAR(SYSDATE - 1, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
               AND APPY_TO        >= TO_DATE(TO_CHAR(SYSDATE - 1, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');

            --배서코드 순번 가져오는거
            SELECT DECODE(REC.ENDOR_NO, '0', NVL(MAX(ENDOR_SUB_SEQ), 0)+1
                                           , DECODE(NVL(MAX(ENDOR_SUB_SEQ), 99999), 99999, 0
                                                                                         , MAX(ENDOR_SUB_SEQ)+1)) AS ENDOR_SUB_SEQ    --배서코드순번
              INTO v_endor_sub_seq
              FROM TBIC0203
             WHERE 1=1
               AND POL_NO        = REC.POL_NO
               AND ENDOR_NO      = REC.ENDOR_NO;

            --계약변경이력명세에 데이터 등록하기
            INSERT INTO TBIC0203
                   ( POL_NO          , ENDOR_NO            , ENDOR_SUB_SEQ         , ENDOR_CD
                   , DETAIL_ITEM     , ENDOR_ITEM          , ENDOR_BEFORE_ITEM     , ENDOR_AFTER_ITEM
                   , USER_ID         , APPY_DATE )
            VALUES ( REC.POL_NO      , REC.ENDOR_NO        , v_endor_sub_seq       , '411'
                   , 'CONT_STATE'    , '계약상태'          , '유예'                , '실효'
                   , 'SYSTEM'         , trunc(SYSDATE - 1) );


            o_succ_cnt := o_succ_cnt + 1;

            COMMIT;


            --성공처리상세배치저장
            PR_INSERT_BATCH_LOG(i_bat_id, 'PR_BATCH_LAPSED', REC.POL_NO||','||REC.ENDOR_NO, '[성공][정상적으로 갱신되었습니다.]' );
            --Server LOG
            o_result := o_result || chr(13) || chr(10) || '[성공]['||REC.POL_NO||','||REC.ENDOR_NO||']';


        EXCEPTION WHEN OTHERS THEN
                   o_fail_cnt := o_fail_cnt + 1;
                   ROLLBACK;
                   --실패처리상세배치저장
                   PR_INSERT_BATCH_LOG(i_bat_id, 'PR_BATCH_LAPSED', REC.POL_NO||','||REC.ENDOR_NO, '[실패][오류메시지:' || sqlerrm || ']');
                   --Server LOG
                   o_result := o_result || chr(13) || chr(10) || '[실패]['||REC.POL_NO||','||REC.ENDOR_NO||']';
        END;
    END LOOP;

    exception when others then
              DBMS_OUTPUT.PUT_LINE('PR_BATCH_LAPSED ERROR: ' || sqlerrm);
              RAISE_APPLICATION_ERROR(-20010, 'PR_BATCH_LAPSED ERROR: ' || sqlerrm);
              o_result := sqlerrm ;
              --실패처리
              PR_INSERT_BATCH_LOG(i_bat_id, 'PR_BATCH_LAPSED','ERROR' ,'[실패][오류메시지:' || sqlerrm ||']' );

 end;
CREATE -- added during DDL generation.
PROCEDURE          PR_BATCH_PAYMENT(i_bat_id in varchar, o_tota_cnt out number, o_succ_cnt out number, o_fail_cnt out number, o_result   out   varchar2) as

/**************************************************************************************/
/* 생성일자 : 2013.05.07                                                              */
/* 생성자   : 은현민                                                                  */
/* 업무내용 : 분납관리현황을 만들기 위한 프로시져이다. (BATCH)                        */
/*            (동일 인물이 동일 게시물 조회시 조회수 제외 처리는 하지 않음)           */
/* Parameter: [out]o_result         : 결과결과 정상(OK), 비정상(해당메시지)           */
/**************************************************************************************/

 begin

    DELETE
      FROM TBZZ8001
     WHERE JOB_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'), 'YYYYMMDD');


 INSERT INTO TBZZ8001 (
        JOB_DATE               --작업일
      , BNP_NO                 --분납회차
      , POL_NO                 --공제가입증명번호
      , D_30                   --분납일기준30일건수
      , D_30_CUST_NO           --분납일기준30일고객번호
      , D_30_TREATY_CD         --분납일기준30일처리자
      , D_20                   --분납일기준20일건수
      , D_20_CUST_NO           --분납일기준20일고객번호
      , D_20_TREATY_CD         --분납일기준20일처리자
      , D_10                   --분납일기준10일건수
      , D_10_CUST_NO           --분납일기준10일고객번호
      , D_10_TREATY_CD         --분납일기준10일처리자
      , D_5                    --분납일기준05일건수
      , D_5_CUST_NO            --분납일기준05일고객번호
      , D_5_TREATY_CD          --분납일기준05일처리자
      , D_3                    --분납일기준03일건수
      , D_3_CUST_NO            --분납일기준03일고객번호
      , D_3_TREATY_CD          --분납일기준03일처리자
      , D_1                    --분납일기준01일건수
      , D_1_CUST_NO            --분납일기준01일고객번호
      , D_1_TREATY_CD          --분납일기준01일처리자
      , D_0                    --분납일기준건수
      , D_0_CUST_NO            --분납일기준고객번호
      , D_0_TREATY_CD          --분납일기준처리자
      , IT_PROCESSING          --전산처리일자
      )
 --분납관리의 기준일차별 건수 검색
 SELECT TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'),'YYYYMMDD') AS JOB_DATE
      , BNP_NO                               AS  BNP_NO
      , POL_NO                               AS  POL_NO
      , D_30                                 AS  D_30
      , D_30_CUST_NO
      , D_30_TREATY_CD
      , D_20                                 AS  D_20
      , D_20_CUST_NO
      , D_20_TREATY_CD
      , D_10                                 AS  D_10
      , D_10_CUST_NO
      , D_10_TREATY_CD
      , D_5                                  AS  D_5
      , D_5_CUST_NO
      , D_5_TREATY_CD
      , D_3                                  AS  D_3
      , D_3_CUST_NO
      , D_3_TREATY_CD
      , D_1                                  AS  D_1
      , D_1_CUST_NO
      , D_1_TREATY_CD
      , D_0                                  AS  D_0
      , D_0_CUST_NO
      , D_0_TREATY_CD
      , TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
  FROM(
       -- 분납 회차별 도래 건수
       SELECT B.BNP_NO AS BNP_NO
            , A.POL_NO
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'), 'YYYYMMDD') + 30 THEN 1 ELSE 0 END AS D_30
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'), 'YYYYMMDD') + 30 THEN A.CUST_NO ELSE '' END AS D_30_CUST_NO
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'), 'YYYYMMDD') + 30 THEN C.TREATY_CD ELSE '' END AS D_30_TREATY_CD
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'), 'YYYYMMDD') + 20 THEN 1 ELSE 0 END AS D_20
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'), 'YYYYMMDD') + 20 THEN A.CUST_NO ELSE '' END AS D_20_CUST_NO
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'), 'YYYYMMDD') + 20 THEN C.TREATY_CD ELSE '' END AS D_20_TREATY_CD
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'), 'YYYYMMDD') + 10 THEN 1 ELSE 0 END AS D_10
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'), 'YYYYMMDD') + 10 THEN A.CUST_NO ELSE '' END AS D_10_CUST_NO
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'), 'YYYYMMDD') + 10 THEN C.TREATY_CD ELSE '' END AS D_10_TREATY_CD
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'), 'YYYYMMDD') + 5  THEN 1 ELSE 0 END AS D_5
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'), 'YYYYMMDD') + 5  THEN A.CUST_NO ELSE '' END AS D_5_CUST_NO
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'), 'YYYYMMDD') + 5  THEN C.TREATY_CD ELSE '' END AS D_5_TREATY_CD
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'), 'YYYYMMDD') + 3  THEN 1 ELSE 0 END AS D_3
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'), 'YYYYMMDD') + 3  THEN A.CUST_NO ELSE '' END AS D_3_CUST_NO
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'), 'YYYYMMDD') + 3  THEN C.TREATY_CD ELSE '' END AS D_3_TREATY_CD
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'), 'YYYYMMDD') + 1  THEN 1 ELSE 0 END AS D_1
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'), 'YYYYMMDD') + 1  THEN A.CUST_NO ELSE '' END AS D_1_CUST_NO
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'), 'YYYYMMDD') + 1  THEN C.TREATY_CD ELSE '' END AS D_1_TREATY_CD
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'), 'YYYYMMDD')      THEN 1 ELSE 0 END AS D_0
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'), 'YYYYMMDD')      THEN A.CUST_NO ELSE '' END AS D_0_CUST_NO
            , CASE WHEN B.BNP_DATE = TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'), 'YYYYMMDD')      THEN C.TREATY_CD ELSE '' END AS D_0_TREATY_CD
            , 0 AS  RETIRE
            , '' AS RETIRE_CUST_NO
            , '' AS RETIRE_TREATY_CD
         FROM TBIC0001 A
            , TBIC0016 B
             , TBAA0001 C
        WHERE A.POL_NO    = B.POL_NO
          AND A.CONT_STATE IN ('02','03','05')
           AND A.I_KIND_CD = '11'
          AND B.BNP_NO    > A.END_NAB_NO
          AND B.BNP_DATE <= TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'), 'YYYYMMDD') + 30
          AND B.BNP_DATE >= TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'), 'YYYYMMDD')
           AND A.CUST_NO = C.CUST_NO
          AND RCPT_NO IS NULL
          UNION ALL
         SELECT 10    AS    BNP_NO
               , A.POL_NO
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE + 30 ,'YYYYMMDD') THEN 1 ELSE 0 END AS D_30
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE + 30 ,'YYYYMMDD') THEN A.CUST_NO ELSE '' END AS D_30_CUST_NO
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE + 30 ,'YYYYMMDD') THEN C.TREATY_CD ELSE '' END AS D_30_TREATY_CD
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE + 20 ,'YYYYMMDD') THEN 1 ELSE 0 END AS D_20
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE + 20 ,'YYYYMMDD') THEN A.CUST_NO ELSE '' END AS D_20_CUST_NO
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE + 20 ,'YYYYMMDD') THEN C.TREATY_CD ELSE '' END AS D_20_TREATY_CD
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE + 10 ,'YYYYMMDD') THEN 1 ELSE 0 END AS D_10
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE + 10 ,'YYYYMMDD') THEN A.CUST_NO ELSE '' END AS D_10_CUST_NO
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE + 10 ,'YYYYMMDD') THEN C.TREATY_CD ELSE '' END AS D_10_TREATY_CD
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE + 5  ,'YYYYMMDD') THEN 1 ELSE 0 END AS D_5
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE + 5  ,'YYYYMMDD') THEN A.CUST_NO ELSE '' END AS D_5_CUST_NO
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE + 5  ,'YYYYMMDD') THEN C.TREATY_CD ELSE '' END AS D_5_TREATY_CD
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE + 3  ,'YYYYMMDD') THEN 1 ELSE 0 END AS D_3
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE + 3  ,'YYYYMMDD') THEN A.CUST_NO ELSE '' END AS D_3_CUST_NO
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE + 3  ,'YYYYMMDD') THEN C.TREATY_CD ELSE '' END AS D_3_TREATY_CD
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE + 1  ,'YYYYMMDD') THEN 1 ELSE 0 END AS D_1
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE + 1  ,'YYYYMMDD') THEN A.CUST_NO ELSE '' END AS D_1_CUST_NO
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE + 1  ,'YYYYMMDD') THEN C.TREATY_CD ELSE '' END AS D_1_TREATY_CD
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE      ,'YYYYMMDD') THEN 1 ELSE 0 END AS D_0
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE      ,'YYYYMMDD') THEN A.CUST_NO ELSE '' END AS D_0_CUST_NO
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE      ,'YYYYMMDD') THEN C.TREATY_CD ELSE '' END AS D_0_TREATY_CD
               , 0 AS  RETIRE
               , '' AS RETIRE_CUST_NO
               , '' AS RETIRE_TREATY_CD
            FROM TBIC0001 A
               , TBAA0001 C
           WHERE A.CONT_STATE IN ('02','03')
             AND A.CUST_NO = C.CUST_NO
             AND A.I_KIND_CD = '11'
             AND A.IEND_CONT_DATE BETWEEN TO_DATE(TO_CHAR(SYSDATE   , 'YYYYMMDD')||'000000', 'YYYYMMDDhh24miss')
                                      AND TO_DATE(TO_CHAR(SYSDATE+30, 'YYYYMMDD')||'235959', 'YYYYMMDDhh24miss')
            AND NOT EXISTS (SELECT D.CAR_HAN_NO
                           FROM TBIC0001 D
                          WHERE A.IEND_CONT_DATE = D.ISTAR_CONT_DATE
                            AND A.CAR_HAN_NO = D.CAR_HAN_NO
                            AND A.I_KIND_CD = D.I_KIND_CD
                            AND D.CONT_STATE IN ('02','03')
                            )

          UNION ALL
          SELECT 20    AS    BNP_NO
               , A.CUST_NO || '_' || TO_CHAR(A.CAR_SEQ) AS POL_NO --다른 테이블과의 UNION으로 인해 실제 데이터는 중복을 피하기 위한 CUST_NO + CAR_SEQ이나 Alias 는 POL_NO로 정의함
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE + 30 ,'YYYYMMDD')  THEN 1 ELSE 0 END AS D_30
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE + 30 ,'YYYYMMDD')  THEN A.CUST_NO ELSE '' END AS D_30_CUST_NO
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE + 30 ,'YYYYMMDD')  THEN C.TREATY_CD ELSE '' END AS D_30_TREATY_CD
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE + 20 ,'YYYYMMDD')  THEN 1 ELSE 0 END AS D_20
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE + 20 ,'YYYYMMDD')  THEN A.CUST_NO ELSE '' END AS D_20_CUST_NO
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE + 20 ,'YYYYMMDD')  THEN C.TREATY_CD ELSE '' END AS D_20_TREATY_CD
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE + 10 ,'YYYYMMDD')  THEN 1 ELSE 0 END AS D_10
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE + 10 ,'YYYYMMDD')  THEN A.CUST_NO ELSE '' END AS D_10_CUST_NO
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE + 10 ,'YYYYMMDD')  THEN C.TREATY_CD ELSE '' END AS D_10_TREATY_CD
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE + 5  ,'YYYYMMDD')  THEN 1 ELSE 0 END AS D_5
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE + 5  ,'YYYYMMDD')  THEN A.CUST_NO ELSE '' END AS D_5_CUST_NO
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE + 5  ,'YYYYMMDD')  THEN C.TREATY_CD ELSE '' END AS D_5_TREATY_CD
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE + 3  ,'YYYYMMDD')  THEN 1 ELSE 0 END AS D_3
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE + 3  ,'YYYYMMDD')  THEN A.CUST_NO ELSE '' END AS D_3_CUST_NO
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE + 3  ,'YYYYMMDD')  THEN C.TREATY_CD ELSE '' END AS D_3_TREATY_CD
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE + 1  ,'YYYYMMDD')  THEN 1 ELSE 0 END AS D_1
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE + 1  ,'YYYYMMDD')  THEN A.CUST_NO ELSE '' END AS D_1_CUST_NO
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE + 1  ,'YYYYMMDD')  THEN C.TREATY_CD ELSE '' END AS D_1_TREATY_CD
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE      ,'YYYYMMDD')  THEN 1 ELSE 0 END AS D_0
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE      ,'YYYYMMDD')  THEN A.CUST_NO ELSE '' END AS D_0_CUST_NO
               , CASE WHEN TO_CHAR(A.IEND_CONT_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE      ,'YYYYMMDD')  THEN C.TREATY_CD ELSE '' END AS D_0_TREATY_CD
               , 0 AS  RETIRE
               , '' AS RETIRE_CUST_NO
               , '' AS RETIRE_TREATY_CD
            FROM TBAA0101 A
               , TBAA0001 C
               , (
                  SELECT CUST_NO, CAR_SEQ
                    FROM TBIC0001
                   WHERE CONT_STATE <> '01'
                   GROUP BY CUST_NO, CAR_SEQ
                 ) D     --미계약 건만 찾는다.
           WHERE A.CUST_NO = C.CUST_NO
             AND A.CUST_NO = D.CUST_NO(+)
             AND A.CAR_SEQ = D.CAR_SEQ(+)
             AND (D.CUST_NO IS NULL AND D.CAR_SEQ IS NULL)
             --AND A.ISTAR_CONT_DATE IS NOT NULL
             AND A.IEND_CONT_DATE BETWEEN TO_DATE(TO_CHAR(SYSDATE, 'YYYYMMDD'), 'YYYYMMDD')
                                      AND TO_DATE(TO_CHAR(SYSDATE+30, 'YYYYMMDD'), 'YYYYMMDD')
       )
  WHERE (D_30 > 0 OR D_20 > 0 OR D_10 > 0 OR D_5  > 0 OR D_3 > 0 OR D_1 > 0 OR D_0 > 0);

    COMMIT;

 SELECT COUNT(*)
   into o_tota_cnt
   FROM TBZZ8001
  WHERE JOB_DATE = TRUNC(SYSDATE);

    o_succ_cnt := o_tota_cnt;
    o_fail_cnt := 0;

    o_result   := TO_CHAR(SYSDATE,'YYYYMMDD') || ' SUCCESS';

    --성공처리상세배치저장
    PR_INSERT_BATCH_LOG(i_bat_id, 'PR_BATCH_PAYMENT', TO_CHAR(SYSDATE,'YYYYMMDD') ,'[성공]['||o_tota_cnt||'건이 정상적으로 입력 되었습니다.]' );


    exception when others then
              DBMS_OUTPUT.PUT_LINE('PR_BATCH_PAYMENT ERROR: ' || sqlerrm);
              RAISE_APPLICATION_ERROR(-20010, 'PR_BATCH_PAYMENT ERROR: ' || sqlerrm);
              ROLLBACK;
              o_result := sqlerrm ;
              --실패처리
              PR_INSERT_BATCH_LOG(i_bat_id, 'PR_BATCH_PAYMENT','ERROR' ,'[실패][오류메시지:' || sqlerrm );

 end;
CREATE -- added during DDL generation.
procedure          PR_BATCH_STATISTICS(i_gubun     in  varchar2
                                               ,i_work_yn   in  varchar2
                                               ,i_user_id   in  varchar2
                                               ,i_bat_id    in  varchar2
                                               ,i_job_date  in  varchar2
                                               ,o_tota_cnt  out number
                                               ,o_succ_cnt  out number
                                               ,o_fail_cnt  out number
                                               ,o_result    out varchar2) as
/**************************************************************************************/
/* 생성일자 : 2013.05.20                                                              */
/* 생성자   : 강신규                                                                  */
/* 추가수정 : 이정원  2013.05.30                                                      */
/* 업무내용 : 실적현황_배치통계, 공제가입업체현황_배치통계                            */
/* Parameters:[in]  i_gubun     :작업구분(1:day,2:Month)                              */
/*            [in]  i_bat_id    :배치번호                                             */
/*            [in]  i_job_date  :작업일자(From)                                       */
/*            [out]o_tota_cnt       : 전체건수                                        */
/*            [out]o_succ_cnt       : 성공건수                                        */
/*            [out]o_fail_cnt       : 실패건수                                        */
/*            [out]o_result         : 모두성공(''), 오류발생시 해당 오류건과 내용     */
/**************************************************************************************/
s_from_date    varchar2(8);
s_to_date      varchar2(8);
s_result_date  varchar2(20);
s_tbl_gubun    varchar2(20);

begin /* <-- procedure 시작 */

     s_tbl_gubun := '';
     o_result    := '';
     o_tota_cnt  := 0;
     o_succ_cnt  := 0;
     o_fail_cnt  := 0;

     if    i_gubun = '1' then
           s_from_date := i_job_date;
           s_to_date   := i_job_date;
     else
           s_from_date := substr(i_job_date,1,6) || '01';
           s_to_date   := substr(i_job_date,1,6) || to_char(last_day(TO_DATE(i_job_date, 'YYYYMMDD')),'dd');
     end if;

     if    i_gubun = '1' and i_job_date = to_char(last_day(TO_DATE(i_job_date, 'YYYYMMDD')),'YYYYMMDD') then
           s_from_date := substr(i_job_date,1,6) || '01';
           s_to_date   := substr(i_job_date,1,6) || to_char(last_day(TO_DATE(i_job_date, 'YYYYMMDD')),'dd');
     end if;

     if    s_from_date = s_to_date then
           s_result_date   := s_to_date;
     else
           s_result_date   := s_from_date || '~' || s_to_date;
     end if;

     /**************************************************************************************/
     /* TBZZ8002 insert 실적현황 통계테이블                                                */
     /**************************************************************************************/

     if i_work_yn = '1' or i_work_yn = '2' then

            begin
                  s_tbl_gubun := 'TBZZ8002';

                  delete from TBZZ8002 where JOB_DATE >= s_from_date and  JOB_DATE <= s_to_date;

                  insert into TBZZ8002( JOB_DATE
                                      , CUST_NO
                                      , I_KIND_CD
                                      , CONT_CNT_1
                                      , APPLY_PREM_1
                                      , RCPT_PREM_1
                                      , CONT_CNT_2
                                      , RCPT_PREM_2
                                      , ADD_CNT
                                      , ADD_PREM
                                      , MINUS_CNT
                                      , MINUS_PREM
                                      , CANCEL_CNT_1
                                      , CANCEL_PREM_1
                                      , CANCEL_CNT_2
                                      , CANCEL_PREM_2
                                      )
                         select TO_CHAR(A.FINAN_YMD,'YYYYMMDD')
                              , A.CUST_NO
                              , A.I_KIND_CD
                              , sum(case when  RCVD_GB = '1' and A.ENDOR_NO = 0  then 1                 else 0 end)      AS CONT_CNT_1       -- 신계약 계약 건수
                              , sum(case when  RCVD_GB = '1' and A.ENDOR_NO = 0  then B.SUM_PREM        else 0 end)      AS APPLY_PREM_1     -- 신계약 적용 보험료
                              , sum(case when  RCVD_GB = '1' and A.ENDOR_NO = 0  then A.RCPT_GRANT_PREM else 0 end)      AS RCPT_PREM_1      -- 신계약 영수 금액
                              , sum(case when  RCVD_GB = '2'                     then 1                 else 0 end)      AS CONT_CNT_2       -- 계속 계약 건수
                              , sum(case when  RCVD_GB = '2'                     then A.RCPT_GRANT_PREM else 0 end)      AS RCPT_PREM_2      -- 계속 영수 금액
                              , sum(case when  RCVD_GB = '6'                     then 1                 else 0 end)      AS ADD_CNT          -- 추징 건수
                              , sum(case when  RCVD_GB = '6'                     then A.RCPT_GRANT_PREM else 0 end)      AS ADD_PREM         -- 추징 금액
                              , sum(case when  RCVD_GB = '7'                     then 1                 else 0 end)      AS MINUS_CNT        -- 환수 건수
                              , sum(case when  RCVD_GB = '7'                     then A.RCPT_GRANT_PREM else 0 end) * -1 AS MINUS_PREM       -- 환수 금액
                              , sum(case when  CONT_STATUS = '07'                then 1                 else 0 end)      AS CANCEL_CNT_1     -- 취소 건수
                              , sum(case when  CONT_STATUS = '07'
                                         then  decode(A.RCVD_GB ,7 ,A.RCPT_GRANT_PREM * -1 ,A.RCPT_GRANT_PREM)
                                         else  0
                                    end)                                                                                 AS CANCEL_PREM_1    -- 취소 금액
                              , sum(case when  CONT_STATUS = '09'                then 1                 else 0 end)      AS CANCEL_CNT_2     -- 해지 건수
                              , sum(case when  CONT_STATUS = '09'
                                         then  decode(A.RCVD_GB ,7 ,A.RCPT_GRANT_PREM * -1 ,A.RCPT_GRANT_PREM)
                                         else  0
                                    end)                                                                                 AS CANCEL_PREM_2    -- 해지 금액
                           from TBFA0001   A,
                                TBID0001   B
                          where A.POL_NO    = B.POL_NO
                            and A.I_KIND_CD = B.I_KIND_CD
                            and A.ENDOR_NO  = B.ENDOR_NO
                         --   and A.ENDOR_NO  = 0
                            and A.FINAN_YMD  >= TO_DATE(s_from_date || '000000', 'YYYYMMDDHH24MISS')
                            and A.FINAN_YMD  <= TO_DATE(s_to_date || '235959', 'YYYYMMDDHH24MISS')
                            and A.CONT_STATUS > '01'
                          group by TO_CHAR(A.FINAN_YMD,'YYYYMMDD'), A.CUST_NO, A.I_KIND_CD;

                  commit;

                  select count(*)
                   into o_tota_cnt
                   from TBZZ8002
                  where JOB_DATE >= s_from_date and JOB_DATE <= s_to_date;

                  o_succ_cnt := o_succ_cnt + 1;

                 --성공처리상세배치저장
                 PR_INSERT_BATCH_LOG(i_bat_id, 'PR_BATCH_STATISTICS', s_tbl_gubun || ' ' || s_result_date ,'[성공]['||o_tota_cnt||'건이 정상적으로 입력 되었습니다.]' );

                 if       i_work_yn = 1 then
                          o_tota_cnt := 2 ;
                 else
                          o_tota_cnt := 1 ;
                 end if ;

                 exception when others then
                     rollback;
                     o_fail_cnt := o_fail_cnt + 1;
                     o_result   := sqlerrm ;
                     --실패처리
                     PR_INSERT_BATCH_LOG(i_bat_id, 'PR_BATCH_STATISTICS', s_tbl_gubun || 'ERROR' ,'[실패][오류메시지:' || sqlerrm );

             end ;

      end if;
      /**************************************************************************************/
      /* TBZZ8003 insert 가입업체 추이현황 통계테이블                                       */
      /**************************************************************************************/

      if i_work_yn = '1' or i_work_yn = '3' then

            begin
                  s_tbl_gubun := 'TBZZ8003';

                  delete TBZZ8003 where JOB_DATE >= s_from_date and JOB_DATE <= s_to_date;

                  insert into TBZZ8003
                       ( JOB_DATE
                       , CUST_NO
                       , DATA_GB
                       , UNION_REGION_CD
                       , TREATY_CD
                       , CUST_CNT
                       , CNTR_AMT
                       , IT_PROCESSING
                       , USER_ID
                       )
                  select s_to_date                                   AS JOB_DATE
                       , A.CUST_NO                                   AS CUST_NO
                       , '1'                                         AS DATA_GB
                       , B.UNION_REGION_CD                           AS UNION_REGION_CD
                       , B.TREATY_CD                                 AS TREATY_CD
                       , 1                                           AS CUST_CNT
                       , 0                                           AS CNTR_AMT
                       , TO_CHAR(sysdate ,'YYYYMMDDHH24MISS')        AS IT_PROCESSING
                       , i_user_id                                   AS USER_ID
                    from TBIC0001 A
                       , TBAA0001 B
                   where A.CUST_NO = B.CUST_NO
                     and CONT_STATE in ('02','03')
                     and A.ISTAR_CONT_DATE <= TO_DATE(s_to_date||'235959','YYYYMMDDHH24MISS')
                     and A.IEND_CONT_DATE >= TO_DATE(s_to_date||'235959','YYYYMMDDHH24MISS')
                   group by A.CUST_NO ,B.UNION_REGION_CD ,B.TREATY_CD
                   union all
                  select s_to_date                                   AS JOB_DATE
                       , A.CUST_NO                                   AS CUST_NO
                       , '2'                                         AS DATA_GB
                       , B.UNION_REGION_CD                           AS UNION_REGION_CD
                       , B.TREATY_CD                                 AS TREATY_CD
                       , 0                                           AS CUST_CNT
                       , sum(DECODE(A.CNTR_GB, '0', NVL(A.CNTR_AMT,0)
                                             , '1', NVL(A.CNTR_AMT,0)
                                             , '2', NVL(A.CNTR_AMT*-1,0)
                                             , '3', NVL(A.CNTR_AMT*-1,0)
                                             , 0)
                                   )                                 AS CNTR_AMT
                       , TO_CHAR(sysdate ,'YYYYMMDDHH24MISS')        AS IT_PROCESSING
                       , i_user_id                                   AS USER_ID
                    from TBAA0100 A
                       , TBAA0001 B
                   where A.CUST_NO = B.CUST_NO
                     and TO_CHAR(A.CNTR_IN_DATE ,'YYYYMMDD') between s_from_date and s_to_date
                   group by A.CUST_NO, B.UNION_REGION_CD, B.TREATY_CD ;

                  commit;

                  select count(*)
                    into o_tota_cnt
                    from TBZZ8003
                   where JOB_DATE >= s_from_date and JOB_DATE <= s_to_date;

                  o_succ_cnt := o_succ_cnt + 1;

                 --성공처리상세배치저장
                 PR_INSERT_BATCH_LOG(i_bat_id, 'PR_BATCH_STATISTICS', s_tbl_gubun || ' ' || s_result_date ,'[성공]['||o_tota_cnt||'건이 정상적으로 입력 되었습니다.]' );

                 if       i_work_yn = 1 then
                          o_tota_cnt := 2 ;
                 else
                          o_tota_cnt := 1 ;
                 end if ;

                 exception when others then
                     rollback;
                     o_fail_cnt := o_fail_cnt + 1;
                     o_result   := sqlerrm ;
                     --실패처리
                     PR_INSERT_BATCH_LOG(i_bat_id, 'PR_BATCH_STATISTICS', s_tbl_gubun || 'ERROR' ,'[실패][오류메시지:' || sqlerrm );

             end ;

      end if;


end ; /* <-- procedure 종료 */
                                          end if;

                                   end if;
                                   /**********************************************************/
                                   /*** 한글차량번호변경시 계약여부 와 기존 번호 확인      ***/
                                   /**********************************************************/
                                   --if    idx1 = 2  then
                                   --      if    old_change_data is not null then       /* 기존   한글차량번호가 null 이 아니면 */
                                   --            if    new_change_data is not null then  /* 새로운 한글차량번호가 null 이 아니면 */
                                   --                  select FN_GET_CAR_STATE('2',i_cust_no,null,new_change_data)
                                   --                        ,FN_GET_CAR_STATE('3',i_cust_no,null,old_change_data)
                                   --                    into v_check2
                                   --                        ,v_check3
                                   --                    from dual;

                                   --                  if    v_check2 is not null then
                                   --                        idx1       := 99;
                                   --                        insert_ok  := null;
                                   --                        o_result   := o_result || ' [변경하고자 하는 한글차량번호가 존재 합니다.(수정불가)]';
                                   --                  end if;

                                   --                  if    v_check3 is not null then
                                   --                        idx1       := 99;
                                   --                        insert_ok  := null;
                                   --                        o_result   := o_result || ' [기존 한글차량번호로 계약이 존재 합니다(수정불가)]';
                                   --                  end if;
                                   --           else
                                   --                 idx1       := 99;
                                   --                  insert_ok  := null;
                                   --                  o_result   := o_result || ' [기존 한글차량번호를 삭제 할수 없습니다.(수정불가)]';
                                   --            end if;
                                   --      end if;

                                   --end if;

                                   if    codetype> 'A0000'   and  codetype < 'A9999'  then
                                         select FN_GET_CODENAME(substr(codetype,1,5), new_change_data,substr(codetype,6,10))
                                           into new_change_data
                                           from dual;

                                         select FN_GET_CODENAME(substr(codetype,1,5), old_change_data,substr(codetype,6,10))
                                           into old_change_data
                                           from dual;
                                   end if;

                                   --if    n_new_change_data is not null then
                                   --      new_change_data   :=  new_change_data ||'[' || n_new_change_data || ']';
                                   --      old_change_data   :=  old_change_data ||'[' || n_old_change_data || ']';
                                   --end if ;


                                   new_change_data   :=  new_change_data || n_new_change_data ;
                                   old_change_data   :=  old_change_data || n_old_change_data ;
                                   n_new_change_data :=  null;
                                   n_old_change_data :=  null;

                                   if    insert_ok = 'Y' then
                                         /* Parameter:고객번호/TBAA0002의SEQ/TBAA0002의변경SEQ/변경요청채널/변경table/변경항목/변경항목 그룹/변경한 프로그램(화면명)/이전DATA/이후DATA/변경자/변경자 명*/
                                         PR_TBAA0004_INSERT(i_cust_no,
                                                            i_car_seq,
                                                            v_max_seq+1,
                                                            i_change_channel,
                                                            'TBAA0101',
                                                            new_change_item,
                                                            new_change_group,
                                                            i_change_pgm,
                                                            old_change_data,
                                                            new_change_data,
                                                            change_id,
                                                            change_name
                                                           );
                                  end if;

                             else /* <-- if codetype = 'Next' */
                                   n_new_change_data := null;
                                   n_old_change_data := null;
                             end if; /* <-- if codetype = 'Next' */


                             idx1 := idx1 + 1;

                       end loop; /*  <-- Loop End */

                       if    insert_ok = 'Y' then /* 변경된 정보가 있으면 INSERT(TBAA0002) */
                             begin
                                   insert into TBAA0102(
                                          CUST_NO,                 CAR_SEQ,                 CAR_HISTORY_SEQ,         CUST_NM,                 CO_NO,
                                          BCO_NO,                  OWN_CD,                  CAR_ID,                  APPR_NUM_TON,            CAR_NO,
                                          OUT_CAR_NO,              CAR_NO_GB,               CAR_NO_L,                CAR_NO_S1,               CAR_NO_S2,
                                          CAR_NO_CITY,             CAR_NM_CD,               CAR_KIND_CD,             CAR_TYPE_CD,             Y_TYPE,
                                          Y_AB,                    CAR_CC,                  HAN_CAR_NO,              CAR_NM,                  CAR_COUNTRY,
                                          CAR_GRADE,               CAR_RATE,                ENG_TYPE,                CAR_ATTACH_CODE1,        CAR_ATTACH_CODE2,
                                          CAR_ATTACH_CODE3,        CAR_ATTACH_CODE4,        CAR_ATTACH_AMT1,         CAR_ATTACH_AMT2,         CAR_ATTACH_AMT3,
                                          CAR_ATTACH_AMT4,         CAR_UNIT_GAEK_CODE,      OLD_CAR_R,               CAR_UNIT_GAEK,           CAR_ACC_GAEK,
                                          CAR_VALUE,               CAR_AMT,                 CAR_AUTO_CLASF,          CAR_GPS_CLASF,           CAR_ABS_CLASF,
                                          CAR_SECUR_CLASF,         CAR_BLACK_BOX_CLASF,     CAR_BLACK_BOX_NUM,       CAR_AIR_BAG,             CAR_REG_DATE,
                                          CAR_LAST_UPDATE,         PRE_CONT_CD,             LAST_ENT_DGN_DATE,       LAST_CONT_DATE,          ENT_STATUS,
                                          CNTR_SEQ,                CNTR_GB,                 CNTR_AMT,                CNTR_IN_DATE,            CNTR_IN_GB,
                                          TREATY_HQ_CD,            TREATY_BRH_CD,           TREATY_CD,               USER_ID,                 IT_PROCESSING ,
                                          USE_YN,                  TRANSFER_CUST,           CUST_CAR_NM,             TOT_CAR_VALUE,           Y_HIS_CNT,
                                  OWN_CUS_NO,              OWN_CUS_NM,              CAR_MK,                  BLACK_COM,               BLACK_MODEL,
                                  BLACK_AMT,               BLACK_ENT_AMT,           CAR_AMT_R
                                          )
                                   select CUST_NO,                 CAR_SEQ,                 v_max_seq+1,             CUST_NM,                 CO_NO,
                                          BCO_NO,                  OWN_CD,                  CAR_ID,                  APPR_NUM_TON,            CAR_NO,
                                          OUT_CAR_NO,              CAR_NO_GB,               CAR_NO_L,                CAR_NO_S1,               CAR_NO_S2,
                                          CAR_NO_CITY,             CAR_NM_CD,               CAR_KIND_CD,             CAR_TYPE_CD,             Y_TYPE,
                                          Y_AB,                    CAR_CC,                  HAN_CAR_NO,              CAR_NM,                  CAR_COUNTRY,
                                          CAR_GRADE,               CAR_RATE,                ENG_TYPE,                CAR_ATTACH_CODE1,        CAR_ATTACH_CODE2,
                                          CAR_ATTACH_CODE3,        CAR_ATTACH_CODE4,        CAR_ATTACH_AMT1,         CAR_ATTACH_AMT2,         CAR_ATTACH_AMT3,
                                          CAR_ATTACH_AMT4,         CAR_UNIT_GAEK_CODE,      OLD_CAR_R,               CAR_UNIT_GAEK,           CAR_ACC_GAEK,
                                          CAR_VALUE,               CAR_AMT,                 CAR_AUTO_CLASF,          CAR_GPS_CLASF,           CAR_ABS_CLASF,
                                          CAR_SECUR_CLASF,         CAR_BLACK_BOX_CLASF,     CAR_BLACK_BOX_NUM,       CAR_AIR_BAG,             CAR_REG_DATE,
                                          CAR_LAST_UPDATE,         PRE_CONT_CD,             LAST_ENT_DGN_DATE,       LAST_CONT_DATE,          ENT_STATUS,
                                          CNTR_SEQ,                CNTR_GB,                 CNTR_AMT,                CNTR_IN_DATE,            CNTR_IN_GB,
                                          TREATY_HQ_CD,            TREATY_BRH_CD,           TREATY_CD,               USER_ID,                 IT_PROCESSING ,
                                          USE_YN,                  TRANSFER_CUST,           CUST_CAR_NM,             TOT_CAR_VALUE,           Y_HIS_CNT,
                                  OWN_CUS_NO,              OWN_CUS_NM,              CAR_MK,                  BLACK_COM,               BLACK_MODEL,
                                  BLACK_AMT,               BLACK_ENT_AMT,           CAR_AMT_R
                                     from TBAA0101
                                    where CUST_NO =   i_cust_no
                                      and CAR_SEQ =   i_car_seq;

                                    exception when others then
                                              o_result := o_result || '**' ||  i_cust_no || '-' || i_car_seq || '-' || v_max_seq+1 || ' : ' || '[변경내용 TBAA0102 INSERT ERROR1]';
                             end;
                       end if; /* <-- if insert_ok = 'Y'*/

                 else /* <-- if v_new_data <> v_old_data */
                       o_result := '변경된 정보가 없습니다.';

                 end if; /* <-- if v_new_data <> v_old_data */

              end if; /* <-- if v_new_data is not null and v_old_data is not null */

          end if; /* if  v_max_seq = 0  의 end if */

    end if; /* <-- if s_change_table1 */

    if    o_result is null then
          o_result := 'OK';
    end if;

    -- commit;
    exception when others then
              dbms_output.put_line('PR_CHAGNE_CUST Main Error: '||sqlerrm);
              raise_application_error(-20010, 'PR_CHAGNE_CUST Main Error: '||sqlerrm);
              o_result := o_result || 'Insert Eorror' ;

end ;
CREATE -- added during DDL generation.
OR REPLACE procedure PR_CHAGNE_CUST(i_cust_no        in  varchar2,
                                                    i_car_seq        in  number,
                                                    i_change_channel in  varchar2,
                                                    i_change_table   in  varchar2,
                                                    i_change_pgm     in  varchar2,
                                                    o_result         out varchar2) as
/********************************************************************/
/* 생성일자 : 2013.02.27                                            */
/* 생성자   : 강신규                                                */
/* 업무내용 : 고객정보 및 출자금변경 내역 insert                    */
/* Parameter: [in] i_cust_no        : 고객번호                      */
/*            [in] i_car_seq        : 차량seq                       */
/*            [in] i_change_channel : 변경요청한 channel            */
/*            [in] i_change_table   : 변경table                     */
/*            [in] i_change_pgm     : 변경한프로그림명(화면명)      */
/*            [out]o_result         : 결과                          */
/********************************************************************/
v_old_data          varchar2(4000);     -- 이전data
v_new_data          varchar2(4000);     -- 변경data
v_max_seq           number(6) :=0;      -- max 변경seq

v_check1            varchar2(200);
v_check2            varchar2(200);
v_check3            varchar2(200);

old_change          varchar2(200);
old_change_group    varchar2(10);
old_change_item     varchar2(50);
old_change_data     varchar2(200);
n_old_change_data   varchar2(500);

new_change          varchar2(200);
new_change_group    varchar2(10);
new_change_item     varchar2(50);
new_change_data     varchar2(200);
n_new_change_data   varchar2(500);

change_id           varchar2(200);      --변경자
change_name         varchar2(200);      --변경자명
codetype            varchar2(20);

insert_ok           vaRchar2(1);        -- insert ok
idx1                number(3);
idx2                number(3);
s_change_table1     varchar2(30);
s_change_table2     varchar2(30);
v_change_pgm        varchar2(50);       --프로그램명체크용

car_info_ok           vaRchar2(1);

begin

    o_result :=null ;
    s_change_table1 := nvl(regexp_substr(i_change_table ,'[^|]+',1,1),' ');
    s_change_table2 := nvl(regexp_substr(i_change_table ,'[^|]+',1,2),' ');
    /************************************************************************/
    /************************* 고객마스터 변경일때 **************************/
    /************************************************************************/
    if    s_change_table1 = 'TBAA0001'  or s_change_table2 = 'TBAA0001' then  /* 고객마스터 변경일때 */
          /******************************/
          /* History Max Seq 가지고 오기*/
          /******************************/

          select nvl(max(HISTORY_SEQ),0)
            into v_max_seq
            from TBAA0002
           where CUST_NO =   i_cust_no;

          if    v_max_seq = 0 then /* 고객변경(입력)이 처음이면*/
                begin
                    insert into TBAA0002(
                           CUST_NO,             HISTORY_SEQ,        CUST_NM,            INDGRP_GB,          CUST_GB,
                           UNION_REGION_CD,     JUMIN_NUM,          JUMIN_NM,           CO_NO,              BCO_NO,
                           OWN_CD,              GRPCONT_DSC_R,      DSC_INC_CD,         DSC_INC_R,          SPCIAL_INC_R,
                           SPCIAL_INC_APPY,     AREA_MAJOR_CD,      AREA_MIDDLE,        ZIP_SEND_GB,        ZIP_CD_GB,
                           ZIP_CD,              ADDR_1,             ADDR_2,             TEL_GB,             OFF_TEL_DDD,
                           OFF_TEL,             OFF_TEL_NM,         OFF_TEL_DDD1,       OFF_TEL1,           OFF_TEL1_NM,
                           OFF_TEL_DDD2,        OFF_TEL2,           OFF_TEL2_NM,        HP_NO1,             HP_NO1_NM,
                           HP_NO2,              HP_NO2_NM,          ISD_E_MAIL,         ISD_FAX,            CNTR_TOT_AMT,
                           CNTR_CAR_CNT,        OWN_CAR_CNT,        COMP_ENT_YM,        COMP_SHUT_YM,       BEFORE_BCO_NO,
                           UNION_REG_DATE,      FIRST_REG_DATE,     LAST_UPDATE,        TREATY_HQ_CD,       TREATY_BRH_CD,
                           TREATY_CD,           USER_ID,            IT_PROCESSING,      CUST_PW,            LONG_SPC_CD,
                           GRPCONT_DSC_R_1,     DSC_INC_CD_1,       DSC_INC_R_1,        SPCIAL_INC_R_1,     SPCIAL_INC_APPY_1,
                           LONG_SPC_CD_1,       GRPCONT_DSC_R_2,    DSC_INC_CD_2,       DSC_INC_R_2,        SPCIAL_INC_R_2,
                           SPCIAL_INC_APPY_2,   LONG_SPC_CD_2,      AFTER_CAL_YN,       CONT_ONE_DEC_R,     CONT_TWO_DEC_R,
                           USE_YN,
                           DAY_REPAIR_DSC_R_CD, DAY_REPAIR_DSC_R_1_CD,                  DAY_REPAIR_DSC_R_2_CD,
                           DAY_REPAIR_DSC_R_CD_F, DAY_REPAIR_DSC_R_1_CD_F,              DAY_REPAIR_DSC_R_2_CD_F,
                           DAY_SPECIAL_IDLE_YN, DAY_SPECIAL_IDLE_1_YN,                  DAY_SPECIAL_IDLE_2_YN,
                           DAY_SPECIAL_CAR_YN,  DAY_SPECIAL_CAR_1_YN,                   DAY_SPECIAL_CAR_2_YN,
                           DAY_CAR_FOREIGN_YN,  DAY_CAR_SPORTS_YN,
                           AFTER_CAL_START_DATE,AFTER_CAL_END_DATE, AFTER_CONT_YN, AFTER_CONT_START_DATE, AFTER_CONT_END_DATE, SEX_GB, AFTER_CAL_MERGE_ACCOUNT_YN
                           ,CUST_GROUP_GB,  UP_CUST_NO,      UP_CUST_NM,   JUMIN_NM2,   SEX_GB2
                           ,JUMIN_NUM2,   JUMIN_TEL_DDD2,  JUMIN_TEL2,   ISD_FAX2,   CNTR_CONT_YN
                           ,CNTR_CONT_START_DATE,CNTR_CONT_END_DATE,NO_CNTR_AMT,  NO_PREM_AMT,  SPC_APPRO_YN
                           ,SPC_APPRO_CONT,BUSI_PROPERTY
                           )
                    select CUST_NO,             v_max_seq+1,        CUST_NM,            INDGRP_GB,          CUST_GB,
                           UNION_REGION_CD,     JUMIN_NUM,          JUMIN_NM,           CO_NO,              BCO_NO,
                           OWN_CD,              GRPCONT_DSC_R,      DSC_INC_CD,         DSC_INC_R,          SPCIAL_INC_R,
                           SPCIAL_INC_APPY,     AREA_MAJOR_CD,      AREA_MIDDLE,        ZIP_SEND_GB,        ZIP_CD_GB,
                           ZIP_CD,              ADDR_1,             ADDR_2,             TEL_GB,             OFF_TEL_DDD,
                           OFF_TEL,             OFF_TEL_NM,         OFF_TEL_DDD1,       OFF_TEL1,           OFF_TEL1_NM,
                           OFF_TEL_DDD2,        OFF_TEL2,           OFF_TEL2_NM,        HP_NO1,             HP_NO1_NM,
                           HP_NO2,              HP_NO2_NM,          ISD_E_MAIL,         ISD_FAX,            CNTR_TOT_AMT,
                           CNTR_CAR_CNT,        OWN_CAR_CNT,        COMP_ENT_YM,        COMP_SHUT_YM,       BEFORE_BCO_NO,
                           UNION_REG_DATE,      FIRST_REG_DATE,     LAST_UPDATE,        TREATY_HQ_CD,       TREATY_BRH_CD,
                           TREATY_CD,           USER_ID,            IT_PROCESSING,      CUST_PW,            LONG_SPC_CD,
                           GRPCONT_DSC_R_1,     DSC_INC_CD_1,       DSC_INC_R_1,        SPCIAL_INC_R_1,     SPCIAL_INC_APPY_1,
                           LONG_SPC_CD_1,       GRPCONT_DSC_R_2,    DSC_INC_CD_2,       DSC_INC_R_2,        SPCIAL_INC_R_2,
                           SPCIAL_INC_APPY_2,   LONG_SPC_CD_2,      AFTER_CAL_YN,       CONT_ONE_DEC_R,     CONT_TWO_DEC_R,
                           USE_YN,
                           DAY_REPAIR_DSC_R_CD, DAY_REPAIR_DSC_R_1_CD,                  DAY_REPAIR_DSC_R_2_CD,
                           DAY_REPAIR_DSC_R_CD_F, DAY_REPAIR_DSC_R_1_CD_F,              DAY_REPAIR_DSC_R_2_CD_F,
                           DAY_SPECIAL_IDLE_YN, DAY_SPECIAL_IDLE_1_YN,                  DAY_SPECIAL_IDLE_2_YN,
                           DAY_SPECIAL_CAR_YN,  DAY_SPECIAL_CAR_1_YN,                   DAY_SPECIAL_CAR_2_YN,
                           DAY_CAR_FOREIGN_YN,  DAY_CAR_SPORTS_YN,
                           AFTER_CAL_START_DATE,AFTER_CAL_END_DATE, AFTER_CONT_YN, AFTER_CONT_START_DATE, AFTER_CONT_END_DATE, SEX_GB, AFTER_CAL_MERGE_ACCOUNT_YN
                           ,CUST_GROUP_GB,  UP_CUST_NO,      UP_CUST_NM,   JUMIN_NM2,   SEX_GB2
                           ,JUMIN_NUM2,   JUMIN_TEL_DDD2,  JUMIN_TEL2,   ISD_FAX2,   CNTR_CONT_YN
                           ,CNTR_CONT_START_DATE,CNTR_CONT_END_DATE,NO_CNTR_AMT,  NO_PREM_AMT,  SPC_APPRO_YN
                           ,SPC_APPRO_CONT,BUSI_PROPERTY
                      from TBAA0001
                     where CUST_NO =   i_cust_no;

                    exception when others then
                              o_result := o_result || '**' ||  i_cust_no || '-' || v_max_seq+1 || ' : ' || '[변경내용 TBAA0002 INSERT ERROR1]';
                 end;
          else  /* if  v_max_seq = 0  의 else : 고객변경(입력)이 처음이 아니면 */
                /*******************************************************************/
                /* 현재자료 가지고 오기 ********************************************/
                /* select 항목 조합:변경그룹코드/변경항목/코드테이블 코드타입/DATA */
                /*******************************************************************/
                select '01∫업체명∫ ∫'                          ||  CUST_NM                     || '∬' ||    -- 1
                       '01∫고객구분∫A0002∫'                    ||  INDGRP_GB                   || '∬' ||    -- 2
                       '01∫개인조합원구분∫A0042∫'              ||  CUST_GB                     || '∬' ||    -- 3
                       '01∫지역조합∫ ∫'                        ||  UNION_REGION_CD             || '∬' ||    -- 4
                       '01∫대표자주민번호∫ ∫'                  ||  JUMIN_NUM                   || '∬' ||    -- 5
                       '01∫대표자명∫ ∫'                        ||  JUMIN_NM                    || '∬' ||    -- 6
                       '01∫법인등록번호∫ ∫'                    ||  CO_NO                       || '∬' ||    -- 7
                       '01∫사업자등록번호∫ ∫'                  ||  BCO_NO                      || '∬' ||    -- 8
                       '99∫보유자코드∫ ∫'                      ||  OWN_CD                      || '∬' ||    -- 9
                       '04∫단체계약할인율_승합(중형)∫ ∫'       ||  GRPCONT_DSC_R               || '∬' ||    --10
                       '04∫할인할증율_승합(중형)∫Next∫'        ||  DSC_INC_R                   || '∬' ||    --11
                       '04∫할인할증_승합(중형)∫A0046∫'         ||  DSC_INC_CD                  || '∬' ||    --12
                       '04∫특별할증요율_승합(중형)∫Next∫'      ||  SPCIAL_INC_R                || '∬' ||    --13
                       '04∫특별할증_승합(중형)∫A0037∫'         ||  SPCIAL_INC_APPY             || '∬' ||    --14
                       '03∫사업소재지∫A0040∫'                  ||  AREA_MAJOR_CD||AREA_MIDDLE  || '∬' ||    --15
                       '03∫우편물발송지구분∫A0054∫'            ||  ZIP_SEND_GB                 || '∬' ||    --16
                       '03∫우편번호 신구구분∫ ∫'               ||  ZIP_CD_GB                   || '∬' ||    --17
                       '02∫우선연락처구분∫A0017∫'              ||  TEL_GB                      || '∬' ||    --18
                       '02∫대표연락자명∫ ∫'                    ||  OFF_TEL_NM                  || '∬' ||    --19
                       '02∫계약담당자명∫ ∫'                    ||  OFF_TEL1_NM                 || '∬' ||    --20
                       '02∫경리담당자명∫ ∫'                    ||  OFF_TEL2_NM                 || '∬' ||    --21
                       '02∫핸드폰연락처1∫ ∫'                   ||  HP_NO1                      || '∬' ||    --22
                       '02∫핸드폰연락자명1∫ ∫'                 ||  HP_NO1_NM                   || '∬' ||    --23
                       '02∫핸드폰연락처2∫ ∫'                   ||  HP_NO2                      || '∬' ||    --24
                       '02∫핸드폰연락자명2∫ ∫'                 ||  HP_NO2_NM                   || '∬' ||    --25
                       '03∫이메일∫ ∫'                          ||  ISD_E_MAIL                  || '∬' ||    --26
                       '03∫FAX∫ ∫'                             ||  ISD_FAX                     || '∬' ||    --27
                       '99∫설립년월∫ ∫'                        ||  COMP_ENT_YM                 || '∬' ||    --28
                       '99∫폐업년월∫ ∫'                        ||  COMP_SHUT_YM                || '∬' ||    --29
                       '99∫이전사업자번호∫ ∫'                  ||  BEFORE_BCO_NO               || '∬' ||    --30
                       '99∫조합가입일자∫ ∫'                    ||  UNION_REG_DATE              || '∬' ||    --31
                       '99∫최초등록일자∫ ∫'                    ||  FIRST_REG_DATE              || '∬' ||    --32
                       '99∫최종갱신일자∫ ∫'                    ||  LAST_UPDATE                 || '∬' ||    --33
                       '99∫취급자본부∫ ∫'                      ||  TREATY_HQ_CD                || '∬' ||    --34
                       '99∫취급자관리점∫ ∫'                    ||  TREATY_BRH_CD               || '∬' ||    --35
                       '99∫관리담당자∫ ∫'                      ||  TREATY_CD                   || '∬' ||    --36
                       '03∫우편물발송처주소∫ ∫'                ||  '['|| ZIP_CD        || '] ' || ADDR_1    || '  ' ||  ADDR_2 || '∬' ||    --37
                       '02∫대표연락처∫ ∫'                      ||  '['|| OFF_TEL_DDD   || '] ' || OFF_TEL   || '∬' ||    --38
                       '02∫계약담당연락처∫ ∫'                  ||  '['|| OFF_TEL_DDD1  || '] ' || OFF_TEL1  || '∬' ||    --39
                       '02∫경리담당연락처∫ ∫'                  ||  '['|| OFF_TEL_DDD2  || '] ' || OFF_TEL2  || '∬' ||    --40
                       '99∫변경자∫ ∫'                          ||  USER_ID                     || '∬' ||    --41
                       '99∫비밀번호∫ ∫'                        ||  CUST_PW                     || '∬' ||    --42
                       '04∫장기대여요율코드_승합(중형)∫ ∫'     ||  LONG_SPC_CD                 || '∬' ||    --43
                       '04∫단체계약할인율_승용∫ ∫'             ||  GRPCONT_DSC_R_1             || '∬' ||    --44
                       '04∫할인할증등급_승용∫ ∫'               ||  DSC_INC_CD_1                || '∬' ||    --45
                       '04∫할인할증율_승용∫ ∫'                 ||  DSC_INC_R_1                 || '∬' ||    --46
                       '04∫특별할증요율_승용∫ ∫'               ||  SPCIAL_INC_R_1              || '∬' ||    --47
                       '04∫특별할증코드_승용∫ ∫'               ||  SPCIAL_INC_APPY_1           || '∬' ||    --48
                       '04∫장기대여요율코드_승용∫ ∫'           ||  LONG_SPC_CD_1               || '∬' ||    --49
                       '04∫단체계약할인율_다인승승용∫ ∫'       ||  GRPCONT_DSC_R_2             || '∬' ||    --50
                       '04∫할인할증등급_다인승승용∫ ∫'         ||  DSC_INC_CD_2                || '∬' ||    --51
                       '04∫할인할증율_다인승승용∫ ∫'           ||  DSC_INC_R_2                 || '∬' ||    --52
                       '04∫특별할증요율_다인승승용∫ ∫'         ||  SPCIAL_INC_R_2              || '∬' ||    --53
                       '04∫특별할증코드_다인승승용∫ ∫'         ||  SPCIAL_INC_APPY_2           || '∬' ||    --54
                       '04∫장기대여요율코드_다인승승용∫ ∫'     ||  LONG_SPC_CD_2               || '∬' ||    --55
                       '04∫일일자차_약정계약여부∫ ∫'           ||  AFTER_CAL_YN                || '∬' ||    --56
                       '04∫일일자차계약할인율(계약자1명)∫ ∫'   ||  CONT_ONE_DEC_R              || '∬' ||    --57
                       '04∫일일자차계약할인율(계약자2명)∫ ∫'   ||  CONT_TWO_DEC_R              || '∬' ||    --58
                       '04∫일일자차대여자동차복구가입금액코드_승합(국산)∫ ∫'   ||  DAY_REPAIR_DSC_R_CD     || '∬' ||   --59
                       '04∫일일자차대여자동차복구가입금액코드_승용(국산)∫ ∫'   ||  DAY_REPAIR_DSC_R_1_CD   || '∬' ||   --60
                       '04∫일일자차대여자동차복구가입금액코드_다승(국산)∫ ∫'   ||  DAY_REPAIR_DSC_R_2_CD   || '∬' ||   --61
                       '04∫일일자차대여자동차복구가입금액코드_승합(외산)∫ ∫'   ||  DAY_REPAIR_DSC_R_CD_F   || '∬' ||   --62
                       '04∫일일자차대여자동차복구가입금액코드_승용(외산)∫ ∫'   ||  DAY_REPAIR_DSC_R_1_CD_F || '∬' ||   --63
                       '04∫일일자차대여자동차복구가입금액코드_다승(외산)∫ ∫'   ||  DAY_REPAIR_DSC_R_2_CD_F || '∬' ||   --64
                       '04∫일일자차_휴업손해특약여부_승합∫ ∫'  ||  DAY_SPECIAL_IDLE_YN         || '∬' ||    --65
                       '04∫일일자차_휴업손해특약여부_승용∫ ∫'  ||  DAY_SPECIAL_IDLE_1_YN       || '∬' ||    --66
                       '04∫일일자차_휴업손해특약여부_다승∫ ∫'  ||  DAY_SPECIAL_IDLE_2_YN       || '∬' ||    --67
                       '04∫일일자차_차대차한정특약여부_승합∫ ∫'||  DAY_SPECIAL_CAR_YN          || '∬' ||    --68
                       '04∫일일자차_차대차한정특약여부_승용∫ ∫'||  DAY_SPECIAL_CAR_1_YN        || '∬' ||    --69
                       '04∫일일자차_차대차한정특약여부_다승∫ ∫'||  DAY_SPECIAL_CAR_2_YN        || '∬' ||    --70
                       '04∫일일자차_외제차등록가능여부∫ ∫'     ||  DAY_CAR_FOREIGN_YN          || '∬' ||    --71
                       '04∫일일자차_스포츠카등록가능여부∫ ∫'   ||  DAY_CAR_SPORTS_YN           || '∬' ||    --72
                       '04∫일일자차_약정계약 시작일자∫ ∫'      ||  AFTER_CAL_START_DATE        || '∬' ||    --73
                       '04∫일일자차_약정계약 종료일자∫ ∫'      ||  AFTER_CAL_END_DATE          || '∬' ||    --74
                       '04∫정산계약가능여부∫ ∫'                ||  AFTER_CONT_YN               || '∬' ||    --75
                       '04∫정산계약 시작일자∫ ∫'               ||  AFTER_CONT_START_DATE       || '∬' ||    --76
                       '04∫정산계약 종료일자∫ ∫'               ||  AFTER_CONT_END_DATE         || '∬' ||    --77
                       '99∫사용유무∫ ∫'                        ||  USE_YN                      || '∬' ||    --78
                       '01∫대표자성별∫ ∫'                      ||  SEX_GB                      || '∬' ||    --79
                       '04∫일일자차_예치금 개별사용∫ ∫'        ||  AFTER_CAL_MERGE_ACCOUNT_YN || '∬' ||    --80
                       '01∫고객조직구분∫ ∫'                      ||  CUST_GROUP_GB                      || '∬' ||    --81
                       '01∫상위고객번호∫ ∫'                      ||  UP_CUST_NO                      || '∬' ||    --82
                       '01∫상위사업자명∫ ∫'                      ||  UP_CUST_NM                      || '∬' ||    --83
                       '02∫대표자명2∫ ∫'                      ||  JUMIN_NM2                      || '∬' ||    --84
                       '02∫대표자성별2∫ ∫'                      ||  SEX_GB2                      || '∬' ||    --85
                       '02∫대표자생년월일2∫ ∫'                      ||  JUMIN_NUM2                      || '∬' ||    --86
                       '02∫대표전화지역번호2∫ ∫'                      ||  JUMIN_TEL_DDD2                      || '∬' ||    --87
                       '02∫대표전화번호2∫ ∫'                      ||  JUMIN_TEL2                      || '∬' ||    --88
                       '02∫팩스번호2∫ ∫'                      ||  ISD_FAX2                      || '∬' ||    --89
                       '04∫출자금정산체결여부∫ ∫'                      ||  CNTR_CONT_YN                      || '∬' ||    --90
                       '04∫출자금체결시작일∫ ∫'                      ||  CNTR_CONT_START_DATE                      || '∬' ||    --91
                       '04∫출자금체결종료일∫ ∫'                      ||  CNTR_CONT_END_DATE                      || '∬' ||    --92
                       '04∫특인여부∫ ∫'                      ||  SPC_APPRO_YN                      || '∬' ||    --93
                       '04∫특인내역∫ ∫'                      ||  SPC_APPRO_CONT                      || '∬' ||    --94
                       '04∫업체특성∫ ∫'                      ||  BUSI_PROPERTY                          --95
                  into v_new_data
                  from TBAA0001
                 where CUST_NO =   i_cust_no;

                /*******************************************************************/
                /* History 이전자료 가지고 오기*************************************/
                /*******************************************************************/
                select '01∫업체명∫ ∫'                          ||  CUST_NM                     || '∬' ||    -- 1
                       '01∫고객구분∫A0002∫'                    ||  INDGRP_GB                   || '∬' ||    -- 2
                       '01∫개인조합원구분∫A0042∫'              ||  CUST_GB                     || '∬' ||    -- 3
                       '01∫지역조합∫ ∫'                        ||  UNION_REGION_CD             || '∬' ||    -- 4
                       '01∫대표자주민번호∫ ∫'                  ||  JUMIN_NUM                   || '∬' ||    -- 5
                       '01∫대표자명∫ ∫'                        ||  JUMIN_NM                    || '∬' ||    -- 6
                       '01∫법인등록번호∫ ∫'                    ||  CO_NO                       || '∬' ||    -- 7
                       '01∫사업자등록번호∫ ∫'                  ||  BCO_NO                      || '∬' ||    -- 8
                       '99∫보유자코드∫ ∫'                      ||  OWN_CD                      || '∬' ||    -- 9
                       '04∫단체계약할인율_승합(중형)∫ ∫'       ||  GRPCONT_DSC_R               || '∬' ||    --10
                       '04∫할인할증율_승합(중형)∫Next∫'        ||  DSC_INC_R                   || '∬' ||    --11
                       '04∫할인할증_승합(중형)∫A0046∫'         ||  DSC_INC_CD                  || '∬' ||    --12
                       '04∫특별할증요율_승합(중형)∫Next∫'      ||  SPCIAL_INC_R                || '∬' ||    --13
                       '04∫특별할증_승합(중형)∫A0037∫'         ||  SPCIAL_INC_APPY             || '∬' ||    --14
                       '03∫사업소재지∫A0040∫'                  ||  AREA_MAJOR_CD||AREA_MIDDLE  || '∬' ||    --15
                       '03∫우편물발송지구분∫A0054∫'            ||  ZIP_SEND_GB                 || '∬' ||    --16
                       '03∫우편번호 신구구분∫ ∫'               ||  ZIP_CD_GB                   || '∬' ||    --17
                       '02∫우선연락처구분∫A0017∫'              ||  TEL_GB                      || '∬' ||    --18
                       '02∫대표연락자명∫ ∫'                    ||  OFF_TEL_NM                  || '∬' ||    --19
                       '02∫계약담당자명∫ ∫'                    ||  OFF_TEL1_NM                 || '∬' ||    --20
                       '02∫경리담당자명∫ ∫'                    ||  OFF_TEL2_NM                 || '∬' ||    --21
                       '02∫핸드폰연락처1∫ ∫'                   ||  HP_NO1                      || '∬' ||    --22
                       '02∫핸드폰연락자명1∫ ∫'                 ||  HP_NO1_NM                   || '∬' ||    --23
                       '02∫핸드폰연락처2∫ ∫'                   ||  HP_NO2                      || '∬' ||    --24
                       '02∫핸드폰연락자명2∫ ∫'                 ||  HP_NO2_NM                   || '∬' ||    --25
                       '03∫이메일∫ ∫'                          ||  ISD_E_MAIL                  || '∬' ||    --26
                       '03∫FAX∫ ∫'                             ||  ISD_FAX                     || '∬' ||    --27
                       '99∫설립년월∫ ∫'                        ||  COMP_ENT_YM                 || '∬' ||    --28
                       '99∫폐업년월∫ ∫'                        ||  COMP_SHUT_YM                || '∬' ||    --29
                       '99∫이전사업자번호∫ ∫'                  ||  BEFORE_BCO_NO               || '∬' ||    --30
                       '99∫조합가입일자∫ ∫'                    ||  UNION_REG_DATE              || '∬' ||    --31
                       '99∫최초등록일자∫ ∫'                    ||  FIRST_REG_DATE              || '∬' ||    --32
                       '99∫최종갱신일자∫ ∫'                    ||  LAST_UPDATE                 || '∬' ||    --33
                       '99∫취급자본부∫ ∫'                      ||  TREATY_HQ_CD                || '∬' ||    --34
                       '99∫취급자관리점∫ ∫'                    ||  TREATY_BRH_CD               || '∬' ||    --35
                       '99∫관리담당자∫ ∫'                      ||  TREATY_CD                   || '∬' ||    --36
                       '03∫우편물발송처주소∫ ∫'                ||  '['|| ZIP_CD        || '] ' || ADDR_1    || '  ' ||  ADDR_2 || '∬' ||    --37
                       '02∫대표연락처∫ ∫'                      ||  '['|| OFF_TEL_DDD   || '] ' || OFF_TEL   || '∬' ||    --38
                       '02∫계약담당연락처∫ ∫'                  ||  '['|| OFF_TEL_DDD1  || '] ' || OFF_TEL1  || '∬' ||    --39
                       '02∫경리담당연락처∫ ∫'                  ||  '['|| OFF_TEL_DDD2  || '] ' || OFF_TEL2  || '∬' ||    --40
                       '99∫변경자∫ ∫'                          ||  USER_ID                     || '∬' ||    --41
                       '99∫비밀번호∫ ∫'                        ||  CUST_PW                     || '∬' ||    --42
                       '04∫장기대여요율코드_승합(중형)∫ ∫'     ||  LONG_SPC_CD                 || '∬' ||    --43
                       '04∫단체계약할인율_승용∫ ∫'             ||  GRPCONT_DSC_R_1             || '∬' ||    --44
                       '04∫할인할증등급_승용∫ ∫'               ||  DSC_INC_CD_1                || '∬' ||    --45
                       '04∫할인할증율_승용∫ ∫'                 ||  DSC_INC_R_1                 || '∬' ||    --46
                       '04∫특별할증요율_승용∫ ∫'               ||  SPCIAL_INC_R_1              || '∬' ||    --47
                       '04∫특별할증코드_승용∫ ∫'               ||  SPCIAL_INC_APPY_1           || '∬' ||    --48
                       '04∫장기대여요율코드_승용∫ ∫'           ||  LONG_SPC_CD_1               || '∬' ||    --49
                       '04∫단체계약할인율_다인승승용∫ ∫'       ||  GRPCONT_DSC_R_2             || '∬' ||    --50
                       '04∫할인할증등급_다인승승용∫ ∫'         ||  DSC_INC_CD_2                || '∬' ||    --51
                       '04∫할인할증율_다인승승용∫ ∫'           ||  DSC_INC_R_2                 || '∬' ||    --52
                       '04∫특별할증요율_다인승승용∫ ∫'         ||  SPCIAL_INC_R_2              || '∬' ||    --53
                       '04∫특별할증코드_다인승승용∫ ∫'         ||  SPCIAL_INC_APPY_2           || '∬' ||    --54
                       '04∫장기대여요율코드_다인승승용∫ ∫'     ||  LONG_SPC_CD_2               || '∬' ||    --55
                       '04∫일일자차_약정계약여부∫ ∫'           ||  AFTER_CAL_YN                || '∬' ||    --56
                       '04∫일일자차계약할인율(계약자1명)∫ ∫'   ||  CONT_ONE_DEC_R              || '∬' ||    --57
                       '04∫일일자차계약할인율(계약자2명)∫ ∫'   ||  CONT_TWO_DEC_R              || '∬' ||    --58
                       '04∫일일자차대여자동차복구가입금액코드_승합(국산)∫ ∫'   ||  DAY_REPAIR_DSC_R_CD     || '∬' ||   --59
                       '04∫일일자차대여자동차복구가입금액코드_승용(국산)∫ ∫'   ||  DAY_REPAIR_DSC_R_1_CD   || '∬' ||   --60
                       '04∫일일자차대여자동차복구가입금액코드_다승(국산)∫ ∫'   ||  DAY_REPAIR_DSC_R_2_CD   || '∬' ||   --61
                       '04∫일일자차대여자동차복구가입금액코드_승합(외산)∫ ∫'   ||  DAY_REPAIR_DSC_R_CD_F   || '∬' ||   --62
                       '04∫일일자차대여자동차복구가입금액코드_승용(외산)∫ ∫'   ||  DAY_REPAIR_DSC_R_1_CD_F || '∬' ||   --63
                       '04∫일일자차대여자동차복구가입금액코드_다승(외산)∫ ∫'   ||  DAY_REPAIR_DSC_R_2_CD_F || '∬' ||   --64
                       '04∫일일자차_휴업손해특약여부_승합∫ ∫'  ||  DAY_SPECIAL_IDLE_YN         || '∬' ||    --65
                       '04∫일일자차_휴업손해특약여부_승용∫ ∫'  ||  DAY_SPECIAL_IDLE_1_YN       || '∬' ||    --66
                       '04∫일일자차_휴업손해특약여부_다승∫ ∫'  ||  DAY_SPECIAL_IDLE_2_YN       || '∬' ||    --67
                       '04∫일일자차_차대차한정특약여부_승합∫ ∫'||  DAY_SPECIAL_CAR_YN          || '∬' ||    --68
                       '04∫일일자차_차대차한정특약여부_승용∫ ∫'||  DAY_SPECIAL_CAR_1_YN        || '∬' ||    --69
                       '04∫일일자차_차대차한정특약여부_다승∫ ∫'||  DAY_SPECIAL_CAR_2_YN        || '∬' ||    --70
                       '04∫일일자차_외제차등록가능여부∫ ∫'     ||  DAY_CAR_FOREIGN_YN          || '∬' ||    --71
                       '04∫일일자차_스포츠카등록가능여부∫ ∫'   ||  DAY_CAR_SPORTS_YN           || '∬' ||    --72
                       '04∫일일자차_약정계약 시작일자∫ ∫'      ||  AFTER_CAL_START_DATE        || '∬' ||    --73
                       '04∫일일자차_약정계약 종료일자∫ ∫'      ||  AFTER_CAL_END_DATE          || '∬' ||    --74
                       '04∫정산계약가능여부∫ ∫'                ||  AFTER_CONT_YN               || '∬' ||    --75
                       '04∫정산계약 시작일자∫ ∫'               ||  AFTER_CONT_START_DATE       || '∬' ||    --76
                       '04∫정산계약 종료일자∫ ∫'               ||  AFTER_CONT_END_DATE         || '∬' ||    --77
                       '99∫사용유무∫ ∫'                        ||  USE_YN                      || '∬' ||    --78
                       '01∫대표자성별∫ ∫'                      ||  SEX_GB                      || '∬' ||    --79
                       '04∫일일자차_예치금 개별사용∫ ∫'        ||  AFTER_CAL_MERGE_ACCOUNT_YN || '∬' ||    --80
                       '01∫고객조직구분∫ ∫'                      ||  CUST_GROUP_GB                      || '∬' ||    --81
                       '01∫상위고객번호∫ ∫'                      ||  UP_CUST_NO                      || '∬' ||    --82
                       '01∫상위사업자명∫ ∫'                      ||  UP_CUST_NM                      || '∬' ||    --83
                       '02∫대표자명2∫ ∫'                      ||  JUMIN_NM2                      || '∬' ||    --84
                       '02∫대표자성별2∫ ∫'                      ||  SEX_GB2                      || '∬' ||    --85
                       '02∫대표자생년월일2∫ ∫'                      ||  JUMIN_NUM2                      || '∬' ||    --86
                       '02∫대표전화지역번호2∫ ∫'                      ||  JUMIN_TEL_DDD2                      || '∬' ||    --87
                       '02∫대표전화번호2∫ ∫'                      ||  JUMIN_TEL2                      || '∬' ||    --88
                       '02∫팩스번호2∫ ∫'                      ||  ISD_FAX2                      || '∬' ||    --89
                       '04∫출자금정산체결여부∫ ∫'                      ||  CNTR_CONT_YN                      || '∬' ||    --90
                       '04∫출자금체결시작일∫ ∫'                      ||  CNTR_CONT_START_DATE                      || '∬' ||    --91
                       '04∫출자금체결종료일∫ ∫'                      ||  CNTR_CONT_END_DATE                      || '∬' ||    --92
                       '04∫특인여부∫ ∫'                      ||  SPC_APPRO_YN                      || '∬' ||    --93
                       '04∫특인내역∫ ∫'                      ||  SPC_APPRO_CONT                      || '∬' ||    --94
                       '04∫업체특성∫ ∫'                      ||  BUSI_PROPERTY                          --95
                   into v_old_data
                   from TBAA0002
                  where CUST_NO     = i_cust_no
                    and HISTORY_SEQ = v_max_seq;

                if    v_new_data <> v_old_data then /* 현재 자료와 이전 자료 비교하기 */

                      /* USER_ID 가지고 오기*/
                      change_id   :=  regexp_substr(v_new_data     ,'[^∬]+',1,41);
                      change_id   :=  regexp_substr(change_id      ,'[^∫]+' ,1,4);


                      if    nvl(change_id,' ') = ' ' then  /*USER_ID 가 없으면 타 채널에서 인입됨.. 변경 고객 ID를 USER_ID 에 넣음 */
                            change_id    :=  i_cust_no;
                            change_name  :=  regexp_substr(v_new_data ,'[^∬]+',1,1);
                            change_name  :=  regexp_substr(change_name,'[^∫]+' ,1,4);
                      else
                            change_name    :='';
                      end if;

                      idx1 := 1;


                      loop /* Looping (Select 한 Data 항목이 구분자 ∬ 로 42개 임)*/

                              if    idx1 > 88 then
                                    exit;
                              end if;

                              /*  구분자 '∬' 로 자르고 그 다음 구분자 '∫' 로 자름(2차원 배열 형식) */
                              new_change      :=  regexp_substr(v_new_data   ,'[^∬]+',1,idx1);
                              new_change_group:=  regexp_substr(new_change   ,'[^∫]+' ,1,1);
                              new_change_item :=  regexp_substr(new_change   ,'[^∫]+' ,1,2);
                              new_change_data :=  regexp_substr(new_change   ,'[^∫]+' ,1,4);

                              old_change      :=  regexp_substr(v_old_data   ,'[^∬]+',1,idx1);
                              old_change_group:=  regexp_substr(old_change   ,'[^∫]+' ,1,1);
                              old_change_item :=  regexp_substr(old_change   ,'[^∫]+' ,1,2);
                              old_change_data :=  regexp_substr(old_change   ,'[^∫]+' ,1,4);

                              codetype        :=  regexp_substr(new_change   ,'[^∫]+',1,3);

                              if    codetype = 'Next' then   /* 다음 항목과 함께 비교 할때 */
                                    n_new_change_data  := new_change_data;
                                    n_old_change_data  := old_change_data;

                              elsif nvl(new_change_data,' ') <> nvl(old_change_data,' ') or nvl(n_new_change_data,' ') <> nvl(n_old_change_data,' ') then  /* 이전항목과 현재 항목이 다를때 */
                                    insert_ok    :='Y';

                                     /********************************************************/
                                     /**사용여부 변경시 계약여부                    Check  ***/
                                     /********************************************************/
                                     if    idx1 = 78 then
                                           if    old_change_data is not null  then      /* 기존   사용여부값이 null 이 아니면 */
                                                 if    new_change_data is not null then /* 새로운 사용여부값이 null 이 아니면 */
                                                       select count(*)
                                                         into v_check3
                                                         from TBIC0001
                                                        where CUST_NO = i_cust_no
                                                          and ISTAR_CONT_DATE <= sysdate
                                                          and IEND_CONT_DATE >= sysdate
                                                          and CONT_STATE in ('02','03','05');

                                                       if    v_check3 > 0 then
                                                             idx1       := 99;
                                                             insert_ok  := null;
                                                             o_result   := o_result || ' [해당 고객의 유효계약이 존재 합니다(사용여부 수정불가)]-[' || v_check3|| ']';
                                                       end if;
                                                 else
                                                       idx1       := 99;
                                                       insert_ok  := null;
                                                       o_result   := o_result || ' 사용여부를 변경할 수 없습니다. ';
                                                 end if;
                                           end if;
                                     end if;   --사용여부 변경 계약여부 체크 끝



                                    if    codetype <> ' '  then
                                          if    idx1 = 15 then /* 공통코드를 읽어서 코드값으로 바꿈(idx1 15번째는 공통코드 2번 읽어야 함) */
                                                select FN_GET_CODENAME(codetype, substr(new_change_data,1,2),NULL) || ' - ' ||
                                                       FN_GET_CODENAME(codetype, substr(new_change_data,3,2), substr(new_change_data,1,2))
                                                  into new_change_data
                                                  from dual;

                                                select FN_GET_CODENAME(codetype, substr(old_change_data,1,2),NULL) || ' - ' ||
                                                       FN_GET_CODENAME(codetype, substr(old_change_data,3,2), substr(old_change_data,1,2))
                                                  into old_change_data
                                                  from dual;
                                          else
                                                select FN_GET_CODENAME(substr(codetype,1,5), new_change_data,substr(codetype,6,10))
                                                  into new_change_data
                                                  from dual;

                                                select FN_GET_CODENAME(substr(codetype,1,5), old_change_data,substr(codetype,6,10))
                                                  into old_change_data
                                                  from dual;
                                          end if;

                                          if    n_new_change_data is not null then
                                                new_change_data   :=  new_change_data ||'[' || n_new_change_data || ']';
                                                old_change_data   :=  old_change_data ||'[' || n_old_change_data || ']';
                                          end if ;

                                    end if;

                                    n_new_change_data := null;
                                    n_old_change_data := null;
                                    --pr_rent_amt_log( new_change_group , i_cust_no , idx1  , codetype, old_change_data ,new_change_data, to_char(sysdate, 'yyyymmdd hh24miss') );


                                    /* PR_TBAA0004_INSERT Stored Procedure 호출 */
                                    /* Parameter:고객번호/0/TBAA0002의SEQ/변경요청채널/변경table/변경항목/변경항목 그룹/변경한 프로그램(화면명)/이전DATA/이후DATA/변경자/변경자 명*/
                                    PR_TBAA0004_INSERT(i_cust_no,
                                                       0,
                                                       v_max_seq+1,
                                                       i_change_channel,
                                                       'TBAA0001',
                                                       new_change_item,
                                                       new_change_group,
                                                       i_change_pgm,
                                                       old_change_data,
                                                       new_change_data,
                                                       change_id,
                                                       change_name
                                                       );

                              else       /* <-- if codetype = 'Next' */
                                   n_new_change_data := null;
                                   n_old_change_data := null;
                              end if;    /* <-- if codetype = 'Next' */

                              idx1 := idx1 + 1;

                      end loop;      /*  <-- Loop End    ***************/


                      if    insert_ok = 'Y' then /* 변경된 정보가 있으면 INSERT(TBAA0002) */
                            begin
                                insert into TBAA0002(
                                       CUST_NO,             HISTORY_SEQ,        CUST_NM,            INDGRP_GB,          CUST_GB,
                                       UNION_REGION_CD,     JUMIN_NUM,          JUMIN_NM,           CO_NO,              BCO_NO,
                                       OWN_CD,              GRPCONT_DSC_R,      DSC_INC_CD,         DSC_INC_R,          SPCIAL_INC_R,
                                       SPCIAL_INC_APPY,     AREA_MAJOR_CD,      AREA_MIDDLE,        ZIP_SEND_GB,        ZIP_CD_GB,
                                       ZIP_CD,              ADDR_1,             ADDR_2,             TEL_GB,             OFF_TEL_DDD,
                                       OFF_TEL,             OFF_TEL_NM,         OFF_TEL_DDD1,       OFF_TEL1,           OFF_TEL1_NM,
                                       OFF_TEL_DDD2,        OFF_TEL2,           OFF_TEL2_NM,        HP_NO1,             HP_NO1_NM,
                                       HP_NO2,              HP_NO2_NM,          ISD_E_MAIL,         ISD_FAX,            CNTR_TOT_AMT,
                                       CNTR_CAR_CNT,        OWN_CAR_CNT,        COMP_ENT_YM,        COMP_SHUT_YM,       BEFORE_BCO_NO,
                                       UNION_REG_DATE,      FIRST_REG_DATE,     LAST_UPDATE,        TREATY_HQ_CD,       TREATY_BRH_CD,
                                       TREATY_CD,           USER_ID,            IT_PROCESSING,      CUST_PW,            LONG_SPC_CD,
                                       GRPCONT_DSC_R_1,     DSC_INC_CD_1,       DSC_INC_R_1,        SPCIAL_INC_R_1,     SPCIAL_INC_APPY_1,
                                       LONG_SPC_CD_1,       GRPCONT_DSC_R_2,    DSC_INC_CD_2,       DSC_INC_R_2,        SPCIAL_INC_R_2,
                                       SPCIAL_INC_APPY_2,   LONG_SPC_CD_2,      AFTER_CAL_YN,       CONT_ONE_DEC_R,     CONT_TWO_DEC_R,
                                       USE_YN,
                                       DAY_REPAIR_DSC_R_CD, DAY_REPAIR_DSC_R_1_CD,                  DAY_REPAIR_DSC_R_2_CD,
                                       DAY_REPAIR_DSC_R_CD_F, DAY_REPAIR_DSC_R_1_CD_F,              DAY_REPAIR_DSC_R_2_CD_F,
                                       DAY_SPECIAL_IDLE_YN, DAY_SPECIAL_IDLE_1_YN,                  DAY_SPECIAL_IDLE_2_YN,
                                       DAY_SPECIAL_CAR_YN,  DAY_SPECIAL_CAR_1_YN,                   DAY_SPECIAL_CAR_2_YN,
                                       DAY_CAR_FOREIGN_YN,  DAY_CAR_SPORTS_YN,
                                       AFTER_CAL_START_DATE,AFTER_CAL_END_DATE, AFTER_CONT_YN, AFTER_CONT_START_DATE, AFTER_CONT_END_DATE, SEX_GB, AFTER_CAL_MERGE_ACCOUNT_YN
                                       ,CUST_GROUP_GB,  UP_CUST_NO,      UP_CUST_NM,   JUMIN_NM2,   SEX_GB2
                              ,JUMIN_NUM2,   JUMIN_TEL_DDD2,  JUMIN_TEL2,   ISD_FAX2,   CNTR_CONT_YN
                              ,CNTR_CONT_START_DATE,CNTR_CONT_END_DATE,NO_CNTR_AMT,  NO_PREM_AMT,  SPC_APPRO_YN
                              ,SPC_APPRO_CONT,BUSI_PROPERTY
                                       )
                                select CUST_NO,             v_max_seq+1,        CUST_NM,            INDGRP_GB,          CUST_GB,
                                       UNION_REGION_CD,     JUMIN_NUM,          JUMIN_NM,           CO_NO,              BCO_NO,
                                       OWN_CD,              GRPCONT_DSC_R,      DSC_INC_CD,         DSC_INC_R,          SPCIAL_INC_R,
                                       SPCIAL_INC_APPY,     AREA_MAJOR_CD,      AREA_MIDDLE,        ZIP_SEND_GB,        ZIP_CD_GB,
                                       ZIP_CD,              ADDR_1,             ADDR_2,             TEL_GB,             OFF_TEL_DDD,
                                       OFF_TEL,             OFF_TEL_NM,         OFF_TEL_DDD1,       OFF_TEL1,           OFF_TEL1_NM,
                                       OFF_TEL_DDD2,        OFF_TEL2,           OFF_TEL2_NM,        HP_NO1,             HP_NO1_NM,
                                       HP_NO2,              HP_NO2_NM,          ISD_E_MAIL,         ISD_FAX,            CNTR_TOT_AMT,
                                       CNTR_CAR_CNT,        OWN_CAR_CNT,        COMP_ENT_YM,        COMP_SHUT_YM,       BEFORE_BCO_NO,
                                       UNION_REG_DATE,      FIRST_REG_DATE,     LAST_UPDATE,        TREATY_HQ_CD,       TREATY_BRH_CD,
                                       TREATY_CD,           USER_ID,            IT_PROCESSING,      CUST_PW,            LONG_SPC_CD,
                                       GRPCONT_DSC_R_1,     DSC_INC_CD_1,       DSC_INC_R_1,        SPCIAL_INC_R_1,     SPCIAL_INC_APPY_1,
                                       LONG_SPC_CD_1,       GRPCONT_DSC_R_2,    DSC_INC_CD_2,       DSC_INC_R_2,        SPCIAL_INC_R_2,
                                       SPCIAL_INC_APPY_2,   LONG_SPC_CD_2,      AFTER_CAL_YN,       CONT_ONE_DEC_R,     CONT_TWO_DEC_R,
                                       USE_YN,
                                       DAY_REPAIR_DSC_R_CD, DAY_REPAIR_DSC_R_1_CD,                  DAY_REPAIR_DSC_R_2_CD,
                                       DAY_REPAIR_DSC_R_CD_F, DAY_REPAIR_DSC_R_1_CD_F,              DAY_REPAIR_DSC_R_2_CD_F,
                                       DAY_SPECIAL_IDLE_YN, DAY_SPECIAL_IDLE_1_YN,                  DAY_SPECIAL_IDLE_2_YN,
                                       DAY_SPECIAL_CAR_YN,  DAY_SPECIAL_CAR_1_YN,                   DAY_SPECIAL_CAR_2_YN,
                                       DAY_CAR_FOREIGN_YN,  DAY_CAR_SPORTS_YN,
                                       AFTER_CAL_START_DATE,AFTER_CAL_END_DATE, AFTER_CONT_YN, AFTER_CONT_START_DATE, AFTER_CONT_END_DATE, SEX_GB, AFTER_CAL_MERGE_ACCOUNT_YN
                                       ,CUST_GROUP_GB,  UP_CUST_NO,      UP_CUST_NM,   JUMIN_NM2,   SEX_GB2
                              ,JUMIN_NUM2,   JUMIN_TEL_DDD2,  JUMIN_TEL2,   ISD_FAX2,   CNTR_CONT_YN
                              ,CNTR_CONT_START_DATE,CNTR_CONT_END_DATE,NO_CNTR_AMT,  NO_PREM_AMT,  SPC_APPRO_YN
                              ,SPC_APPRO_CONT,BUSI_PROPERTY
                                  from TBAA0001
                                 where CUST_NO =   i_cust_no;

                                exception when others then
                                          o_result := o_result || '**' ||  i_cust_no || '-' || v_max_seq+1 || ' : ' || '[변경내용 TBAA0002 INSERT ERROR2]';
                             end;

                      end if; /* <-- if insert_ok = 'Y'*/

                else  /* <-- if v_new_data <> v_old_data */
                      o_result := '변경된 정보가 없습니다';

                end if; /* <-- if v_new_data <> v_old_data */

          end if; /* <-- if v_max_seq = 0*/
    end if; /* <-- if s_change_table1 */

    /************************************************************************/
    /************************* 출자금 차량 변경일때 **************************/
    /************************************************************************/
    if    s_change_table1 = 'TBAA0101'  or s_change_table2 = 'TBAA0101' then  /* <-- if s_change_table1 */
          /******************************/
          /* History Max Seq 가지고 오기*/
          /******************************/
          begin
               select nvl(max(CAR_HISTORY_SEQ),0)
                 into v_max_seq
                 from TBAA0102
                where CUST_NO = i_cust_no
                  and CAR_SEQ = i_car_seq;
                exception when no_data_found then v_max_seq :=0 ;
                          when others        then o_result  := null;
          end;

          if    v_max_seq = 0 then /* 출자금 차량 변경(입력)이 처음이면 */
                begin
                      insert into TBAA0102(
                             CUST_NO,                 CAR_SEQ,                 CAR_HISTORY_SEQ,         CUST_NM,                 CO_NO,
                             BCO_NO,                  OWN_CD,                  CAR_ID,                  APPR_NUM_TON,            CAR_NO,
                             OUT_CAR_NO,              CAR_NO_GB,               CAR_NO_L,                CAR_NO_S1,               CAR_NO_S2,
                             CAR_NO_CITY,             CAR_NM_CD,               CAR_KIND_CD,             CAR_TYPE_CD,             Y_TYPE,
                             Y_AB,                    CAR_CC,                  HAN_CAR_NO,              CAR_NM,                  CAR_COUNTRY,
                             CAR_GRADE,               CAR_RATE,                ENG_TYPE,                CAR_ATTACH_CODE1,        CAR_ATTACH_CODE2,
                             CAR_ATTACH_CODE3,        CAR_ATTACH_CODE4,        CAR_ATTACH_AMT1,         CAR_ATTACH_AMT2,         CAR_ATTACH_AMT3,
                             CAR_ATTACH_AMT4,         CAR_UNIT_GAEK_CODE,      OLD_CAR_R,               CAR_UNIT_GAEK,           CAR_ACC_GAEK,
                             CAR_VALUE,               CAR_AMT,                 CAR_AUTO_CLASF,          CAR_GPS_CLASF,           CAR_ABS_CLASF,
                             CAR_SECUR_CLASF,         CAR_BLACK_BOX_CLASF,     CAR_BLACK_BOX_NUM,       CAR_AIR_BAG,             CAR_REG_DATE,
                             CAR_LAST_UPDATE,         PRE_CONT_CD,             LAST_ENT_DGN_DATE,       LAST_CONT_DATE,          ENT_STATUS,
                             CNTR_SEQ,                CNTR_GB,                 CNTR_AMT,                CNTR_IN_DATE,            CNTR_IN_GB,
                             TREATY_HQ_CD,            TREATY_BRH_CD,           TREATY_CD,               USER_ID,                 IT_PROCESSING,
                             USE_YN,                  TRANSFER_CUST,           CUST_CAR_NM,             TOT_CAR_VALUE,           Y_HIS_CNT,
                             OWN_CUS_NO,              OWN_CUS_NM,              CAR_MK,                  BLACK_COM,               BLACK_MODEL,
                             BLACK_AMT,               BLACK_ENT_AMT,           CAR_AMT_R
                             )
                      select CUST_NO,                 CAR_SEQ,                 v_max_seq+1,             CUST_NM,                 CO_NO,
                             BCO_NO,                  OWN_CD,                  CAR_ID,                  APPR_NUM_TON,            CAR_NO,
                             OUT_CAR_NO,              CAR_NO_GB,               CAR_NO_L,                CAR_NO_S1,               CAR_NO_S2,
                             CAR_NO_CITY,             CAR_NM_CD,               CAR_KIND_CD,             CAR_TYPE_CD,             Y_TYPE,
                             Y_AB,                    CAR_CC,                  HAN_CAR_NO,              CAR_NM,                  CAR_COUNTRY,
                             CAR_GRADE,               CAR_RATE,                ENG_TYPE,                CAR_ATTACH_CODE1,        CAR_ATTACH_CODE2,
                             CAR_ATTACH_CODE3,        CAR_ATTACH_CODE4,        CAR_ATTACH_AMT1,         CAR_ATTACH_AMT2,         CAR_ATTACH_AMT3,
                             CAR_ATTACH_AMT4,         CAR_UNIT_GAEK_CODE,      OLD_CAR_R,               CAR_UNIT_GAEK,           CAR_ACC_GAEK,
                             CAR_VALUE,               CAR_AMT,                 CAR_AUTO_CLASF,          CAR_GPS_CLASF,           CAR_ABS_CLASF,
                             CAR_SECUR_CLASF,         CAR_BLACK_BOX_CLASF,     CAR_BLACK_BOX_NUM,       CAR_AIR_BAG,             CAR_REG_DATE,
                             CAR_LAST_UPDATE,         PRE_CONT_CD,             LAST_ENT_DGN_DATE,       LAST_CONT_DATE,          ENT_STATUS,
                             CNTR_SEQ,                CNTR_GB,                 CNTR_AMT,                CNTR_IN_DATE,            CNTR_IN_GB,
                             TREATY_HQ_CD,            TREATY_BRH_CD,           TREATY_CD,               USER_ID,                 IT_PROCESSING,
                             USE_YN,                  TRANSFER_CUST,           CUST_CAR_NM,             TOT_CAR_VALUE,           Y_HIS_CNT,
                             OWN_CUS_NO,              OWN_CUS_NM,              CAR_MK,                  BLACK_COM,               BLACK_MODEL,
                             BLACK_AMT,               BLACK_ENT_AMT,           CAR_AMT_R
                        from TBAA0101
                       where CUST_NO =   i_cust_no
                         and CAR_SEQ =   i_car_seq;

                       exception when others then
                                 o_result := o_result || '**' ||  i_cust_no || '-' || i_car_seq || '-' || v_max_seq+1 || ' : ' || '[변경내용 TBAA0102 INSERT ERROR1]';
                end;
          else  /* if  v_max_seq = 0  의 else : 출자금 차량 변경(입력)이 처음이 아니면 */
                /*******************************************************************/
                /* 현재자료 가지고 오기 ********************************************/
                /* select 항목 조합:변경그룹코드/변경항목/코드테이블 코드타입/DATA */
                /*******************************************************************/
                begin
                      select '01∫차대번호∫Car∫'             ||CAR_ID                      || '∬' ||   -- 1
                             '01∫한글차량번호∫Car∫'         ||HAN_CAR_NO                  || '∬' ||   -- 2
                             '01∫업체명∫ ∫'                 ||CUST_NM                     || '∬' ||   -- 3
                             '01∫차량번호∫ ∫'               ||CAR_NO                      || '∬' ||   -- 4
                             '01∫출고증번호∫ ∫'             ||OUT_CAR_NO                  || '∬' ||   -- 5
                             '01∫차량번호구분∫A0020∫'       ||CAR_NO_GB                   || '∬' ||   -- 6
                             '01∫차량번호대분류∫ ∫'         ||CAR_NO_L                    || '∬' ||   -- 7
                             '01∫차량번호소분류1∫ ∫'        ||CAR_NO_S1                   || '∬' ||   -- 8
                             '01∫차량번호소분류2∫ ∫'        ||CAR_NO_S2                   || '∬' ||   -- 9
                             '01∫차량번호시도분류∫ ∫'       ||CAR_NO_CITY                 || '∬' ||   --10
                             '01∫차명코드∫ ∫'               ||CAR_NM_CD                   || '∬' ||   --11
                             '01∫차종코드∫A0022∫'           ||CAR_KIND_CD                 || '∬' ||   --12
                             '01∫차형태코드∫ ∫'             ||CAR_TYPE_CD                 || '∬' ||   --13
                             '01∫년식∫ ∫'                   ||Y_TYPE                      || '∬' ||   --14
                             '01∫년식구분∫A0043∫'           ||Y_AB                        || '∬' ||   --15
                             '01∫배기량∫ ∫'                 ||CAR_CC                      || '∬' ||   --16
                             '01∫차명∫ ∫'                   ||CAR_NM                      || '∬' ||   --17
                             '01∫제작국가∫ ∫'               ||CAR_COUNTRY                 || '∬' ||   --18
                             '02∫보속품코드1∫ ∫'            ||CAR_ATTACH_CODE1            || '∬' ||   --19
                             '02∫보속품코드2∫ ∫'            ||CAR_ATTACH_CODE2            || '∬' ||   --10
                             '02∫보속품코드3∫ ∫'            ||CAR_ATTACH_CODE3            || '∬' ||   --21
                             '02∫보속품코드4∫ ∫'            ||CAR_ATTACH_CODE4            || '∬' ||   --22
                             '02∫보속품가액1∫ ∫'            ||CAR_ATTACH_AMT1             || '∬' ||   --23
                             '02∫보속품가액2∫ ∫'            ||CAR_ATTACH_AMT2             || '∬' ||   --24
                             '02∫보속품가액3∫ ∫'            ||CAR_ATTACH_AMT3             || '∬' ||   --25
                             '02∫보속품가액4∫ ∫'            ||CAR_ATTACH_AMT4             || '∬' ||   --26
                             '02∫기계장치코드∫ ∫'           ||CAR_UNIT_GAEK_CODE          || '∬' ||   --27
                             '02∫중고차요율∫ ∫'             ||OLD_CAR_R                   || '∬' ||   --28
                             '02∫기계장치총가액∫ ∫'         ||CAR_UNIT_GAEK               || '∬' ||   --29
                             '02∫부속품총가액∫ ∫'           ||CAR_ACC_GAEK                || '∬' ||   --30
                             '02∫차량가액∫ ∫'               ||CAR_VALUE                   || '∬' ||   --31
                             '02∫차량가입금액∫ ∫'           ||CAR_AMT                     || '∬' ||   --32
                             '02∫오토여부∫ ∫'               ||CAR_AUTO_CLASF              || '∬' ||   --33
                             '02∫GPS여부∫ ∫'                ||CAR_GPS_CLASF               || '∬' ||   --34
                             '02∫ABS여부∫ ∫'                ||CAR_ABS_CLASF               || '∬' ||   --35
                             '02∫도난장치여부∫ ∫'           ||CAR_SECUR_CLASF             || '∬' ||   --36
                             '02∫블랙박스 여부∫ ∫'          ||CAR_BLACK_BOX_CLASF         || '∬' ||   --37
                             '02∫블랙박스 일련번호∫ ∫'      ||CAR_BLACK_BOX_NUM           || '∬' ||   --38
                             '02∫에어백수∫ ∫'               ||CAR_AIR_BAG                 || '∬' ||   --39
                             '02∫차량등록일자∫ ∫'           ||CAR_REG_DATE                || '∬' ||   --30
                             '02∫최종갱신일자∫ ∫'           ||CAR_LAST_UPDATE             || '∬' ||   --41
                             '02∫전계약사코드∫A0001∫'       ||PRE_CONT_CD                 || '∬' ||   --42
                             '02∫최종설계일자∫ ∫'           ||LAST_ENT_DGN_DATE           || '∬' ||   --43
                             '02∫최종계약일자∫ ∫'           ||LAST_CONT_DATE              || '∬' ||   --44
                             '02∫최종설계상태∫A0023∫'       ||ENT_STATUS                  || '∬' ||   --45
                             '03∫출자(반환)순번∫Next∫'      ||CNTR_SEQ                    || '∬' ||   --46
                             '03∫출자금∫Next∫'              ||CNTR_AMT                    || '∬' ||   --47
                             '03∫출자금 납부일자∫Next∫'     ||CNTR_IN_DATE                || '∬' ||   --48
                             '03∫출자금 납부방법∫Next∫'     ||CNTR_IN_GB                  || '∬' ||   --49
                             '03∫출자정보변경∫A0064∫'       ||CNTR_GB                     || '∬' ||   --50
                             '99∫취급자본부코드∫ ∫'         ||TREATY_HQ_CD                || '∬' ||   --51
                             '99∫취급자관리점코드∫ ∫'       ||TREATY_BRH_CD               || '∬' ||   --52
                             '99∫취급자코드∫ ∫'             ||TREATY_CD                   || '∬' ||   --53
                             '99∫Userid∫ ∫'                 ||USER_ID                     || '∬' ||   --54
                             '99∫사용유무∫ ∫'               ||USE_YN                      || '∬' ||   --55
                             '99∫이관고객번호∫ ∫'           ||TRANSFER_CUST                || '∬' ||   --56

                             '01∫고객차명∫ ∫'               ||CUST_CAR_NM                      || '∬' ||   --57
                             '01∫총차량가액∫ ∫'              ||TOT_CAR_VALUE                      || '∬' ||   --58
                             '01∫내용년수∫ ∫'               ||Y_HIS_CNT                      || '∬' ||   --59
                             '01∫소유주고객번호∫ ∫'          ||OWN_CUS_NO                      || '∬' ||   --60
                             '01∫소유주고객명∫ ∫'            ||OWN_CUS_NM                      || '∬' ||   --61
                             '01∫제조회사∫ ∫'               ||CAR_MK                          || '∬' ||   --62

                               '02∫블랙박스회사∫ ∫'               ||BLACK_COM                      || '∬' ||   --63
                             '02∫블랙박스모델명∫ ∫'          ||BLACK_MODEL                      || '∬' ||   --64
                             '02∫블랙박스금액∫ ∫'            ||BLACK_AMT                      || '∬' ||   --65
                             '02∫블랙박스가입금액∫ ∫'               ||BLACK_ENT_AMT            || '∬' ||                 --66
                             '02∫가입금액율∫ ∫'               ||CAR_AMT_R                             --66


                         into v_new_data
                         from TBAA0101
                        where CUST_NO = i_cust_no
                          and CAR_SEQ = i_car_seq;

                       exception when no_data_found then v_new_data :=null ;
                                                         o_result   := o_result || '**' ||  i_cust_no || '-' || v_max_seq || ' : ' || '[차량Table Data Not Found TBAA0101]';
                                 when others        then o_result   := o_result || '**' ||  i_cust_no || '-' || v_max_seq || ' : ' || '[차량Table Data Not Found]';

                 end;

                 begin
                       select '01∫차대번호∫Car∫'             ||CAR_ID                      || '∬' ||   -- 1
                              '01∫한글차량번호∫Car∫'         ||HAN_CAR_NO                  || '∬' ||   -- 2
                              '01∫업체명∫ ∫'                 ||CUST_NM                     || '∬' ||   -- 3
                              '01∫차량번호∫ ∫'               ||CAR_NO                      || '∬' ||   -- 4
                              '01∫출고증번호∫ ∫'             ||OUT_CAR_NO                  || '∬' ||   -- 5
                              '01∫차량번호구분∫A0020∫'       ||CAR_NO_GB                   || '∬' ||   -- 6
                              '01∫차량번호대분류∫ ∫'         ||CAR_NO_L                    || '∬' ||   -- 7
                              '01∫차량번호소분류1∫ ∫'        ||CAR_NO_S1                   || '∬' ||   -- 8
                              '01∫차량번호소분류2∫ ∫'        ||CAR_NO_S2                   || '∬' ||   -- 9
                              '01∫차량번호시도분류∫ ∫'       ||CAR_NO_CITY                 || '∬' ||   --10
                              '01∫차명코드∫ ∫'               ||CAR_NM_CD                   || '∬' ||   --11
                              '01∫차종코드∫A0022∫'           ||CAR_KIND_CD                 || '∬' ||   --12
                              '01∫차형태코드∫ ∫'             ||CAR_TYPE_CD                 || '∬' ||   --13
                              '01∫년식∫ ∫'                   ||Y_TYPE                      || '∬' ||   --14
                              '01∫년식구분∫A0043∫'           ||Y_AB                        || '∬' ||   --15
                              '01∫배기량∫ ∫'                 ||CAR_CC                      || '∬' ||   --16
                              '01∫차명∫ ∫'                   ||CAR_NM                      || '∬' ||   --17
                              '01∫제작국가∫ ∫'               ||CAR_COUNTRY                 || '∬' ||   --18
                              '02∫보속품코드1∫ ∫'            ||CAR_ATTACH_CODE1            || '∬' ||   --19
                              '02∫보속품코드2∫ ∫'            ||CAR_ATTACH_CODE2            || '∬' ||   --10
                              '02∫보속품코드3∫ ∫'            ||CAR_ATTACH_CODE3            || '∬' ||   --21
                              '02∫보속품코드4∫ ∫'            ||CAR_ATTACH_CODE4            || '∬' ||   --22
                              '02∫보속품가액1∫ ∫'            ||CAR_ATTACH_AMT1             || '∬' ||   --23
                              '02∫보속품가액2∫ ∫'            ||CAR_ATTACH_AMT2             || '∬' ||   --24
                              '02∫보속품가액3∫ ∫'            ||CAR_ATTACH_AMT3             || '∬' ||   --25
                              '02∫보속품가액4∫ ∫'            ||CAR_ATTACH_AMT4             || '∬' ||   --26
                              '02∫기계장치코드∫ ∫'           ||CAR_UNIT_GAEK_CODE          || '∬' ||   --27
                              '02∫중고차요율∫ ∫'             ||OLD_CAR_R                   || '∬' ||   --28
                              '02∫기계장치총가액∫ ∫'         ||CAR_UNIT_GAEK               || '∬' ||   --29
                              '02∫부속품총가액∫ ∫'           ||CAR_ACC_GAEK                || '∬' ||   --30
                              '02∫차량가액∫ ∫'               ||CAR_VALUE                   || '∬' ||   --31
                              '02∫차량가입금액∫ ∫'           ||CAR_AMT                     || '∬' ||   --32
                              '02∫오토여부∫ ∫'               ||CAR_AUTO_CLASF              || '∬' ||   --33
                              '02∫GPS여부∫ ∫'                ||CAR_GPS_CLASF               || '∬' ||   --34
                              '02∫ABS여부∫ ∫'                ||CAR_ABS_CLASF               || '∬' ||   --35
                              '02∫도난장치여부∫ ∫'           ||CAR_SECUR_CLASF             || '∬' ||   --36
                              '02∫블랙박스 여부∫ ∫'          ||CAR_BLACK_BOX_CLASF         || '∬' ||   --37
                              '02∫블랙박스 일련번호∫ ∫'      ||CAR_BLACK_BOX_NUM           || '∬' ||   --38
                              '02∫에어백수∫ ∫'               ||CAR_AIR_BAG                 || '∬' ||   --39
                              '02∫차량등록일자∫ ∫'           ||CAR_REG_DATE                || '∬' ||   --30
                              '02∫최종갱신일자∫ ∫'           ||CAR_LAST_UPDATE             || '∬' ||   --41
                              '02∫전계약사코드∫A0001∫'       ||PRE_CONT_CD                 || '∬' ||   --42
                              '02∫최종설계일자∫ ∫'           ||LAST_ENT_DGN_DATE           || '∬' ||   --43
                              '02∫최종계약일자∫ ∫'           ||LAST_CONT_DATE              || '∬' ||   --44
                              '02∫최종설계상태∫A0023∫'       ||ENT_STATUS                  || '∬' ||   --45
                              '03∫출자(반환)순번∫Next∫'      ||CNTR_SEQ                    || '∬' ||   --46
                              '03∫출자금∫Next∫'              ||CNTR_AMT                    || '∬' ||   --47
                              '03∫출자금 납부일자∫Next∫'     ||CNTR_IN_DATE                || '∬' ||   --48
                              '03∫출자금 납부방법∫Next∫'     ||CNTR_IN_GB                  || '∬' ||   --49
                              '03∫출자정보변경∫A0064∫'       ||CNTR_GB                     || '∬' ||   --50
                              '99∫취급자본부코드∫ ∫'         ||TREATY_HQ_CD                || '∬' ||   --51
                              '99∫취급자관리점코드∫ ∫'       ||TREATY_BRH_CD               || '∬' ||   --52
                              '99∫취급자코드∫ ∫'             ||TREATY_CD                   || '∬' ||   --53
                              '99∫Userid∫ ∫'                 ||USER_ID                     || '∬' ||   --54
                              '99∫사용유무∫ ∫'               ||USE_YN                      || '∬' ||   --55
                              '99∫이관고객번호∫ ∫'           ||TRANSFER_CUST                || '∬' ||   --56
                             '01∫고객차명∫ ∫'               ||CUST_CAR_NM                      || '∬' ||   --57
                             '01∫총차량가액∫ ∫'              ||TOT_CAR_VALUE                      || '∬' ||   --58
                             '01∫내용년수∫ ∫'               ||Y_HIS_CNT                      || '∬' ||   --59
                             '01∫소유주고객번호∫ ∫'          ||OWN_CUS_NO                      || '∬' ||   --60
                             '01∫소유주고객명∫ ∫'            ||OWN_CUS_NM                      || '∬' ||   --61
                             '01∫제조회사∫ ∫'               ||CAR_MK                           || '∬' ||  --62
                             '02∫블랙박스회사∫ ∫'               ||BLACK_COM                      || '∬' ||   --63
                             '02∫블랙박스모델명∫ ∫'          ||BLACK_MODEL                      || '∬' ||   --64
                             '02∫블랙박스금액∫ ∫'            ||BLACK_AMT                      || '∬' ||   --65
                             '02∫블랙박스가입금액∫ ∫'               ||BLACK_ENT_AMT            || '∬' ||                 --66
                             '02∫가입금액율∫ ∫'               ||CAR_AMT_R                             --67
                         into v_old_data
                         from TBAA0102
                        where CUST_NO         = i_cust_no
                          and CAR_SEQ         = i_car_seq
                          and CAR_HISTORY_SEQ = v_max_seq;

                       exception when no_data_found then v_old_data := null ;
                                                         o_result   := o_result || '**' ||  i_cust_no || '-' || v_max_seq || ' : ' || '[History Data Not Found TBAA0102]';
                                 when others        then o_result   := o_result || '**' ||  i_cust_no || '-' || v_max_seq || ' : ' || '[History Data Not Found]';

                 end;

          if  v_new_data is not null and v_old_data is not null then

                 if   v_new_data <> v_old_data then /* 현재 자료와 이전 자료 비교하기 */
                       /* USER_ID 가지고 오기*/
                       change_id   :=  regexp_substr(v_new_data      ,'[^∬]+',1,54);
                       change_id   :=  regexp_substr(change_id       ,'[^∫]+' ,1,4);
                       change_name :='';

                       idx1 := 1;
                       idx2 := length(v_old_data) - length(replace(v_old_data,'∬','')) + 1;

                       loop /* Looping (Select 한 Data 항목이 구분자 ∬ 로 56개 임)*/

                             if    idx1 > idx2 then
                                   exit;
                             end if;


                             /*  구분자 '∬' 로 자르고 그 다음 구분자 '∫' 로 자름(2차원 배열 형식) */
                             new_change      :=  regexp_substr(v_new_data   ,'[^∬]+',1,idx1);
                             new_change_group:=  regexp_substr(new_change   ,'[^∫]+' ,1,1);
                             new_change_item :=  regexp_substr(new_change   ,'[^∫]+' ,1,2);
                             new_change_data :=  regexp_substr(new_change   ,'[^∫]+' ,1,4);

                             old_change      :=  regexp_substr(v_old_data   ,'[^∬]+',1,idx1);
                             old_change_group:=  regexp_substr(old_change   ,'[^∫]+' ,1,1);
                             old_change_item :=  regexp_substr(old_change   ,'[^∫]+' ,1,2);
                             old_change_data :=  regexp_substr(old_change   ,'[^∫]+' ,1,4);

                             codetype        :=  regexp_substr(new_change   ,'[^∫]+' ,1,3);

                             If regexp_substr(i_change_pgm,'배서') = '배서' THEN
                                car_info_ok := '2';
                             else
                                car_info_ok := '1';
                             end if;

                             if    codetype = 'Next' then   /* 다음 항목과 함께 비교 할때 */
                                   n_new_change_data  := n_new_change_data || ' [' || new_change_item ||':' ||new_change_data || ']';
                                   n_old_change_data  := n_old_change_data || ' [' || old_change_item ||':' ||old_change_data || ']';

                             elsif nvl(new_change_data,' ') <> nvl(old_change_data,' ') or nvl(n_new_change_data,' ') <> nvl(n_old_change_data,' ') then  /* 이전항목과 현재 항목이 다를때 */

                                   insert_ok    :='Y';
                                   /********************************************************/
                                   /**사용여부 변경시 계약여부                    Check  ***/
                                   /********************************************************/
                                   if    idx1 = 55 then
                                         if    old_change_data is not null  then      /* 기존   사용여부값이 null 이 아니면 */
                                               if    new_change_data is not null then /* 새로운 사용여부값이 null 이 아니면 */
                                                     select FN_GET_CAR_STATE('3',i_cust_no,i_car_seq,null)  --FN_GET_CAR_STATE [구분(2:차량존재여부 3:계약존재여부) /고객번호/차량seq/(차대번호,차량한글번호)
                                                       into v_check2
                                                       from dual;
                                                     if    v_check2 is not null then
                                                           idx1       := 99;
                                                           insert_ok  := null;
                                                           o_result   := o_result || ' [한글차량(차대)번호로 계약이 존재 합니다(사용여부 수정불가)]-[' || v_check2|| ']';
                                                     end if;

                                                     select CNTR_GB
                                                       into v_check3
                                                       from TBAA0101
                                                      where CUST_NO = i_cust_no
                                                        and CAR_SEQ = i_car_seq;
                                                     if    v_check3 is not null then
                                                           if    v_check3 = '1' then
                                                                 idx1       := 99;
                                                                 insert_ok  := null;
                                                                 o_result   := o_result || ' [한글차량(차대)번호의 차량은 출자등록차량입니다(사용여부 수정불가)]-[' || v_check3|| ']';
                                                           end if;
                                                     end if;
                                               else
                                                     idx1       := 99;
                                                     insert_ok  := null;
                                                     o_result   := o_result || ' 사용여부를 변경할 수 없습니다. ';
                                               end if;
                                         end if;
                                   end if;
                                   /********************************************************/
                                   /**한글차량(차대)번호 변경시 계약여부,기존번호 Check  ***/
                                   /********************************************************/
                                   --if    codetype = 'Car'   and  regexp_substr(i_change_pgm,'배서') <> '배서' THEN
                                   if    codetype = 'Car'   and  car_info_ok = '1' THEN

                                         if    old_change_data is not null  then      /* 기존   한글차량(차대)번호가 null 이 아니면 */
                                               if    new_change_data is not null then /* 새로운 한글차량(차대)번호가 null 이 아니면 */
                                                     select FN_GET_CAR_STATE('2',i_cust_no,i_car_seq,old_change_data)
                                                           ,FN_GET_CAR_STATE('3',i_cust_no,i_car_seq,null)  --FN_GET_CAR_STATE [구분(2:차량존재여부 3:계약존재여부) /고객번호/차량seq/(차대번호,차량한글번호)
                                                       into v_check2
                                                           ,v_check3
                                                       from dual;

                                                     if    v_check2 is not null then
                                                           idx1       := 99;
                                                           insert_ok  := null;
                                                           o_result   := o_result || ' [변경하고자 하는 한글차량(차대)번호가 존재 합니다.(수정불가)]-[' || v_check2 || ']';
                                                     end if;

                                                     if    v_check3 is not null then
                                                           idx1       := 99;
                                                           insert_ok  := null;
                                                           o_result   := o_result || ' [한글차량(차대)번호로 계약이 존재 합니다(수정불가)]-[' || v_check3|| ']';
                                                     end if;
                                               else
                                                     idx1       := 99;
                                                     insert_ok  := null;
                                                     o_result   := o_result || ' [기존 한글차량(차대)번호를 삭제 할수 없습니다.(수정불가)]';
                                               end if;
                                         end if;
                                      --   pr_rent_amt_log( '1' , i_cust_no , v_check2  , v_check3, old_change_data ,new_change_data, to_char(sysdate, 'yyyymmdd hh24miss') );

                                      select FN_GET_CAR_STATE('3',i_cust_no,i_car_seq,null)  --FN_GET_CAR_STATE [구분3:계약존재여부) /고객번호/차량seq/
                                           into v_check3
                                          from dual;

                                         if    v_check3 is not null then
                                               idx1       := 99;
                                               insert_ok  := null;
                                               o_result   := o_result || ' [수정하려는 차량이 유효계약이 있습니다.(수정불가)]-[' || v_check3 || ']';
                                          end if;

                                   end if;

                                   /********************************************************/
                                   /**출자금 변경시 계약여부                      Check  ***/
                                   /********************************************************/
                                   --차량대체 기능 추가로 출자금 차량대체 시(i_change_pgm명에 NO_CONT_CHECK 값이 있는 건) 계약여부 체크를 하지 않음
                                   --20140409 LYH (모든 것에 대한 계약여부 체크를 해지 할 수 없어 프로그램명에 -NO_CONT_CHECK을 넣어 구분함)
                                   v_change_pgm := SUBSTR(i_change_pgm,INSTR(i_change_pgm,'-') + 1);
                                   if    codetype = 'A0064' and v_change_pgm <> 'NO_CONT_CHECK' then
                                         select FN_GET_CAR_STATE('3',i_cust_no,i_car_seq,null)  --FN_GET_CAR_STATE [구분3:계약존재여부) /고객번호/차량seq/
                                           into v_check3
                                          from dual;

                                         if    v_check3 is not null then
                                               idx1       := 99;
                                               insert_ok  := null;
                                               o_result   := o_result || ' [출자 및 반환(회수) 하고자 하는 차량이 유효계약이 있습니다.(수정불가)]-[' || v_check3 || ']';
CREATE -- added during DDL generation.
PROCEDURE PR_DATA_TRANS_APPROVAL_CLM(
    in_apv_biz_div VARCHAR2
) AS

v_apv_no                VARCHAR2(14);
v_apv_seq               NUMBER(3);
v_fnal_yn               VARCHAR2(1);
v_apv_stat_cd           VARCHAR2(1);
v_fnal_updt_emp_no      VARCHAR2(8);
v_fnal_updt_dttm        VARCHAR2(14);
v_last                  VARCHAR2(1);
v_aply_cntr_no          VARCHAR2(8);
v_aply_team_no          VARCHAR2(8);
v_aply_part_no          VARCHAR2(8);
v_aply_emp_no           VARCHAR2(8);
v_aply_dttm             VARCHAR2(14);
v_aply_cntr_no_temp     VARCHAR2(8);
v_aply_team_no_temp     VARCHAR2(8);
v_aply_part_no_temp     VARCHAR2(8);
v_aply_emp_no_temp      VARCHAR2(8);
v_aply_dttm_temp        VARCHAR2(14);
v_serial_no             VARCHAR2(3);

BEGIN
    FOR CUR IN (
        SELECT --*
               A.SERIAL_NO
             , A.LAST
             , A.ACCIDENT_NO
             , A.HND_COVER
             , A.DMGE_NO
             , A.APPROVAL_SER_NO
             , A.APP_MID_SER_NO
             , (
                SELECT COUNT(1)
                  FROM TBCG0001 B
                 WHERE B.ACCIDENT_NO     = A.ACCIDENT_NO
                   AND B.HND_COVER       = A.HND_COVER
                   AND B.DMGE_NO         = A.DMGE_NO
                   AND B.APPROVAL_SER_NO = A.APPROVAL_SER_NO
                   AND B.APPROVAL_DIV    = A.APPROVAL_DIV
               ) AS CNT
             , A.APPROVAL_DIV
             , A.APPROVAL_TYPE
             , A.ORDER_CONTENT
             , A.REQ_CENTER
             , A.REQ_TEAM
             , A.REQ_PART
             , A.REQ_STAFF
             , TO_CHAR(A.REQ_DATE, 'YYYYMMDD') AS REQ_DATE
             , A.REQ_TIME
             , A.RES_CENTER
             , A.RES_TEAM
             , A.RES_PART
             , A.RES_STAFF
             , A.CENTER
             , A.TEAM
             , A.PART
             , A.STAFF
             , TO_CHAR(A.APP_DATE, 'YYYYMMDD') AS APP_DATE
             , A.APP_TIME
             , A.USER_ID
             , A.IT_PROCESSING
                     , CASE WHEN APPROVAL_DIV = 'C04' THEN (
                                                           SELECT CM_EST_AMT + OP_EST_AMT
                                                             FROM TBCC0002
                                                            WHERE ACCIDENT_NO = A.ACCIDENT_NO
                                                              AND HND_COVER   = A.HND_COVER
                                                              AND DMGE_NO     = A.DMGE_NO
                                                              AND SERIAL_NO   = A.APPROVAL_SER_NO
                                                          )
                                                          -
                                                      NVL((
                                                           SELECT CM_EST_AMT + OP_EST_AMT
                                                             FROM TBCC0002
                                                            WHERE ACCIDENT_NO = A.ACCIDENT_NO
                                                              AND HND_COVER   = A.HND_COVER
                                                              AND DMGE_NO     = A.DMGE_NO
                                                              AND SERIAL_NO   = SUBSTR('000' || (A.APPROVAL_SER_NO - 1), -3)
                                                       ),0)
                            WHEN APPROVAL_DIV = 'C05' THEN (
                                                           SELECT DIRECT_AMT + INDIRECT_AMT
                                                             FROM TBCD0001
                                                            WHERE ACCIDENT_NO = A.ACCIDENT_NO
                                                              AND HND_COVER   = A.HND_COVER
                                                              AND DMGE_NO     = A.DMGE_NO
                                                              AND SERIAL_NO   = A.APPROVAL_SER_NO
                                                          )
                                                          -
                                                      NVL((
                                                           SELECT DIRECT_AMT + INDIRECT_AMT
                                                             FROM TBCD0001
                                                            WHERE ACCIDENT_NO = A.ACCIDENT_NO
                                                              AND HND_COVER   = A.HND_COVER
                                                              AND DMGE_NO     = A.DMGE_NO
                                                              AND SERIAL_NO   = SUBSTR('000' || (A.APPROVAL_SER_NO - 1), -3)
                                                       ),0)
                            WHEN APPROVAL_DIV IN ('C06', 'C07', 'C08') THEN
                                                        (  SELECT DC_AMT
                                                             FROM TBCE0001
                                                            WHERE ACCIDENT_NO = A.ACCIDENT_NO
                                                              AND HND_COVER   = A.HND_COVER
                                                              AND DMGE_NO     = A.DMGE_NO
                                                              AND DC_NO       = A.APPROVAL_SER_NO        )
                            ELSE 0
                       END AS CUR_AMT  -- 현재대상금액

                     , CASE WHEN APPROVAL_DIV = 'C04' THEN NVL((
                                                               SELECT CM_EST_AMT + OP_EST_AMT
                                                             FROM TBCC0002
                                                            WHERE ACCIDENT_NO = A.ACCIDENT_NO
                                                              AND HND_COVER   = A.HND_COVER
                                                              AND DMGE_NO     = A.DMGE_NO
                                                              AND SERIAL_NO   = A.APPROVAL_SER_NO
                                                       ),0)
                        WHEN APPROVAL_DIV = 'C05' THEN NVL((
                                                           SELECT DIRECT_AMT + INDIRECT_AMT
                                                             FROM TBCD0001
                                                            WHERE ACCIDENT_NO = A.ACCIDENT_NO
                                                              AND HND_COVER   = A.HND_COVER
                                                              AND DMGE_NO     = A.DMGE_NO
                                                              AND SERIAL_NO   = A.APPROVAL_SER_NO
                                                       ),0)
                        WHEN APPROVAL_DIV IN ('C06', 'C07', 'C08') THEN
                 (  SELECT SUM(DC_AMT)
                                                              FROM TBCE0001
                                                             WHERE ACCIDENT_NO = A.ACCIDENT_NO
                                                               AND HND_COVER   = A.HND_COVER
                                                               AND DMGE_NO     = A.DMGE_NO
                                                               AND DC_NO       <= A.APPROVAL_SER_NO     )
                        ELSE 0
                   END AS LIMIT_AMT  -- 누적금액

          FROM TBCG0001 A
         WHERE 1=1--A.APPROVAL_DIV = in_apv_biz_div
         ORDER BY A.APPROVAL_DIV
                , A.ACCIDENT_NO
                , A.HND_COVER
                , A.DMGE_NO
                , A.APPROVAL_SER_NO
                , A.APP_MID_SER_NO
    ) LOOP
        BEGIN
            -- 결재번호 셋팅
            IF CUR.APP_MID_SER_NO = '001' THEN
                v_apv_no := FN_GET_SEQ_DATA_TRANS('W', CUR.REQ_DATE);
            END IF;

            -- 결재일련번호 셋팅
            IF CUR.APP_MID_SER_NO = '001' THEN
                v_apv_seq := 1;
            ELSE
                v_apv_seq := v_apv_seq + 1;
            END IF;

            -- LAST 셋팅
            IF v_apv_seq = CUR.CNT THEN
                v_last := 'Y';
            ELSE
                v_last := '';
            END IF;

            -- 결재최종여부 셋팅
            IF CUR.APPROVAL_TYPE = '1' THEN
                v_fnal_yn := 'Y';
            ELSE
                v_fnal_yn := 'N';
            END IF;

            -- 결재상태코드 셋팅
            IF CUR.APPROVAL_TYPE IN ('1', '2') THEN
                v_apv_stat_cd := '1';
            ELSE
                v_apv_stat_cd := CUR.APPROVAL_TYPE;
            END IF;

            -- 변경회차(면책데이터 보정)
            IF CUR.APPROVAL_DIV = 'C11' THEN
                v_serial_no := '001';
            ELSE
                v_serial_no := CUR.APPROVAL_SER_NO;
            END IF;

            -- 결재신청센터번호, 결재신청팀번호, 결재신청파트번호, 결재신청자사원번호, 결재신청일시 셋팅
            IF CUR.CNT = 1 THEN
                v_aply_cntr_no := CUR.REQ_CENTER;
                v_aply_team_no := CUR.REQ_TEAM;
                v_aply_part_no := CUR.REQ_PART;
                v_aply_emp_no  := CUR.REQ_STAFF;
                v_aply_dttm    := CUR.REQ_DATE || CUR.REQ_TIME;
            ELSE
                IF CUR.APP_MID_SER_NO = '001' THEN
                    v_aply_cntr_no := CUR.REQ_CENTER;
                    v_aply_team_no := CUR.REQ_TEAM;
                    v_aply_part_no := CUR.REQ_PART;
                    v_aply_emp_no  := CUR.REQ_STAFF;
                    v_aply_dttm    := CUR.REQ_DATE || CUR.REQ_TIME;

                    v_aply_cntr_no_temp := v_aply_cntr_no;
                    v_aply_team_no_temp := v_aply_team_no;
                    v_aply_part_no_temp := v_aply_part_no;
                    v_aply_emp_no_temp  := v_aply_emp_no;
                    v_aply_dttm_temp    := v_aply_dttm;
                ELSE
                    v_aply_cntr_no := v_aply_cntr_no_temp;
                    v_aply_team_no := v_aply_team_no_temp;
                    v_aply_part_no := v_aply_part_no_temp;
                    v_aply_emp_no  := v_aply_emp_no_temp;
                    v_aply_dttm    := v_aply_dttm_temp;
                END IF;
            END IF;

            -- 최종수정자사원번호 셋팅
            IF CUR.APPROVAL_TYPE IN ('1', '2') THEN
                v_fnal_updt_emp_no := CUR.STAFF;
            ELSE
                v_fnal_updt_emp_no := '';
            END IF;

            -- 최종수정일시 셋팅
            IF CUR.APPROVAL_TYPE IN ('1', '2') THEN
                v_fnal_updt_dttm := CUR.APP_DATE || CUR.APP_TIME;
            ELSE
                v_fnal_updt_dttm := '';
            END IF;

            INSERT INTO TBCG1000 (
                  APV_NO              -- 결재번호
                , APV_SEQ             -- 결재일련번호
                , LAST                -- LAST
                , ACCIDENT_NO         -- 사고번호
                , HND_COVER           -- 담보
                , DMGE_NO             -- 피해서열
                , REP_NO              -- 구상번호
                , SUIT_NO             -- 소송번호
                , TRIAL_ORDER         -- 소송심급
                , INRM_NO             -- 제보번호
                , BUZ_ENTR_NO         -- 업무위임번호
                , CORRESPONDENT       -- 협력업체코드
                , PETITION_NO         -- 민원번호
                , SERIAL_NO           -- 변경회차
                , APV_BIZ_DIV         -- 결재업무구분
                , APV_STAT_CD         -- 결재상태코드
                , APV_COMMENT         -- 결재의견

                , FNAL_APV_LVL_CD     -- 최종결재레벨코드
                , APV_AMT             -- 결재금액
                , APV_TOT_AMT         -- 결재누적금액
                , DFT_OBJ_DIV_CD      -- 품의구분코드

                , APLY_CNTR_NO        -- 결재신청센터번호
                , APLY_TEAM_NO        -- 결재신청팀번호
                , APLY_PART_NO        -- 결재신청파트번호
                , APLY_EMP_NO         -- 결재신청자사원번호
                , APLY_IP             -- 결재신청자IP
                , APLY_DTTM           -- 결재신청일시
                , APV_EXPR_CNTR_NO    -- 결재예정센터번호
                , APV_EXPR_TEAM_NO    -- 결재예정팀번호
                , APV_EXPR_PART_NO    -- 결재예정파트번호
                , APV_EXPR_EMP_NO     -- 결재예정자사원번호
                , APV_CNTR_NO         -- 결재센터번호
                , APV_TEAM_NO         -- 결재팀번호
                , APV_PART_NO         -- 결재파트번호
                , APV_EMP_NO          -- 결재자사원번호
                , APV_IP              -- 결재자IP
                , APV_DTTM            -- 결재일시
                , FNAL_YN             -- 결재최종여부
                , FRST_INPT_EMP_NO    -- 최초입력자사원번호
                , FRST_INPT_DTTM      -- 최초입력일시
                , FNAL_UPDT_EMP_NO    -- 최종수정자사원번호
                , FNAL_UPDT_DTTM      -- 최종수정일시
            ) VALUES (
                  v_apv_no              -- 결재번호
                , v_apv_seq             -- 결재일련번호
                , v_last                -- LAST
                , CUR.ACCIDENT_NO         -- 사고번호
                , CUR.HND_COVER           -- 담보
                , CUR.DMGE_NO             -- 피해서열
                , ''              -- 구상번호
                , ''             -- 소송번호
                , ''         -- 소송심급
                , ''             -- 제보번호
                , ''         -- 업무위임번호
                , ''                   -- 협력업체코드
                , ''                    -- 민원번호
                , v_serial_no           -- 변경회차
                , CUR.APPROVAL_DIV         -- 결재업무구분
                , v_apv_stat_cd         -- 결재상태코드
                , CUR.ORDER_CONTENT         -- 결재의견

                , ''     -- 최종결재레벨코드
                , CUR.CUR_AMT             -- 결재금액
                , CUR.LIMIT_AMT         -- 결재누적금액
                , '0'      -- 품의구분코드

                , v_aply_cntr_no        -- 결재신청센터번호
                , v_aply_team_no        -- 결재신청팀번호
                , v_aply_part_no        -- 결재신청파트번호
                , v_aply_emp_no         -- 결재신청자사원번호
                , ''                    -- 결재신청자IP
                , v_aply_dttm           -- 결재신청일시
                , CUR.RES_CENTER    -- 결재예정센터번호
                , CUR.RES_TEAM    -- 결재예정팀번호
                , CUR.RES_PART    -- 결재예정파트번호
                , CUR.RES_STAFF     -- 결재예정자사원번호
                , CUR.CENTER         -- 결재센터번호
                , CUR.TEAM         -- 결재팀번호
                , CUR.PART         -- 결재파트번호
                , CUR.STAFF          -- 결재자사원번호
                , ''                   -- 결재자IP
                , CUR.APP_DATE || CUR.APP_TIME            -- 결재일시
                , v_fnal_yn             -- 결재최종여부
                , CUR.REQ_STAFF    -- 최초입력자사원번호
                , CUR.REQ_DATE || CUR.REQ_TIME      -- 최초입력일시
                , v_fnal_updt_emp_no    -- 최종수정자사원번호
                , v_fnal_updt_dttm      -- 최종수정일시
            );

        EXCEPTION WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('PR_DATA_TRANS_APPROVAL ERROR : ' || SQLERRM);
        END;
    END LOOP;

    COMMIT;

EXCEPTION WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('PR_DATA_TRANS_APPROVAL ERROR : ' || SQLERRM);
END;

CREATE -- added during DDL generation.
PROCEDURE PR_DATA_TRANS_APPROVAL_LAW(
    in_apv_biz_div VARCHAR2
) AS

v_apv_no            VARCHAR2(14);
v_apv_seq           NUMBER(3);
v_fnal_yn           VARCHAR2(1);
v_apv_stat_cd       VARCHAR2(1);
v_fnal_updt_emp_no  VARCHAR2(8);
v_fnal_updt_dttm    VARCHAR2(14);
v_last              VARCHAR2(1);
v_aply_cntr_no          VARCHAR2(8);
v_aply_team_no          VARCHAR2(8);
v_aply_part_no          VARCHAR2(8);
v_aply_emp_no           VARCHAR2(8);
v_aply_dttm             VARCHAR2(14);
v_aply_cntr_no_temp     VARCHAR2(8);
v_aply_team_no_temp     VARCHAR2(8);
v_aply_part_no_temp     VARCHAR2(8);
v_aply_emp_no_temp      VARCHAR2(8);
v_aply_dttm_temp        VARCHAR2(14);

BEGIN
    FOR CUR IN (
        SELECT --*
               A.SERIAL_NO
             , A.LAST
             , A.SUIT_NO
             , A.SUIT_RANK
             , A.TRIAL_ORDER
             , A.APPROVAL_SER_NO
             , A.APP_MID_SER_NO
             , (
                SELECT COUNT(1)
                  FROM TBCG0003 B
                 WHERE B.SUIT_NO         = A.SUIT_NO
                   AND B.SUIT_RANK       = A.SUIT_RANK
                   AND B.TRIAL_ORDER     = A.TRIAL_ORDER
                   AND B.APPROVAL_SER_NO = A.APPROVAL_SER_NO
                   AND B.APPROVAL_DIV    = A.APPROVAL_DIV
               ) AS CNT
             , A.APPROVAL_DIV
             , A.APPROVAL_TYPE
             , A.ORDER_CONTENT
             , A.REQ_CENTER
             , A.REQ_TEAM
             , A.REQ_PART
             , A.REQ_STAFF
             , TO_CHAR(A.REQ_DATE, 'YYYYMMDD') AS REQ_DATE
             , A.REQ_TIME
             , A.RES_CENTER
             , A.RES_TEAM
             , A.RES_PART
             , A.RES_STAFF
             , A.CENTER
             , A.TEAM
             , A.PART
             , A.STAFF
             , TO_CHAR(A.APP_DATE, 'YYYYMMDD') AS APP_DATE
             , A.APP_TIME
             , A.USER_ID
             , A.IT_PROCESSING
          FROM TBCG0003 A
         WHERE 1=1--A.APPROVAL_DIV = in_apv_biz_div
         ORDER BY A.APPROVAL_DIV
                , A.SUIT_NO
                , A.SUIT_RANK
                , A.TRIAL_ORDER
                , A.APPROVAL_SER_NO
                , A.APP_MID_SER_NO
    ) LOOP
        BEGIN
            -- 결재번호 셋팅
            IF CUR.APP_MID_SER_NO = '001' THEN
                v_apv_no := FN_GET_SEQ_DATA_TRANS('W', CUR.REQ_DATE);
            END IF;

            -- 결재일련번호 셋팅
            IF CUR.APP_MID_SER_NO = '001' THEN
                v_apv_seq := 1;
            ELSE
                v_apv_seq := v_apv_seq + 1;
            END IF;

            -- LAST 셋팅
            IF v_apv_seq = CUR.CNT THEN
                v_last := 'Y';
            ELSE
                v_last := '';
            END IF;

            -- 결재최종여부 셋팅
            IF CUR.APPROVAL_TYPE = '1' THEN
                v_fnal_yn := 'Y';
            ELSE
                v_fnal_yn := 'N';
            END IF;

            -- 결재상태코드 셋팅
            IF CUR.APPROVAL_TYPE IN ('1', '2') THEN
                v_apv_stat_cd := '1';
            ELSE
                v_apv_stat_cd := CUR.APPROVAL_TYPE;
            END IF;

            -- 결재신청센터번호, 결재신청팀번호, 결재신청파트번호, 결재신청자사원번호, 결재신청일시 셋팅
            IF CUR.CNT = 1 THEN
                v_aply_cntr_no := CUR.REQ_CENTER;
                v_aply_team_no := CUR.REQ_TEAM;
                v_aply_part_no := CUR.REQ_PART;
                v_aply_emp_no  := CUR.REQ_STAFF;
                v_aply_dttm    := CUR.REQ_DATE || CUR.REQ_TIME;
            ELSE
                IF CUR.APP_MID_SER_NO = '001' THEN
                    v_aply_cntr_no := CUR.REQ_CENTER;
                    v_aply_team_no := CUR.REQ_TEAM;
                    v_aply_part_no := CUR.REQ_PART;
                    v_aply_emp_no  := CUR.REQ_STAFF;
                    v_aply_dttm    := CUR.REQ_DATE || CUR.REQ_TIME;

                    v_aply_cntr_no_temp := v_aply_cntr_no;
                    v_aply_team_no_temp := v_aply_team_no;
                    v_aply_part_no_temp := v_aply_part_no;
                    v_aply_emp_no_temp  := v_aply_emp_no;
                    v_aply_dttm_temp    := v_aply_dttm;
                ELSE
                    v_aply_cntr_no := v_aply_cntr_no_temp;
                    v_aply_team_no := v_aply_team_no_temp;
                    v_aply_part_no := v_aply_part_no_temp;
                    v_aply_emp_no  := v_aply_emp_no_temp;
                    v_aply_dttm    := v_aply_dttm_temp;
                END IF;
            END IF;

            -- 최종수정자사원번호 셋팅
            IF CUR.APPROVAL_TYPE IN ('1', '2') THEN
                v_fnal_updt_emp_no := CUR.STAFF;
            ELSE
                v_fnal_updt_emp_no := '';
            END IF;

            -- 최종수정일시 셋팅
            IF CUR.APPROVAL_TYPE IN ('1', '2') THEN
                v_fnal_updt_dttm := CUR.APP_DATE || CUR.APP_TIME;
            ELSE
                v_fnal_updt_dttm := '';
            END IF;


            INSERT INTO TBCG1000 (
                  APV_NO              -- 결재번호
                , APV_SEQ             -- 결재일련번호
                , LAST                -- LAST
                , ACCIDENT_NO         -- 사고번호
                , HND_COVER           -- 담보
                , DMGE_NO             -- 피해서열
                , REP_NO              -- 구상번호
                , SUIT_NO             -- 소송번호
                , TRIAL_ORDER         -- 소송심급
                , INRM_NO             -- 제보번호
                , BUZ_ENTR_NO         -- 업무위임번호
                , CORRESPONDENT       -- 협력업체코드
                , PETITION_NO         -- 민원번호
                , SERIAL_NO           -- 변경회차
                , APV_BIZ_DIV         -- 결재업무구분
                , APV_STAT_CD         -- 결재상태코드
                , APV_COMMENT         -- 결재의견

                , FNAL_APV_LVL_CD     -- 최종결재레벨코드
                , APV_AMT             -- 결재금액
                , APV_TOT_AMT         -- 결재누적금액
                , DFT_OBJ_DIV_CD      -- 품의구분코드

                , APLY_CNTR_NO        -- 결재신청센터번호
                , APLY_TEAM_NO        -- 결재신청팀번호
                , APLY_PART_NO        -- 결재신청파트번호
                , APLY_EMP_NO         -- 결재신청자사원번호
                , APLY_IP             -- 결재신청자IP
                , APLY_DTTM           -- 결재신청일시
                , APV_EXPR_CNTR_NO    -- 결재예정센터번호
                , APV_EXPR_TEAM_NO    -- 결재예정팀번호
                , APV_EXPR_PART_NO    -- 결재예정파트번호
                , APV_EXPR_EMP_NO     -- 결재예정자사원번호
                , APV_CNTR_NO         -- 결재센터번호
                , APV_TEAM_NO         -- 결재팀번호
                , APV_PART_NO         -- 결재파트번호
                , APV_EMP_NO          -- 결재자사원번호
                , APV_IP              -- 결재자IP
                , APV_DTTM            -- 결재일시
                , FNAL_YN             -- 결재최종여부
                , FRST_INPT_EMP_NO    -- 최초입력자사원번호
                , FRST_INPT_DTTM      -- 최초입력일시
                , FNAL_UPDT_EMP_NO    -- 최종수정자사원번호
                , FNAL_UPDT_DTTM      -- 최종수정일시
            ) VALUES (
                  v_apv_no              -- 결재번호
                , v_apv_seq             -- 결재일련번호
                , v_last                -- LAST
                , ''         -- 사고번호
                , ''           -- 담보
                , CUR.SUIT_RANK             -- 피해서열
                , ''              -- 구상번호
                , CUR.SUIT_NO             -- 소송번호
                , CUR.TRIAL_ORDER         -- 소송심급
                , ''             -- 제보번호
                , ''         -- 업무위임번호
                , ''         -- 협력업체코드
                , ''         -- 민원번호
                , CUR.APPROVAL_SER_NO           -- 변경회차
                , CUR.APPROVAL_DIV         -- 결재업무구분
                , v_apv_stat_cd         -- 결재상태코드
                , CUR.ORDER_CONTENT         -- 결재의견

                , ''     -- 최종결재레벨코드
                , 0             -- 결재금액
                , 0         -- 결재누적금액
                , '0'      -- 품의구분코드

                , v_aply_cntr_no        -- 결재신청센터번호
                , v_aply_team_no        -- 결재신청팀번호
                , v_aply_part_no        -- 결재신청파트번호
                , v_aply_emp_no         -- 결재신청자사원번호
                , ''                    -- 결재신청자IP
                , v_aply_dttm           -- 결재신청일시
                , CUR.RES_CENTER    -- 결재예정센터번호
                , CUR.RES_TEAM    -- 결재예정팀번호
                , CUR.RES_PART    -- 결재예정파트번호
                , CUR.RES_STAFF     -- 결재예정자사원번호
                , CUR.CENTER         -- 결재센터번호
                , CUR.TEAM         -- 결재팀번호
                , CUR.PART         -- 결재파트번호
                , CUR.STAFF          -- 결재자사원번호
                , ''                 -- 결재자IP
                , CUR.APP_DATE || CUR.APP_TIME            -- 결재일시
                , v_fnal_yn             -- 결재최종여부
                , CUR.REQ_STAFF    -- 최초입력자사원번호
                , CUR.REQ_DATE || CUR.REQ_TIME      -- 최초입력일시
                , v_fnal_updt_emp_no    -- 최종수정자사원번호
                , v_fnal_updt_dttm      -- 최종수정일시
            );

        EXCEPTION WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('PR_DATA_TRANS_APPROVAL ERROR : ' || SQLERRM);
        END;
    END LOOP;

    COMMIT;

EXCEPTION WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('PR_DATA_TRANS_APPROVAL ERROR : ' || SQLERRM);
END;

CREATE -- added during DDL generation.
PROCEDURE PR_DATA_TRANS_APPROVAL_REP(
    in_apv_biz_div VARCHAR2
) AS

v_apv_no                VARCHAR2(14);
v_apv_seq               NUMBER(3);
v_fnal_yn               VARCHAR2(1);
v_apv_stat_cd           VARCHAR2(1);
v_fnal_updt_emp_no      VARCHAR2(8);
v_fnal_updt_dttm        VARCHAR2(14);
v_last                  VARCHAR2(1);
v_aply_cntr_no          VARCHAR2(8);
v_aply_team_no          VARCHAR2(8);
v_aply_part_no          VARCHAR2(8);
v_aply_emp_no           VARCHAR2(8);
v_aply_dttm             VARCHAR2(14);
v_aply_cntr_no_temp     VARCHAR2(8);
v_aply_team_no_temp     VARCHAR2(8);
v_aply_part_no_temp     VARCHAR2(8);
v_aply_emp_no_temp      VARCHAR2(8);
v_aply_dttm_temp        VARCHAR2(14);

BEGIN
    FOR CUR IN (
        SELECT --*
               A.SERIAL_NO
             , A.LAST
             , A.REP_NO
             , A.APPROVAL_SER_NO
             , A.APP_MID_SER_NO
             , (
                SELECT COUNT(1)
                  FROM TBCG0002 B
                 WHERE B.REP_NO          = A.REP_NO
                   AND B.APPROVAL_SER_NO = A.APPROVAL_SER_NO
                   AND B.APPROVAL_DIV    = A.APPROVAL_DIV
               ) AS CNT
             , A.APPROVAL_DIV
             , A.APPROVAL_TYPE
             , A.ORDER_CONTENT
             , A.REQ_CENTER
             , A.REQ_TEAM
             , A.REQ_PART
             , A.REQ_STAFF
             , TO_CHAR(A.REQ_DATE, 'YYYYMMDD') AS REQ_DATE
             , A.REQ_TIME
             , A.RES_CENTER
             , A.RES_TEAM
             , A.RES_PART
             , A.RES_STAFF
             , A.CENTER
             , A.TEAM
             , A.PART
             , A.STAFF
             , TO_CHAR(A.APP_DATE, 'YYYYMMDD') AS APP_DATE
             , A.APP_TIME
             , A.USER_ID
             , A.IT_PROCESSING
          FROM TBCG0002 A
         WHERE 1=1--A.APPROVAL_DIV = in_apv_biz_div
         ORDER BY A.APPROVAL_DIV
                , A.REP_NO
                , A.APPROVAL_SER_NO
                , A.APP_MID_SER_NO
    ) LOOP
        BEGIN
            -- 결재번호 셋팅
            IF CUR.APP_MID_SER_NO = '001' THEN
                v_apv_no := FN_GET_SEQ_DATA_TRANS('W', CUR.REQ_DATE);
            END IF;

            -- 결재일련번호 셋팅
            IF CUR.APP_MID_SER_NO = '001' THEN
                v_apv_seq := 1;
            ELSE
                v_apv_seq := v_apv_seq + 1;
            END IF;

            -- LAST 셋팅
            IF v_apv_seq = CUR.CNT THEN
                v_last := 'Y';
            ELSE
                v_last := '';
            END IF;

            -- 결재최종여부 셋팅
            IF CUR.APPROVAL_TYPE = '1' THEN
                v_fnal_yn := 'Y';
            ELSE
                v_fnal_yn := 'N';
            END IF;

            -- 결재상태코드 셋팅
            IF CUR.APPROVAL_TYPE IN ('1', '2') THEN
                v_apv_stat_cd := '1';
            ELSE
                v_apv_stat_cd := CUR.APPROVAL_TYPE;
            END IF;

            -- 결재신청센터번호, 결재신청팀번호, 결재신청파트번호, 결재신청자사원번호, 결재신청일시 셋팅
            IF CUR.CNT = 1 THEN
                v_aply_cntr_no := CUR.REQ_CENTER;
                v_aply_team_no := CUR.REQ_TEAM;
                v_aply_part_no := CUR.REQ_PART;
                v_aply_emp_no  := CUR.REQ_STAFF;
                v_aply_dttm    := CUR.REQ_DATE || CUR.REQ_TIME;
            ELSE
                IF CUR.APP_MID_SER_NO = '001' THEN
                    v_aply_cntr_no := CUR.REQ_CENTER;
                    v_aply_team_no := CUR.REQ_TEAM;
                    v_aply_part_no := CUR.REQ_PART;
                    v_aply_emp_no  := CUR.REQ_STAFF;
                    v_aply_dttm    := CUR.REQ_DATE || CUR.REQ_TIME;

                    v_aply_cntr_no_temp := v_aply_cntr_no;
                    v_aply_team_no_temp := v_aply_team_no;
                    v_aply_part_no_temp := v_aply_part_no;
                    v_aply_emp_no_temp  := v_aply_emp_no;
                    v_aply_dttm_temp    := v_aply_dttm;
                ELSE
                    v_aply_cntr_no := v_aply_cntr_no_temp;
                    v_aply_team_no := v_aply_team_no_temp;
                    v_aply_part_no := v_aply_part_no_temp;
                    v_aply_emp_no  := v_aply_emp_no_temp;
                    v_aply_dttm    := v_aply_dttm_temp;
                END IF;
            END IF;

            -- 최종수정자사원번호 셋팅
            IF CUR.APPROVAL_TYPE IN ('1', '2') THEN
                v_fnal_updt_emp_no := CUR.STAFF;
            ELSE
                v_fnal_updt_emp_no := '';
            END IF;

            -- 최종수정일시 셋팅
            IF CUR.APPROVAL_TYPE IN ('1', '2') THEN
                v_fnal_updt_dttm := CUR.APP_DATE || CUR.APP_TIME;
            ELSE
                v_fnal_updt_dttm := '';
            END IF;


            INSERT INTO TBCG1000 (
                  APV_NO              -- 결재번호
                , APV_SEQ             -- 결재일련번호
                , LAST                -- LAST
                , ACCIDENT_NO         -- 사고번호
                , HND_COVER           -- 담보
                , DMGE_NO             -- 피해서열
                , REP_NO              -- 구상번호
                , SUIT_NO             -- 소송번호
                , TRIAL_ORDER         -- 소송심급
                , INRM_NO             -- 제보번호
                , BUZ_ENTR_NO         -- 업무위임번호
                , CORRESPONDENT       -- 협력업체코드
                , PETITION_NO         -- 민원번호
                , SERIAL_NO           -- 변경회차
                , APV_BIZ_DIV         -- 결재업무구분
                , APV_STAT_CD         -- 결재상태코드
                , APV_COMMENT         -- 결재의견

                , FNAL_APV_LVL_CD     -- 최종결재레벨코드
                , APV_AMT             -- 결재금액
                , APV_TOT_AMT         -- 결재누적금액
                , DFT_OBJ_DIV_CD      -- 품의구분코드

                , APLY_CNTR_NO        -- 결재신청센터번호
                , APLY_TEAM_NO        -- 결재신청팀번호
                , APLY_PART_NO        -- 결재신청파트번호
                , APLY_EMP_NO         -- 결재신청자사원번호
                , APLY_IP             -- 결재신청자IP
                , APLY_DTTM           -- 결재신청일시
                , APV_EXPR_CNTR_NO    -- 결재예정센터번호
                , APV_EXPR_TEAM_NO    -- 결재예정팀번호
                , APV_EXPR_PART_NO    -- 결재예정파트번호
                , APV_EXPR_EMP_NO     -- 결재예정자사원번호
                , APV_CNTR_NO         -- 결재센터번호
                , APV_TEAM_NO         -- 결재팀번호
                , APV_PART_NO         -- 결재파트번호
                , APV_EMP_NO          -- 결재자사원번호
                , APV_IP              -- 결재자IP
                , APV_DTTM            -- 결재일시
                , FNAL_YN             -- 결재최종여부
                , FRST_INPT_EMP_NO    -- 최초입력자사원번호
                , FRST_INPT_DTTM      -- 최초입력일시
                , FNAL_UPDT_EMP_NO    -- 최종수정자사원번호
                , FNAL_UPDT_DTTM      -- 최종수정일시
            ) VALUES (
                  v_apv_no              -- 결재번호
                , v_apv_seq             -- 결재일련번호
                , v_last                -- LAST
                , ''         -- 사고번호
                , ''           -- 담보
                , ''             -- 피해서열
                , CUR.REP_NO              -- 구상번호
                , ''             -- 소송번호
                , ''         -- 소송심급
                , ''             -- 제보번호
                , ''         -- 업무위임번호
                , ''         -- 협력업체코드
                , ''         -- 민원번호
                , CUR.APPROVAL_SER_NO           -- 변경회차
                , CUR.APPROVAL_DIV         -- 결재업무구분
                , v_apv_stat_cd         -- 결재상태코드
                , CUR.ORDER_CONTENT         -- 결재의견

                , ''     -- 최종결재레벨코드
                , 0             -- 결재금액
                , 0         -- 결재누적금액
                , '0'      -- 품의구분코드

                , v_aply_cntr_no        -- 결재신청센터번호
                , v_aply_team_no        -- 결재신청팀번호
                , v_aply_part_no        -- 결재신청파트번호
                , v_aply_emp_no         -- 결재신청자사원번호
                , ''                    -- 결재신청자IP
                , v_aply_dttm           -- 결재신청일시
                , CUR.RES_CENTER    -- 결재예정센터번호
                , CUR.RES_TEAM    -- 결재예정팀번호
                , CUR.RES_PART    -- 결재예정파트번호
                , CUR.RES_STAFF     -- 결재예정자사원번호
                , CUR.CENTER         -- 결재센터번호
                , CUR.TEAM         -- 결재팀번호
                , CUR.PART         -- 결재파트번호
                , CUR.STAFF          -- 결재자사원번호
                , ''                 -- 결재자IP
                , CUR.APP_DATE || CUR.APP_TIME            -- 결재일시
                , v_fnal_yn             -- 결재최종여부
                , CUR.REQ_STAFF    -- 최초입력자사원번호
                , CUR.REQ_DATE || CUR.REQ_TIME      -- 최초입력일시
                , v_fnal_updt_emp_no    -- 최종수정자사원번호
                , v_fnal_updt_dttm      -- 최종수정일시
            );

        EXCEPTION WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('PR_DATA_TRANS_APPROVAL ERROR : ' || SQLERRM);
        END;
    END LOOP;

    COMMIT;

EXCEPTION WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('PR_DATA_TRANS_APPROVAL ERROR : ' || SQLERRM);
END;

CREATE OR REPLACE  -- added during DDL generation.
procedure KRMA_APP.PR_ENT_POL_COPY
(i_ent_dgn_no         in varchar2
,i_ent_dgn_no_key     in varchar2
,o_result       out varchar2) as
/*******************************************************************************/
/* 생성일자  : 2013.02.27                                                      */
/* 생성자    : 강신규                                                          */
/* 업무내용  : 가입설계,청약서 Copy Insert                                     */
/* Parameter : [ In] i_ent_dgn_no --가입설계 번호                              */
/*             [ In] i_job_gubun  --1:가입설계 2:계약(배서)                    */
/*******************************************************************************/
/*                   일일자차 추가로 인한 파라메터기능변경 20130513 이용한     */
/*                   기존 2:계약(배서)는 사용하지 않으므로 i_ent_dgn_no_key    */
/*                   로 기능을 변경함                                          */
/*             [ In] i_ent_dgn_no_key  --키를 생성하지 않고 해당파라메터로 처리*/
/*             [Out] o_result     --처리결과:채번한 가입설계번호               */
/*******************************************************************************/
v_ent_no              varchar2(14);              -- 설계채번

BEGIN

    o_result :=null ;

    if i_ent_dgn_no_key  =  'N' then
        select fn_get_seq('A' ||substr(i_ent_dgn_no,2,3))
          into v_ent_no
          from dual;
    else
        v_ent_no := i_ent_dgn_no_key;
    end if;

    /*********************************************/
    /* (TBIB0001) INSERT                         */
    /*********************************************/
    begin
        insert into TBIB0001(
               ENT_DGN_NO,              CUST_NO,                 CO_NO,                   BCO_NO,                  OWN_CD,
               INDGRP_GB,               CONT_KIND,               CONT_TYPE,               B_ENT_AMT,               BASIC_PREM,
               NA_MTH,                  ISTAR_CONT_DATE,         IEND_CONT_DATE,          I_KIND_CD,               BNP_CNT,
               BNP_CNT_R,               CASH_MTH,                CASH_ENT_TYPE,           TOT_INSUR_AMT,           APPY_SUM_PREM,
               TOT_NAB_PREM,            RIDER_INSUR_AMT,         RIDER_PREM,              SUM_PREM,                HOME_GB,
               CONT_YY,                 CONT_MM,                 CONT_DD,                 TOT_NAB_CNT,
               UNION_KIND,
               SHORT_DAY_GB,            SHORT_R,                 GRPCONT_DSC_R,           GRPCONT_DSC_CAR_R,       IENT_CARR_CD,            IENT_CARR_R,
               DSC_INC_CD,              DSC_INC_R,               SPCIAL_INC_R,            SPCIAL_INC_APPY,         ALL_DMBO_R,
               MUL_ACCI_RATE_CD,        ISD_P_CDGB,              ISD_CD,                  ISD_NAME,                ISD_CONT_RELATION_CD,
               ISD_ZIP_CD_GB,           ISD_ZIP_CD_DM_GB,        ISD_ZIP_CD,              ISD_ADDR_1,              ISD_ADDR_2,
               ISD_CALL_SITE_GB,        ISD_OFF_TEL_DDD,         ISD_OFF_TEL,             ISD_TEL_DDD,             ISD_TEL_NO,
               ISD_HP_NO,               ISD_E_MAIL,              ISD_FAX,                 ISD_ENRNER_RELATION_CD,  ISD_ENRNER_NAME,
               ISD_ENRNER_PSN_NO,       CONT_CD_GB,              CONT_CD,                 CONT_NAME,               CONT_RELATION_CD,
               CONT_ZIP_CD_GB,          CONT_ZIP_CD_DM_GB,       CONT_ZIP_CD,             CONT_ADDR_1,             CONT_ADDR_2,
               CONT_CALL_SITE_GB,       CONT_OFF_TEL_DDD,        CONT_OFF_TEL,            CONT_TEL_DDD,            CONT_TEL_NO,
               CONT_HP_NO,              CONT_E_MAIL,             CONT_FAX,                CAR_HAN_NO,              CAR_ID_GB,
               CAR_ID,                  CAR_APPR_NUM_TON,        CAR_OLD_R,               CAR_GAEK,                CAR_AMT,
               CAR_REG_DATE,            CAR_NO,                  CAR_OUT_NO,              CAR_NO_GB,               CAR_NO_L,
               CAR_NO_S1,               CAR_NO_S2,               CAR_NO_CITY,             CAR_USE,                 CAR_NM_CD,
               CAR_KIND_CD,             CAR_TYPE_CD,             CAR_UNIT_GAEK,           CAR_UNIT_AMT,            CAR_Y_TYPE,
               CAR_PASS_YEAR,           CAR_CC,                  CAR_ACC_GAEK,            CAR_ACC_AMT,             CAR_USE_USE,
               CAR_AIRBAG,              CAR_NM,                  CAR_COUNTRY,             CAR_GRADE,               CAR_RATE,
               CAR_ETC_GB,              CAR_ENG_TYPE,            PRE_CONT_CD,
               ENT_DGN_DATE,                                     APP_PRINT_DATE,          ENT_PRINT_DATE,          ENT_PATH,
               TREATY_HQ_CD,            TREATY_BRH_CD,           TREATY_CD,               CAR_SEQ,                 ENT_STATUS,
               USER_ID,                 CAR_NEW_GB,              ISD_CUST_NO,             CONT_CUST_NO
               )
        select
               v_ent_no,                CUST_NO,                 CO_NO,                   BCO_NO,                  OWN_CD,
               INDGRP_GB,               CONT_KIND,               CONT_TYPE,               B_ENT_AMT,               BASIC_PREM,
               NA_MTH,                  ISTAR_CONT_DATE,         IEND_CONT_DATE,          I_KIND_CD,               BNP_CNT,
               BNP_CNT_R,               CASH_MTH,                CASH_ENT_TYPE,           TOT_INSUR_AMT,           0,
               TOT_NAB_PREM,            RIDER_INSUR_AMT,         0,                       0,                       HOME_GB,
               CONT_YY,                 CONT_MM,                 CONT_DD,                 TOT_NAB_CNT,
               UNION_KIND,
               SHORT_DAY_GB,            SHORT_R,                 GRPCONT_DSC_R,           GRPCONT_DSC_CAR_R,       IENT_CARR_CD,            IENT_CARR_R,
               DSC_INC_CD,              DSC_INC_R,               SPCIAL_INC_R,            SPCIAL_INC_APPY,         ALL_DMBO_R,
               MUL_ACCI_RATE_CD,        ISD_P_CDGB,              ISD_CD,                  ISD_NAME,                ISD_CONT_RELATION_CD,
               ISD_ZIP_CD_GB,           ISD_ZIP_CD_DM_GB,        ISD_ZIP_CD,              ISD_ADDR_1,              ISD_ADDR_2,
               ISD_CALL_SITE_GB,        ISD_OFF_TEL_DDD,         ISD_OFF_TEL,             ISD_TEL_DDD,             ISD_TEL_NO,
               ISD_HP_NO,               ISD_E_MAIL,              ISD_FAX,                 ISD_ENRNER_RELATION_CD,  ISD_ENRNER_NAME,
               ISD_ENRNER_PSN_NO,       CONT_CD_GB,              CONT_CD,                 CONT_NAME,               CONT_RELATION_CD,
               CONT_ZIP_CD_GB,          CONT_ZIP_CD_DM_GB,       CONT_ZIP_CD,             CONT_ADDR_1,             CONT_ADDR_2,
               CONT_CALL_SITE_GB,       CONT_OFF_TEL_DDD,        CONT_OFF_TEL,            CONT_TEL_DDD,            CONT_TEL_NO,
               CONT_HP_NO,              CONT_E_MAIL,             CONT_FAX,                CAR_HAN_NO,              CAR_ID_GB,
               CAR_ID,                  CAR_APPR_NUM_TON,        CAR_OLD_R,               CAR_GAEK,                CAR_AMT,
               CAR_REG_DATE,            CAR_NO,                  CAR_OUT_NO,              CAR_NO_GB,               CAR_NO_L,
               CAR_NO_S1,               CAR_NO_S2,               CAR_NO_CITY,             CAR_USE,                 CAR_NM_CD,
               CAR_KIND_CD,             CAR_TYPE_CD,             CAR_UNIT_GAEK,           CAR_UNIT_AMT,            CAR_Y_TYPE,
               CAR_PASS_YEAR,           CAR_CC,                  CAR_ACC_GAEK,            CAR_ACC_AMT,             CAR_USE_USE,
               CAR_AIRBAG,              CAR_NM,                  CAR_COUNTRY,             CAR_GRADE,               CAR_RATE,
               CAR_ETC_GB,              CAR_ENG_TYPE,            PRE_CONT_CD,
               SYSDATE,                                          APP_PRINT_DATE,          ENT_PRINT_DATE,          ENT_PATH,
               TREATY_HQ_CD,            TREATY_BRH_CD,           TREATY_CD,               CAR_SEQ,                 '1',
               USER_ID,                 CAR_NEW_GB,              ISD_CUST_NO,             CONT_CUST_NO
          from TBIB0001
         where ENT_DGN_NO   =  i_ent_dgn_no;

         exception when others then
                   o_result := o_result || ' [TBIB0001 INSERT ERROR]  ';
                   --dbms_output.put_line(' [TBIB0001 INSERT ERROR]  '||sqlerrm);
    end;


    /****************************************************************************************/
    /* 차량 SEQ를 이용하여 현재 차량정보로 설계의 차량정보를 업데이트 한다.                 */
    /* 갱신을 위해 복사할 경우 배서에 의해 변경된 차량정보가 반영되기 위해서                */
    /* (20140424-LYH 설계복사 또는 갱신 시 이전 설계된 차량정보를 복사하게 되면 배서시 변경된 차량정보가 반영되지 않은 문제발생))*/
    /****************************************************************************************/
    begin
        update TBIB0001
           set (
               USER_ID
             , IT_PROCESSING
             , CAR_SEQ             , CAR_HAN_NO         , CAR_ID_GB
             , CAR_ID              , CAR_AMT            , CAR_REG_DATE       , CAR_NO
             , CAR_NO_GB           , CAR_NO_L           , CAR_NO_S1          , CAR_NO_S2
             , CAR_NO_CITY         , CAR_NM_CD          , CAR_KIND_CD        , CAR_TYPE_CD
             , CAR_UNIT_GAEK       , CAR_CC             , CAR_ACC_GAEK       , CAR_NM
             , CAR_COUNTRY         , CAR_GRADE          , CAR_RATE
               )  = (
        select (select USER_ID from TBIB0001 where ENT_DGN_NO = v_ent_no)
             , TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
             , A.CAR_SEQ           , A.HAN_CAR_NO       , DECODE(A.HAN_CAR_NO,NULL,'2','1')
             , A.CAR_ID            , A.CAR_AMT          , A.CAR_REG_DATE     , A.CAR_NO
             , A.CAR_NO_GB         , A.CAR_NO_L         , A.CAR_NO_S1        , A.CAR_NO_S2
             , A.CAR_NO_CITY       , A.CAR_NM_CD        , A.CAR_KIND_CD      , A.CAR_TYPE_CD
             , A.CAR_UNIT_GAEK     , A.CAR_CC           , A.CAR_ACC_GAEK     , A.CAR_NM
             , A.CAR_COUNTRY       , A.CAR_GRADE        , A.CAR_RATE
          from TBAA0101 A
         where A.CUST_NO = (select CUST_NO from TBIB0001 where ENT_DGN_NO = v_ent_no)
           and A.CAR_SEQ = (select CAR_SEQ from TBIB0001 where ENT_DGN_NO = v_ent_no)
               )
         where ENT_DGN_NO = v_ent_no;

         exception when others then
                   o_result := o_result || ' [TBIB0001 UPDATE FOR CAR_INFO ERROR]  ';
                   --dbms_output.put_line(' [TBIB0001 INSERT ERROR]  '||sqlerrm);

    end;

    /*********************************************/
    /* 자동차추가정보(TBIB0011) INSERT      */
    /*********************************************/
    begin
        insert  into TBIB0011(
                ENT_DGN_NO,
                INS_AIM_GB,              MLGUN_SEQ_NO,            MLGUN_CD,                MLGUN_NAME,              MADE_CO,
                ITEM_SPEC,               QTY,                     PRICE,                   MLGUN_AMT,               MLGUN_ENT_AMT,
                BUY_YM,                  REMARK
                )
        select
                v_ent_no,
                INS_AIM_GB,              MLGUN_SEQ_NO,            MLGUN_CD,                MLGUN_NAME,              MADE_CO,
                ITEM_SPEC,               QTY,                     PRICE,                   MLGUN_AMT,               MLGUN_ENT_AMT,
                BUY_YM,                  REMARK
          from  TBIB0011
         where  ENT_DGN_NO   =  i_ent_dgn_no;

        exception when others then
                  o_result := o_result || '자동차추가정보[TBIB0011 INSERT ERROR]  ';
                  --dbms_output.put_line('자동차추가정보[TBIB0011 INSERT ERROR] '||sqlerrm);
    end;

    /*********************************************/
    /* 특약특별요율(TBIB0012) INSERT      */
    /*********************************************/
    begin
        insert  into TBIB0012(
                ENT_DGN_NO,
                RIDER_ESP_GB,            RATE_CD,                 APPY_R,                  PREM,                    APPY_INS_AMT,
                APPY_DUCT_AMT
                )
        select
                v_ent_no,
                RIDER_ESP_GB,            RATE_CD,                 APPY_R,                  PREM,                    APPY_INS_AMT,
                APPY_DUCT_AMT
          from  TBIB0012
         where  ENT_DGN_NO   =  i_ent_dgn_no;

        exception when others then
                  o_result := o_result || '특약특별요율 [TBIB0012 INSERT ERROR]  ';
                  --dbms_output.put_line('특약특별요율 [TBIB0012 INSERT ERROR]'||sqlerrm);
    end;


    /*********************************************/
    /* 담보별분담금(TBIB0013) INSERT      */
    /* 2017.02.01 요율세분화 담보별 요율추가      */
    /*********************************************/
    begin
        insert  into TBIB0013(
                ENT_DGN_NO,
                BASIC_SCONT_GB,          DMBO_CD,                 ACDNT_RESP_WANT,         MAN_RESP_WANT,            INSUR_AMT,
                INSUR_AMT_GB,            DUCT_AMT_GB,             BASIC_PREM,
                APPY_PREM,               BASIC_RANGE_R,
                DMBO_START_DATE,         DMBO_END_DATE, GRP_DMBO_RATE
                )
        select
                v_ent_no,
                BASIC_SCONT_GB,          DMBO_CD,                 ACDNT_RESP_WANT,         MAN_RESP_WANT,            INSUR_AMT,
                INSUR_AMT_GB,            DUCT_AMT_GB,             BASIC_PREM,
                APPY_PREM,               BASIC_RANGE_R,
                DMBO_START_DATE,         DMBO_END_DATE, GRP_DMBO_RATE
          from  TBIB0013
         where  ENT_DGN_NO   =  i_ent_dgn_no;

        exception when others then
                  o_result := o_result || '담보별분담금 [TBIB0013 INSERT ERROR]  ';
                  --dbms_output.put_line('담보별분담금(TBIB0013) INSERT  : '||sqlerrm);
    end;

    /*********************************************/
    /* 담보기간별분담금(TBIB0014) INSERT    */
    /*********************************************/
    begin
        insert  into TBIB0014(
                ENT_DGN_NO,
                DMBO_CD,                 CALC_FYMD,               CALC_EYMD,               BASIC_PREM,               APPY_PREM
                )
        select
                v_ent_no,
                DMBO_CD,                 CALC_FYMD,               CALC_EYMD,               BASIC_PREM,               APPY_PREM
          from  TBIB0014
         where  ENT_DGN_NO   =  i_ent_dgn_no;

        exception when others then
                  o_result := o_result || '담보기간별분담금 [TBIB0014 INSERT ERROR]  ';
                 --dbms_output.put_line('담보기간별분담금 [TBIB0014 INSERT ERROR] '||sqlerrm);
    end;

    /*********************************************/
    /* 담보별분납계획(TBIB0015) INSERT    */
    /*********************************************/
    begin
        insert  into TBIB0015(
                ENT_DGN_NO,
                BNP_NO,                  SEQ_NO,                  DMBO_CD,                  BASIC_PREM,              DMBO_PREM,
                ISTAR_VALID_DATE,        IEND_VALID_DATE                      )
        select
                v_ent_no,
                BNP_NO,                  SEQ_NO,                  DMBO_CD,                  BASIC_PREM,              DMBO_PREM,
                ISTAR_VALID_DATE,        IEND_VALID_DATE
          from  TBIB0015
         where  ENT_DGN_NO   =  i_ent_dgn_no;

        exception when others then
                  o_result := o_result || '[담보별분납계획 TBIB0015 INSERT ERROR]  ';
                  --dbms_output.put_line('[담보별분납계획 TBIB0015 INSERT ERROR]  '||sqlerrm);
    end;


    /*********************************************/
    /* 분납계획(TBIB0016)         INSERT    */
    /*********************************************/
    begin
        insert  into TBIB0016(
                ENT_DGN_NO,
                BNP_NO,                  SEQ_NO,                  I_KIND_CD,                RCPT_CD,                 NA_DATE,
                ACCOUNT_MTH,             ACCOUNT_ID,
                MANG_NO,                 BNP_GUIDE_DATE,          BNP_RATION,               BNP_DATE,                BNP_PREM,
                BNP_DEDUCT_AMT,          PROC_STATUS,             RCPT_GB,                  RCPT_NO
                )
        select
                v_ent_no,
                BNP_NO,                  SEQ_NO,                  I_KIND_CD,                RCPT_CD,                 NA_DATE,
                ACCOUNT_MTH,             ACCOUNT_ID,
                MANG_NO,                 BNP_GUIDE_DATE,          BNP_RATION,               BNP_DATE,                BNP_PREM,
                BNP_DEDUCT_AMT,          PROC_STATUS,             RCPT_GB,                  RCPT_NO
          from  TBIB0016 A
         where  ENT_DGN_NO   =  i_ent_dgn_no;

        exception when others then
                  o_result := o_result || '분납계획 [TBIB0016 INSERT ERROR]  ';
                --dbms_output.put_line('분납계획 [TBIB0016 INSERT ERROR] '||sqlerrm);
    end;

    /*********************************************/
    /* 질권정보(TBIB0103)         INSERT    */
    /*********************************************/
    begin
        insert into TBIB0103(
                ENT_DGN_NO,
                PLG_SEQ,                 BCO_ENT_NO,              PLG_AMT,                  PLG_SPEC,                PLG_SETUP_DATE,
                PLG_CD,                  PLG_NAME,                ZIP_CD,                   ADDR_1,                  ADDR_2
                )
        select
                v_ent_no,
                PLG_SEQ,                 BCO_ENT_NO,              PLG_AMT,                  PLG_SPEC,                PLG_SETUP_DATE,
                PLG_CD,                  PLG_NAME,                ZIP_CD,                   ADDR_1,                  ADDR_2
          from  TBIB0103
         where  ENT_DGN_NO   =  i_ent_dgn_no;

        exception when others then
                  o_result := o_result || '질권정보 [TBIB0103 INSERT ERROR]  ';
                  --dbms_output.put_line('질권정보 [TBIB0103 INSERT ERROR]  '||sqlerrm);
    end;

    /*********************************************/
    /* 배서운전자정보(TBIB0104)   INSERT    */
    /*********************************************/
    begin
        insert  into TBIB0104(
                ENT_DGN_NO,
                DRV_SEQ,                 DRV_CARRER,              CONT_AGE,                 LICENSE_GB,               LICENSE_NO,
                LICENSE_DATE,            SEX_FM,                  DRV_GB,                   DRV_NAME,                 DRV_ID,
                ISD_P_REL,               DRV_HP_NO,               DRV_E_MAIL,               DRV_ZIP_CD_GB,            DRV_ZIP_CD,
                DRV_ADDR_1,              DRV_ADDR_2
                )
        select
                v_ent_no,
                DRV_SEQ,                 DRV_CARRER,              CONT_AGE,                 LICENSE_GB,               LICENSE_NO,
                LICENSE_DATE,            SEX_FM,                  DRV_GB,                   DRV_NAME,                 DRV_ID,
                ISD_P_REL,               DRV_HP_NO,               DRV_E_MAIL,               DRV_ZIP_CD_GB,            DRV_ZIP_CD,
                DRV_ADDR_1,              DRV_ADDR_2
          from  TBIB0104
         where  ENT_DGN_NO   =  i_ent_dgn_no;

        exception when others then
                  o_result := o_result || '배서-배서운전자정보 [TBID0104 INSERT ERROR] ';
                 --dbms_output.put_line(  '배서-배서운전자정보 [TBID0104 INSERT ERROR] '|| sqlerrm);
    end;



    if o_result is null then
       o_result := v_ent_no;
    end if;

-- commit;
exception when others then
    dbms_output.put_line('PR_ENT_POL_COPY Main Error: '||sqlerrm);
    raise_application_error(-20010, 'PR_ENT_POL_COPY Main Error: '||sqlerrm);
    o_result := o_result || 'Insert Eorror' ;

end ;
CREATE -- added during DDL generation.
procedure          PR_RENT_BUNAP_RATE(i_enter_no             varchar2
                                              ,i_dmbo_cd              varchar2
                                              ,i_na_mth               varchar2
                                              ,i_spcl_agre_gb         varchar2
                                              ,i_dmbo_basic_prem      number
                                              ,i_dmbo_appy_prem       number
                                              ,i_bnp_cnt              number
                                              ,i_istar_cont_date      date
                                              ,i_seq_no               number
                                              ,i_i_kind_cd            varchar2
                                              ,i_short_day_gb         varchar2
                                              ,i_iend_cont_date       date
                                              ,i_basic_year_prem      number
                                              ,i_appy_year_prem       number) as
/************************************************************************************/
/* StoredProcedure 명  : 담보기간별,담보별 분담계획 Insert                          */
/* Parameter           : [ In] i_enter_no           가입설계번호                    */
/*                       [ In] i_dmbo_cd            담보코드                        */
/*                       [ In] i_na_mth             납입방법 1:일시납               */
/*                                                           2:비연속분납           */
/*                                                           3:연속분납             */
/*                       [ In] i_spcl_agre_gb       특약코드('0')                   */
/*                       [ In] i_dmbo_basic_prem 담보 기본보험료(분담금)            */
/*                       [ In] i_dmbo_appy_prem  담보 적용보험료(분담금)            */
/*                       [ In] i_bnp_cnt            분할방법(2~6회)                 */
/*                       [ In] i_istar_cont_date    적용시작일                      */
/*                       [ In] i_seq_no             0                               */
/*                       [ In] i_i_kind_cd          보험(공제)종목                  */
/*                       [ In] i_iend_cont_date     적용종료일                      */
/*                       [ In] i_basic_year_prem    년간기본보험료                  */
/*                       [ In] i_appy_year_prem     년간적용보험료                  */
/* Description  :                                                                   */
/*  3회연속분납의 기준분담금이(i_dmbo_basic_prem) 가 50000원인 경우분담금 계산      */
/*                                                                                  */
/*          분납률(DVDPAY_RATE)                                                     */
/*     1회차           33.4                                                         */
/*     2회차           33.3                                                         */
/*     3회차           33.3                                                         */
/*                                                                                  */
/* 1. 1회차 이후의 분납금을 SUM 한다                                                */
/*   - nvl(sum(round(i_dmbo_basic_prem * (DVDPAY_RATE / 100),-1)),0)                */
/* 2. 1회차 분납금 계산                                                             */
/*   - i_dmbo_basic_prem -  V_SUM_BASIC_PREM (1회차이후 분납금 Sum)                 */
/* 3. 2회차 이후의 분납금 계산                                                      */
/*   - round(i_dmbo_basic_prem * (DVDPAY_RATE / 100),-1)                            */
/************************************************************************************/
V_BASIC_PREM            TBIB0015.BASIC_PREM%type;
V_DMBO_PREM             TBIB0015.DMBO_PREM%type;
V_DMBO_APPY_PREM        TBIB0015.DMBO_PREM%type;
V_SUM_BASIC_PREM        number :=0;
V_SUM_APPY_PREM         number :=0;
f_fn_rent_short_rate    number :=0;                                   --fn_rent_short_rate    함수 수행 결과값(단기요율)

BEGIN
--     delete from tbib0015 where ent_dgn_no = i_enter_no;

    /***************************************************************************/
    /* 단기계약의 경우 여기에서 단기요율을 계산한다.                           */
    /* 2013.06.18일 수정. 최재혁                                               */
    /***************************************************************************/
    if    i_short_day_gb = '2' then
        f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,i_istar_cont_date  ,i_iend_cont_date  ,i_istar_cont_date  ,i_iend_cont_date);
        f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

        V_DMBO_APPY_PREM  := round(i_dmbo_appy_prem * f_fn_rent_short_rate, -1);
    else
        V_DMBO_APPY_PREM  := i_dmbo_appy_prem;
    end if;


    /***************************************************************************/
    /* 담보코드 21(긴급출동),22(휴업손해),23(분담금할증한정)은 1회에 모두 납부 */
    /***************************************************************************/
    if    i_dmbo_cd not in ('21','22','23')  then
          /******************************************/
          /*****1회차 이후의 분납금 Sum을 한다********/
          /******************************************/
          select nvl(sum(round(i_dmbo_basic_prem * (DVDPAY_RATE / 100),-1)),0)
               , nvl(sum(round(V_DMBO_APPY_PREM  * (DVDPAY_RATE / 100),-1)),0)
            into V_SUM_BASIC_PREM
               , V_SUM_APPY_PREM
            from TBIB0205 A1
           where BUNAP_GB     = to_char(to_number(i_na_mth))
             and DVDPAY_GB    = to_char(i_bnp_cnt)
             and I_KIND_CD    = i_i_kind_cd
             and SPCL_AGRE_GB = i_spcl_agre_gb
             and APLY_FYMD   <= i_istar_cont_date
             and APLY_EYMD   >= i_istar_cont_date
             and NABIB_CNT    > 1 ;

          insert into TBIB0015
                       (ENT_DGN_NO
                      , BNP_NO
                      , SEQ_NO
                      , DMBO_CD
                      , BASIC_PREM
                      , DMBO_PREM
                      , ISTAR_VALID_DATE
                      , IEND_VALID_DATE
                       )
                 select i_enter_no
                      , NABIB_CNT            -- 납입횟차
                      , i_seq_no
                      , i_dmbo_cd
                      , i_dmbo_basic_prem -  V_SUM_BASIC_PREM  as NABIB_AMT     -- 1회차 기준분담금
                      , V_DMBO_APPY_PREM  -  V_SUM_APPY_PREM   as NABIB_AMT1    -- 1회차 적용분담금
                      , add_months(i_istar_cont_date , NABIB_MM)
                      , add_months(i_istar_cont_date , VALID_MM )
                  FROM  TBIB0205
                 where  BUNAP_GB     = to_char(to_number(i_na_mth))
                   and  DVDPAY_GB    = to_char(i_bnp_cnt)
                   and  I_KIND_CD    = i_i_kind_cd
                   and  SPCL_AGRE_GB = i_spcl_agre_gb
                   and  APLY_FYMD   <= i_istar_cont_date
                   and  APLY_EYMD   >= i_istar_cont_date
                   and  NABIB_CNT    = 1
                  UNION ALL
                 select i_enter_no
                      , NABIB_CNT            -- 납입횟차
                      , i_seq_no
                      , i_dmbo_cd
                      , round(i_dmbo_basic_prem * (DVDPAY_RATE / 100),-1)  as NABIB_AMT     -- 1회차 이후 기준분담금
                      , round(V_DMBO_APPY_PREM  * (DVDPAY_RATE / 100),-1)  as NABIB_AMT1    -- 1회차 이후 적용분담금
                      , add_months(i_istar_cont_date , NABIB_MM)
                      , add_months(i_istar_cont_date , VALID_MM )
                  FROM  TBIB0205
                 where  BUNAP_GB     = to_char(to_number(i_na_mth))
                   and  DVDPAY_GB    = to_char(i_bnp_cnt)
                   and  I_KIND_CD    = i_i_kind_cd
                   and  SPCL_AGRE_GB = i_spcl_agre_gb
                   and  APLY_FYMD   <= i_istar_cont_date
                   and  APLY_EYMD   >= i_istar_cont_date
                   and  NABIB_CNT    > 1 ;

    else
          insert into TBIB0015
                     ( ENT_DGN_NO
                     , BNP_NO
                     , SEQ_NO
                     , DMBO_CD
                     , BASIC_PREM
                     , DMBO_PREM
                     , ISTAR_VALID_DATE
                     , IEND_VALID_DATE
                     )
                select i_enter_no
                     , 1                                 -- 납입횟차
                     , i_seq_no
                     , i_dmbo_cd
                     , i_dmbo_basic_prem
                     , V_DMBO_APPY_PREM
                     , i_istar_cont_date        -- 20130422 TO_DATE 처리 최재혁
                     , i_iend_cont_date         -- 20130422 TO_DATE 처리 최재혁
                 from  dual;
    end if;

    /***********************************************/
    /***가입설계-담보별분납계획 담보별 Sum을 구함 **/
    /***********************************************/
    BEGIN
          select sum(BASIC_PREM)
               , sum(DMBO_PREM)
            into V_BASIC_PREM
               , V_DMBO_PREM
            from TBIB0015
           where ENT_DGN_NO = i_enter_no
             and DMBO_CD    = i_dmbo_cd;
    END;

    /***********************************************/
    /***TBTB0015 보험료 Sum을 TBIB0014에 Insert **/
    /***********************************************/
    BEGIN
          insert into TBIB0014
                       ( ENT_DGN_NO
                       , DMBO_CD
                       , CALC_FYMD
                       , CALC_EYMD
                       , BASIC_PREM
                       , APPY_PREM
                       )
                  select i_enter_no
                       , i_dmbo_cd
                       , to_date(to_char(i_istar_cont_date, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')       --20130425최재혁
                       , to_date(to_char(i_iend_cont_date, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')        --20130425최재혁
                       , V_BASIC_PREM
                       , V_DMBO_PREM
                    from dual;

    /***********************************************/
    /***TBTB0015 보험료 Sum을 TBIB0013에 Update  **/
    /***********************************************/
          update TBIB0013
             set DMBO_START_DATE = to_date(to_char(i_istar_cont_date, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS'),
                 DMBO_END_DATE   = to_date(to_char(i_iend_cont_date, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS'),
                 APPY_PREM       = V_DMBO_PREM,
                 BASIC_PREM      = V_BASIC_PREM,
                 BASIC_YEAR_PREM = i_basic_year_prem,
                 APPY_YEAR_PREM  = i_appy_year_prem
           where ENT_DGN_NO      = i_enter_no
             and BASIC_SCONT_GB in ( '1', '2' )
             and DMBO_CD        = i_dmbo_cd;
    END;

    exception when others
              then dbms_output.put_line('PR_RENT_BUNAP_RATE Main Error: '||sqlerrm);
                    raise_application_error(-20001, 'PR_RENT_BUNAP_RATE Error: '||sqlerrm);
END;
        l_log_data := l_log_data || '**99*01 [' || V_0012_INFO    ||']=V_0012_INFO' ||chr(13)||chr(10);

        begin
                   select GRPCONT_DSC_R         , nvl(DSC_INC_R,0)+nvl(SPCIAL_INC_R,0), CAR_KIND_CD    ,CAR_TYPE_CD , ISTAR_CONT_DATE
                    into s_grpcont_dsc_r                       /* [IN] 단체특성범위율    **************/
                        , s_dsc_tot_r                       /* [IN] 할인할증+특별할 **/
                        , s_car_kind_cd                         /* [IN] c차종  **************/
                        , s_car_type_cd                          /* [IN] 차종타입    **************/
                        , V_ISTAR_CONT_DATE
                    from  TBID0001T A
                   where  POL_NO   = i_pol_no
                     and  ENDOR_NO = i_endor_no_bef_max
                     and  WORK_DATE = to_date(i_work_date);

        end;

 /*2017.02.08 담보별 단체특성율 조회*/
 begin
  select GRP_DMBO_RATE
   into s_grp_dmbo_rate
  from  TBID0013T A
  where  POL_NO   = i_pol_no
  AND  ENDOR_NO = i_endor_no_bef_max
                 AND dmbo_cd = i_dmbo_cd
  AND  WORK_DATE = to_date(i_work_date)
                AND to_date(i_basis_to) >= TO_DATE(appy_from)
                AND to_date(i_basis_to) < TO_DATE(appy_to) ;
  end;

 l_log_data := l_log_data || '**99*01 [' || s_grpcont_dsc_r    ||']=특별요율' ||chr(13)||chr(10);
        l_log_data := l_log_data || '**99*01 [' || s_dsc_tot_r    ||']=할인할증+특별할' ||chr(13)||chr(10);
        l_log_data := l_log_data || '**99*01 [' || s_car_kind_cd    ||']=차종' ||chr(13)||chr(10);
        l_log_data := l_log_data || '**99*01 [' || s_car_type_cd    ||']=차종타입' ||chr(13)||chr(10);
        l_log_data := l_log_data || '**99*01 [' || V_ISTAR_CONT_DATE    ||']=원보험시기' ||chr(13)||chr(10);

         PR_RENT_SPECIAL_RATE('2'          ,i_pol_no        ,i_endor_no-1           ,i_i_kind_cd      ,s_car_kind_cd
                              ,s_car_type_cd         ,V_ISTAR_CONT_DATE      ,i_dmbo_cd       ,V_0012_INFO      ,s_special_rate
                              ,s_treat_rate);

    l_log_data := l_log_data || '**99*01 [' || s_special_rate    ||']=특별요율' ||chr(13)||chr(10);
        l_log_data := l_log_data || '**99*01 [' || s_treat_rate    ||']=연령한정' ||chr(13)||chr(10);

        IF V_ENDOR_GB <> '6' THEN

            begin

                SELECT A.INSUR_AMT_GB
                  INTO s_dmbo_ent_amt_gb
                  FROM TBID0013T A
                 WHERE A.POL_NO = i_pol_no
                   AND ENDOR_NO = i_endor_no_bef_max
                   AND dmbo_cd = i_dmbo_cd
                   /* 20150430 당일배서시 여러건 나오는 문제 부분*/
                   AND A.WORK_DATE       = to_date(i_work_date)
                   AND to_date(i_basis_to) >= TO_DATE(appy_from)
                   AND to_date(i_basis_to) < TO_DATE(appy_to)
                ;
            END;

        ELSE

  BEGIN
              SELECT CASE WHEN (SELECT A.INSUR_AMT_GB
                    FROM TBID0013T A
                   WHERE A.POL_NO = i_pol_no
                     AND ENDOR_NO = i_endor_no-1
                     AND dmbo_cd = i_dmbo_cd
                     AND A.WORK_DATE       = to_date(i_work_date)
                     /* 20150430 당일배서시 여러건 나오는 문제 부분*/
                     /*AND to_date(i_basis_to) BETWEEN TO_DATE(appy_from) AND TO_DATE(appy_to)*/
                     AND to_date(i_basis_to) >= TO_DATE(appy_from)
                     AND to_date(i_basis_to) < TO_DATE(appy_to)
                     ) IS NULL THEN '99'
                     ELSE (SELECT A.INSUR_AMT_GB
                    FROM TBID0013T A
                   WHERE A.POL_NO = i_pol_no
                     AND ENDOR_NO = i_endor_no-1
                     AND dmbo_cd = i_dmbo_cd
                     AND A.WORK_DATE       = to_date(i_work_date)
                     /* 20150430 당일배서시 여러건 나오는 문제 부분*/
                     /*AND to_date(i_basis_to) BETWEEN TO_DATE(appy_from) AND TO_DATE(appy_to)*/
                     AND to_date(i_basis_to) >= TO_DATE(appy_from)
                     AND to_date(i_basis_to) < TO_DATE(appy_to)
                     ) END
                     INTO s_dmbo_ent_amt_gb
                     FROM dual
                ;
            END;

        END IF;


        l_log_data := l_log_data || '**99*01 [' || s_dmbo_ent_amt_gb    ||']=가입금액' ||chr(13)||chr(10);

        IF s_dmbo_ent_amt_gb <> '99' THEN

          if '20160331' BETWEEN TO_CHAR(i_basis_from,'YYYYMMDD') AND TO_CHAR(i_basis_to,'YYYYMMDD') THEN

            l_log_data := l_log_data || '**99*01**구간' ||chr(13)||chr(10);

              BEGIN

                  SELECT
                          CASE WHEN B.DMBO_CD IN ('01','02','03','13') THEN
                              ROUND(B.BASIC_PREM*(TO_DATE('20160331','yyyymmdd') - TO_DATE(i_basis_from))/s_tot_date +
                                   (SELECT C.BASIC_PREM*(TO_DATE(i_basis_to) - to_date('20160331', 'yyyymmdd'))/s_tot_date
                                      FROM TBIB0203 C
                                     WHERE B.DMBO_ENT_AMT_GB = C.DMBO_ENT_AMT_GB
                                       AND B.DMBO_CD = C.DMBO_CD
                                       AND C.DMBO_CD = i_dmbo_cd
                                       AND C.I_KIND_CD = i_i_kind_cd
                                       AND B.CAR_KIND = C.CAR_KIND
                                       AND B.CAR_KIND2 = C.CAR_KIND2
                                       AND C.APLY_FYMD >= to_date(i_istar_cont_date)
                                       --AND C.APLY_EYMD >= to_date(i_basis_to)
     AND C.APLY_EYMD < TO_DATE('20170301'))
                              )
                          ELSE
                            B.BASIC_PREM
                          END
                        INTO s_0203_basic_prem
                        FROM /*TBID0013 A ,*/
                             TBIB0203 B
                       WHERE  1=1
                             /*AND A.POL_NO          = i_pol_no*/
                             /*AND  ENDOR_NO        = i_endor_no*/
                             AND B.DMBO_ENT_AMT_GB = s_dmbo_ent_amt_gb
                             /*AND A.DMBO_CD = B.DMBO_CD*/
                             AND B.DMBO_CD = i_dmbo_cd
                             AND B.I_KIND_CD = i_i_kind_cd
                             AND B.CO_GB = '0'
                             AND B.CAR_KIND = i_car_kind_cd
                             AND B.CAR_KIND2 = i_car_type_cd
                             AND B.APLY_FYMD <= TO_DATE(i_istar_cont_date) /* 20130422 TO_DATE 처리 최재혁 */
                             AND B.APLY_EYMD >= TO_DATE(i_istar_cont_date) /* 20130422 TO_DATE 처리 최재혁 */
                    ;

              END;

          ELSE
  l_log_data := l_log_data || '**99*01**비구간' ||chr(13)||chr(10);

  IF TO_DATE(i_istar_cont_date) >='20170301' THEN
   BEGIN
     select ROUND(B.BASIC_PREM*((TO_DATE(i_basis_to) - TO_DATE(i_basis_from)) / s_tot_date))
       into s_0203_basic_prem
       from /*TBID0013t A,*/
       TBIB0203 B
     where 1=1/*A.POL_NO          = i_pol_no*/
       /*and  ENDOR_NO         = i_endor_no*/
      /*AND A.INSUR_AMT_GB = B.DMBO_ENT_AMT_GB*/
      AND B.DMBO_ENT_AMT_GB = s_dmbo_ent_amt_gb
      /*AND A.DMBO_CD = B.DMBO_CD*/
      AND B.DMBO_CD = i_dmbo_cd
      AND B.I_KIND_CD = i_i_kind_cd
      AND B.CO_GB = '0'
      AND B.CAR_KIND = i_car_kind_cd
      AND B.CAR_KIND2 = i_car_type_cd
      AND B.APLY_FYMD <= TO_DATE(i_basis_from) /* 20130422 TO_DATE 처리 최재혁 */
      AND B.APLY_EYMD >= TO_DATE(i_basis_from) /* 20130422 TO_DATE 처리 최재혁 */
      /*AND A.APPY_FROM <= TO_DATE(i_basis_from)*/
      /*AND A.APPY_TO >= TO_DATE(i_basis_from)*/
      /*AND A.WORK_DATE       = to_date(i_work_date)*/
     ;

   END;
  ELSE
   IF TO_DATE(i_basis_from)  >= '20170301' THEN
    BEGIN
      SELECT ROUND(B.BASIC_PREM*((TO_DATE(i_basis_to) - TO_DATE(i_basis_from)) / s_tot_date))
        into s_0203_basic_prem
       from
        TBIB0203 B
      where 1=1
       AND B.DMBO_ENT_AMT_GB = s_dmbo_ent_amt_gb
       AND B.DMBO_CD = i_dmbo_cd
       AND B.I_KIND_CD = i_i_kind_cd
       AND B.CO_GB = '0'
       AND B.CAR_KIND = i_car_kind_cd
       AND B.CAR_KIND2 = i_car_type_cd
       AND B.APLY_FYMD <= TO_DATE(i_basis_from)
       AND B.APLY_FYMD >= TO_DATE('20160401')
      AND B.APLY_EYMD < TO_DATE('20170301')
        ;
     END;
   ELSIF TO_DATE(i_basis_from) >='20160401' THEN
    BEGIN
      SELECT ROUND(B.BASIC_PREM*((TO_DATE(i_basis_to) - TO_DATE(i_basis_from)) / s_tot_date))
        into s_0203_basic_prem
       from
        TBIB0203 B
      where 1=1
       AND B.DMBO_ENT_AMT_GB = s_dmbo_ent_amt_gb
       AND B.DMBO_CD = i_dmbo_cd
       AND B.I_KIND_CD = i_i_kind_cd
       AND B.CO_GB = '0'
       AND B.CAR_KIND = i_car_kind_cd
       AND B.CAR_KIND2 = i_car_type_cd
       AND B.APLY_FYMD <= TO_DATE(i_basis_from)
      AND B.APLY_EYMD >= TO_DATE('20160401')
        ;
     END;
   ELSE
    BEGIN
      SELECT ROUND(B.BASIC_PREM*((TO_DATE(i_basis_to) - TO_DATE(i_basis_from)) / s_tot_date))
        into s_0203_basic_prem
       from
        TBIB0203 B
      where 1=1
       AND B.DMBO_ENT_AMT_GB = s_dmbo_ent_amt_gb
       AND B.DMBO_CD = i_dmbo_cd
       AND B.I_KIND_CD = i_i_kind_cd
       AND B.CO_GB = '0'
       AND B.CAR_KIND = i_car_kind_cd
       AND B.CAR_KIND2 = i_car_type_cd
       AND B.APLY_FYMD >= TO_DATE(i_basis_from)
       AND B.APLY_EYMD < TO_DATE('20170301')
        ;
    END;
   END IF;
  END IF;

          END IF;

        END IF;

    ELSE

      if '20160331' BETWEEN TO_CHAR(i_basis_from,'YYYYMMDD') AND TO_CHAR(i_basis_to,'YYYYMMDD') THEN

          l_log_data := l_log_data || '**99*01**구간' ||chr(13)||chr(10);

            BEGIN

                SELECT
                        CASE WHEN B.DMBO_CD IN ('01','02','03','13') THEN
                            ROUND(B.BASIC_PREM*(TO_DATE('20160331','yyyymmdd') - TO_DATE(i_basis_from))/s_tot_date +
                                 (SELECT C.BASIC_PREM*(TO_DATE(i_basis_to) - to_date('20160331','yyyymmdd'))/s_tot_date
                                    FROM TBIB0203 C
                                   WHERE B.DMBO_ENT_AMT_GB = C.DMBO_ENT_AMT_GB
                                     AND B.DMBO_CD = C.DMBO_CD
                                     AND C.DMBO_CD = i_dmbo_cd
                                     AND C.I_KIND_CD = i_i_kind_cd
                                     AND B.CAR_KIND = C.CAR_KIND
                                     AND B.CAR_KIND2 = C.CAR_KIND2
                                     AND C.APLY_FYMD >= to_date(i_istar_cont_date)
                                     --AND C.APLY_EYMD >= to_date(i_basis_to)
     AND C.APLY_EYMD < TO_DATE('20170301'))
                            )
                        ELSE
                          B.BASIC_PREM
                        END
                      INTO s_0203_basic_prem
                      FROM TBID0013T A ,
                           TBIB0203 B
                     WHERE  A.POL_NO          = i_pol_no
                         and  ENDOR_NO        = i_endor_no
                           AND A.INSUR_AMT_GB = B.DMBO_ENT_AMT_GB
                           AND A.DMBO_CD = B.DMBO_CD
                           AND A.DMBO_CD = i_dmbo_cd
                           AND B.I_KIND_CD = i_i_kind_cd
                           AND B.CO_GB = '0'
                           AND B.CAR_KIND = i_car_kind_cd
                           AND B.CAR_KIND2 = i_car_type_cd
                           AND B.APLY_FYMD <= TO_DATE(i_istar_cont_date) /* 20130422 TO_DATE 처리 최재혁 */
                           AND B.APLY_EYMD >= TO_DATE(i_istar_cont_date) /* 20130422 TO_DATE 처리 최재혁 */
                           AND A.WORK_DATE = to_date(i_work_date)
                  ;

            END;

        ELSE
  l_log_data := l_log_data || '**99*01**비구간' ||chr(13)||chr(10);
  IF TO_DATE(i_istar_cont_date) >= '20170301' THEN
   BEGIN
      select ROUND(B.BASIC_PREM*((TO_DATE(i_basis_to) - TO_DATE(i_basis_from)) / s_tot_date))
     into s_0203_basic_prem
    from TBID0013T A
        , TBIB0203 B
       where A.POL_NO          = i_pol_no
      and  ENDOR_NO         = i_endor_no
        AND A.INSUR_AMT_GB = B.DMBO_ENT_AMT_GB
        AND A.DMBO_CD = B.DMBO_CD
        AND A.DMBO_CD = i_dmbo_cd
        AND B.I_KIND_CD = i_i_kind_cd
        AND B.CO_GB = '0'
        AND B.CAR_KIND = i_car_kind_cd
        AND B.CAR_KIND2 = i_car_type_cd
        AND B.APLY_FYMD <= TO_DATE(i_basis_from) /* 20130422 TO_DATE 처리 최재혁 */
        AND B.APLY_EYMD >= TO_DATE(i_basis_from) /* 20130422 TO_DATE 처리 최재혁 */
        AND A.WORK_DATE       = to_date(i_work_date)
    ;
   END;
  ELSE
   IF TO_DATE(i_basis_from)  >= '20170301' THEN
    BEGIN
       select ROUND(B.BASIC_PREM*((TO_DATE(i_basis_to) - TO_DATE(i_basis_from)) / s_tot_date))
     into s_0203_basic_prem
     from TBID0013T A
        , TBIB0203 B
     where A.POL_NO          = i_pol_no
        AND  ENDOR_NO         = i_endor_no
        AND A.INSUR_AMT_GB = B.DMBO_ENT_AMT_GB
        AND A.DMBO_CD = B.DMBO_CD
        AND A.DMBO_CD = i_dmbo_cd
        AND B.I_KIND_CD = i_i_kind_cd
        AND B.CO_GB = '0'
        AND B.CAR_KIND = i_car_kind_cd
        AND B.CAR_KIND2 = i_car_type_cd
        AND B.APLY_FYMD <= TO_DATE(i_basis_from)
        AND B.APLY_FYMD >= TO_DATE('20160401')
        AND B.APLY_EYMD < TO_DATE('20170301')
      ;
    END;
   ELSIF TO_DATE(i_basis_from)  >= '20160401' THEN
    BEGIN
       select ROUND(B.BASIC_PREM*((TO_DATE(i_basis_to) - TO_DATE(i_basis_from)) / s_tot_date))
     into s_0203_basic_prem
     from TBID0013T A
        , TBIB0203 B
     where A.POL_NO          = i_pol_no
        AND  ENDOR_NO         = i_endor_no
        AND A.INSUR_AMT_GB = B.DMBO_ENT_AMT_GB
        AND A.DMBO_CD = B.DMBO_CD
        AND A.DMBO_CD = i_dmbo_cd
        AND B.I_KIND_CD = i_i_kind_cd
        AND B.CO_GB = '0'
        AND B.CAR_KIND = i_car_kind_cd
        AND B.CAR_KIND2 = i_car_type_cd
        AND B.APLY_FYMD <= TO_DATE(i_basis_from)
        AND B.APLY_EYMD >= TO_DATE('20160401')
      ;
    END;
   ELSE
    BEGIN
       select ROUND(B.BASIC_PREM*((TO_DATE(i_basis_to) - TO_DATE(i_basis_from)) / s_tot_date))
     into s_0203_basic_prem
     from TBID0013T A
        , TBIB0203 B
     where A.POL_NO          = i_pol_no
        AND  ENDOR_NO         = i_endor_no
        AND A.INSUR_AMT_GB = B.DMBO_ENT_AMT_GB
        AND A.DMBO_CD = B.DMBO_CD
        AND A.DMBO_CD = i_dmbo_cd
        AND B.I_KIND_CD = i_i_kind_cd
        AND B.CO_GB = '0'
        AND B.CAR_KIND = i_car_kind_cd
        AND B.CAR_KIND2 = i_car_type_cd
        AND B.APLY_FYMD >= TO_DATE(i_basis_from)
        AND B.APLY_EYMD < TO_DATE('20170301')
      ;
    END;
   END IF;
  END IF;
        END IF;

      s_grpcont_dsc_r := i_grpcont_dsc_r;
        s_dsc_tot_r := i_dsc_tot_r;
        s_car_kind_cd := i_car_kind_cd;
        s_car_type_cd := i_car_type_cd;
        s_special_rate := i_special_rate;
        s_treat_rate := i_treat_rate;
    END IF;







    /********************************/
   /* 00.기본보험료 세팅 **/
   /********************************/
   s_dmbo_basic_prem  :=   s_0203_basic_prem;
                                    l_log_data := l_log_data || '*99*000* [' || s_0203_basic_prem ||']=기본보험료' ||chr(13)||chr(10);


   If    i_dmbo_cd  not in ('21','22','23') then

         /********************************/
         /* 30.(가입경력+법규율) 곱하기 **/
         /********************************/
                                         l_log_data := l_log_data || '*99*031* [' || i_ient_carr_r    ||']=가입경력'              ||chr(13)||chr(10);
         if    i_ient_carr_r > 0 then  /* 가입경력이 0보다 클때*/
               s_dmbo_appy_prem := s_dmbo_basic_prem * trunc(i_ient_carr_r/100, 5);
                                         l_log_data := l_log_data || '*99*032* [' || s_dmbo_appy_prem ||']=기본보험료 * 가입경력' ||chr(13)||chr(10);
         else
               s_dmbo_appy_prem := s_dmbo_basic_prem;
         end if;
                                         l_log_data := l_log_data || '*99*033* [' || s_dmbo_appy_prem ||']=적용보험료'            ||chr(13)||chr(10);

         /*****************************************/
         /* 40.적용요율(할인할증+특별할증)곱하기 **/
         /*****************************************/
                                         l_log_data := l_log_data || '*99*041* [' || s_dsc_tot_r      ||']=할인할증+특별할증'     ||chr(13)||chr(10);
         if    i_dsc_tot_r > 0 then    /* 할인할증이 0보다 클때*/
               s_dmbo_appy_prem := s_dmbo_appy_prem * trunc(i_dsc_tot_r/100, 3);
         end if;
                                         l_log_data := l_log_data || '*99*043* [' || s_dmbo_appy_prem ||']=적용보험료 * (할인할증+특별할증)'    ||chr(13)||chr(10);
         /**********************/
         /* 50. 특약/특별요율 **/
         /**********************/
                                         l_log_data := l_log_data || '*99*051* [' || s_special_rate    ||']=특별요율' ||chr(13)||chr(10);
                                         l_log_data := l_log_data || '*99*052* [' || s_treat_rate      ||']=연령한정요율'   ||chr(13)||chr(10);

         if    i_dmbo_cd in ('03' ,'13','06') then

               /***************/
               /* 70.물적할증**/
               /***************/
                                         l_log_data := l_log_data || '*99*071* [' || i_fn_rent_mul_acci_rate   ||']=물적할증요율'  ||chr(13)||chr(10);

               if      i_fn_rent_mul_acci_rate > 0 then  /* 특별할증이 0보다 클때*/
                       s_dmbo_appy_prem := s_dmbo_appy_prem * trunc(i_fn_rent_mul_acci_rate/100, 3);
               end if;
                                         l_log_data := l_log_data || '*99*073* [' || s_dmbo_appy_prem ||']=적용보험료 * 물적할증요율' ||chr(13)||chr(10);

               s_dmbo_appy_prem := s_dmbo_appy_prem * trunc(s_special_rate/100, 3) * trunc(s_treat_rate, 3) ;
                                         l_log_data := l_log_data || '*99*076* [' || s_dmbo_appy_prem ||']=적용보험료 * 특별요율 * 연령한정요율' ||chr(13)||chr(10);
         else
               s_dmbo_appy_prem := s_dmbo_appy_prem * trunc(s_special_rate/100, 3) * trunc(s_treat_rate, 3) ;
                                         l_log_data := l_log_data || '*99*053* [' || s_dmbo_appy_prem  ||']=적용보험료*특별요율*연령한정요율'   ||chr(13)||chr(10);
         end if;

         /*****************************/
         /*  80. 단체업체특성범위요율 */
         /*****************************/
                                         l_log_data := l_log_data || '*99*081* [' || s_grpcont_dsc_r     ||']=단체특성범위율' ||chr(13)||chr(10);
                                         l_log_data := l_log_data || '*99*082* [' || i_indgrp_gb         ||']=개별단체구분'   ||chr(13)||chr(10);
        /*2017.02.08 요율세분화 추가*/
 IF TO_CHAR(i_istar_cont_date,'YYYYMMDD')  < '20170401' THEN
  if     s_grpcont_dsc_r != 0  then
           s_dmbo_appy_prem := s_dmbo_appy_prem * (trunc(s_grpcont_dsc_r/100, 4) );
  END IF;
 ELSE
  s_dmbo_appy_prem := s_dmbo_appy_prem * (TRUNC(s_grp_dmbo_rate/100, 4) );
 END IF;


                                         l_log_data := l_log_data || '*99*084* [' || s_dmbo_appy_prem    ||']=적용보험료 * 단체특성범위율' ||chr(13)||chr(10);
         /*********************************************************************************************************/
         /*  81. 분납할증                                                                                         */
         /* 단기자차(s_0203_calc_gb='3')는 일시납이므로 계산하지 않는다. 20130513 추가                            */
         /* 분납할증 안하기로 했다가 다시 해달라 해서 원복처리함...20130514_최재혁                                */
         /*********************************************************************************************************/
         s_dmbo_appy_prem  := s_dmbo_appy_prem * (i_dvdadd_rate/100);
                                        l_log_data := l_log_data || '*99*085* [' || i_dvdadd_rate/100     ||']=분납할증율/100' ||chr(13)||chr(10);


   Else
          s_dmbo_appy_prem   := s_dmbo_basic_prem;
          s_basic_year_prem  := s_dmbo_basic_prem;
          s_appy_year_prem   := s_dmbo_basic_prem;

   End if;

    s_appy_year_prem := round(s_appy_year_prem/10, 0) * 10 ;  /*년간적용보험료(일할/단기 적용전)*/

     s_dmbo_appy_prem := round(s_dmbo_appy_prem/10, 0) ;
                                     l_log_data  := l_log_data || '*99*111* [' || s_dmbo_appy_prem ||']=round(적용보험료/10, 0)' ||chr(13)||chr(10);

     s_dmbo_appy_prem := s_dmbo_appy_prem * 10;
                                     l_log_data  := l_log_data || '*99*112* [' || s_dmbo_appy_prem ||']=적용보험료 * 10'         ||chr(13)||chr(10);


    IF  o_result is null THEN
        o_result  := 'OK' || '|' || s_dmbo_appy_prem || '|' || s_dmbo_basic_prem;
    END IF;

    l_log_data := l_log_data ||'3*01 [' || o_result    ||']=o_result'    ||chr(13)||chr(10);
    l_log_data := l_log_data ||'3*02 Good Bye......Endors'               ||chr(13)||chr(10);

    /************************/
    /* Log 남기기         ***/
    /************************/
    IF    l_log_level = 1 or nvl(regexp_substr(l_log_step,i_dmbo_cd),' ') = i_dmbo_cd then
        PR_INSERT_LOG(l_log_date,l_log_sp_name,l_log_no,'배서[분담금가져오기]',i_dmbo_cd,l_log_data);
    END IF;
    l_log_data := '';

    exception when others then dbms_output.put_line('PR_RENT_ENDOR_BUNAP_AMT Main Error[999]: '||sqlerrm);
                               raise_application_error(-20001, 'PR_RENT_ENDOR_BUNAP_AMT Main Error[999]: '||sqlerrm);
END;
CREATE OR replace
PROCEDURE          KRMA_APP.PR_RENT_C_ENDOR_BUNAP_AMT (i_pol_no              in  varchar2
                                                     ,i_endor_no            in  number
                                                     ,i_dmbo_cd             in  varchar2
                                                     ,i_dmbo_basic_prem     in  number
                                                     ,i_dmbo_appy_prem      in  number
                                                     ,i_istar_cont_date     in  date
                                                     ,i_i_kind_cd           in  varchar2
                                                     ,i_iend_cont_date      in  date
                                                     ,i_basis_from          in  date
                                                     ,i_basis_to            in  date
                                                     ,i_user_id             in  tbid0014.user_id%type
                                                     ,i_car_kind_cd         in  TBID0001.CAR_KIND_CD%TYPE
                                                     ,i_car_type_cd         in  TBID0001.CAR_TYPE_CD%TYPE
                                                     ,i_ient_carr_r         in  TBID0001.IENT_CARR_R%TYPE
                                                     ,i_dsc_tot_r           in  TBIB0001.SPCIAL_INC_R%TYPE
                                                     ,i_special_rate        in  NUMBER
                                                     ,i_treat_rate          in  NUMBER
                                                     ,i_fn_rent_mul_acci_rate     in  NUMBER
                                                     ,i_grpcont_dsc_r      in  TBIB0001.GRPCONT_DSC_R%TYPE
                                                     ,i_indgrp_gb      in TBID0001.INDGRP_GB%TYPE
                                                     ,i_dvdadd_rate    in  TBIB0205.DVDADD_RATE%TYPE
                                                     ,i_gubun          IN  VARCHAR2
                                                     ,i_work_date          in  DATE
                                                     ,i_endor_cd       in  VARCHAR2
                                                     ,i_endor_no_bef_max    in  number
                                                     ,o_result              out varchar2) AS

/**************************************************************************************************************************/
/* Procedure Name :  PR_RENT_C_ENDOR_BUNAP_AMT                                                                              */
/* Function       :  배서 담보별 기본 적용  보험료 산정(구간 일할만)                                                      */
/* Parameter  i_pol_no             [ IN] 증권번호                                                                         */
/*            i_endor_no           [ IN] 배서번호                                                                         */
/*            i_endor_no_bef_max   [ IN] 이전배서번호(당일 배서가 2회 이상 발생시 처리 하기 위함                          */
/*            i_dmbo_cd            [ IN] 담보코드                                                                         */
/*            i_dmbo_basic_prem    [ IN] 담보 기본보험료                                                                  */
/*            i_dmbo_appy_prem     [ IN] 담보 적용보험료                                                                  */
/*            i_istar_cont_date    [ IN] 보험시기                                                                         */
/*            i_i_kind_cd          [ IN] 보험종목                                                                         */
/*            i_iend_cont_date     [ IN] 보험종기                                                                         */
/*            i_basis_from         [ IN] 적용시작일                                                                       */
/*            i_basis_to           [ IN] 적용종료일                                                                       */
/*            i_user_id            [ IN] 사용자번호                                                                       */
/*            i_car_kind_cd        [ IN] 차종                                                                             */
/*            i_car_type_cd        [ IN] 차종세분                                                                         */
/*            i_ient_carr_r        [ IN] 가입경력율                                                                       */
/*            i_dsc_tot_r          [ IN] 할인할증+특별할증                                                                */
/*            i_special_rate       [ IN] 특별요율                                                                         */
/*            i_treat_rate         [ IN] 연령한정요율                                                                     */
/*            i_fn_rent_mul_acci_rate      [ IN] 물적할증요율                                                             */
/*            i_grpcont_dsc_r      [ IN] 단체특성범위율                                                                   */
/*            i_indgrp_gb          [ IN] 개별단체구분                                                                     */
/*            i_dvdadd_rate        [ IN] 분납할증율                                                                        */
/*            o_result             [Out] sp 결과(보험료)                                                                  */
/**************************************************************************************************************************/

V_RETURN_AMT1                number;
V_RETURN_AMT2                number;

s_0203_basic_prem            number;         /*기본보험료*/

s_dmbo_basic_prem            number:=0;

s_dmbo_appy_prem   number:=0;
s_basic_year_prem  number:=0;
s_appy_year_prem   number:=0;


f_idx1                       number;
f_idx2                       number;

s_tot_date                NUMBER:=0;
V_0012_INFO                         varchar2(300);

s_grpcont_dsc_r      TBIB0001.GRPCONT_DSC_R%TYPE := 0.0;
s_dsc_tot_r          TBIB0001.SPCIAL_INC_R%TYPE := 0.0;
s_car_kind_cd        TBIB0001.CAR_KIND_CD%TYPE;
s_car_type_cd        TBIB0001.CAR_TYPE_CD%TYPE;
s_grp_dmbo_rate VARCHAR2(100); /*2017.02.08 담보별단체특성율*/

s_dmbo_ent_amt_gb  VARCHAR2(2) := '';
V_ENDOR_GB         varchar2(2);
V_ISTAR_CONT_DATE    TBIB0001.ISTAR_CONT_DATE%TYPE;           /*[IN] 보험시기     (보험료 계산 기준 일자)*/


  /***특별요율 변수 *******/
     s_special_rate                      number := 100;                           /* [특별요율]*/
     s_treat_rate                        number := 1.0;

/******************/
/*** lOG 변수 *****/
/******************/
l_log_level                  number        := 1;                                  /* 로그레벨[0~1]: 0->l_log_step에 정의된 항목과 찍는다..  1->모두찍는다.)*/
l_log_sp_name                varchar2(50)  := 'PR_RENT_AMT[PR_RENT_ENDOR_BUNAP_AMT_TEST]' ;        /* 로그 Stored Procedure Name*/
l_log_data                   varchar2(4000);
l_log_date                   varchar2(16)  := to_char(sysdate,'yyyymmddhh24miss');
l_log_step                   varchar2(100) :='';   /* 담보코드: '01 02 03 13 04 05 06 07 21 22 23 99'*/
l_log_no                     varchar2(20)  := i_pol_no ||'-'|| i_endor_no;

BEGIN
    o_result :=null ;
  l_log_data := l_log_data || '**99[' || i_gubun           ||']=i_gubun'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_pol_no           ||']=증권번호'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_endor_no         ||']=배서번호'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_endor_no_bef_max ||']=이전배서번호'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_dmbo_basic_prem  ||']=기본보험료'          ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_dmbo_appy_prem   ||']=적용보험료'          ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_istar_cont_date  ||']=보험시기'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_i_kind_cd        ||']=보험종목'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_iend_cont_date   ||']=보험종기'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_basis_from       ||']=기준일'              ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_basis_to         ||']=적용종료일'          ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_user_id          ||']=User Id'             ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_car_kind_cd      ||']=차종'             ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_car_type_cd      ||']=차종세분'             ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_ient_carr_r      ||']=가입경력율'             ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_dsc_tot_r        ||']=할인할증+특별할증'             ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_special_rate     ||']=특별요율'             ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_treat_rate       ||']=연령한정요율'             ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_fn_rent_mul_acci_rate          ||']=물적할증요율'             ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_grpcont_dsc_r    ||']=단체특성범위율'             ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_indgrp_gb        ||']=개별단체구분'             ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_dvdadd_rate      ||']=분납할증율'             ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_endor_cd      ||']=배서코드'             ||chr(13)||chr(10);

    /*배서구분: 배서코드 첫자리*/
    V_ENDOR_GB := substr(i_endor_cd, 1, 1);

     /*최초 일할 계산용 분담금 가져오기*/

    if '20160229' BETWEEN TO_CHAR(i_istar_cont_date,'YYYYMMDD') AND TO_CHAR(i_iend_cont_date,'YYYYMMDD') THEN
     s_tot_date := 366;
    ELSE
      s_tot_date := 365;
    END IF;

    IF i_gubun IN ('(5)','(6)') then

        /*****************************************************************/
        /*** 특별약관 코드 및 특별요율 코드 조회 *************************/
        /*****************************************************************/
        begin
             select to_char(replace(WM_CONCAT(RATE_CD),',','|'))
               into V_0012_INFO
               from TBID0012T
             where POL_NO    = i_pol_no
               and ENDOR_NO  = i_endor_no_bef_max
               and WORK_DATE = to_date(i_work_date);

        end;

                                              l_log_data := l_log_data || '2*'|| f_idx2 || '-02[' || s_bunhal_nabib_cnt         ||']=납입회차'       ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*'|| f_idx2 || '-03[' || s_bunhal_nabib_from_date   ||']=납입일자'       ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*'|| f_idx2 || '-04[' || s_bunhal_nabib_to_date     ||']=납입유효일자'   ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*'|| f_idx2 || '-06[' || s_bunhal_nabib_amt2        ||']=적용보험료'     ||chr(13)||chr(10);

            /***********************************************************/
            /* 분납회차가 종납 회차보다 크면                           */
            /* 분납률에 따라 계산 되어진 보험료 Insert 시킴            */
            /***********************************************************/
            if  s_bunhal_nabib_cnt > i_end_nab_no  and  i_dmbo_cd not in ('21','22','23')  then
                /*자차이고 계산방법이 단기가 아니면(단기자차가 아니면)*/
                if i_dmbo_cd||s_0013_c_cancel_calc_gb <> '063' then
                    begin
                        insert into TBID0015T( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                                DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                                IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                                BASIS_FROM,               BASIS_TO,               USER_ID,                    WORK_DATE )
                                         select i_pol_no,                 i_endor_no,             s_bunhal_nabib_cnt,         0 ,
                                                i_dmbo_cd,                s_bunhal_nabib_amt1,    s_bunhal_nabib_amt2,        s_bunhal_nabib_from_date,
                                                s_bunhal_nabib_to_date,   i_endor_no_bef_max,     s_bunhal_nabib_from_date,   s_bunhal_nabib_to_date,
                                                s_bunhal_nabib_from_date, s_bunhal_nabib_to_date, i_user_id,                  to_date(i_work_date, 'YYYYMMDD')
                                           from DUAL;
                        exception when others then o_result := 'Error';
                                                       raise_application_error(-20001, '분납률에 따라 Insert[TBID0015T] Error[210]: '|| sqlerrm);
                    end;


                    s_basic_prem   := s_basic_prem  + s_bunhal_nabib_amt1;
                    s_appy_prem    := s_appy_prem   + s_bunhal_nabib_amt2;
                                              l_log_data := l_log_data || '2*'|| f_idx2 || '-07[' || s_appy_prem     ||']=회차누적 적용보험료'    ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*'|| f_idx2 || '-08[' || '분납률에 따라 Insert OK...6'  ||chr(13)||chr(10);
                end if;
            end if;

            /************************/
            /* Log 남기기         ***/
            /************************/
            --if    l_log_level = 1  then  /**Log 남기기 ****/
            /*      PR_INSERT_LOG(l_log_date,l_log_sp_name,l_log_no,'배서[분납]',i_dmbo_cd,l_log_data);*/
            /*end if;*/

            /*l_log_data := '';*/

        End Loop;

        /**********************************************************************/
        /**TBID0014 SUM  Return 해 준다                                       */
        /**********************************************************************/
        begin
              select nvl(sum(BASIC_PREM),0)
                   , nvl(sum(APPY_PREM) ,0)
                into V_RETURN_AMT1
                   , V_RETURN_AMT2
                from TBID0014T
               where POL_NO    = i_pol_no
                 and ENDOR_NO  = i_endor_no
                 and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                 and DMBO_CD   = i_dmbo_cd;

            exception when no_data_found then V_RETURN_AMT1 :=0;
                                              V_RETURN_AMT2 :=0;
                      when others        then o_result := 'Error';
                                              raise_application_error(-20001, 'TBID0014T Sum[TBID0015T] Error[220]: '|| sqlerrm);
        end;
                                              l_log_data := l_log_data || '2*20 [' || 'TBID0014T Sum[TBID0015T] OK...7' ||chr(13)||chr(10);

        /***********************************************************/
        /* 이전 배서의 종납회차 정보를 구분자로 Substring 함       */
        /***********************************************************/
        s_bunhal_bohum  := regexp_substr(f_bunhal_bohum,'[^,]+',1,i_end_nab_no);

        s_bunhal_nabib_cnt         := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,1));
        s_bunhal_nabib_from_date   := to_date  (regexp_substr(s_bunhal_bohum,'[^|]+',1,2));
        s_bunhal_nabib_to_date     := to_date  (regexp_substr(s_bunhal_bohum,'[^|]+',1,3));
        s_bunhal_nabib_amt1        := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,4));   /* 기준보험료 */
        s_bunhal_nabib_amt2        := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,5));   /* 적용보험료 */

                                              l_log_data := l_log_data || '2*21[' || s_bunhal_nabib_cnt        ||']=납입회차'       ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*22[' || s_bunhal_nabib_from_date  ||']=납입일자'       ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*23[' || s_bunhal_nabib_to_date    ||']=납입유효일자'   ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*24[' || s_bunhal_nabib_amt2       ||']=적용보험료'     ||chr(13)||chr(10);

                                              l_log_data := l_log_data || '2*25[' || V_RETURN_AMT2             ||']=①적용보험료'            ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*26[' || s_appy_prem               ||']=②회차누적적용보험료'    ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*27[' || V_BEF_15_DMBO_PREM        ||']=③이전배서납입보험료'    ||chr(13)||chr(10);

        /* 현재배서의[TBID0014] 의 SUM 보험료 - 종납회차이후의 분납보험료 -  종납회차 이전의 SUM 보험료*/
        s_basic_prem  := V_RETURN_AMT1  -  s_basic_prem - V_BEF_15_BASIC_PREM ;
        s_appy_prem   := V_RETURN_AMT2  -  s_appy_prem  - V_BEF_15_DMBO_PREM;
                                              l_log_data := l_log_data || '2*28[' || s_appy_prem               ||']=①-②-③'    ||chr(13)||chr(10);
        if  s_appy_prem <> 0 then
            begin
                insert into TBID0015T( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                        DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                        IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                        BASIS_FROM,               BASIS_TO,               USER_ID,                    WORK_DATE )
                                 select i_pol_no,                 i_endor_no,             s_bunhal_nabib_cnt,         i_bef_15_seq_no,
                                        i_dmbo_cd,                s_basic_prem,           s_appy_prem,                s_bunhal_nabib_from_date,
                                        s_bunhal_nabib_to_date,   i_endor_no_bef_max,     s_bunhal_nabib_from_date,   s_bunhal_nabib_to_date,
                                        s_bunhal_nabib_from_date, s_bunhal_nabib_to_date, i_user_id,                  to_date(i_work_date, 'YYYYMMDD')
                                   from DUAL;
                exception when others then o_result := 'Error';
                                           raise_application_error(-20001, '추징/환수 TBID0015T Insert [TBID0015T] Error[200]: '|| sqlerrm);
            end;
        end if;
                                              l_log_data := l_log_data || '2*29[' || '추징/환수 Insert [TBID0015T] OK..3'  ||chr(13)||chr(10);
   END IF;


   IF    o_result is null then
         o_result  := 'OK' || '|' || V_RETURN_AMT1 || '|' || V_RETURN_AMT2;
   END IF;

   l_log_data := l_log_data ||'3*01 [' || o_result    ||']=o_result'    ||chr(13)||chr(10);
   l_log_data := l_log_data ||'3*02 Good Bye......Endors'               ||chr(13)||chr(10);

   /************************/
   /* Log 남기기         ***/
   /************************/
   IF    l_log_level = 1 or nvl(regexp_substr(l_log_step,i_dmbo_cd),' ') = i_dmbo_cd then
         PR_INSERT_LOG(l_log_date,l_log_sp_name,l_log_no,'배서[분납]',i_dmbo_cd,l_log_data);
   END IF;
   l_log_data := '';


    exception when others then dbms_output.put_line('PR_RENT_C_ENDOR_BUNAP_RATE Main Error[999]: '||sqlerrm);
                               raise_application_error(-20001, 'PR_RENT_C_ENDOR_BUNAP_RATE Main Error[999]: '||sqlerrm);
END;
-- GENERATED BY QueryOne AT 2017-04-04 13:06:08
-- USING krma_app@10.100.10.54:8629(krmadb)

-- GENERATED BY QueryOne AT 2017-03-30 10:19:20
-- USING krma_app@10.100.10.54:8629(krmadb)

-- GENERATED BY QueryOne AT 2017-02-08 14:25:41
-- USING krma_app@10.100.10.54:8629(krmadb)

CREATE OR replace
PROCEDURE          KRMA_APP.PR_RENT_C_ENDOR_BUNAP_RATE (i_pol_no              in  varchar2
                                                     ,i_endor_no            in  number
                                                     ,i_endor_no_bef_max    in  number
                                                     ,i_dmbo_cd             in  varchar2
                                                     ,i_na_mth              in  varchar2
                                                     ,i_spcl_agre_gb        in  varchar2
                                                     ,i_dmbo_basic_prem     in  number
                                                     ,i_dmbo_appy_prem      in  number
                                                     ,i_bnp_cnt             in  number
                                                     ,i_istar_cont_date     in  date
                                                     ,i_seq_no              in  number
                                                     ,i_i_kind_cd           in  varchar2
                                                     ,i_iend_cont_date      in  date
                                                     ,i_basis_from          in  date
                                                     ,i_basis_to            in  date
                                                     ,i_user_id             in  tbid0014.user_id%type
                                                     ,i_end_nab_no          in  number
                                                     ,i_bef_15_seq_no       in  number
                                                     ,i_endor_cd            in  varchar2
                                                     ,i_all_cliam_date      in  date
                                                     ,i_day_endor_cnt       in  number
                                                     ,i_short_day_gb        in  varchar2
                                                     ,i_basic_year_prem     in  number
                                                     ,i_appy_year_prem      in  number
                                                     ,i_work_date           in  varchar2
                                                     ,o_result              out varchar2) as
/**************************************************************************************************************************/
/* Procedure Name :  PR_RENT_C_ENDOR_BUNAP_RATE                                                                           */
/* Function       :  소급배서 담보별, 기간별 분납 회차별 보험료 산정                                                      */
/* Parameter  i_pol_no             [ IN] 증권번호                                                                         */
/*            i_endor_no           [ IN] 배서번호                                                                         */
/*            i_endor_no_bef_max   [ IN] 이전배서번호(당일 배서가 2회 이상 발생시 처리 하기 위함                          */
/*            i_dmbo_cd            [ IN] 담보코드                                                                         */
/*            i_na_mth             [ IN] 납입방법-(1.일시납2.비연속분납3.연속분납(A0005)                                  */
/*            i_spcl_agre_gb       [ IN] '0'                                                                              */
/*            i_dmbo_basic_prem    [ IN] 담보 기본보험료                                                                  */
/*            i_dmbo_appy_prem     [ IN] 담보 적용보험료                                                                  */
/*            i_bnp_cnt            [ IN] 분납회수-1:일시납,2:2분납,3:3분납,4:4분납,5: 5분납,6:6분납,7:7분납,8:8분납(A0007)*/
/*            i_istar_cont_date    [ IN] 보험시기                                                                         */
/*            i_seq_no             [ IN] '0'                                                                              */
/*            i_i_kind_cd          [ IN] 보험종목                                                                         */
/*            i_iend_cont_date     [ IN] 보험종기                                                                         */
/*            i_basis_from         [ IN] 적용시작일                                                                       */
/*            i_basis_to           [ IN] 적용종료일                                                                       */
/*            i_user_id            [ IN] 사용자번호                                                                       */
/*            i_end_nab_no         [ IN] 최종납입회차                                                                     */
/*            i_bef_15_seq_no      [ IN] Max Seq                                                                          */
/*            i_endor_cd           [ IN] 배서코드                                                                         */
/*            i_all_cliam_date     [ IN] 차량대체일자                                                                     */
/*            i_day_endor_cnt      [ IN] 당일배서건수                                                                     */
/*            i_basic_year_prem    [ IN] 년간기본보험료                                                                   */
/*            i_appy_year_prem     [ IN] 년간적용보험료                                                                   */
/*            o_result             [Out] sp 결과(보험료)                                                                  */
/*Description : TBID0013T 담보별 분담금 TABLE은 화면에서 생성시                                                            */
/*            - 이전배서(기준일 이전의 적용일자를 가진 배서)의 내용을 그대로 옮겨 놓는다                                  */
/*              (단 화면에서 바뀐 담보 내용으로 Update 함)                                                                */
/*            - 추가된 담보는 기준일을 적용시작일로 보험종기를 적용종료일로 세팅 한다.                                    */
/*            - 삭제된 담보는 이전배서의 적용시작일을 현배서의 적용시작일로 기준일을 적용종료일로 세팅한다.               */
/**************************************************************************************************************************/
V_0013_INFO                  varchar2(300);
s_0013_c_info                varchar2(150);
s_0013_c_endor_no            number;
s_0013_c_appy_from           date;
s_0013_c_appy_to             date;
s_0013_c_appy_prem           number;
s_0013_c_basic_prem          number;
s_0013_c_appy_year_prem      number;
s_0013_c_basic_year_prem     number;
s_0013_c_cancel_calc_gb      varchar2(3);


s_0013_b_info                varchar2(150);
s_0013_b_endor_no            number;
s_0013_b_appy_from           date;
s_0013_b_appy_to             date;
s_0013_b_appy_prem           number;
s_0013_b_basic_prem          number;
s_0013_b_appy_year_prem      number;
s_0013_b_basic_year_prem     number;
s_0013_b_cancel_calc_gb      varchar2(3);

s_0013_appy_prem             number;
s_0013_basic_prem            number;

s_row_cnt                    number;/*ljm 20150923 추가*/

V_BEF_15_BASIC_PREM          number;
V_BEF_15_DMBO_PREM           number;
V_RETURN_AMT1                number;
V_RETURN_AMT2                number;
V_APPY_PREM                  number;
V_BASIC_PREM                 number;
V_BASIC_PREM_BEF             number;
V_APPY_PREM_BEF              number;
V_MAX_SEQ_NO                 number;
V_ENDOR_CD                   varchar2(4);
V_ENDOR_GB                   varchar2(2);
V_ACCI_CHECK                 varchar2(1);
V_SUM_APPY_PREM              number;
V_SUM_DMBO_PREM              number;
V_ALL_CLAIM                  varchar2(1);
V_DMBO_END_DATE              date;
V_BASIS_TO_DATE              date;
V_DANGI_APPY_FROM            date;
V_DANGI_APPY_PREM            number;
V_DANGI_BASIC_PREM           number;
V_DAMBO_START_DT             date;/*LJM 20150923 추가*/
V_DAMBO_START_DT_TEMP        date;/*LJM 20151218 추가*/
V_DAMBO_START_DT_CHAR        varchar2(20);/*LJM 20151218 추가*/
V_DAMBO_START_DT_CACEL       varchar2(20);/*LJM 20151218 추가*/
V_ENDRO_TOTAL_CNT            number;/*LJM 20151218 추가*/
V_ENDRO_CURR_CNT             number  := 1;/*LJM 20151218 추가*/
V_ENDRO_NO_MINUS             number;/*LJM 20151218 추가*/
V_DATA_INFO             varchar2(3000);/*LJM 20151218 추가*/

s_appy_prem                  number:=0;
s_basic_prem                 number:=0;
s_appy_prem1                 number:=0;
s_basic_prem1                number:=0;

f_fn_rent_short_rate         number:=1;/** ljm 20150904 1로 세팅*/

f_bunhal_bohum               varchar2(4000);
f_idx1                       number;
f_idx2                       number;

s_bunhal_bohum               varchar2(200);
s_bunhal_nabib_cnt           number;
s_bunhal_nabib_from_date     date;
s_bunhal_nabib_to_date       date;
s_bunhal_nabib_amt1          number;
s_bunhal_nabib_amt2          number;
s_bunhal_amt1                number;
s_bunhal_amt2                number;

/******************/
/*** lOG 변수 *****/
/******************/
l_log_level                  number        := 1;                                  /* 로그레벨[0~1]: 0->l_log_step에 정의된 항목과 찍는다..  1->모두찍는다.)*/
l_log_sp_name                varchar2(50)  := 'PR_RENT_C_AMT[ENDOR_BUNAP_RATE_PLAN]' ;        /* 로그 Stored Procedure Name*/
l_log_data                   varchar2(4000);
l_log_date                   varchar2(16)  := to_char(sysdate,'yyyymmddhh24miss');
l_log_step                   varchar2(100) :='';   /* 담보코드: '01 02 03 13 04 05 06 07 21 22 23 99'*/
l_log_no                     varchar2(20)  := i_pol_no ||'-'|| i_endor_no;

BEGIN
    o_result :=null ;
    l_log_data := l_log_data || '*00[' || i_pol_no           ||']=증권번호'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_endor_no         ||']=배서번호'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_endor_no_bef_max ||']=이전배서번호(Max)'   ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_dmbo_cd          ||']=담보코드'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_na_mth           ||']=납입방법'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_spcl_agre_gb     ||']=i_spcl_agre_gb'      ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_dmbo_basic_prem  ||']=기본보험료'          ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_dmbo_appy_prem   ||']=적용보험료'          ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_bnp_cnt          ||']=분납회수'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_istar_cont_date  ||']=보험시기'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_seq_no           ||']=분납Seq'             ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_i_kind_cd        ||']=보험종목'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_iend_cont_date   ||']=보험종기'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_basis_from       ||']=기준일'              ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_basis_to         ||']=적용종료일'          ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_user_id          ||']=User Id'             ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_end_nab_no       ||']=최종납입회차'        ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_bef_15_seq_no    ||']=분납Max Seq'         ||chr(13)||chr(10);

    /***********************************************************************/
    /*                                                                     */
    /* TBID0013T TABLE Insert 및 Update                                     */
    /*                                                                     */
    /***********************************************************************/

    /*배서구분: 배서코드 첫자리*/
    V_ENDOR_GB := substr(i_endor_cd, 1, 1);

    /*********************************************************/
    /* 해당담보 사고여부 확인 (Y:사고, N:사고아님)           */
    /* 진행중인 건수가 있으면 무조건 사고                    */
    /* 진행중인 건수가 없고 공제금 지급이 0보다 크면 사고    */
    /*********************************************************/
    if i_dmbo_cd  not in ('21','22','23') then
        begin
            select case when sum(decode(STAT, '3', 1, 0)) > 0                                                                              then 'Y'
                        when sum(decode(STAT, '3', 1, 0)) = 0 and sum(DC_AMT) > 0 and i_dmbo_cd <> '02'                                    then 'Y'
                        when sum(decode(STAT, '3', 1, 0)) = 0 and sum(DC_AMT) > 0 and sum(DC_AMT) <> sum(COM_DC_AMT) and i_dmbo_cd = '02'  then 'Y'
                        else 'N' end
              into V_ACCI_CHECK
              from ( select CA02.POL_NO
                          , CF01.ACCIDENT_NO
                          , CF01.HND_COVER
                          , nvl(( select sum(DC_AMT)
                                    from TBCE0001
                                   where ACCIDENT_NO = CF01.ACCIDENT_NO
                                     and HND_COVER   = CF01.HND_COVER
                                     and DMGE_NO     = CF01.DMGE_NO
                                     and DECIDE_DATE is not null ),0 ) DC_AMT
                          , nvl(( select sum(COM_DC_AMT)
                                    from TBCE0001
                                   where ACCIDENT_NO = CF01.ACCIDENT_NO
                                     and HND_COVER   = CF01.HND_COVER
                                     and DMGE_NO     = CF01.DMGE_NO
                                     and DECIDE_DATE is not null ),0 ) COM_DC_AMT
                          , case when CF01.DECIDE_DATE is not null then '1'
                                 when CF01.DC_END_DATE is not null then '2'
                                 else '3' end STAT
                       from TBCA0002 CA02
                          , TBCF0001 CF01
                      where CA02.ACCIDENT_NO = CF01.ACCIDENT_NO
                        and CA02.POL_NO      = i_pol_no
                        and CF01.LAST='Y'
                        and (CF01.HND_COVER = decode(i_dmbo_cd, '01', '21', '02', '21', '03', '33', '04', '44','08','45', '05', '55', '06', '66', '13', '33')
                            or CF01.HND_COVER = decode(i_dmbo_cd, '01', '11', '02', '11', '03', '33', '04', '44','08','45', '05', '55', '06', '66', '13', '33'))
                        );

            exception when no_data_found then
                V_ACCI_CHECK := 'N';
        end;
    else
        if i_dmbo_cd = '21' then
            begin
                select decode(nvl(count(*), 0), 0, 'N', 'Y')
                  into V_ACCI_CHECK
                  from TBCH0001
                 where H_GBN='ME400'
                   and POL_NO    = i_pol_no
                   and DELETE_YN = 'N'
                   and LAST='Y'
                   and ACT_SVC_CODE NOT IN ('51','53','54','55');
                exception when no_data_found then
                    V_ACCI_CHECK := 'N';
            end;
        else
            V_ACCI_CHECK := 'N';
        end if;
    end if;
                                                    l_log_data := l_log_data || '1*00[' || V_ACCI_CHECK           ||']=사고여부 확인정보'  ||chr(13)||chr(10);

    /*********************************************************/
    /* 전손처리 됐는지 확인(Y:전손처리, N:전손처리아님)      */
    /* CD01.DMGE_DEGREE 가 '1' 이 아닌경우는 전손처리함      */
    /* CD01.DMGE_DEGREE                                      */
    /* 1    피해구분    대물    분손                         */
    /* 2    피해구분    대물    추정전손                     */
    /* 3    피해구분    대물    절대전손                     */
    /* 4    피해구분    대물    전손(폐차)                   */
    /* 5    피해구분    대물    전손(재활용)                 */
    /* 6    피해구분    대물    도난                         */
    /*********************************************************/
    if i_dmbo_cd = '06' then
        if V_ACCI_CHECK = 'Y' then
            begin
                select decode(count(CD01.DMGE_DEGREE), 0, 'N', 'Y')    /*TEST 시 decode(count(NVL(CD01.DMGE_DEGREE, 'X')), 0, 'N', 'Y')*/
                  into V_ALL_CLAIM
                  from TBCA0002 CA02
                     , TBCD0001 CD01
                 where CA02.ACCIDENT_NO = CD01.ACCIDENT_NO
                   and CD01.LAST        = 'Y'
                   and CD01.HND_COVER   = '66'
                   and CA02.POL_NO      = i_pol_no
                   and CD01.DMGE_DEGREE IS NOT NULL                    /*TEST 시 주석처리*/
                   and CD01.DMGE_DEGREE <> '1';                        /*TEST 시 NVL(CD01.DMGE_DEGREE , 'X')<> '1'*/
                exception when others then
                    V_ACCI_CHECK := 'N';
            end;
        else
            V_ALL_CLAIM := 'N';
        end if;
    else
        V_ALL_CLAIM := 'N';
    end if;
                                                    l_log_data := l_log_data || '1*000[' || V_ALL_CLAIM           ||']=전손처리 확인정보'  ||chr(13)||chr(10);

    /*********************************************************/
    /* 현재 배서,기준일 이전 배서(TBID0013T) 정보 Select      */
    /* 같은날 배서서 2번 이상 일어날 경우는 이전배서가 아니라*/
    /* 기준일 이전의 배서중 가장 큰 배서 번호정보 Select     */
    /*********************************************************/
    begin
        select WM_CONCAT(ENDOR_NO ||'|'|| APPY_FROM ||'|'|| APPY_TO ||'|'||  APPY_PREM ||'|'||  BASIC_PREM ||'|'|| APPY_YEAR_PREM ||'|'|| BASIC_YEAR_PREM ||'|'|| CANCEL_CALC_GB)
          into V_0013_INFO
          from (select ENDOR_NO                   /*배서번호*/
                     , APPY_FROM                  /*적용시작일*/
                     , APPY_TO                    /*적용종료일*/
                     , APPY_PREM                  /*적용보험료*/
                     , BASIC_PREM                 /*기본보험료*/
                     , APPY_YEAR_PREM             /*적용연간보험료*/
                     , BASIC_YEAR_PREM            /*기본연간보험료*/
                     , CANCEL_CALC_GB             /*일할/단기구분*/
                  from TBID0013T
                 where POL_NO     = i_pol_no
                   and ENDOR_NO   = i_endor_no_bef_max
                   and WORK_DATE  = to_date(i_work_date, 'YYYYMMDD')
                   and DMBO_CD    = i_dmbo_cd
                   and APPY_FROM <= case when i_endor_cd = '111' or i_endor_cd = '211' then APPY_FROM
                                         else to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS') end
                   and APPY_TO   >= case when i_endor_cd = '111' or i_endor_cd = '211' then APPY_FROM
                                         else to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS') end
                   /*and APPY_TO >= to_date(to_char(i_iend_cont_date, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')*/
                   /*and APPY_TO <= to_date(to_char(i_iend_cont_date, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')*/
                union all
                select ENDOR_NO                   /*배서번호*/
                     , APPY_FROM                  /*적용시작일*/
                     , APPY_TO                    /*적용종료일*/
                     , APPY_PREM                  /*적용보험료*/
                     , BASIC_PREM                 /*기본보험료*/
                     , APPY_YEAR_PREM             /*적용연간보험료*/
                     , BASIC_YEAR_PREM            /*기본연간보험료*/
                     , CANCEL_CALC_GB             /*일할/단기구분*/
                  from TBID0013T
                 where POL_NO    =  i_pol_no
                   and ENDOR_NO  =  i_endor_no
                   and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                   and DMBO_CD   =  i_dmbo_cd
                 order by ENDOR_NO,APPY_FROM   /*APPY_FROM ljm 추가*/
               );

        exception when others then raise_application_error(-20001, '현재,이전 배서 Select [TBID0013T] Error[00]: '|| sqlerrm);
    end;
                                                    l_log_data := l_log_data || '1*01['|| '현재,이전 배서 Select [TBID0013T]  OK...0' ||chr(13)||chr(10);

    /**담보 가입시기 구하기**/
    /**ljm 20150923 추가  **/
    /* 해지시작일자 구하기*/
    BEGIN
        SELECT
            nvl(to_char(MAX(DMBO_START_DATE),'yy/mm/dd'),'0000')
            into V_DAMBO_START_DT_CACEL
        FROM TBID0013
        where POL_NO    =  i_pol_no
        and   DMBO_CD   =  i_dmbo_cd
        and ENDOR_NO  =  i_endor_no
        and   CANCEL_CALC_GB = '2'
        ;
        exception when others then raise_application_error(-20001, '담보 해지시작일자  Select [TBID0013] Error[00]: '|| sqlerrm);
    end;

   /* 담보추가시작일자 구하기*/


   if V_DAMBO_START_DT_CACEL = '0000' then
        BEGIN
            SELECT
                MIN(DMBO_START_DATE)
                into V_DAMBO_START_DT
            FROM TBID0013
            where POL_NO    =  i_pol_no
            and   DMBO_CD   =  i_dmbo_cd
            ;
            exception when others then raise_application_error(-20001, '담보 가입시작일자  Select [TBID0013] Error[00]: '|| sqlerrm);
        end;
    else
        BEGIN
            SELECT
                MAX(DMBO_START_DATE)
                into V_DAMBO_START_DT
            FROM TBID0013
            where POL_NO    =  i_pol_no
            and   DMBO_CD   =  i_dmbo_cd
            and ENDOR_NO  =  i_endor_no
            and   CANCEL_CALC_GB = '2'
            ;
            exception when others then raise_application_error(-20001, '담보 추가 가입일자  Select [TBID0013] Error[00]: '|| sqlerrm);
        end;


        BEGIN
            SELECT
                COUNT(*)
                INTO V_ENDRO_TOTAL_CNT
            FROM TBID0013
            where POL_NO    =  i_pol_no
            and   DMBO_CD   =  i_dmbo_cd
            and ENDOR_NO  =  i_endor_no -1
            ;
            exception when others then raise_application_error(-20001, '담보 추가 가입일자  Select [TBID0013] Error[00]: '|| sqlerrm);
        end;

        LOOP
            BEGIN
                SELECT
                    WM_CONCAT(DMBO_START_DATE || '|' || DMBO_END_DATE  || '|' || CANCEL_CALC_GB)
                    INTO V_DATA_INFO
                FROM TBID0013
                where POL_NO    =  i_pol_no
                and   DMBO_CD   =  i_dmbo_cd
                and ENDOR_NO  =  i_endor_no
                ;
                exception when others then raise_application_error(-20001, '담보 추가 가입일자  Select [TBID0013] Error[00]: '|| sqlerrm);
             END;

             BEGIN
                SELECT DMBO_START_DATE
                       INTO V_DAMBO_START_DT_TEMP
                FROM TBID0013
                WHERE POL_NO    =  i_pol_no
                and   DMBO_CD   =  i_dmbo_cd
                and ENDOR_NO    =  i_endor_no -1
                AND DMBO_END_DATE = V_DAMBO_START_DT;
                exception when NO_DATA_FOUND THEN V_DAMBO_START_DT_TEMP := NULL;
                WHEN others then raise_application_error(-20001, '담보 추가 해지일자  Select [TBID0013] Error[00]: ' || 'DATA INFO' || V_DATA_INFO  || '        '  || TO_CHAR(V_DAMBO_START_DT,'YYYYMMDDHH24MISS' ) || '         ' || sqlerrm);
             END;

             IF V_DAMBO_START_DT_TEMP IS NOT NULL THEN
                V_DAMBO_START_DT := V_DAMBO_START_DT_TEMP;
             END IF;
             V_ENDRO_CURR_CNT := V_ENDRO_CURR_CNT +1;


             EXIT WHEN V_DAMBO_START_DT_TEMP IS NULL OR V_ENDRO_CURR_CNT > V_ENDRO_TOTAL_CNT;


        END LOOP;




    end if;

    V_DAMBO_START_DT := to_char(V_DAMBO_START_DT,'yy/mm/dd');
    s_row_cnt       := regexp_count(V_0013_INFO,'[^,]+'); /*ljm 20150923 추가*/
    s_0013_b_info   := regexp_substr(V_0013_INFO,'[^,]+',1,1);
    if  i_endor_no_bef_max = to_number(regexp_substr(s_0013_b_info,'[^|]+',1,1)) then
        s_0013_b_appy_from       := to_date  (regexp_substr(s_0013_b_info,'[^|]+',1,2));     /* 이전배서 TBID0013 시작일자*/
        s_0013_b_appy_to         := to_date  (regexp_substr(s_0013_b_info,'[^|]+',1,3));     /* 이전배서 TBID0013 종료일자*/
        s_0013_b_appy_prem       := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,4));     /* 이전배서 TBID0013 적용보험료*/
        s_0013_b_basic_prem      := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,5));     /* 이전배서 TBID0013 기본보험료*/
        s_0013_b_appy_year_prem  := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,6));     /* 이전배서 TBID0013 적용연간보험료*/
        s_0013_b_basic_year_prem := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,7));     /* 이전배서 TBID0013 기본연간보험료*/
        s_0013_b_cancel_calc_gb  := regexp_substr(s_0013_b_info,'[^|]+',1,8);                /* 이전배서 TBID0013 일할/단기 구분*/

        /*s_0013_c_info            := regexp_substr(V_0013_INFO,'[^,]+',1,2);*/
        s_0013_c_info            := regexp_substr(V_0013_INFO,'[^,]+',1,s_row_cnt);/*ljm 20150923 변경*/
        s_0013_c_appy_from       := to_date  (regexp_substr(s_0013_c_info,'[^|]+',1,2));     /* 현재 TBID0013 시작일자*/
        s_0013_c_appy_to         := to_date  (regexp_substr(s_0013_c_info,'[^|]+',1,3));     /* 현재 TBID0013 종료일자*/
        s_0013_c_appy_prem       := to_number(regexp_substr(s_0013_c_info,'[^|]+',1,4));     /* 현재 TBID0013 적용보험료*/
        s_0013_c_basic_prem      := to_number(regexp_substr(s_0013_c_info,'[^|]+',1,5));     /* 현재 TBID0013 기본보험료*/
        s_0013_c_appy_year_prem  := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,6));     /* 현재 TBID0013 적용연간보험료*/
        s_0013_c_basic_year_prem := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,7));     /* 현재 TBID0013 기본연간보험료*/
        s_0013_c_cancel_calc_gb  := regexp_substr(s_0013_c_info,'[^|]+',1,8);                /* 현재 TBID0013 일할/단기 구분*/
    else
        s_0013_c_info            := regexp_substr(V_0013_INFO,'[^,]+',1,1);
        s_0013_c_appy_from       := to_date  (regexp_substr(s_0013_c_info,'[^|]+',1,2));     /* 현재 TBID0013 시작일자*/
        s_0013_c_appy_to         := to_date  (regexp_substr(s_0013_c_info,'[^|]+',1,3));     /* 현재 TBID0013 종료일자*/
        s_0013_c_appy_prem       := to_number(regexp_substr(s_0013_c_info,'[^|]+',1,4));     /* 현재 TBID0013 적용보험료*/
        s_0013_c_basic_prem      := to_number(regexp_substr(s_0013_c_info,'[^|]+',1,5));     /* 현재 TBID0013 기본보험료*/
        s_0013_c_appy_year_prem  := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,6));     /* 현재 TBID0013 적용보험료*/
        s_0013_c_basic_year_prem := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,7));     /* 현재 TBID0013 기본연간보험료*/
        s_0013_c_cancel_calc_gb  := regexp_substr(s_0013_c_info,'[^|]+',1,8);                /* 현재 TBID0013 일할/단기 구분*/
    end if;

                                                    l_log_data := l_log_data || '1*02[' || s_0013_c_info           ||']=현재배서TBID0013정보'  ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*03[' || s_0013_c_appy_from      ||']=현재배서 적용시작일'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*04[' || s_0013_c_appy_to        ||']=현재배서 적용종료일'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*05[' || s_0013_c_appy_prem      ||']=현재배서 적용보험료'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*06[' || s_0013_c_basic_prem     ||']=현재배서 기본보험료'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*07[' || s_0013_c_cancel_calc_gb ||']=현재배서 일할단기구분' ||chr(13)||chr(10);

                                                    l_log_data := l_log_data || '1*08[' || s_0013_b_info           ||']=이전배서TBID0013정보'  ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*09[' || s_0013_b_appy_from      ||']=이전배서 적용시작일'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*10[' || s_0013_b_appy_to        ||']=이전배서 적용종료일'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*11[' || s_0013_b_appy_prem      ||']=이전배서 적용보험료'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*12[' || s_0013_b_basic_prem     ||']=이전배서 기본보험료'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*13[' || s_0013_b_cancel_calc_gb ||']=이전배서 일할단기구분' ||chr(13)||chr(10);

    /*일할 계약 계산*/
    if  i_short_day_gb = '1' then
        /*단기자차의 경우 단기요율로 계산해야한다. 20130514_최재혁*/
        if s_0013_c_cancel_calc_gb <> '1' then
            /* 단기요율 계산 = 적용종료일 - 적용시작일 */
            f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_c_appy_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
            f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

            /* 보험료 단기 계산 = 년간 총 적용보험료 * 단기적용율   */
            s_0013_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);
            s_0013_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);

                                                    l_log_data := l_log_data || '1*14(2)[' || s_0013_appy_prem        ||']=배서일기준(단기) 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*15(2)[' || s_0013_basic_prem       ||']=배서일기준(단기) 기본보험료' ||chr(13)||chr(10);

        else
            /* 년간 총 적용보험료 * (보험종기 - 현재배서 적용시작일) / (보험종기 - 보험시기) --> 보험적용일 부터 보험 종기 까지 보험료 산출 */
            s_0013_appy_prem  := round(i_dmbo_appy_prem  * ((i_iend_cont_date - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1);
            s_0013_basic_prem := round(i_dmbo_basic_prem * ((i_iend_cont_date - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1);

                                                    l_log_data := l_log_data || '1*14[' || s_0013_appy_prem        ||']=배서일기준 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*15[' || s_0013_basic_prem       ||']=배서일기준 기본보험료' ||chr(13)||chr(10);

        end if;
    /*단기 계약 계산*/
    else
        /* 단기요율 계산 = 보험종기 - 보험시기 */
        /* i_istar_cont_date == >  V_DAMBO_START_DT     i_iend_cont_date  == > s_0013_c_appy_to 변경*/
        f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,V_DAMBO_START_DT  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
        f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

        /* 보험료 단기 계산 = 년간 총 적용보험료 * 단기적용율   */
        /* ljm 보험료 산출로직 변경으로 기존로직 주석으로 새로 적용*/
        s_0013_appy_prem   := round(s_0013_c_appy_prem  * f_fn_rent_short_rate * ((s_0013_c_appy_to - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date))  ,-1);
        s_0013_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate * ((s_0013_c_appy_to - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)) ,-1);
        /*s_0013_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1); ljm 주석으로막음*/
        /*s_0013_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1); ljm 주석으로막음*/

                                                    l_log_data := l_log_data || '1*14(2)[' || s_0013_appy_prem        ||']=배서일기준(단기계약) 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*15(2)[' || s_0013_basic_prem       ||']=배서일기준(단기계약) 기본보험료' ||chr(13)||chr(10);
    end if;

    /********************************************/
    /** 기준일 이전 Data[TBID0013T] Insert       */
    /* 2017.02.08 담보별단체특성율 추가*/
    /********************************************/
    begin
        insert into TBID0013T(POL_NO,               ENDOR_NO,                   BASIC_SCONT_GB,      DMBO_CD,
                             APPY_FROM,            ACDNT_RESP_WANT,            MAN_RESP_WANT,       INSUR_AMT,
                             INSUR_AMT_GB,         DUCT_AMT_GB,                BASIC_PREM,          DMBO_START_DATE,
                             DMBO_END_DATE,        APPY_PREM,                  BASIC_RANGE_R,       CANCEL_CALC_GB,
                             APPY_TO,              BASIS_FROM,                 BASIS_TO,
                             USER_ID,              BASIC_YEAR_PREM,            APPY_YEAR_PREM,      WORK_DATE, GRP_DMBO_RATE
                               )
                      select POL_NO,               i_endor_no,                 BASIC_SCONT_GB,      DMBO_CD,
                             APPY_FROM,            ACDNT_RESP_WANT,            MAN_RESP_WANT,       INSUR_AMT,
                             INSUR_AMT_GB,         DUCT_AMT_GB,                BASIC_PREM,          DMBO_START_DATE,
                             DMBO_END_DATE,        APPY_PREM,                  BASIC_RANGE_R,       CANCEL_CALC_GB,
                             APPY_TO,              BASIS_FROM,                 BASIS_TO,
                             USER_ID,              BASIC_YEAR_PREM,            APPY_YEAR_PREM,      to_date(i_work_date, 'YYYYMMDD') , GRP_DMBO_RATE
                        from TBID0013T
                       where POL_NO    = i_pol_no
                         and ENDOR_NO  = i_endor_no_bef_max
                         and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                         and DMBO_CD   = i_dmbo_cd
                         and APPY_TO   < to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS');   /*20130422 TO_DATE 처리 최재혁*/
        exception when others then o_result := null;
    end;
                                                    l_log_data := l_log_data || '1*16[' || '기준일 이전 정보 Insert[TBID0013T] OK...1'  ||chr(13)||chr(10);

    /************************/
    /* Log 남기기         ***/
    /************************/
  /*  if    l_log_level = 1 or nvl(regexp_substr(l_log_step,i_dmbo_cd),' ') = i_dmbo_cd then*/
  /*        PR_INSERT_LOG(l_log_date,l_log_sp_name,l_log_no,'배서[분납]_1',i_dmbo_cd,l_log_data);*/
  /*  end if;*/
  /*  l_log_data := '';*/

    /***************************************************/
    /** 담보해지:현재배서 적용종료일이 기준일과 같으면**/
    /***************************************************/
    IF  i_basis_from = s_0013_c_appy_to then
                                                    l_log_data := l_log_data || '1*17[**** 담보 해지_TBID0013T ********]' ||chr(13)||chr(10);
        /* 사고여부 처리*/
        /* 사고 아닌경우*/
        if  V_ACCI_CHECK = 'N' then
            /*일할 계약건*/
            if i_short_day_gb = '1' then
                /* 단기, 단기자차 계산 ( 2: 단기, 3:단기자차) */
                if  s_0013_c_cancel_calc_gb <> '1' AND i_dmbo_cd <> '13'then
                    /*단기자차는 해지시 환급금 없다*/
                    /*단기 계산*/
                    if s_0013_c_cancel_calc_gb = '2' then
                        /*공백기간 환급이 아니면 */
                        if V_ENDOR_GB <> '6' THEN
                            /*f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_c_appy_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);*/
                            f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,V_DAMBO_START_DT  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date); /*ljm 해지시 단기율 구하는 부분 수정*/
                            f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                            /* 보험료 단기 계산 = 년간 총 적용보험료 * 단기적용율   */
                            s_appy_prem   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate,-1);
                            s_basic_prem  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate,-1);
                            l_log_data := l_log_data || '1*19(1)[' || s_0013_b_appy_year_prem        ||']=담보해지(단기)연간 적용보험료' ||chr(13)||chr(10);
                            l_log_data := l_log_data || '1*19(1)[' || s_0013_b_basic_year_prem       ||']=담보해지(단기)연간 기본보험료' ||chr(13)||chr(10);
                            l_log_data := l_log_data || '1*19(1)[' || f_fn_rent_short_rate        ||']=f_fn_rent_short_rate배서일기준(단기) 적용보험료' ||chr(13)||chr(10);
                                                                    l_log_data := l_log_data || '1*19(1)[' || s_appy_prem        ||']=담보해지(단기) 적용보험료' ||chr(13)||chr(10);
                                                                    l_log_data := l_log_data || '1*19(1)[' || s_basic_prem       ||']=담보해지(단기) 기본보험료' ||chr(13)||chr(10);
                            /****************************/
                            /* TBID0013 Table Update   **/
                            /****************************/
                            begin
                                update TBID0013T
                                   set
                                  /*    BASIC_PREM      = s_basic_prem ljm 위에 보험료 구하는 부분이 바뀌어 주석으로 막고 소급배서가 아님 보험료 산출부분과 동일하게 함.*/
                                  /*   , APPY_PREM       = s_appy_prem ljm 위에 보험료 구하는 부분이 바뀌어 주석으로 막고 소급배서가 아님 보험료 산출부분과 동일하게 함.*/
                                  /*  , BASIC_YEAR_PREM = i_basic_year_prem*/
                                  /*   , APPY_YEAR_PREM  = i_appy_year_prem*/
                                  BASIC_PREM  = CASE WHEN (i_basis_from -V_DAMBO_START_DT) = 0 THEN 0 ELSE round(BASIC_YEAR_PREM *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (i_basis_from -V_DAMBO_START_DT) ,-1) END
                                  , APPY_PREM   = CASE WHEN (i_basis_from -V_DAMBO_START_DT) = 0 THEN 0 ELSE round(APPY_YEAR_PREM  *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (i_basis_from -V_DAMBO_START_DT) ,-1) END
                                  , SHORT_R     = f_fn_rent_short_rate /* ljm 20150904 단기율 추가*/
                                 where POL_NO      = i_pol_no
                                   and ENDOR_NO    = i_endor_no
                                   and WORK_DATE   = to_date(i_work_date, 'YYYYMMDD')
                                   and DMBO_CD     = i_dmbo_cd
                                   and APPY_TO >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                                   and APPY_TO <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      /*20130422 TO_DATE 처리 최재혁*/

                                exception  when others then o_result := 'Error';
                                                               raise_application_error(-20001, '해지담보 보험료 Update [TBID0013T] Error Error[11]: '|| sqlerrm);
                            end;
                                                                l_log_data := l_log_data || '1*20[' ||  '해지담보 Update [TBID0013T] OK...2'   ||chr(13)||chr(10);
                             /*ljm 해지지 기존 구간보험료 재산출*/
                            begin
                                update TBID0013T
                                   set
                                       BASIC_PREM  = CASE WHEN (i_basis_from -V_DAMBO_START_DT) = 0 THEN 0 ELSE round(BASIC_YEAR_PREM *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (i_basis_from -V_DAMBO_START_DT) ,-1) END
                                     , APPY_PREM   = CASE WHEN (i_basis_from -V_DAMBO_START_DT) = 0 THEN 0 ELSE round(APPY_YEAR_PREM  *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (i_basis_from -V_DAMBO_START_DT) ,-1) END
                                    /*    BASIC_PREM  = CASE WHEN (i_basis_from -i_istar_cont_date) = 0 THEN 0 ELSE round(BASIC_YEAR_PREM *  f_fn_rent_short_rate  ,-1) END*/
                                    /*    , APPY_PREM   = CASE WHEN (i_basis_from -i_istar_cont_date) = 0 THEN 0 ELSE round(APPY_YEAR_PREM  *  f_fn_rent_short_rate  ,-1) END*/
                                     /* ljm 20150904 해지시 보험료 산출수정*/
                                     , SHORT_R     = f_fn_rent_short_rate /* ljm 20150904 단기율 추가*/
                                 where POL_NO      = i_pol_no
                                   and ENDOR_NO    = i_endor_no
                                   and DMBO_CD     = i_dmbo_cd
                                   and APPY_FROM >= to_date(to_char(V_DAMBO_START_DT, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS');


                                exception  when others then o_result := 'Error';
                                                  raise_application_error(-20001, '해지담보 보험료 Update [TBID0013T] Error Error[10]: '|| sqlerrm);
                            end;

                            f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,V_DAMBO_START_DT  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date); /*ljm 해지시 단기율 구하는 부분 수정*/
                            f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);
                            /*
                            f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,i_istar_cont_date  ,i_basis_from  ,i_istar_cont_date  ,i_iend_cont_date);
                            f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                            begin
                                update TBID0013T
                                   set BASIC_PREM  = round(BASIC_YEAR_PREM *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (i_basis_from -i_istar_cont_date) ,-1)
                                     , APPY_PREM   = round(APPY_YEAR_PREM  *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (i_basis_from -i_istar_cont_date) ,-1)
                                 where POL_NO      = i_pol_no
                                   and ENDOR_NO    = i_endor_no
                                   and WORK_DATE   = to_date(i_work_date, 'YYYYMMDD')
                                   and DMBO_CD     = i_dmbo_cd
                                   and APPY_TO >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                                   and APPY_TO <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      --20130422 TO_DATE 처리 최재혁


                                exception  when others then o_result := 'Error';
                                                  raise_application_error(-20001, '해지담보 보험료 Update [TBID0013T] Error Error[10]: '|| sqlerrm);
                            end;
                            */
                        /*공백기간 환급(실제 발생하진 않지만 추가함)*/
                        else
                            f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,i_istar_cont_date  ,i_all_cliam_date  ,i_istar_cont_date  ,i_iend_cont_date);
                            f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);
                            /****************************/
                            /* TBID0013 Table Update   **/
                            /****************************/
                            begin
                                update TBID0013T
                                   set BASIC_PREM    = round(BASIC_YEAR_PREM *  f_fn_rent_short_rate * (to_date(i_all_cliam_date) - to_date(APPY_FROM)) / (i_all_cliam_date -i_istar_cont_date) ,-1)
                                     , APPY_PREM     = round(APPY_YEAR_PREM  *  f_fn_rent_short_rate * (to_date(i_all_cliam_date) - to_date(APPY_FROM)) / (i_all_cliam_date -i_istar_cont_date) ,-1)
                                     , DMBO_END_DATE = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                                     , APPY_TO       = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                                     , BASIS_TO      = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                                 where POL_NO        = i_pol_no
                                   and ENDOR_NO      = i_endor_no
                                   and WORK_DATE     = to_date(i_work_date, 'YYYYMMDD')
                                   and DMBO_CD       = i_dmbo_cd
                                   and APPY_TO      >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                                   and APPY_TO      <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      /*20130422 TO_DATE 처리 최재혁*/


                                exception  when others then o_result := 'Error';
                                                  raise_application_error(-20001, '해지담보 보험료 Update [TBID0013T] Error Error[10]: '|| sqlerrm);
                            end;
                        end if;
                                                            l_log_data := l_log_data || '1*18[' || f_fn_rent_short_rate    ||']=단기요율'  ||chr(13)||chr(10);
                                                            l_log_data := l_log_data || '1*19[' || s_appy_prem    ||']=담보해지 단기 적용보험료'  ||chr(13)||chr(10);
                    end if;
                /* 일할 계산 */
                else
                    /*공백기간 환급이 아니면 */
                    if V_ENDOR_GB <> '6' THEN

                            if s_0013_c_cancel_calc_gb <> '1' then
                                        /* 단기요율 계산 = 적용종료일 - 적용시작일 */
                                        /*단기율 구하는 날짜 s_0013_c_appy_from = > V_DAMBO_START_DT*/
                                f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,V_DAMBO_START_DT  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                                f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                       IF i_dmbo_cd <> '13' then

                                    /* 보험료 단기 계산 = 년간 총 적용보험료 * 단기적용율   */
                                    /*s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);*/
                                    /*s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);*/
                                    /*ljm 20151022 보험료 구할시 기간적용 추가*/
                                    s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate * ((s_0013_c_appy_to - s_0013_b_appy_from) / (s_0013_c_appy_to - V_DAMBO_START_DT))    ,-1);
                                    s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate * ((s_0013_c_appy_to - s_0013_b_appy_from) / (s_0013_c_appy_to - V_DAMBO_START_DT))    ,-1);
                                                l_log_data := l_log_data || '1*19(2)[' || f_fn_rent_short_rate        ||']=배f_fn_rent_short_rate서일기준(단기) 적용보험료' ||chr(13)||chr(10);
                                                                            l_log_data := l_log_data || '1*19(2)[' || s_appy_prem        ||']=담보해지(단기) 적용보험료' ||chr(13)||chr(10);
                                                                            l_log_data := l_log_data || '1*19(2)[' || s_basic_prem       ||']=담보해지(단기) 기본보험료' ||chr(13)||chr(10);

                                        /*ljm 해지지 기존 구간보험료 재산출*/
                                      begin
                                          update TBID0013T
                                             set
                                                 BASIC_PREM  = CASE WHEN (s_0013_c_appy_to -V_DAMBO_START_DT) = 0 THEN 0 ELSE round(BASIC_YEAR_PREM *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (s_0013_c_appy_to -V_DAMBO_START_DT) ,-1) END
                                               , APPY_PREM   = CASE WHEN (s_0013_c_appy_to -V_DAMBO_START_DT) = 0 THEN 0 ELSE round(APPY_YEAR_PREM  *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (s_0013_c_appy_to -V_DAMBO_START_DT) ,-1) END
                                              /*    BASIC_PREM  = CASE WHEN (i_basis_from -i_istar_cont_date) = 0 THEN 0 ELSE round(BASIC_YEAR_PREM *  f_fn_rent_short_rate  ,-1) END*/
                                              /*    , APPY_PREM   = CASE WHEN (i_basis_from -i_istar_cont_date) = 0 THEN 0 ELSE round(APPY_YEAR_PREM  *  f_fn_rent_short_rate  ,-1) END*/
                                               /* ljm 20150904 해지시 보험료 산출수정*/
                                               , SHORT_R     = f_fn_rent_short_rate /* ljm 20150904 단기율 추가*/
                                           where POL_NO      = i_pol_no
                                             and ENDOR_NO    = i_endor_no
                                             and DMBO_CD     = i_dmbo_cd
                                             and APPY_FROM >= to_date(to_char(V_DAMBO_START_DT, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS');


                                          exception  when others then o_result := 'Error';
                                                            raise_application_error(-20001, '해지담보 보험료 Update [TBID0013T] Error Error[10]: '|| sqlerrm);
                                      end;

                                 ELSE

                                   /*이전보험료를 일할계산함 = 이전 배서의 기간보험료 * (기준일-이전배서 대상시작일) / (이전배서 대상종료일 - 이전배서 대상시작일)*/
                                  s_appy_prem  := round(s_0013_b_appy_prem  * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                                  s_basic_prem := round(s_0013_b_basic_prem * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                                                                  l_log_data := l_log_data || '1*19[' || s_appy_prem    ||']=담보해지 일할 적용보험료'  ||chr(13)||chr(10);
                                 END IF;

                        ELSE

                              /*이전보험료를 일할계산함 = 이전 배서의 기간보험료 * (기준일-이전배서 대상시작일) / (이전배서 대상종료일 - 이전배서 대상시작일)*/
                              s_appy_prem  := round(s_0013_b_appy_prem  * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                              s_basic_prem := round(s_0013_b_basic_prem * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                                                                  l_log_data := l_log_data || '1*19[' || s_appy_prem    ||']=담보해지 일할 적용보험료'  ||chr(13)||chr(10);

                        END IF;
                        /*이전보험료를 일할계산함 = 이전 배서의 기간보험료 * (기준일-이전배서 대상시작일) / (이전배서 대상종료일 - 이전배서 대상시작일)*/
                        /*s_appy_prem  := round(s_0013_b_appy_prem  * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;*/
                        /*s_basic_prem := round(s_0013_b_basic_prem * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;*/
                        /*                                    l_log_data := l_log_data || '1*19[' || s_appy_prem    ||']=담보해지 일할 적용보험료'  ||chr(13)||chr(10);*/

                        /****************************/
                        /* TBID0013 Table Update   **/
                        /****************************/
                        begin
                            update TBID0013T
                               set BASIC_PREM      = s_basic_prem
                                 , APPY_PREM       = s_appy_prem
                              /*  , BASIC_YEAR_PREM = i_basic_year_prem*/
                              /*   , APPY_YEAR_PREM  = i_appy_year_prem*/
                              , SHORT_R     = f_fn_rent_short_rate /* ljm 20150904 단기율 추가*/
                             where POL_NO      = i_pol_no
                               and ENDOR_NO    = i_endor_no
                               and WORK_DATE   = to_date(i_work_date, 'YYYYMMDD')
                               and DMBO_CD     = i_dmbo_cd
                               and APPY_TO >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                               and APPY_TO <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      /*20130422 TO_DATE 처리 최재혁*/

                            exception  when others then o_result := 'Error';
                                                           raise_application_error(-20001, '해지담보 보험료 Update [TBID0013T] Error Error[11]: '|| sqlerrm);
                        end;
                                                            l_log_data := l_log_data || '1*20[' ||  '해지담보 Update [TBID0013T] OK...2'   ||chr(13)||chr(10);
                    /*공백기간 환급이면 */
                    else
                        /*이전보험료를 일할계산함 = 이전 배서의 기간보험료 * (전차량 사용종료일-이전배서 대상시작일) / (이전배서 대상종료일 - 이전배서 대상시작일)*/
                        s_appy_prem  := round(s_0013_b_appy_prem  * ((i_all_cliam_date - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                        s_basic_prem := round(s_0013_b_basic_prem * ((i_all_cliam_date - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                                                            l_log_data := l_log_data || '1*19[' || s_appy_prem    ||']=담보해지 일할 적용보험료'  ||chr(13)||chr(10);

                        /****************************/
                        /* TBID0013 Table Update   **/
                        /****************************/
                        begin
                            update TBID0013T
                               set BASIC_PREM      = s_basic_prem
                                 , APPY_PREM       = s_appy_prem
                              /*   , BASIC_YEAR_PREM = i_basic_year_prem*/
                              /*   , APPY_YEAR_PREM  = i_appy_year_prem*/
                                 , DMBO_END_DATE = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                                 , APPY_TO       = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                                 , BASIS_TO      = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                             where POL_NO      = i_pol_no
                               and ENDOR_NO    = i_endor_no
                               and WORK_DATE   = to_date(i_work_date, 'YYYYMMDD')
                               and DMBO_CD     = i_dmbo_cd
                               and APPY_TO >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                               and APPY_TO <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      /*20130422 TO_DATE 처리 최재혁*/

                            exception  when others then o_result := 'Error';
                                                           raise_application_error(-20001, '해지담보 보험료 Update [TBID0013T] Error Error[11]: '|| sqlerrm);
                        end;
                                                            l_log_data := l_log_data || '1*20[' ||  '해지담보(공백기간) Update [TBID0013T] OK...2'   ||chr(13)||chr(10);
                    end if;
                end if;
            /*단기계약건*/
            else
                 /*ljm 20151006 i_istar_cont_date => V_DAMBO_START_DT*/
                f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,V_DAMBO_START_DT  ,i_basis_from  ,i_istar_cont_date  ,i_iend_cont_date);
                f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);
                /****************************/
                /* TBID0013 Table Update   **/
                /****************************/
                begin
                    update TBID0013T
                       set BASIC_PREM  = round(i_dmbo_basic_prem *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (i_basis_from -V_DAMBO_START_DT) ,-1)
                         , APPY_PREM   = round(i_dmbo_appy_prem  *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (i_basis_from -V_DAMBO_START_DT) ,-1)
                         , SHORT_R     = f_fn_rent_short_rate /* ljm 20150904 단기율 추가*/
                     where POL_NO      = i_pol_no
                       and ENDOR_NO    = i_endor_no
                       and WORK_DATE   = to_date(i_work_date, 'YYYYMMDD')
                       and DMBO_CD     = i_dmbo_cd
                       and APPY_TO >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                       and APPY_TO <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      /*20130422 TO_DATE 처리 최재혁*/


                    exception  when others then o_result := 'Error';
                                                  raise_application_error(-20001, '해지담보(단기계약) 보험료 Update [TBID0013T] Error[10]: '|| sqlerrm);
                end;

                /* LJM 20151019 해지시 전기간 적용보험료 다시 계산*/
                begin
                    update TBID0013T
                       set
                           BASIC_PREM  = CASE WHEN (i_basis_from -V_DAMBO_START_DT) = 0 THEN 0 ELSE round(BASIC_YEAR_PREM *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (i_basis_from -V_DAMBO_START_DT) ,-1) END
                         , APPY_PREM   = CASE WHEN (i_basis_from -V_DAMBO_START_DT) = 0 THEN 0 ELSE round(APPY_YEAR_PREM  *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (i_basis_from -V_DAMBO_START_DT) ,-1) END
                        /* ljm 20150914 적용보험료 와 기본보험료 구하는 공식 위에내용을 아래 내용으로 수정.  i_dmbo_appy_prem ==> s_0013_b_appy_year_prem*/
                        /*    BASIC_PREM  = CASE WHEN (i_basis_from -i_istar_cont_date) = 0 THEN 0 ELSE round(i_dmbo_basic_prem *  f_fn_rent_short_rate  ,-1) END*/
                        /* , APPY_PREM   = CASE WHEN (i_basis_from -i_istar_cont_date) = 0 THEN 0 ELSE round(s_0013_b_appy_year_prem  *  f_fn_rent_short_rate  ,-1) END*/
                         , SHORT_R     = f_fn_rent_short_rate /* ljm 20150904 단기율 추가*/
                     where POL_NO      = i_pol_no
                       and ENDOR_NO    = i_endor_no
                       and DMBO_CD     = i_dmbo_cd
                       and APPY_FROM >= to_date(to_char(V_DAMBO_START_DT, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS');

                    exception  when others then o_result := 'Error';
                                                  raise_application_error(-20001, '해지담보(단기계약) 보험료 Update [TBID0013T] Error[10]: '|| sqlerrm);
                end;


            end if;
        else
            /*해지시 사고가 있으면 분납금을 모두 받는다. */
            /****************************/
            /* TBID0013 Table Update   **/
            /****************************/
            /*공백기간 환급이 아니면 */
            if V_ENDOR_GB <> '6' then

                 if i_dmbo_cd = '13' AND V_ENDOR_GB in ('1','2') then
                     /*이전보험료를 일할계산함 = 이전 배서의 기간보험료 * (기준일-이전배서 대상시작일) / (이전배서 대상종료일 - 이전배서 대상시작일)*/
                      s_appy_prem  := round(s_0013_b_appy_prem  * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                      s_basic_prem := round(s_0013_b_basic_prem * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                                                          l_log_data := l_log_data || '1*19[' || s_appy_prem    ||']=담보(대물임의)해지 일할 적용보험료'  ||chr(13)||chr(10);


                    /****************************/
                    /* TBID0013 Table Update   **/
                    /****************************/
                    begin
                        update TBID0013t
                           set BASIC_PREM      = s_basic_prem
                             , APPY_PREM       = s_appy_prem
                          /*  , BASIC_YEAR_PREM = i_basic_year_prem*/
                          /*   , APPY_YEAR_PREM  = i_appy_year_prem*/
                            , SHORT_R     = f_fn_rent_short_rate /* ljm 20150904 단기율 추가*/
                         where POL_NO      = i_pol_no
                           and ENDOR_NO    = i_endor_no
                           and DMBO_CD     = i_dmbo_cd
                           and WORK_DATE     = to_date(i_work_date, 'YYYYMMDD')
                           and APPY_TO >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                           and APPY_TO <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      /*20130422 TO_DATE 처리 최재혁*/

                        exception  when others then o_result := 'Error';
                                                       raise_application_error(-20001, '해지담보 보험료 Update [TBID0013] Error Error[11]: '|| sqlerrm);
                    end;
                                                        l_log_data := l_log_data || '1*20[' ||  '해지담보 Update [TBID0013] OK...2'   ||chr(13)||chr(10);
                else
                    /* 후에 받아야할 돈을 다 처리해야함으로 보험료 계산이 필요없다. */
                    begin
                        update TBID0013T
                           set DMBO_END_DATE = to_date(to_char(i_basis_from,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                             , APPY_TO       = to_date(to_char(i_basis_from,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                             , BASIS_TO      = to_date(to_char(i_basis_from,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                         where POL_NO        = i_pol_no
                           and ENDOR_NO      = i_endor_no
                           and WORK_DATE     = to_date(i_work_date, 'YYYYMMDD')
                           and DMBO_CD       = i_dmbo_cd
                           and APPY_TO      >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                           and APPY_TO      <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      /*20130422 TO_DATE 처리 최재혁*/

                        exception  when others then o_result := 'Error';
                                           raise_application_error(-20001, '해지담보(전손처리) 보험료 Update [TBID0013T] Error Error[11]: '|| sqlerrm);
                    end;
                                                                l_log_data := l_log_data || '1*20[' ||  '자차 전손처리 담보 Update [TBID0013] OK'   ||chr(13)||chr(10);
                end if;
            else
                begin
                    update TBID0013T
                       set DMBO_END_DATE = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                         , APPY_TO       = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                         , BASIS_TO      = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                     where POL_NO        = i_pol_no
                       and ENDOR_NO      = i_endor_no
                       and WORK_DATE     = to_date(i_work_date, 'YYYYMMDD')
                       and DMBO_CD       = i_dmbo_cd
                       and APPY_TO      >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                       and APPY_TO      <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      /*20130422 TO_DATE 처리 최재혁*/

                    exception  when others then o_result := 'Error';
                                       raise_application_error(-20001, '해지담보(전손처리) 보험료 Update [TBID0013T] Error Error[11]: '|| sqlerrm);
                end;
            end if;
        end if;
    /**********************************************************/
    /** 담보추가:기준일 과 현재배서의 적용시작일이 같으면     */
    /**********************************************************/
    ELSIF  i_basis_from = s_0013_c_appy_from  then
        s_appy_prem  :=0;
        s_basic_prem :=0;
        f_fn_rent_short_rate := 0;

        /*단기 자차*/
        if  i_endor_cd = '801' then
            /* 보험료 계산 - 일할, 단기 구분한다. */
            if  s_0013_c_cancel_calc_gb <> '1' then
                /* 단기요율 계산 = 적용종료일 - 적용시작일 */
                f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_c_appy_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                /* 보험료 단기 계산 = 년간 총 적용보험료 * 단기적용율   */
                s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);
                s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);
                                                    l_log_data := l_log_data || '1*21[**** 담보 추가_TBID0013T ********]'               ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*22[' || s_appy_prem   ||']=담보추가 단기 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*23[' || s_basic_prem  ||']=담보추가 단기 기본보험료' ||chr(13)||chr(10);
            else
                /* 보험료 일할 계산 = 년간 총 적용보험료 * (적용종료일 - 적용시작일) / (보험종기 - 보험시기)   */
                s_appy_prem  :=round(i_dmbo_appy_prem   * ((s_0013_c_appy_to - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;
                s_basic_prem :=round(i_dmbo_basic_prem  * ((s_0013_c_appy_to - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;
                                                    l_log_data := l_log_data || '1*21[**** 담보 추가_TBID0013T ********]'               ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*22[' || s_appy_prem   ||']=담보추가 일할 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*23[' || s_basic_prem  ||']=담보추가 일할 기본보험료' ||chr(13)||chr(10);

            end if;
        /*단기 아닌경우*/
        else
            /*일할계약*/
            if i_short_day_gb = '1' then
                /* 보험료 계산 - 일할, 단기 구분한다. */
                if  s_0013_c_cancel_calc_gb <> '1' then
                    /* 단기요율 계산 = 적용종료일 - 적용시작일 */
                    f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_c_appy_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                    f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                    /* 보험료 단기 계산 = 년간 총 적용보험료 * 단기적용율   */
                    s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);
                    s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);
                                                    l_log_data := l_log_data || '1*21[**** 담보 추가_TBID0013T ********]'               ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*22[' || s_appy_prem   ||']=담보추가 단기 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*23[' || s_basic_prem  ||']=담보추가 단기 기본보험료' ||chr(13)||chr(10);
                else
                    /* 보험료 일할 계산 = 년간 총 적용보험료 * (적용종료일 - 적용시작일) / (보험종기 - 보험시기)   */
                    s_appy_prem  :=round(i_dmbo_appy_prem   * ((s_0013_c_appy_to - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;
                    s_basic_prem :=round(i_dmbo_basic_prem  * ((s_0013_c_appy_to - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;
                                                    l_log_data := l_log_data || '1*21[**** 담보 추가_TBID0013T ********]'               ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*22[' || s_appy_prem   ||']=담보추가 일할 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*23[' || s_basic_prem  ||']=담보추가 일할 기본보험료' ||chr(13)||chr(10);

                end if;
            /*단기계약*/
            else
                /*분납부활*/
                if V_ENDOR_GB = '7' then
                    /*이전 데이터  적용시작일 찾기 */
                    select max(trunc(APPY_FROM)), sum(APPY_PREM), sum(BASIC_PREM)
                      into V_DANGI_APPY_FROM, V_DANGI_APPY_PREM, V_DANGI_BASIC_PREM
                      from TBID0013T
                     where POL_NO    = i_pol_no
                       and ENDOR_NO  = i_endor_no_bef_max
                       and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                       and DMBO_CD   = i_dmbo_cd
                       and APPY_TO   =(select MAX(APPY_TO)
                                         from TBID0013T
                                        where POL_NO    = i_pol_no
                                          and ENDOR_NO  = i_endor_no_bef_max
                                          and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                                          and DMBO_CD   = i_dmbo_cd);

                    /* 보험료 쪼개기. 기존 단기 보험료를 기간별로 쪼갠다.  */
                    /* 보험료 쪼개기. 전 데이터 적용보험료 * ((현재담보종기 - 기준일자)/(현재담보종기-전 데이터 적용시작일))  */
                    s_appy_prem   := round(V_DANGI_APPY_PREM   * ((s_0013_c_appy_to - i_basis_from)/( s_0013_c_appy_to - V_DANGI_APPY_FROM )),-1);
                    s_basic_prem  := round(V_DANGI_BASIC_PREM  * ((s_0013_c_appy_to - i_basis_from)/( s_0013_c_appy_to - V_DANGI_APPY_FROM )),-1);
                                                    l_log_data := l_log_data || '1*21[**** 담보 추가(단기계약-분납부활))_TBID0013T ********]'              ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*22[' || s_appy_prem   ||']=담보추가(단기계약-분납부활) 단기 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*23[' || s_basic_prem  ||']=담보추가(단기계약-분납부활) 단기 기본보험료' ||chr(13)||chr(10);
                /*분납부활 아님*/
                else
                    /* 단기요율 계산 = 적용종료일 - 적용시작일 */
                    f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_c_appy_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                    f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                    /* 보험료 단기 계산 = 년간 총 적용보험료 * 단기적용율   */
                    s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);
                    s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);
                                                    l_log_data := l_log_data || '1*21[**** 담보 추가(단기계약)_TBID0013T ********]'               ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*22[' || s_appy_prem   ||']=담보추가(단기계약) 단기 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*23[' || s_basic_prem  ||']=담보추가(단기계약) 단기 기본보험료' ||chr(13)||chr(10);
                end if;
            end if;
        end if;

        /*****************************/
        /* TBID0013 Table Update    **/
        /*****************************/
        begin
            /*20130422 TO_DATE 처리 최재혁*/
            update TBID0013T
               set BASIC_PREM        = s_basic_prem
                 , APPY_PREM         = s_appy_prem
                 , DMBO_START_DATE   = to_date(to_char(i_basis_from,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                 , DMBO_END_DATE     = APPY_TO
                 , BASIC_YEAR_PREM   = i_basic_year_prem
                 , APPY_YEAR_PREM    = i_appy_year_prem
                 , SHORT_R           = f_fn_rent_short_rate /*ljm 20150904 단기율 관리 추가*/
             where POL_NO     = i_pol_no
               and ENDOR_NO   = i_endor_no
               and WORK_DATE  = to_date(i_work_date, 'YYYYMMDD')
               and DMBO_CD    = i_dmbo_cd
               and APPY_FROM >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
               and APPY_FROM <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');

            exception  when others then o_result := 'Error';
                                           raise_application_error(-20001, '추가담보 보험료 Update [TBID0013T] Error Error[20]: '|| sqlerrm);
        end;
                                                     l_log_data := l_log_data || '1*24[' ||  '추가담보 Update[TBID0013T] OK...4' ||chr(13)||chr(10);

        /*분납 부활이면 이전 데이터*/
        if V_ENDOR_GB = '7' then
            /*일할계약, 단기계약 동일*/
            begin
                update TBID0013T
                   set basic_prem = round(basic_year_prem * ((i_basis_from - trunc(basis_from)) / (i_iend_cont_date - i_istar_cont_date)),-1)
                     , appy_prem  = round(appy_year_prem * ((i_basis_from - trunc(basis_from)) / (i_iend_cont_date - i_istar_cont_date)),-1)
                     , basis_to   = to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                 where POL_NO     = i_pol_no
                   and ENDOR_NO   = i_endor_no
                   and WORK_DATE  = to_date(i_work_date, 'YYYYMMDD')
                   and DMBO_CD    = i_dmbo_cd
                   and APPY_TO    = ( select MAX(APPY_TO)
                                        from TBID0013T
                                       where POL_NO    = i_pol_no
                                         and ENDOR_NO  = i_endor_no_bef_max
                                         and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                                         and DMBO_CD   = i_dmbo_cd );
                exception when others then o_result := null;
            end;
                                                     l_log_data := l_log_data || '1*24-1[' ||  '분납부활(이전데이터) Update[TBID0013T] OK...4' ||chr(13)||chr(10);
        end if;

        if i_day_endor_cnt > 0 then
            /********************************************/
            /** 기준일 이전 Data[TBID0013] Insert       */
            /* 당일배서일 경우에만                      */
     /* 2017.02.08 담보별단체특성율 추가  */
            /********************************************/
            begin
                insert into TBID0013T(POL_NO,               ENDOR_NO,                   BASIC_SCONT_GB,      DMBO_CD,
                                      APPY_FROM,            ACDNT_RESP_WANT,            MAN_RESP_WANT,       INSUR_AMT,
                                      INSUR_AMT_GB,         DUCT_AMT_GB,                BASIC_PREM,          DMBO_START_DATE,
                                      DMBO_END_DATE,        APPY_PREM,                  BASIC_RANGE_R,       CANCEL_CALC_GB,
                                      APPY_TO,              BASIS_FROM,                 BASIS_TO,
                                      USER_ID,              BASIC_YEAR_PREM,            APPY_YEAR_PREM,      WORK_DATE, GRP_DMBO_RATE
                                      )
                               select POL_NO,               i_endor_no,                 BASIC_SCONT_GB,      DMBO_CD,
                                      APPY_FROM,            ACDNT_RESP_WANT,            MAN_RESP_WANT,       INSUR_AMT,
                                      INSUR_AMT_GB,         DUCT_AMT_GB,                BASIC_PREM,          DMBO_START_DATE,
                                      DMBO_END_DATE,        APPY_PREM,                  BASIC_RANGE_R,       CANCEL_CALC_GB,
                                      APPY_TO,              BASIS_FROM,                 BASIS_TO,
                                      USER_ID,              BASIC_YEAR_PREM,            APPY_YEAR_PREM,      to_date(i_work_date, 'YYYYMMDD') , GRP_DMBO_RATE
                                 from TBID0013T
                                where POL_NO    = i_pol_no
                                  and ENDOR_NO  = i_endor_no_bef_max
                                  and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                                  and DMBO_CD   = i_dmbo_cd
                                  and APPY_TO   = to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');
                exception when others then o_result := null;
            end;
                                                     l_log_data := l_log_data || '1*24-1[' ||  '추가담보(당일배서) Update[TBID0013T] OK...4' ||chr(13)||chr(10);
        end if;


    /************************************************************************/
    /** 보험료 변동                                                        **/
    /** 2013.05.30일 추가                                                  **/
    /** 보험료변동이 없어도 공백기간환급이면 적용받도록 수정함             **/
    /** 2013.05.30일 추가                                                  **/
    /** 보험료변동이 없어도 공백기간환급이면 적용받도록 수정함             **/
    /************************************************************************/
    ELSIF (s_0013_appy_prem <> s_0013_b_appy_prem) or (s_0013_appy_prem = s_0013_b_appy_prem and V_ENDOR_GB = '6')  then
                                                     l_log_data := l_log_data || '1*25[**** 보험료변동_TBID0013 ********]'  ||chr(13)||chr(10);
        /* 기준일 이전 사용기간에 대한 보험료 계산 */
        /* 공백기간환급 구분을 먼저 처리한다.*/
        /* 공백기간 환급이 아니면 */
        if V_ENDOR_GB <> '6' then
            /*일할계약*/
            if i_short_day_gb = '1' then
                /* 단기 계산 ( 2: 단기, 3:단기자차)*/
                if    s_0013_c_cancel_calc_gb <> '1' then
                    /*단기요율 계산 : 기준일자 - 적용시작일 로 단기요율 계산   */
                    /* ljm 20150914 단기자차 관련 단기율 구하는 부분 if로 분리하여 추가 처리*/
                    if    s_0013_c_cancel_calc_gb = '3' then
                        f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_b_appy_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                        f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                        s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate  * ((i_basis_from - s_0013_b_appy_from) / (s_0013_c_appy_to - s_0013_b_appy_from))     ,-1 );
                        s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate  * ((i_basis_from - s_0013_b_appy_from) / (s_0013_c_appy_to - s_0013_b_appy_from))     ,-1);
                    else
                        f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_b_appy_from  ,i_basis_from  ,i_istar_cont_date  ,i_iend_cont_date);
                        f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                        s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate,-1);
                        s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate,-1);

                    end if;


                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1      ||']=보험료변동 단기 적용보험료(변경전)'  ||chr(13)||chr(10);
                else
                    /* = 이전 배서의 기간보험료 * (기준일자-이전배서 대상시작일) / (이전배서 대상종료일 - 이전배서 대상시작일)*/
                    s_appy_prem1  := round(s_0013_b_appy_prem  * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                    s_basic_prem1 := round(s_0013_b_basic_prem * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1    ||']=보험료변동 일할 적용보험료'  ||chr(13)||chr(10);
                end if;
            /*단기계약*/
            else
                /*단기요율 계산 : 기준일자 - 적용시작일 로 단기요율 계산   */
                /*f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,i_istar_cont_date  ,i_iend_cont_date  ,i_istar_cont_date  ,i_iend_cont_date);*/
                /*f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);*/
                /*s_appy_prem1   := round((s_0013_b_appy_year_prem  * f_fn_rent_short_rate)  * ((i_basis_from - s_0013_b_appy_from) / (i_iend_cont_date  - i_istar_cont_date)),-1);*/
                /*s_basic_prem1  := round((s_0013_b_basic_year_prem * f_fn_rent_short_rate)  * ((i_basis_from - s_0013_b_appy_from) / (i_iend_cont_date  - i_istar_cont_date)),-1);*/

                /* ljm 20150914 단기계약시 단기율 산출로직 수정 기준종료일 - 공제시기 분담금 로직 아래로 변경*/
                f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,V_DAMBO_START_DT  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);
                /* ljm 20151012 분모가 되는 기간 s_0013_b_appy_from = > V_DAMBO_START_DT 담보시기로 변경*/
                s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate   * ((i_basis_from - s_0013_b_appy_from) / (s_0013_c_appy_to - V_DAMBO_START_DT))     ,-1);
                s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate   * ((i_basis_from - s_0013_b_appy_from) / (s_0013_c_appy_to - V_DAMBO_START_DT))     ,-1);



                                                     l_log_data := l_log_data || '1*26[' || (i_basis_from - s_0013_b_appy_from)  ||']=i_basis_from - s_0013_b_appy_from'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*26[' || (s_0013_b_appy_to - s_0013_b_appy_from)  ||']=s_0013_b_appy_to - s_0013_b_appy_from'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율(단기계약)'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1      ||']=보험료변동 단기(단기계약) 적용보험료(변경전)'  ||chr(13)||chr(10);
            end if;

        /* 공백기간 환급 */
        else
            /* 사고 아닌경우*/
            if  V_ACCI_CHECK = 'N' then
                /*일할 계약*/
                if i_short_day_gb = '1' then
                    /* 단기 계산 ( 2: 단기, 3:단기자차)*/
                    if    s_0013_c_cancel_calc_gb <> '1' then
                        /*단기요율 계산 : 전차량 사용종료일 - 적용시작일 로 단기요율 계산   */
                        f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_b_appy_from  ,i_all_cliam_date  ,i_istar_cont_date  ,i_iend_cont_date);
                        f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                        s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate,-1);
                        s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate,-1);
                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율(공백기간)'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1      ||']=보험료변동 단기(공백기간) 적용보험료(변경전)'  ||chr(13)||chr(10);
                    /* 일할 계산 */
                    else
                        /* = 이전 배서의 기간보험료 * (전차량 사용종료일-이전배서 대상시작일) / (이전배서 대상종료일 - 이전배서 대상시작일)*/
                        s_appy_prem1  := round(s_0013_b_appy_prem  * ((i_all_cliam_date - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                        s_basic_prem1 := round(s_0013_b_basic_prem * ((i_all_cliam_date - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1    ||']=보험료변동(공백기간) 일할 적용보험료'  ||chr(13)||chr(10);
                    end if;
                /*단기 계약*/
                else
                    /*단기요율 계산 : 전차량 사용종료일 - 적용시작일 로 단기요율 계산   */
                    /*f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_b_appy_from  ,i_all_cliam_date  ,i_istar_cont_date  ,i_iend_cont_date);*/
                    /*f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);*/

                    /*s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate,-1);*/
                    /*s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate,-1);*/

                    /* ljm 20150916 단기율 및 분담금 구하는 방법 변경   단기율 기준종료일 ？ 공제시기
                        분담금 분담금 = 변경전 연간분담금 * 단기요율 * (전차량종료일 ？ 전 기준시작일 )  / ( 기준종료일 ？ 공제시기 )
                    */
                    f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,V_DAMBO_START_DT  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                    f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);
                   /* ljm 20151013 s_0013_b_appy_from => V_DAMBO_START_DT 변경*/
                    s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate  * ((i_all_cliam_date - s_0013_b_appy_from) / (s_0013_c_appy_to - V_DAMBO_START_DT)) ,-1);
                    s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate  * ((i_all_cliam_date - s_0013_b_appy_from) / (s_0013_c_appy_to - V_DAMBO_START_DT)),-1);



                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율(단기계약-공백기간)'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1      ||']=보험료변동 단기(단기계약-공백기간) 적용보험료(변경전)'  ||chr(13)||chr(10);
                end if;
            /* 사고인 경우*/
            else
                /*전손처리 아닌경우*/
                if V_ALL_CLAIM = 'N' then
                    /*일할 계약 */
                    if i_short_day_gb = '1' then
                        /* 단기 계산 ( 2: 단기, 3:단기자차)*/
                        if    s_0013_c_cancel_calc_gb <> '1' then
                            /*단기요율 계산 : 전차량 사용종료일 - 적용시작일 로 단기요율 계산   */
                            f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_b_appy_from  ,i_basis_from  ,i_istar_cont_date  ,i_iend_cont_date);
                            f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                            s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate,-1);
                            s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate,-1);
                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율(공백기간-사고있음)'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1      ||']=보험료변동 단기(공백기간-사고있음) 적용보험료(변경전)'  ||chr(13)||chr(10);
                        /* 일할 계산 */
                        else
                            /* = 이전 배서의 기간보험료 * (전차량 사용종료일-이전배서 대상시작일) / (이전배서 대상종료일 - 이전배서 대상시작일)*/
                            s_appy_prem1  := round(s_0013_b_appy_prem  * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                            s_basic_prem1 := round(s_0013_b_basic_prem * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1    ||']=보험료변동(공백기간-사고있음) 일할 적용보험료'  ||chr(13)||chr(10);
                        end if;
                    /*단기 계약*/
                    else
                        /*단기요율 계산 : 전차량 사용종료일 - 적용시작일 로 단기요율 계산   */
                        f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_b_appy_from  ,i_basis_from  ,i_istar_cont_date  ,i_iend_cont_date);
                        f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                        s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate,-1);
                        s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate,-1);
                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율(공백기간-사고있음)'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1      ||']=보험료변동 단기(공백기간-사고있음) 적용보험료(변경전)'  ||chr(13)||chr(10);
                    end if;
                /*전손처리*/
                else
                    /*기존 보험료 그대로 받는다 */
                    s_appy_prem1  := s_0013_b_appy_prem;
                    s_basic_prem1 := s_0013_b_basic_prem;
                end if;
            end if;
        end if;

        /* 기준일 이전 데이터 날짜 update 하기 위해 날짜 계산 */
        if V_ENDOR_GB = '6' then
            V_DMBO_END_DATE := i_all_cliam_date;
            if V_ACCI_CHECK = 'N' then
                V_BASIS_TO_DATE := i_all_cliam_date;
            else
                V_BASIS_TO_DATE := i_basis_from;
            end if;
        else
            V_DMBO_END_DATE := i_basis_from;
            V_BASIS_TO_DATE := i_basis_from;
        end if;

        /* 기준일 이후 사용기간에 대한 보험료 계산 */
        /* 분납부활이 여부에 따라서 처리가 달라짐 */
        /* 일할 단기 계산 */
        /*일할 계약*/
        if i_short_day_gb = '1' then
            if    s_0013_c_cancel_calc_gb <> '1' then
                /*단기요율 계산 : 적용종료일 - 기준일자 로 단기요율 계산   */
                 /* ljm 20150914 단기자차 관련 단기율 구하는 부분 if로 분리하여 추가 처리*/
                    if    s_0013_c_cancel_calc_gb = '3' then
                        f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_b_appy_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                        f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                        s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate  * ((s_0013_c_appy_to - i_basis_from) / (s_0013_c_appy_to - s_0013_b_appy_from))     ,-1 );
                        s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate  * ((s_0013_c_appy_to - i_basis_from) / (s_0013_c_appy_to - s_0013_b_appy_from))     ,-1);
                    else
                        f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,i_basis_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                        f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                        s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);
                        s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);

                    end if;



                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem    ||']=보험료변동 단기 적용보험료(변경후)'  ||chr(13)||chr(10);
            else
                /* 기준일 이후 기간 동안 = 년보험료 * (보험종기 - 기준일) / (보험종기 - 보험시기)*/
                s_appy_prem   := round(i_dmbo_appy_prem  *   ((i_iend_cont_date  - i_basis_from) / (i_iend_cont_date  - i_istar_cont_date)) ,-1);
                s_basic_prem  := round(i_dmbo_basic_prem *   ((i_iend_cont_date  - i_basis_from) / (i_iend_cont_date  - i_istar_cont_date)) ,-1);
                                                     l_log_data := l_log_data || '1*28[' || s_appy_prem    ||']=년적용보험료*(보험종기-기준일)/(보험종기-보험시기)'  ||chr(13)||chr(10);
            end if;
        /*단기 계약*/
        else
              /*단기요율 계산 : 적용종료일 - 기준일자 로 단기요율 계산   */
            /*f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,i_istar_cont_date  ,i_iend_cont_date  ,i_istar_cont_date  ,i_iend_cont_date);*/
            /*f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);*/

            /*s_appy_prem   := round((i_dmbo_appy_prem  * f_fn_rent_short_rate) *   ((s_0013_c_appy_to  - i_basis_from) / (i_iend_cont_date  - i_istar_cont_date)) ,-1);*/
            /*s_basic_prem  := round((i_dmbo_basic_prem  * f_fn_rent_short_rate) *   ((s_0013_c_appy_to  - i_basis_from) / (i_iend_cont_date  - i_istar_cont_date)) ,-1);*/
             /* ljm 20150914 단기계약시 단기율 산출로직 수정 기준종료일 - 공제시기 분담금 로직 아래로 변경*/
              f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,V_DAMBO_START_DT  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
              f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);
              s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate  * ((s_0013_c_appy_to - i_basis_from) / (s_0013_c_appy_to - V_DAMBO_START_DT))      ,-1);
              s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate  * ((s_0013_c_appy_to - i_basis_from) / (s_0013_c_appy_to - V_DAMBO_START_DT))      ,-1);

                                                     l_log_data := l_log_data || '1*26[' || (s_0013_c_appy_to  - i_basis_from)  ||']=s_0013_c_appy_to  - i_basis_from'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*26[' || (i_iend_cont_date  - i_istar_cont_date)  ||']=i_iend_cont_date  - i_istar_cont_date'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem    ||']=보험료변동 단기 적용보험료(변경후)'  ||chr(13)||chr(10);
        end if;

        /***********************************************************/
        /* 기준일 이후 보험료을 TBID0013에 Insert 시킴             */
        /* 단기자차의 담보종기가 보험종기로 생성되는 오류가        */
        /* 발생하여 단기자차인경우와 분기처리하여 처리             */
        /* ljm 20150914                                            */
 /* 2017.02.08 담보별 단체특성율 추가    */
        /***********************************************************/
        if    s_0013_c_cancel_calc_gb = '3' then
            begin
                /*20130422 TO_DATE 처리 최재혁, BASIS_FROM 잘못들어가는거 수정.*/
                insert into TBID0013T(POL_NO,               ENDOR_NO,                   BASIC_SCONT_GB,        DMBO_CD,
                                     ACDNT_RESP_WANT,      MAN_RESP_WANT,              INSUR_AMT,             INSUR_AMT_GB,
                                     DUCT_AMT_GB,          BASIC_PREM,                 APPY_PREM,             BASIC_RANGE_R,
                                     CANCEL_CALC_GB,       APPY_TO,                    BASIS_TO,              USER_ID,
                                     BASIC_YEAR_PREM,      APPY_YEAR_PREM,
                                     APPY_FROM,
                                     DMBO_START_DATE,
                                     DMBO_END_DATE,
                                     BASIS_FROM,
                                     WORK_DATE,
         GRP_DMBO_RATE
                                     )
                              select POL_NO,               ENDOR_NO,                   BASIC_SCONT_GB,        DMBO_CD,
                                     ACDNT_RESP_WANT,      MAN_RESP_WANT,              INSUR_AMT,             INSUR_AMT_GB,
                                     DUCT_AMT_GB,          s_basic_prem,               s_appy_prem,           BASIC_RANGE_R,
                                     CANCEL_CALC_GB,       APPY_TO,                    BASIS_TO,              USER_ID,
                                     i_basic_year_prem,    i_appy_year_prem,
                                     to_date(to_char(i_basis_from    ,'yyyymmdd')||'235959', 'yyyymmddhh24miss'),
                                     to_date(to_char(i_basis_from    ,'yyyymmdd')||'235959', 'yyyymmddhh24miss'),
                                     /*to_date(to_char(i_iend_cont_date,'yyyymmdd')||'235959', 'yyyymmddhh24miss'),*/
                                     to_date(to_char(s_0013_c_appy_to,'yyyymmdd')||'235959', 'yyyymmddhh24miss'), /* ljm수정 단기자차시 담보적용종기가 보험종기로 생성되어 수정.*/
                                     to_date(to_char(i_basis_from    ,'yyyymmdd')||'235959', 'yyyymmddhh24miss'),
                                     to_date(i_work_date, 'YYYYMMDD') ,
         GRP_DMBO_RATE
                                from TBID0013T
                               where POL_NO   = i_pol_no
                                 and ENDOR_NO = i_endor_no
                                 and DMBO_CD  = i_dmbo_cd
                                 and APPY_FROM <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                                 and APPY_TO   >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');
                                 /*and APPY_TO >= to_date(to_char(i_iend_cont_date, 'yyyymmdd')||'000000', 'yyyymmddhh24miss')*/
                                 /*and APPY_TO <= to_date(to_char(i_iend_cont_date, 'yyyymmdd')||'235959', 'yyyymmddhh24miss');*/

                exception when others then o_result := 'Error';
                                                 raise_application_error(-20001, '기준일 이후 일할 보험료 Insert[TBID0013] Error[30]: '|| sqlerrm);

            end;
       else


            begin
                /*20130422 TO_DATE 처리 최재혁, BASIS_FROM 잘못들어가는거 수정.*/
  /* 2017.02.08 담보별 단체특성율 추가 */
                insert into TBID0013T(POL_NO,               ENDOR_NO,                   BASIC_SCONT_GB,        DMBO_CD,
                                      ACDNT_RESP_WANT,      MAN_RESP_WANT,              INSUR_AMT,             INSUR_AMT_GB,
                                      DUCT_AMT_GB,          BASIC_PREM,                 APPY_PREM,             BASIC_RANGE_R,
                                      CANCEL_CALC_GB,       APPY_TO,                    BASIS_TO,              USER_ID,
                                      BASIC_YEAR_PREM,      APPY_YEAR_PREM,
                                      APPY_FROM,
                                      DMBO_START_DATE,
                                      DMBO_END_DATE,
                                      BASIS_FROM,
                                      WORK_DATE,
         GRP_DMBO_RATE
                                      )
                               select POL_NO,               ENDOR_NO,                   BASIC_SCONT_GB,        DMBO_CD,
                                      ACDNT_RESP_WANT,      MAN_RESP_WANT,              INSUR_AMT,             INSUR_AMT_GB,
                                      DUCT_AMT_GB,          s_basic_prem,               s_appy_prem,           BASIC_RANGE_R,
                                      CANCEL_CALC_GB,       APPY_TO,                    BASIS_TO,              USER_ID,
                                      i_basic_year_prem,    i_appy_year_prem,
                                      to_date(to_char(i_basis_from    ,'yyyymmdd')||'235959', 'yyyymmddhh24miss'),
                                      to_date(to_char(i_basis_from    ,'yyyymmdd')||'235959', 'yyyymmddhh24miss'),
                                      to_date(to_char(i_iend_cont_date,'yyyymmdd')||'235959', 'yyyymmddhh24miss'),
                                      to_date(to_char(i_basis_from    ,'yyyymmdd')||'235959', 'yyyymmddhh24miss'),
                                      to_date(i_work_date, 'YYYYMMDD') ,
         GRP_DMBO_RATE
                                 from TBID0013T
                                where POL_NO     = i_pol_no
                                  and ENDOR_NO   = i_endor_no
                                  and WORK_DATE  = to_date(i_work_date, 'YYYYMMDD')
                                  and DMBO_CD    = i_dmbo_cd
                                  and APPY_FROM <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                                  and APPY_TO   >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');
                                 /*and APPY_TO >= to_date(to_char(i_iend_cont_date, 'yyyymmdd')||'000000', 'yyyymmddhh24miss')*/
                                 /*and APPY_TO <= to_date(to_char(i_iend_cont_date, 'yyyymmdd')||'235959', 'yyyymmddhh24miss');*/

                exception when others then o_result := 'Error';
                                                 raise_application_error(-20001, '기준일 이후 일할 보험료 Insert[TBID0013T] Error[30]: '|| sqlerrm);

            end;
                                                      l_log_data := l_log_data ||  '1*29[' || '기준일이후 일할보험료 Insert[TBID0013T] OK...5' ||chr(13)||chr(10);
        end if;
        /***********************************************************/
        /* 기준일 이전 보험료을 TBID0013에 Update 시킴             */
        /***********************************************************/
        begin
            /*20130422 TO_DATE 처리 최재혁*/
            Merge  into TBID0013T A
                   using (select *
                           from TBID0013T B1
                          where B1.POL_NO    = i_pol_no
                            and B1.ENDOR_NO  = i_endor_no_bef_max
                            and B1.WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                            and B1.DMBO_CD   = i_dmbo_cd
                            and B1.APPY_FROM >= to_date(to_char(s_0013_c_appy_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                            and B1.APPY_FROM <= to_date(to_char(s_0013_c_appy_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                         ) B
                      on (    A.POL_NO = B.POL_NO
                          and A.ENDOR_NO       = i_endor_no
                          and A.WORK_DATE      = to_date(i_work_date, 'YYYYMMDD')
                          and B.ENDOR_NO       = i_endor_no_bef_max
                          and B.WORK_DATE      = to_date(i_work_date, 'YYYYMMDD')
                          and A.BASIC_SCONT_GB = B.BASIC_SCONT_GB
                          and A.DMBO_CD        = B.DMBO_CD
                          and A.APPY_FROM      = B.APPY_FROM
                         )
            when matched then
            update set A.ACDNT_RESP_WANT  = B.ACDNT_RESP_WANT
                     , A.MAN_RESP_WANT    = B.MAN_RESP_WANT
                     , A.INSUR_AMT        = B.INSUR_AMT
                     , A.INSUR_AMT_GB     = B.INSUR_AMT_GB
                     , A.DUCT_AMT_GB      = B.DUCT_AMT_GB
                     , A.BASIC_PREM       = s_basic_prem1
                     , A.DMBO_START_DATE  = to_date(to_char(s_0013_c_appy_from,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                     , A.DMBO_END_DATE    = to_date(to_char(V_DMBO_END_DATE,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                     , A.APPY_PREM        = s_appy_prem1
                     , A.BASIC_RANGE_R    = B.BASIC_RANGE_R
                     , A.CANCEL_CALC_GB   = B.CANCEL_CALC_GB
                     , A.APPY_TO          = to_date(to_char(V_DMBO_END_DATE,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                     , A.BASIS_FROM       = to_date(to_char(s_0013_c_appy_from,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                     , A.BASIS_TO         = to_date(to_char(V_BASIS_TO_DATE,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                     , A.USER_ID          = B.USER_ID
                     , A.BASIC_YEAR_PREM  = B.BASIC_YEAR_PREM
                     , A.APPY_YEAR_PREM   = B.APPY_YEAR_PREM;

            exception when others then o_result := 'Error';
                                          raise_application_error(-20001, '기준일 이전 일할(단기)보험료 Update[TBID0013T] Error[40]: '|| sqlerrm);
        end;
                                                      l_log_data := l_log_data ||  '1*30[' || '기준일이전 일할(단기)보험료 Update[TBID0013T] OK...6'  ||chr(13)||chr(10);

    END IF;

    /********************************************************************/
    /*                                                                  */
    /* TBID0014 TABLE 생성하기                                          */
    /*                                                                  */
    /********************************************************************/
    begin
        Insert into TBID0014T(POL_NO            ,DMBO_CD               ,CALC_FYMD                     ,CALC_EYMD
                             ,BASIC_PREM        ,APPY_PREM             ,ENDOR_NO                      ,APPY_FROM
                             ,APPY_TO           ,BASIS_FROM            ,BASIS_TO                      ,USER_ID
                             ,WORK_DATE
                             )
                      select POL_NO            ,DMBO_CD               ,APPY_FROM                     ,APPY_TO
                            ,BASIC_PREM        ,APPY_PREM             ,i_endor_no                    ,APPY_FROM
                            ,APPY_TO           ,BASIS_FROM            ,BASIS_TO                      ,i_user_id
                            ,to_date(i_work_date, 'YYYYMMDD')
                        from TBID0013T
                       where POL_NO    = i_pol_no
                         and ENDOR_NO  = i_endor_no
                         and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                         and DMBO_CD   = i_dmbo_cd;
        exception  when others then o_result := 'Error';
                                           raise_application_error(-20001, ' Insert [TBID0014T] Error[50]: '|| sqlerrm);

    end;
                                                      l_log_data := l_log_data || '1*31[' ||  ' Insert [TBID0014T] OK1...'  ||chr(13)||chr(10);

    /************************/
    /* Log 남기기         ***/
    /************************/
    /*IF    l_log_level = 1 or nvl(regexp_substr(l_log_step,i_dmbo_cd),' ') = i_dmbo_cd then*/
    /*      PR_INSERT_LOG(l_log_date,l_log_sp_name,l_log_no,'배서[분납]_2',i_dmbo_cd,l_log_data);*/
    /*END IF;*/
    /*l_log_data := '';*/

    /********************************************************************/
    /*                                                                  */
    /* TBID0015 TABLE 생성하기                                          */
    /*                                                                  */
    /********************************************************************/

    /********************************************************************************/
    /* 이전 배서[TBID0015T]에서 납입회차까지의 보험료를 Sum 한다-기납입 보험료 산출*/
    /*  기준이 되는 seq_no 를 가져와야 한다.20130423 최재혁추가                     */
    /********************************************************************************/
    begin
        select nvl(sum(BASIC_PREM),0)
             , nvl(sum(DMBO_PREM) ,0)
             , nvl(max(seq_no), 0)
          into V_BEF_15_BASIC_PREM
             , V_BEF_15_DMBO_PREM
             , V_MAX_SEQ_NO
          from TBID0015T
         where POL_NO     = i_pol_no
           and ENDOR_NO   = i_endor_no_bef_max
           and WORK_DATE  = to_date(i_work_date, 'YYYYMMDD')
           and DMBO_CD    = i_dmbo_cd
           and BNP_NO    <= i_end_nab_no;

        exception when no_data_found then V_BEF_15_BASIC_PREM :=0;
                                          V_BEF_15_DMBO_PREM :=0;
                  when others        then o_result := 'Error';
                                            raise_application_error(-20001, 'PR_RENT_C_ENDOR_BUNAP_RATE Insert Error[130] :'|| sqlerrm);
    end;

                                                      l_log_data := l_log_data || '2*01[' || '납입회차까지 보험료Sum[TBID0015T] OK...1'   ||chr(13)||chr(10);

    /********************************************************************************/
    /* 이전 배서[TBID0013T]에서 담보별 적용보험료를 Sum 한다-기납입 보험료 산출     */
    /********************************************************************************/
    begin
        select nvl(sum(BASIC_PREM),0)
             , nvl(sum(APPY_PREM) ,0)
          into V_BASIC_PREM_BEF
             , V_APPY_PREM_BEF
          from TBID0013T
         where POL_NO    = i_pol_no
           and ENDOR_NO  = i_endor_no_bef_max
           and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
           and DMBO_CD   = i_dmbo_cd;
        exception when others then V_BASIC_PREM := 0;
                                   V_APPY_PREM  := 0;
    end;
                                                      l_log_data := l_log_data || '2*01-1[' || '담보별 적용보험료Sum[TBID0013T] OK...1'   ||chr(13)||chr(10);

    /***************************************************/
    /** 담보해지:현재배서 적용종료일이 기준일과 같으면 */
    /***************************************************/
    IF    i_basis_from = s_0013_c_appy_to then
                                                      l_log_data := l_log_data || '2*02[**** 담보 해지_TBID0015T ********]'  ||chr(13)||chr(10);
        /**************************************************************************/
        /* 이전 회차 보험료(기 납입 보험료)는 무조건 신규 배서에 Insert 시킴      */
        /**************************************************************************/
        begin
            insert into TBID0015T( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                    DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                    IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                    BASIS_FROM,               BASIS_TO,               USER_ID,                    WORK_DATE )
                            select  POL_NO,                   i_endor_no,             BNP_NO,                     SEQ_NO,
                                    DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                    IEND_VALID_DATE,          i_endor_no_bef_max,     APPY_FROM,                  APPY_TO,
                                    BASIS_FROM,               BASIS_TO,               i_user_id,                  to_date(i_work_date, 'YYYYMMDD')
                              from  TBID0015T
                             where  POL_NO     = i_pol_no
                               and  ENDOR_NO   = i_endor_no_bef_max
                               and  WORK_DATE  = to_date(i_work_date, 'YYYYMMDD')
                               and  DMBO_CD    = i_dmbo_cd
                               and  BNP_NO    <= i_end_nab_no;
            exception when others then o_result := 'Error';
                                           raise_application_error(-20001, '담보해지 Insert [TBID0015T] Error[131]: '|| sqlerrm);
        end;
                                                      l_log_data := l_log_data || '2*03[' || '담보해지 Insert [TBID0015T] OK...2' ||chr(13)||chr(10);

        /************************************/
        /* 기간별 보험료[TBID0013T] Sum      */
        /************************************/
        begin
            select nvl(sum(BASIC_PREM),0)
                 , nvl(sum(APPY_PREM) ,0)
              into V_BASIC_PREM
                 , V_APPY_PREM
              from TBID0013T
             where POL_NO    = i_pol_no
               and ENDOR_NO  = i_endor_no
               and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
               and DMBO_CD   = i_dmbo_cd;

            exception when others then V_BASIC_PREM := 0;
                                       V_APPY_PREM  := 0;
        end;

        /* 기 납입 보험료에서 기간별 사용한 총 보험료를 빼준다 */
        s_appy_prem  := V_APPY_PREM  - V_BEF_15_DMBO_PREM;
        s_basic_prem := V_BASIC_PREM - V_BEF_15_BASIC_PREM;

                                                    l_log_data := l_log_data || '2*05[' || V_APPY_PREM          ||']=기간보험료'                 ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '2*06[' || V_BEF_15_DMBO_PREM   ||']=기납입 보험료'              ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '2*07[' || s_appy_prem          ||']=기간보험료 - 기납입보험료'  ||chr(13)||chr(10);
        /***************************/
        /** TBID0015 Table Insert **/
        /***************************/
        begin
            insert into TBID0015T( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                    DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                    IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                    BASIS_FROM,               BASIS_TO,               USER_ID,                    WORK_DATE )
                             select POL_NO,                   i_endor_no,             BNP_NO,                     i_bef_15_seq_no,
                                    i_dmbo_cd,                s_basic_prem,           s_appy_prem,                ISTAR_VALID_DATE,
                                    IEND_VALID_DATE,          i_endor_no_bef_max,     APPY_FROM,                  APPY_TO,
                                    BASIS_FROM,               BASIS_TO,               i_user_id,                  to_date(i_work_date, 'YYYYMMDD')
                               from TBID0015T
                              where POL_NO    = i_pol_no
                                and ENDOR_NO  = i_endor_no_bef_max
                                and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                                and BNP_NO    = i_end_nab_no
                                and rownum    = 1;

            exception when others then o_result := 'Error';
                                         raise_application_error(-20001, '담보해지 Insert [TBID0015T] Error[132]: '|| sqlerrm);
        end;
                                                   l_log_data := l_log_data || '2*08[' || '담보해지 Insert [TBID0015T] OK..3' ||chr(13)||chr(10);

    /********************************************************************************/
    /** 담보추가:기준일 과 현재배서 적용일이 같으면서 이전배서의적용시작일이 없으면 */
    /********************************************************************************/
    ELSIF i_basis_from = s_0013_c_appy_from and s_0013_b_appy_from is null then
        /**************************************************************************/
        /* 이전 회차 보험료(기 납입 보험료)는 무조건 신규 배서에 Insert 시킴      */
        /**************************************************************************/
        begin
            insert into TBID0015T( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                    DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                    IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                    BASIS_FROM,               BASIS_TO,               USER_ID,                    WORK_DATE )
                            select  POL_NO,                   i_endor_no,             BNP_NO,                     SEQ_NO,
                                    DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                    IEND_VALID_DATE,          i_endor_no_bef_max,     APPY_FROM,                  APPY_TO,
                                    BASIS_FROM,               BASIS_TO,               i_user_id,                  to_date(i_work_date, 'YYYYMMDD')
                              from  TBID0015T
                             where  POL_NO     = i_pol_no
                               and  ENDOR_NO   = i_endor_no_bef_max
                               and  WORK_DATE  = to_date(i_work_date, 'YYYYMMDD')
                               and  DMBO_CD    = i_dmbo_cd
                               and  BNP_NO    <= i_end_nab_no;
            exception when others then o_result := 'Error';
                                           raise_application_error(-20001, '담보추가 Insert [TBID0015T] Error[131]: '|| sqlerrm);
        end;
                                                      l_log_data := l_log_data || '2*03[' || '담보추가 Insert [TBID0015T] OK...2' ||chr(13)||chr(10);
                                                      l_log_data := l_log_data || '2*09[**** 담보 추가_TBID0015T ********]'  ||chr(13)||chr(10);

        /*분납부활이 아닌경우*/
        if V_ENDOR_GB <> '7' then
            /***********************************************************/
            /* 기준일 이후 보험료 산정(일할계산)                       */
            /***********************************************************/
            if  i_endor_cd <> '801' then             /*단기자차가 아니면 (기존대로)*/
                  /* 보험료 일할 계산 = 년간 총 적용보험료 * (보험종기 -기준일) / (보험종기 - 보험시기)   */
                s_appy_prem  :=round(i_dmbo_appy_prem   * ((i_iend_cont_date - i_basis_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;
                s_basic_prem :=round(i_dmbo_basic_prem  * ((i_iend_cont_date - i_basis_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;
                                                        l_log_data := l_log_data || '2*10[' || s_appy_prem   ||']=일할 적용보험료' ||chr(13)||chr(10);
                                                        l_log_data := l_log_data || '2*11[' || s_basic_prem  ||']=일할 기본보험료' ||chr(13)||chr(10);
            else
                /* 보험료 계산 - 일할, 단기 구분한다. */
                if  s_0013_c_cancel_calc_gb <> '1' then
                    /* 단기요율 계산 = 적용종료일 - 적용시작일 */
                    f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_c_appy_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                    f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                    /* 보험료 단기 계산 = 년간 총 적용보험료 * 단기적용율   */
                    s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);
                    s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);
                                                        l_log_data := l_log_data || '2*10[' || s_appy_prem   ||']=단기 적용보험료' ||chr(13)||chr(10);
                                                        l_log_data := l_log_data || '2*11[' || s_basic_prem  ||']=단기 기본보험료' ||chr(13)||chr(10);
                else
                    /* 보험료 일할 계산 = 년간 총 적용보험료 * (적용종료일 - 적용시작일) / (보험종기 - 보험시기)   */
                    s_appy_prem  :=round(i_dmbo_appy_prem   * ((s_0013_c_appy_to - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;
                    s_basic_prem :=round(i_dmbo_basic_prem  * ((s_0013_c_appy_to - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;
                                                        l_log_data := l_log_data || '2*10[' || s_appy_prem   ||']=일할 적용보험료' ||chr(13)||chr(10);
                                                        l_log_data := l_log_data || '2*11[' || s_basic_prem  ||']=일할 기본보험료' ||chr(13)||chr(10);
                end if;
            end if;

            /* 계산된 보험료에서 기납입보험료를 빼준다
               기납입보험료 - 이전 적용보험료합이 0보타 크면 기납입금액을 빼준다.
            */
            if (V_BEF_15_DMBO_PREM - V_APPY_PREM_BEF) >= 0 then
                s_appy_prem  := s_appy_prem  - (V_BEF_15_DMBO_PREM - V_APPY_PREM_BEF);
                s_basic_prem := s_basic_prem - (V_BEF_15_BASIC_PREM - V_BASIC_PREM_BEF);
            else
                s_appy_prem  := s_appy_prem;
                s_basic_prem := s_basic_prem;
            end if;

            /*****************************************************************/
            /* 회차별 보험료를 산정 한다                                     */
            /* FN_RENT_BUNAP_AMT:                                            */
            /*    [ In] 납입방법/상품종류/'0'/분납회수/적용보험료/           */
            /*          기본보험료/보험종기/Sort_Gubun                       */
            /*    [Out] f_bunhal_bohum                                       */
            /*          납입회수,분납일자,분납 유효일자,기준보험료,적용보험료*/
            /*                                                               */
            /* Description : 납입회차 역순으로 자료 나옴                     */
            /*****************************************************************/
            /*i_dmbo_appy_prem, i_dmbo_basic_prem 왜 연간적용보험료로 계산하는지 이해안됨...*/
            /*f_bunhal_bohum := FN_RENT_BUNAP_AMT(i_na_mth,i_i_kind_cd,i_spcl_agre_gb,i_bnp_cnt,i_dmbo_appy_prem,i_dmbo_basic_prem,i_istar_cont_date,'DESC');*/
            if s_appy_prem >= 0 then
                --f_bunhal_bohum := FN_RENT_BUNAP_AMT(i_na_mth,i_i_kind_cd,i_spcl_agre_gb,i_bnp_cnt,s_appy_prem,s_basic_prem,i_istar_cont_date,'DESC');
                f_bunhal_bohum := FN_RENT_BUNAP_AMT(i_na_mth,i_i_kind_cd,i_spcl_agre_gb,i_bnp_cnt,i_dmbo_appy_prem,i_dmbo_basic_prem,i_istar_cont_date,'DESC');
                l_log_data := l_log_data || '2*11(DESC) [' || s_appy_prem  ||']=s_appy_prem' ||chr(13)||chr(10);
                l_log_data := l_log_data || '2*11(DESC) [' || s_basic_prem  ||']=s_basic_prem' ||chr(13)||chr(10);
                l_log_data := l_log_data || '2*11(DESC) [' || f_bunhal_bohum  ||']=DESC' ||chr(13)||chr(10);
            else
                --f_bunhal_bohum := FN_RENT_BUNAP_AMT(i_na_mth,i_i_kind_cd,i_spcl_agre_gb,i_bnp_cnt,s_appy_prem,s_basic_prem,i_istar_cont_date,'ASC');
                f_bunhal_bohum := FN_RENT_BUNAP_AMT(i_na_mth,i_i_kind_cd,i_spcl_agre_gb,i_bnp_cnt,i_dmbo_appy_prem,i_dmbo_basic_prem,i_istar_cont_date,'ASC');
                l_log_data := l_log_data || '2*11(ASC) [' || s_appy_prem  ||']=s_appy_prem' ||chr(13)||chr(10);
                l_log_data := l_log_data || '2*11(ASC) [' || s_basic_prem  ||']=s_basic_prem' ||chr(13)||chr(10);
                l_log_data := l_log_data || '2*11(ASC) [' || f_bunhal_bohum  ||']=ASC' ||chr(13)||chr(10);
            end if;

                         if  i_dmbo_cd in ('21','22','23') THEN
                     /***********************************************************/
                /* 위 담보일 경우 최종납입회차에 넣고 끝낸다.        */
                /***********************************************************/
                    begin
                      insert into TBID0015T( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                            DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                            IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                            BASIS_FROM,               BASIS_TO,               USER_ID,                    WORK_DATE )
                                     select i_pol_no,                 i_endor_no,             i_end_nab_no,               i_bef_15_seq_no,
                                            i_dmbo_cd,                s_basic_prem,           s_appy_prem,                s_0013_c_appy_from,
                                            s_0013_c_appy_to,         i_endor_no_bef_max,     s_0013_c_appy_from,         s_0013_c_appy_to,
                                            s_0013_c_appy_from,       s_0013_c_appy_to,       i_user_id,                  to_date(i_work_date, 'YYYYMMDD')
                                       from DUAL;
                    exception when others then o_result := 'Error';
                                                       raise_application_error(-20001, '긴출관련 분납  Insert[TBID0015] Error[160]: '|| sqlerrm);
                end;
                                                  l_log_data := l_log_data || '2*'|| f_idx2 || '-11[' || '긴출관련 분납 Insert OK...2'  ||chr(13)||chr(10);

           elsif  i_endor_cd <> '801' then             /*단기자차가 아니면 (기존대로)*/
                /***********************************************************/
                /* 회차별 보험료 Looping 갯수 산정                         */
                /***********************************************************/
                f_idx1  := length(f_bunhal_bohum) - length(replace(f_bunhal_bohum,',','')) + 1;
                f_idx2  := 0;
                                                           l_log_data := l_log_data || '2*12 [' || f_idx1  ||']=f_idx1' ||chr(13)||chr(10);
                                                           l_log_data := l_log_data || '2*13 [' || f_idx2  ||']=f_idx2' ||chr(13)||chr(10);
                Loop
                    f_idx2 := f_idx2 + 1;
                    if  f_idx2 > f_idx1 then
                        exit;
                    end if;

                    /***********************************************************/
                    /* 회차별 보험료 정보를 구분자로 Substring 함              */
                    /***********************************************************/
                    s_bunhal_bohum           := regexp_substr(f_bunhal_bohum,'[^,]+',1,f_idx2);

                    s_bunhal_nabib_cnt       := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,1));
                    s_bunhal_nabib_from_date := to_date  (regexp_substr(s_bunhal_bohum,'[^|]+',1,2));
                    s_bunhal_nabib_to_date   := to_date  (regexp_substr(s_bunhal_bohum,'[^|]+',1,3));
                    s_bunhal_nabib_amt1      := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,4));   /* 기준보험료 */
                    s_bunhal_nabib_amt2      := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,5));   /* 적용보험료 */

                                                           l_log_data := l_log_data || '2*'|| f_idx2 || '-02[' || s_bunhal_nabib_cnt         ||']=납입회차'       ||chr(13)||chr(10);
                                                           l_log_data := l_log_data || '2*'|| f_idx2 || '-03[' || s_bunhal_nabib_from_date   ||']=납입일자'       ||chr(13)||chr(10);
                                                           l_log_data := l_log_data || '2*'|| f_idx2 || '-04[' || s_bunhal_nabib_to_date     ||']=납입유효일자'   ||chr(13)||chr(10);
                                                           l_log_data := l_log_data || '2*'|| f_idx2 || '-06[' || s_bunhal_nabib_amt2        ||']=적용보험료'     ||chr(13)||chr(10);

                    s_bunhal_amt1  := s_basic_prem;
                    s_bunhal_amt2  := s_appy_prem;
                    /***********************************************************/
                    /* 회차별 보험료 정보를 구분자로 Substring 함              */
                    /***********************************************************/
                    s_basic_prem   := s_basic_prem - s_bunhal_nabib_amt1;
                    s_appy_prem    := s_appy_prem  - s_bunhal_nabib_amt2;
                                                           l_log_data := l_log_data || '2*'|| f_idx2 || '-08[' || s_appy_prem    ||']=일할적용보험료-회차적용보험료' ||chr(13)||chr(10);
                                                           l_log_data := l_log_data || '2*'|| f_idx2 || '-09[' || i_end_nab_no   ||']=종납회차 '                     ||chr(13)||chr(10);

                    /***********************************************************/
                    /* 현재 납입 회차와 분납회차가 같으면                      */
                    /* 납입순번을 i_bef_15_seq_no 하여 계산된 보험료에서       */
                    /* 회차별로 차감 하고 남은 금액을 모두 Insert.. Loop Exit  */
                    /***********************************************************/
                    if  i_end_nab_no = s_bunhal_nabib_cnt then
                        begin
                            insert into TBID0015T( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                                    DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                                    IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                                    BASIS_FROM,               BASIS_TO,               USER_ID,                    WORK_DATE )
                                             select i_pol_no,                 i_endor_no,             s_bunhal_nabib_cnt,         i_bef_15_seq_no,
                                                    i_dmbo_cd,                s_bunhal_amt1,          s_bunhal_amt2,              i_basis_from,
                                                    i_iend_cont_date,         i_endor_no_bef_max,     i_basis_from,               i_iend_cont_date,
                                                    i_basis_from,             i_iend_cont_date,       i_user_id,                  to_date(i_work_date, 'YYYYMMDD')
                                             from DUAL;
                                    exception when others then o_result := 'Error';
                                                               raise_application_error(-20001, '납입회차=분납회차 Insert[TBID0015T] Error[150]: '|| sqlerrm);
                        end;
                                                         l_log_data := l_log_data || '2*'|| f_idx2 || '-10[' || '종납회차=분납회차 Insert OK...1' ||chr(13)||chr(10);
                        exit;

                    /***********************************************************/
                    /* 일할계산된 보험료에서 회차별 분할 보험료를 마이너스 한  */
                    /* 금액이 0 보다 크면 아직 남은 회차가 있음으로            */
                    /* Looping 계속                                            */
                    /***********************************************************/
                    elsif s_appy_prem > 0 then

                    /*i_end_nab_no+f_idx2, s_bunhal_nabib_cnt*/

                        begin
                            insert into TBID0015T( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                                    DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                                    IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                                    BASIS_FROM,               BASIS_TO,               USER_ID,                    WORK_DATE )
                                             select i_pol_no,                 i_endor_no,             s_bunhal_nabib_cnt,         0,
                                                    i_dmbo_cd,                s_bunhal_nabib_amt1,    s_bunhal_nabib_amt2,        s_bunhal_nabib_from_date,
                                                    s_bunhal_nabib_to_date,   i_endor_no_bef_max,     s_bunhal_nabib_from_date,   s_bunhal_nabib_to_date,
                                                    s_bunhal_nabib_from_date, s_bunhal_nabib_to_date, i_user_id,                  to_date(i_work_date, 'YYYYMMDD')
                                               from DUAL;
                            exception when others then o_result := 'Error';
                                                               raise_application_error(-20001, '분납회차있음 Insert[TBID0015T] Error[160]: '|| sqlerrm);
                        end;
                                                          l_log_data := l_log_data || '2*'|| f_idx2 || '-10[' || '분납회차있음 Insert OK...2'  ||chr(13)||chr(10);
                    /***********************************************************/
                    /* 일할계산된 보험료에서 회차별 분할 보험료를 마이너스 한  */
                    /* 금액이 0 보다 작으면 남은 회차 없음..                   */
                    /* 남은 금액 Inser 하고 Loop  Exit                         */
                    /***********************************************************/
                    else
                        begin
                            insert into TBID0015T( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                                    DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                                    IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                                    BASIS_FROM,               BASIS_TO,               USER_ID,                    WORK_DATE )
                                             select i_pol_no,                 i_endor_no,             s_bunhal_nabib_cnt,         0,
                                                    i_dmbo_cd,                s_bunhal_amt1,          s_bunhal_amt2,              s_bunhal_nabib_from_date,
                                                    s_bunhal_nabib_to_date,   i_endor_no_bef_max,     s_bunhal_nabib_from_date,   s_bunhal_nabib_to_date,
                                                    s_bunhal_nabib_from_date, s_bunhal_nabib_to_date, i_user_id,                  to_date(i_work_date, 'YYYYMMDD')
                                             from DUAL;
                                    exception when others then o_result := 'Error';
                                                        raise_application_error(-20001, '분납회차 남아있지 않음.. Insert[TBID0015T] Error[170]: '|| sqlerrm);
                        end;
                                                          l_log_data := l_log_data || '2*'|| f_idx2 || '-10[' || '분납회차 끝 Insert OK...3'  ||chr(13)||chr(10);
                        exit;
                    end if;

                    /************************/
                    /* Log 남기기         ***/
                    /************************/
                    --  if    l_log_level = 1  then /**Log 남기기 ****/
                    /*        PR_INSERT_LOG(l_log_date,l_log_sp_name,l_log_no,'배서[분납]_' || f_idx2 ,i_dmbo_cd,l_log_data);*/
                    /*  end if;*/

                    /*  l_log_data := '';*/

                End Loop;
            else
                /***********************************************************/
                /* 단기자차 추가의 경우 최종납입회차에 넣고 끝낸다.        */
                /***********************************************************/
                begin
                    insert into TBID0015T( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                            DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                            IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                            BASIS_FROM,               BASIS_TO,               USER_ID,                    WORK_DATE )
                                     select i_pol_no,                 i_endor_no,             i_end_nab_no,               i_bef_15_seq_no,
                                            i_dmbo_cd,                s_basic_prem,           s_appy_prem,                s_0013_c_appy_from,
                                            s_0013_c_appy_to,         i_endor_no_bef_max,     s_0013_c_appy_from,         s_0013_c_appy_to,
                                            s_0013_c_appy_from,       s_0013_c_appy_to,       i_user_id,                  to_date(i_work_date, 'YYYYMMDD')
                                       from DUAL;
                    exception when others then o_result := 'Error';
                                                       raise_application_error(-20001, '단기자차 분납  Insert[TBID0015T] Error[160]: '|| sqlerrm);
                end;
                                                  l_log_data := l_log_data || '2*'|| f_idx2 || '-10[' || '단기자차 분납 Insert OK...2'  ||chr(13)||chr(10);
            end if;
        /*분납부활일 경우*/
        else
            begin
                insert into TBID0015T( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                        DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                        IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                        BASIS_FROM,               BASIS_TO,               USER_ID,                    WORK_DATE )
                                 select POL_NO,                   i_endor_no,             BNP_NO,                     SEQ_NO,
                                        DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                        IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                        BASIS_FROM,               BASIS_TO,               i_user_id,                  to_date(i_work_date, 'YYYYMMDD')
                                   from TBID0015T
                                  where POL_NO    = i_pol_no
                                    and ENDOR_NO  = i_endor_no_bef_max
                                    and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                                    and DMBO_CD   = i_dmbo_cd
                                    and  BNP_NO   > i_end_nab_no;
                   exception when others then o_result := 'Error';
                                               raise_application_error(-20001, '이전배서 보험료동일 Insert[TBID0015T] Error[180]: ' || sqlerrm);
            end;
                                                  l_log_data := l_log_data || '2*14[**** 이전배서 보험료 동일_TBID0015T ********]'  ||chr(13)||chr(10);
                                                  l_log_data := l_log_data || '2*15[' || '이전배서 보험료동일 Insert OK..4'    ||chr(13)||chr(10);
        end if;

    /*****************************************************************************************/
    /* 보험료 변동없음:이전 배서의 보험료와 현재 계산된 보험료가 같으면 이전 Data Insert시킴 */
    /* TBID0015 Table은 이미 Insert 되어 있음                                                */
    /*****************************************************************************************/
    ELSIF  s_0013_appy_prem  =  s_0013_b_appy_prem  and V_ENDOR_GB <> '6' then
        begin
            insert into TBID0015T( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                    DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                    IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                    BASIS_FROM,               BASIS_TO,               USER_ID,                    WORK_DATE )
                             select POL_NO,                   i_endor_no,             BNP_NO,                     SEQ_NO,
                                    DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                    IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                    BASIS_FROM,               BASIS_TO,               i_user_id,                  to_date(i_work_date, 'YYYYMMDD')
                               from TBID0015T
                              where POL_NO    = i_pol_no
                                and ENDOR_NO  = i_endor_no_bef_max
                                and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                                and DMBO_CD   = i_dmbo_cd;
               exception when others then o_result := 'Error';
                                           raise_application_error(-20001, '이전배서 보험료동일 Insert[TBID0015T] Error[180]: ' || sqlerrm);
        end;
                                                  l_log_data := l_log_data || '2*14[**** 이전배서 보험료 동일_TBID0015T ********]'  ||chr(13)||chr(10);
                                                  l_log_data := l_log_data || '2*15[' || '이전배서 보험료동일 Insert OK..4'    ||chr(13)||chr(10);

    ELSE
        /*****************************************************************************************/
        /* 이전 회차 보험료(기 납입 보험료)는 무조건 신규 배서에 Insert 시킴                    */
        /*****************************************************************************************/
        begin
            insert into TBID0015T( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                    DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                    IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                    BASIS_FROM,               BASIS_TO,               USER_ID,                    WORK_DATE )
                             select POL_NO,                   i_endor_no,             BNP_NO,                     SEQ_NO,
                                    DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                    IEND_VALID_DATE,          i_endor_no_bef_max,     APPY_FROM,                  APPY_TO,
                                    BASIS_FROM,               BASIS_TO,               i_user_id,                  to_date(i_work_date, 'YYYYMMDD')
                               from TBID0015T
                              where POL_NO     = i_pol_no
                                and ENDOR_NO   = i_endor_no_bef_max
                                and WORK_DATE  = to_date(i_work_date, 'YYYYMMDD')
                                and DMBO_CD    = i_dmbo_cd
                              and BNP_NO      <= i_end_nab_no;
            exception when others then o_result := 'Error';
                                       raise_application_error(-20001, '이전배서 보험료 Insert [TBID0015T] Error[190]: '|| sqlerrm);
        end;
                                              l_log_data := l_log_data || '2*16[**** 이전배서 보험료 다름_TBID0015T ********]'    ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*17[' || '이전배서 보험료 Insert [TBID0015T] OK...5' ||chr(13)||chr(10);

        /*****************************************************************/
        /* 회차별 보험료를 산정 한다                                     */
        /* FN_RENT_BUNAP_AMT:                                            */
        /*    [ In] 납입방법/상품종류/'0'/분납회수/적용보험료/           */
        /*          기본보험료/보험종기/Sort_Gubun                       */
        /*    [Out] f_bunhal_bohum                                       */
        /*          납입회수,분납일자,분납 유효일자,기준보험료,적용보험료*/
        /*                                                               */
        /* Description : 납입회차 순으로 자료 나옴                       */
        /*****************************************************************/
        f_bunhal_bohum := FN_RENT_BUNAP_AMT(i_na_mth,i_i_kind_cd,i_spcl_agre_gb,i_bnp_cnt,i_dmbo_appy_prem,i_dmbo_basic_prem,i_istar_cont_date,'ASC');

        s_basic_prem  :=0 ;
        s_appy_prem   :=0 ;

        /***********************************************************/
        /* 회차별 보험료 Looping 갯수 산정                         */
        /***********************************************************/
        f_idx1  := length(f_bunhal_bohum) - length(replace(f_bunhal_bohum,',','')) + 1;
        f_idx2  := 0;
                                              l_log_data := l_log_data || '2*18[' || f_idx1  ||']=f_idx1' ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*19[' || f_idx2  ||']=f_idx2' ||chr(13)||chr(10);
        Loop
            f_idx2 := f_idx2 + 1;

            if  f_idx2 > f_idx1 then
                exit;
            end if;

            /***********************************************************/
            /* 회차별 보험료 정보를 구분자로 Substring 함              */
            /***********************************************************/

            s_bunhal_bohum  := regexp_substr(f_bunhal_bohum,'[^,]+',1,f_idx2);

            s_bunhal_nabib_cnt         := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,1));
            s_bunhal_nabib_from_date   := to_date  (regexp_substr(s_bunhal_bohum,'[^|]+',1,2));
            s_bunhal_nabib_to_date     := to_date  (regexp_substr(s_bunhal_bohum,'[^|]+',1,3));
            s_bunhal_nabib_amt1        := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,4));   /* 기준보험료 */
            s_bunhal_nabib_amt2        := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,5));   /* 적용보험료 */
    END IF;

    l_log_data := l_log_data ||'3*01 [' || o_result    ||']=o_result'    ||chr(13)||chr(10);
    l_log_data := l_log_data ||'3*02 Good Bye......Endors'               ||chr(13)||chr(10);

    /************************/
    /* Log 남기기         ***/
    /************************/
    IF    l_log_level = 1 or nvl(regexp_substr(l_log_step,i_dmbo_cd),' ') = i_dmbo_cd then
         PR_INSERT_LOG(l_log_date,l_log_sp_name,l_log_no,'배서[분납]',i_dmbo_cd,l_log_data);
    END IF;

    l_log_data := '';


    exception when others then dbms_output.put_line('PR_RENT_D_ENDOR_BUNAP_RATE Main Error[999]: '||sqlerrm);
                       raise_application_error(-20001, 'PR_RENT_D_ENDOR_BUNAP_RATE Main Error[999]: '||sqlerrm);
END;
-- GENERATED BY QueryOne AT 2017-02-08 08:46:59
-- USING krma_app@10.100.10.54:8629(krmadb)

-- GENERATED BY QueryOne AT 2017-02-07 18:07:48
-- USING krma_app@10.100.10.54:8629(krmadb)

CREATE OR REPLACE-- added during DDL generation.
PROCEDURE KRMA_APP.PR_RENT_D_ENDOR_BUNAP_RATE (i_pol_no              in  varchar2
                                                                ,i_endor_no            in  number
                                                                ,i_endor_no_bef_max    in  number
                                                                ,i_dmbo_cd             in  varchar2
                                                                ,i_na_mth              in  varchar2
                                                                ,i_spcl_agre_gb        in  varchar2
                                                                ,i_dmbo_basic_prem     in  number
                                                                ,i_dmbo_appy_prem      in  number
                                                                ,i_bnp_cnt             in  number
                                                                ,i_istar_cont_date     in  date
                                                                ,i_seq_no              in  number
                                                                ,i_i_kind_cd           in  varchar2
                                                                ,i_iend_cont_date      in  date
                                                                ,i_basis_from          in  date
                                                                ,i_basis_to            in  date
                                                                ,i_user_id             in  tbid0014.user_id%type
                                                                ,i_end_nab_no          in  number
                                                                ,i_bef_15_seq_no       in  number
                                                                ,i_basic_year_prem     in  number
                                                                ,i_appy_year_prem      in  number
                                                                ,o_result              out varchar2) as
/**************************************************************************************************************************/
/* Procedure Name :  PR_RENT_D_ENDOR_BUNAP_RATE                                                                           */
/* Function       :  배서 담보별, 기간별 분납 회차별 보험료 산정 (일일자차)                                               */
/* Parameter  i_pol_no             [ IN] 증권번호                                                                         */
/*            i_endor_no           [ IN] 배서번호                                                                         */
/*            i_endor_no_bef_max   [ IN] 이전배서번호(당일 배서가 2회 이상 발생시 처리 하기 위함                          */
/*            i_dmbo_cd            [ IN] 담보코드                                                                         */
/*            i_na_mth             [ IN] 납입방법-(1.일시납2.비연속분납3.연속분납(A0005)                                  */
/*            i_spcl_agre_gb       [ IN] '0'                                                                              */
/*            i_dmbo_basic_prem    [ IN] 담보 기본보험료                                                                  */
/*            i_dmbo_appy_prem     [ IN] 담보 적용보험료                                                                  */
/*            i_bnp_cnt            [ IN] 분납회수-1:일시납,2:2분납,3:3분납,4:4분납,5: 5분납,6:6분납,7:7분납,8:8분납(A0007)*/
/*            i_istar_cont_date    [ IN] 보험시기                                                                         */
/*            i_seq_no             [ IN] '0'                                                                              */
/*            i_i_kind_cd          [ IN] 보험종목                                                                         */
/*            i_iend_cont_date     [ IN] 보험종기                                                                         */
/*            i_basis_from         [ IN] 적용시작일                                                                       */
/*            i_basis_to           [ IN] 적용종료일                                                                       */
/*            i_user_id            [ IN] 사용자번호                                                                       */
/*            i_end_nab_no         [ IN] 최종납입회차                                                                     */
/*            i_bef_15_seq_no      [ IN] Max Seq                                                                          */
/*            i_basic_year_prem    [ IN] 년간기본보험료                                                                   */
/*            i_appy_year_prem     [ IN] 년간적용보험료                                                                   */
/*            o_result             [Out] sp 결과(보험료)                                                                  */
/*Description : TBID0013 담보별 분담금 TABLE은 화면에서 생성시                                                            */
/*            - 이전배서(기준일 이전의 적용일자를 가진 배서)의 내용을 그대로 옮겨 놓는다                                  */
/*              (단 화면에서 바뀐 담보 내용으로 Update 함)                                                                */
/*            - 추가된 담보는 기준일을 적용시작일로 보험종기를 적용종료일로 세팅 한다.                                    */
/*            - 삭제된 담보는 이전배서의 적용시작일을 현배서의 적용시작일로 기준일을 적용종료일로 세팅한다.               */
/**************************************************************************************************************************/
V_0013_INFO                  varchar2(1000);
s_0013_c_info                varchar2(500);
s_0013_c_endor_no            number;
s_0013_c_appy_from           date;
s_0013_c_appy_to             date;
s_0013_c_appy_prem           number;
s_0013_c_basic_prem          number;
s_0013_c_cancel_calc_gb      varchar2(3);
s_0013_c_basis_from          date;
s_0013_c_basis_to            date;

s_0013_b_info                varchar2(500);
s_0013_b_endor_no            number;
s_0013_b_appy_from           date;
s_0013_b_appy_to             date;
s_0013_b_appy_prem           number;
s_0013_b_basic_prem          number;
s_0013_b_cancel_calc_gb      varchar2(3);
s_0013_b_basis_from          date;
s_0013_b_basis_to            date;

s_0013_appy_prem             number;
s_0013_basic_prem            number;

V_BEF_15_BASIC_PREM          number;
V_BEF_15_DMBO_PREM           number;
V_RETURN_AMT1                number;
V_RETURN_AMT2                number;
V_APPY_PREM                  number;
V_BASIC_PREM                 number;
V_MAX_SEQ_NO                 number;
V_ENDOR_CD                   varchar2(4);

s_appy_prem                  number:=0;
s_basic_prem                 number:=0;
s_appy_prem1                 number:=0;
s_basic_prem1                number:=0;

f_fn_rent_short_rate         number;

f_bunhal_bohum               varchar2(4000);
f_idx1                       number;
f_idx2                       number;

s_bunhal_bohum               varchar2(200);
s_bunhal_nabib_cnt           number;
s_bunhal_nabib_from_date     date;
s_bunhal_nabib_to_date       date;
s_bunhal_nabib_amt1          number;
s_bunhal_nabib_amt2          number;
s_bunhal_amt1                number;
s_bunhal_amt2                number;

s_cont_dd                    number;               --공제기간일수

/******************/
/*** lOG 변수 *****/
/******************/
l_log_level                  number        := 1;                                  -- 로그레벨[0~1]: 0->l_log_step에 정의된 항목과 찍는다..  1->모두찍는다.)
l_log_sp_name                varchar2(50)  := 'PR_RENT_D_AMT[ENDOR_BUNAP_RATE_PLAN]' ;        -- 로그 Stored Procedure Name
l_log_data                   varchar2(5000);
l_log_date                   varchar2(16)  := to_char(sysdate,'yyyymmddhh24miss');
l_log_step                   varchar2(100) :='';   /* 담보코드: '01 02 03 13 04 05 06 07 21 22 23 99'*/
l_log_no                     varchar2(20)  := i_pol_no ||'-'|| i_endor_no;

BEGIN
     o_result :=null ;

     l_log_data := l_log_data || '*00[' || i_pol_no           ||']=증권번호'            ||chr(13)||chr(10);
     l_log_data := l_log_data || '*00[' || i_endor_no         ||']=배서번호'            ||chr(13)||chr(10);
     l_log_data := l_log_data || '*00[' || i_endor_no_bef_max ||']=이전배서번호(Max)'   ||chr(13)||chr(10);
     l_log_data := l_log_data || '*00[' || i_dmbo_cd          ||']=담보코드'            ||chr(13)||chr(10);
     l_log_data := l_log_data || '*00[' || i_na_mth           ||']=납입방법'            ||chr(13)||chr(10);
     l_log_data := l_log_data || '*00[' || i_spcl_agre_gb     ||']=i_spcl_agre_gb'      ||chr(13)||chr(10);
     l_log_data := l_log_data || '*00[' || i_dmbo_basic_prem  ||']=기본보험료'          ||chr(13)||chr(10);
     l_log_data := l_log_data || '*00[' || i_dmbo_appy_prem   ||']=적용보험료'          ||chr(13)||chr(10);
     l_log_data := l_log_data || '*00[' || i_bnp_cnt          ||']=분납회수'            ||chr(13)||chr(10);
     l_log_data := l_log_data || '*00[' || i_istar_cont_date  ||']=보험시기'            ||chr(13)||chr(10);
     l_log_data := l_log_data || '*00[' || i_seq_no           ||']=분납Seq'             ||chr(13)||chr(10);
     l_log_data := l_log_data || '*00[' || i_i_kind_cd        ||']=보험종목'            ||chr(13)||chr(10);
     l_log_data := l_log_data || '*00[' || i_iend_cont_date   ||']=보험종기'            ||chr(13)||chr(10);
     l_log_data := l_log_data || '*00[' || i_basis_from       ||']=기준일'              ||chr(13)||chr(10);
     l_log_data := l_log_data || '*00[' || i_basis_to         ||']=적용종료일'          ||chr(13)||chr(10);
     l_log_data := l_log_data || '*00[' || i_user_id          ||']=User Id'             ||chr(13)||chr(10);
     l_log_data := l_log_data || '*00[' || i_end_nab_no       ||']=최종납입회차'        ||chr(13)||chr(10);
     l_log_data := l_log_data || '*00[' || i_bef_15_seq_no    ||']=분납Max Seq'         ||chr(13)||chr(10);

     /***********************************************************************/
     /*                                                                     */
     /* TBID0013 TABLE Insert 및 Update                                     */
     /*                                                                     */
     /***********************************************************************/

     /*********************************************************/
     /* 현재 배서,기준일 이전 배서(TBID0013) 정보 Select      */
     /* 같은날 배서서 2번 이상 일어날 경우는 이전배서가 아니라*/
     /* 기준일 이전의 배서중 가장 큰 배서 번호정보 Select     */
     /*********************************************************/
     begin
          select WM_CONCAT(ENDOR_NO ||'|'|| APPY_FROM ||'|'|| APPY_TO ||'|'||  APPY_PREM ||'|'||  BASIC_PREM ||'|'|| BASIS_FROM ||'|'|| BASIS_TO || '|' || CANCEL_CALC_GB )
            into V_0013_INFO
            from (select ENDOR_NO                                               /*배서번호*/
                       , to_char(APPY_FROM, 'YYYYMMDDHH24MISS') AS APPY_FROM    /*적용시작일*/
                       , to_char(APPY_TO, 'YYYYMMDDHH24MISS') AS APPY_TO        /*적용종료일*/
                       , APPY_PREM                                              /*적용보험료*/
                       , BASIC_PREM                                             /*기본보험료*/
                       , CANCEL_CALC_GB                                         /*일할/단기구분*/
                       , to_char(BASIS_FROM, 'YYYYMMDDHH24MISS') AS BASIS_FROM  /*기준시작일*/
                       , to_char(BASIS_TO, 'YYYYMMDDHH24MISS') AS BASIS_TO      /*기준종료일*/
                    from TBID0013
                   where POL_NO    = i_pol_no
                     and ENDOR_NO  = i_endor_no_bef_max
                     and DMBO_CD   = i_dmbo_cd
                     and APPY_TO  >= i_iend_cont_date
                     and APPY_TO  <= i_iend_cont_date
                 union all
                  select ENDOR_NO                                    /*배서번호*/
                       , to_char(APPY_FROM, 'YYYYMMDDHH24MISS')    /*적용시작일*/
                       , to_char(APPY_TO, 'YYYYMMDDHH24MISS')      /*적용종료일*/
                       , APPY_PREM                                 /*적용보험료*/
                       , BASIC_PREM                                /*기본보험료*/
                       , CANCEL_CALC_GB                            /*일할/단기구분*/
                       , to_char(BASIS_FROM, 'YYYYMMDDHH24MISS')   /*기준시작일*/
                       , to_char(BASIS_TO, 'YYYYMMDDHH24MISS')     /*기준종료일*/
                    from TBID0013
                   where POL_NO    =  i_pol_no
                     and ENDOR_NO  =  i_endor_no
                     and DMBO_CD   =  i_dmbo_cd
                   order by ENDOR_NO
                 );

          exception when others then raise_application_error(-20001, '현재,이전 배서 Select [TBID0013] Error[00]: '|| sqlerrm);
     end;
                                                    l_log_data := l_log_data || '1*01['|| '현재,이전 배서 Select [TBID0013]  OK...0' ||chr(13)||chr(10);

     s_0013_b_info   := regexp_substr(V_0013_INFO,'[^,]+',1,1);
     if  i_endor_no_bef_max = to_number(regexp_substr(s_0013_b_info,'[^|]+',1,1)) then
          s_0013_b_appy_from      := to_date  (regexp_substr(s_0013_b_info,'[^|]+',1,2), 'YYYYMMDDHH24MISS');     -- 이전배서 TBID0013 시작일자
          s_0013_b_appy_to        := to_date  (regexp_substr(s_0013_b_info,'[^|]+',1,3), 'YYYYMMDDHH24MISS');     -- 이전배서 TBID0013 종료일자
          s_0013_b_appy_prem      := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,4));                         -- 이전배서 TBID0013 적용보험료
          s_0013_b_basic_prem     := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,5));                         -- 이전배서 TBID0013 기본보험료
          s_0013_b_basis_from     := to_date  (regexp_substr(s_0013_b_info,'[^|]+',1,6), 'YYYYMMDDHH24MISS');     -- 이전배서 TBID0013 기준시작일자
          s_0013_b_basis_to       := to_date  (regexp_substr(s_0013_b_info,'[^|]+',1,7), 'YYYYMMDDHH24MISS');     -- 이전배서 TBID0013 기준종료일자
          s_0013_b_cancel_calc_gb := regexp_substr(s_0013_b_info,'[^|]+',1,8);                                    -- 이전배서 TBID0013 일할/단기 구분

          s_0013_c_info           := regexp_substr(V_0013_INFO,'[^,]+',1,2);
          s_0013_c_appy_from      := to_date  (regexp_substr(s_0013_c_info,'[^|]+',1,2), 'YYYYMMDDHH24MISS');     -- 현재 TBID0013 시작일자
          s_0013_c_appy_to        := to_date  (regexp_substr(s_0013_c_info,'[^|]+',1,3), 'YYYYMMDDHH24MISS');     -- 현재 TBID0013 종료일자
          s_0013_c_appy_prem      := to_number(regexp_substr(s_0013_c_info,'[^|]+',1,4));                         -- 현재 TBID0013 적용보험료
          s_0013_c_basic_prem     := to_number(regexp_substr(s_0013_c_info,'[^|]+',1,5));                         -- 현재 TBID0013 기본보험료
          s_0013_c_basis_from     := to_date  (regexp_substr(s_0013_c_info,'[^|]+',1,6), 'YYYYMMDDHH24MISS');     -- 현재 TBID0013 기준시작일자
          s_0013_c_basis_to       := to_date  (regexp_substr(s_0013_c_info,'[^|]+',1,7), 'YYYYMMDDHH24MISS');     -- 현재 TBID0013 기준종료일자
          s_0013_c_cancel_calc_gb := regexp_substr(s_0013_c_info,'[^|]+',1,8);                                    -- 현재 TBID0013 일할/단기 구분
     else
          s_0013_c_info           := regexp_substr(V_0013_INFO,'[^,]+',1,1);
          s_0013_c_appy_from      := to_date  (regexp_substr(s_0013_c_info,'[^|]+',1,2), 'YYYYMMDDHH24MISS');     -- 현재 TBID0013 시작일자
          s_0013_c_appy_to        := to_date  (regexp_substr(s_0013_c_info,'[^|]+',1,3), 'YYYYMMDDHH24MISS');     -- 현재 TBID0013 종료일자
          s_0013_c_appy_prem      := to_number(regexp_substr(s_0013_c_info,'[^|]+',1,4));                         -- 현재 TBID0013 적용보험료
          s_0013_c_basic_prem     := to_number(regexp_substr(s_0013_c_info,'[^|]+',1,5));                         -- 현재 TBID0013 기본보험료
          s_0013_c_basis_from     := to_date  (regexp_substr(s_0013_c_info,'[^|]+',1,6), 'YYYYMMDDHH24MISS');     -- 현재 TBID0013 기준시작일자
          s_0013_c_basis_to       := to_date  (regexp_substr(s_0013_c_info,'[^|]+',1,7), 'YYYYMMDDHH24MISS');     -- 현재 TBID0013 기준종료일자
          s_0013_c_cancel_calc_gb := regexp_substr(s_0013_c_info,'[^|]+',1,8);                                    -- 현재 TBID0013 일할/단기 구분
     end if;

     --임의해지를 판단하기 위해서 배서코드를 검색한다. 20130509_최재혁
     begin
          select ENDOR_CD
            into V_ENDOR_CD
            from TBIC0203
           where POL_NO   = i_pol_no
             and ENDOR_NO = i_endor_no
           group by ENDOR_CD;

          exception when no_data_found then
               V_ENDOR_CD := '000D';
     end;

     /* 보험 일수 계산 : 시간이 1초라도 초과하면 1일치 보험료가 계산된다. 즉 무조건 올림처리*/
     s_cont_dd := ceil( i_iend_cont_date - i_istar_cont_date );

     /* 보험료 변동여부를 확인한기 위해서 계산한다. */
     /* 임의해지인 경우 날짜 계산이 달라지기 때문에. '301D' 는 임의해지코드..*/
     if V_ENDOR_CD <> '301D' then
          /* 년간 총 적용보험료 * (보험일수 - trunc(현재배서 적용시작일 - 보험시기)) / 보험일수 */
          s_0013_appy_prem  := round(i_dmbo_appy_prem * ((s_cont_dd - trunc(s_0013_c_appy_from - i_istar_cont_date)) / s_cont_dd), -1);
          s_0013_basic_prem := round(i_dmbo_basic_prem * ((s_cont_dd - trunc(s_0013_c_appy_from - i_istar_cont_date)) / s_cont_dd), -1);
     else
          /* 년간 총 적용보험료 * (보험일수 - ceil(현재배서 적용시작일 - 보험시기)) / 보험일수 */
          s_0013_appy_prem  := round(i_dmbo_appy_prem * ((s_cont_dd - ceil(s_0013_c_appy_from - i_istar_cont_date)) / s_cont_dd), -1);
          s_0013_basic_prem := round(i_dmbo_basic_prem * ((s_cont_dd - ceil(s_0013_c_appy_from - i_istar_cont_date)) / s_cont_dd), -1);
     end if;

                                                    l_log_data := l_log_data || '1*02[' || s_0013_c_info           ||']=현재배서TBID0013정보'  ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*03[' || s_0013_c_appy_from      ||']=현재배서 적용시작일'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*04[' || s_0013_c_appy_to        ||']=현재배서 적용종료일'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*05[' || s_0013_c_appy_prem      ||']=현재배서 적용보험료'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*06[' || s_0013_c_basic_prem     ||']=현재배서 기본보험료'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*07[' || s_0013_c_cancel_calc_gb ||']=현재배서 일할단기구분' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*08[' || s_0013_c_basis_from     ||']=현재배서 기준시작일'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*09[' || s_0013_c_basis_to       ||']=현재배서 기준종료일'   ||chr(13)||chr(10);

                                                    l_log_data := l_log_data || '1*10[' || s_0013_b_info           ||']=이전배서TBID0013정보'  ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*11[' || s_0013_b_appy_from      ||']=이전배서 적용시작일'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*12[' || s_0013_b_appy_to        ||']=이전배서 적용종료일'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*13[' || s_0013_b_appy_prem      ||']=이전배서 적용보험료'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*14[' || s_0013_b_basic_prem     ||']=이전배서 기본보험료'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*15[' || s_0013_b_cancel_calc_gb ||']=이전배서 일할단기구분' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*16[' || s_0013_b_basis_from     ||']=이전배서 기준시작일'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*17[' || s_0013_b_basis_to       ||']=이전배서 기준종료일'   ||chr(13)||chr(10);

                                                    l_log_data := l_log_data || '1*18[' || s_0013_appy_prem        ||']=배서일기준 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*19[' || s_0013_basic_prem       ||']=배서일기준 기본보험료' ||chr(13)||chr(10);

    /********************************************/
    /** 기준일 이전 Data[TBID0013] Insert       */
    /********************************************/
    begin
          insert into TBID0013(POL_NO,               ENDOR_NO,                   BASIC_SCONT_GB,      DMBO_CD,
                               APPY_FROM,            ACDNT_RESP_WANT,            MAN_RESP_WANT,       INSUR_AMT,
                               INSUR_AMT_GB,         DUCT_AMT_GB,                BASIC_PREM,          DMBO_START_DATE,
                               DMBO_END_DATE,        APPY_PREM,                  BASIC_RANGE_R,       CANCEL_CALC_GB,
                               APPY_TO,              BASIS_FROM,                 BASIS_TO,
                               USER_ID,              BASIC_YEAR_PREM,            APPY_YEAR_PREM
                                 )
                        select POL_NO,               i_endor_no,                 BASIC_SCONT_GB,      DMBO_CD,
                               APPY_FROM,            ACDNT_RESP_WANT,            MAN_RESP_WANT,       INSUR_AMT,
                               INSUR_AMT_GB,         DUCT_AMT_GB,                BASIC_PREM,          DMBO_START_DATE,
                               DMBO_END_DATE,        APPY_PREM,                  BASIC_RANGE_R,       CANCEL_CALC_GB,
                               APPY_TO,              BASIS_FROM,                 BASIS_TO,
                               USER_ID,              BASIC_YEAR_PREM,            APPY_YEAR_PREM
                          from TBID0013
                         where POL_NO   = i_pol_no
                           and ENDOR_NO = i_endor_no_bef_max
                           and DMBO_CD  = i_dmbo_cd
                           and APPY_TO < i_basis_from;
          exception when others then o_result := null;

    end;
                                                  l_log_data := l_log_data || '1*16[' || '기준일 이전 정보 Insert[TBID0013] OK...1'  ||chr(13)||chr(10);

    /************************/
    /* Log 남기기         ***/
    /************************/
  --  if    l_log_level = 1 or nvl(regexp_substr(l_log_step,i_dmbo_cd),' ') = i_dmbo_cd then
  --        PR_INSERT_LOG(l_log_date,l_log_sp_name,l_log_no,'배서[분납]_1',i_dmbo_cd,l_log_data);
  --  end if;
  --  l_log_data := '';

    /***************************************************/
    /** 담보해지:현재배서 적용종료일이 기준일과 같으면**/
    /***************************************************/
    IF    i_basis_from = s_0013_c_appy_to then
                                                  l_log_data := l_log_data || '1*17[**** 담보 해지_TBID0013 ********]' ||chr(13)||chr(10);
         /*이전보험료를 일할계산함 = 이전 배서의 기간보험료 * (기준일-이전배서 기준시작일) / (이전배서 기준종료일 - 이전배서 기준시작일)*/
         /* 임의해지인 경우 날짜 계산이 달라지기 때문에. '301D' 는 임의해지코드..*/
         if V_ENDOR_CD <> '301D' then
              s_appy_prem  := round(s_0013_b_appy_prem * (trunc(i_basis_from - s_0013_b_basis_from) / ceil(s_0013_b_basis_to - s_0013_b_basis_from)), -1);
              s_basic_prem  := round(s_0013_b_basic_prem * (trunc(i_basis_from - s_0013_b_basis_from) / ceil(s_0013_b_basis_to - s_0013_b_basis_from)), -1);
         else
              s_appy_prem  := round(s_0013_b_appy_prem * (ceil(i_basis_from - s_0013_b_basis_from) / ceil(s_0013_b_basis_to - s_0013_b_basis_from)), -1);
              s_basic_prem  := round(s_0013_b_basic_prem * (ceil(i_basis_from - s_0013_b_basis_from) / ceil(s_0013_b_basis_to - s_0013_b_basis_from)), -1);
         end if;
                                                  l_log_data := l_log_data || '1*19[' || s_appy_prem    ||']=담보해지 일할 적용보험료'  ||chr(13)||chr(10);

                /****************************/
                /* TBID0013 Table Update   **/
                /****************************/
                begin
                      update TBID0013
                         set BASIC_PREM      = s_basic_prem
                           , APPY_PREM       = s_appy_prem
                           , BASIC_YEAR_PREM = i_basic_year_prem
                           , APPY_YEAR_PREM  = i_appy_year_prem
                           , BASIS_TO        = BASIS_FROM + decode(V_ENDOR_CD, '301D', ceil(i_basis_from - s_0013_b_basis_from), trunc(i_basis_from - s_0013_b_basis_from))
                       where POL_NO      = i_pol_no
                         and ENDOR_NO    = i_endor_no
                         and DMBO_CD     = i_dmbo_cd
                         and APPY_TO >= i_basis_from
                         and APPY_TO <= i_basis_from;

                       exception  when others then o_result := 'Error';
                                                   raise_application_error(-20001, '해지담보 보험료 Update [TBID0013] Error Error[11]: '|| sqlerrm);
                 end;
                                                    l_log_data := l_log_data || '1*20[' ||  '해지담보 Update [TBID0013] OK...2'   ||chr(13)||chr(10);

    /**********************************************************/
    /** 담보추가:기준일 과 현재배서의 적용시작일이 같으면     */
    /**********************************************************/
    ELSIF i_basis_from = s_0013_c_appy_from  then
          s_appy_prem  :=0;
          s_basic_prem :=0;

          /* 보험료 일할 계산 = 년간 총 적용보험료 * (보험종기 -기준일) / (보험종기 - 보험시기)   */
          s_appy_prem  := round(i_dmbo_appy_prem * ((s_cont_dd - trunc(i_basis_from - i_istar_cont_date)) / s_cont_dd), -1);
          s_basic_prem := round(i_dmbo_basic_prem * ((s_cont_dd - trunc(i_basis_from - i_istar_cont_date)) / s_cont_dd), -1);
                                                  l_log_data := l_log_data || '1*21[**** 담보 추가_TBID0013 ********]'                ||chr(13)||chr(10);
                                                  l_log_data := l_log_data || '1*22[' || s_appy_prem   ||']=담보추가 일할 적용보험료' ||chr(13)||chr(10);
                                                  l_log_data := l_log_data || '1*23[' || s_basic_prem  ||']=담보추가 일할 기본보험료' ||chr(13)||chr(10);

          /*****************************/
          /* TBID0013 Table Update    **/
          /*****************************/
          begin
                  --20130422 TO_DATE 처리 최재혁
                  update TBID0013
                     set BASIC_PREM        = s_basic_prem
                       , APPY_PREM         = s_appy_prem
                       , DMBO_START_DATE   = i_basis_from
                       , DMBO_END_DATE     = i_iend_cont_date
                       , BASIC_YEAR_PREM   = i_basic_year_prem
                       , APPY_YEAR_PREM    = i_appy_year_prem
                   where POL_NO    = i_pol_no
                     and ENDOR_NO  = i_endor_no
                     and DMBO_CD   = i_dmbo_cd
                     and APPY_FROM  >= i_basis_from
                     and APPY_FROM  <= i_basis_from;

                exception  when others then o_result := 'Error';
                                           raise_application_error(-20001, '추가된보 보험료 Update [TBID0013] Error Error[20]: '|| sqlerrm);
          end;
                                                    l_log_data := l_log_data || '1*24[' ||  '추가담보 Update[TBID0013] OK...4' ||chr(13)||chr(10);

    /************************************************************************/
      /** 보험료 변동                                                        **/
      /************************************************************************/
    ELSIF s_0013_appy_prem <> s_0013_b_appy_prem  then
                                                  l_log_data := l_log_data || '1*25[**** 보험료변동_TBID0013 ********]'  ||chr(13)||chr(10);
          /* 기준일 이전 사용기간에 대한 보험료 계산 */
          /*이전보험료를 일할계산함 = 이전 배서의 기간보험료 * (기준일-이전배서 기준시작일) / (이전배서 기준종료일 - 이전배서 기준시작일)*/
          s_appy_prem1  := round(s_0013_b_appy_prem * (trunc(i_basis_from - s_0013_b_basis_from) / ceil(s_0013_b_basis_to - s_0013_b_basis_from)), -1);
          s_basic_prem1  := round(s_0013_b_basic_prem * (trunc(i_basis_from - s_0013_b_basis_from) / ceil(s_0013_b_basis_to - s_0013_b_basis_from)), -1);
                                                  l_log_data := l_log_data || '1*27[' || s_appy_prem    ||']=보험료변동 일할 적용보험료'  ||chr(13)||chr(10);

          /* 보험료 일할 계산 = 년간 총 적용보험료 * (보험종기 -기준일) / (보험종기 - 보험시기)   */
          s_appy_prem  := round(i_dmbo_appy_prem * ((s_cont_dd - trunc(i_basis_from - i_istar_cont_date)) / s_cont_dd), -1);
          s_basic_prem := round(i_dmbo_basic_prem * ((s_cont_dd - trunc(i_basis_from - i_istar_cont_date)) / s_cont_dd), -1);
                                                  l_log_data := l_log_data || '1*28[' || s_appy_prem    ||']=년적용보험료*(보험종기-기준일)/(보험종기-보험시기)'  ||chr(13)||chr(10);

          /***********************************************************/
          /* 기준일 이후 보험료을 TBID0013에 Insert 시킴             */
          /***********************************************************/
          begin
                  insert into TBID0013(POL_NO,               ENDOR_NO,                   BASIC_SCONT_GB,      DMBO_CD,
                                       APPY_FROM,            ACDNT_RESP_WANT,            MAN_RESP_WANT,       INSUR_AMT,
                                       INSUR_AMT_GB,         DUCT_AMT_GB,                BASIC_PREM,          DMBO_START_DATE,
                                       DMBO_END_DATE,        APPY_PREM,                  BASIC_RANGE_R,       CANCEL_CALC_GB,
                                       APPY_TO,              BASIS_FROM,
                                       BASIS_TO,             USER_ID,                    BASIC_YEAR_PREM,     APPY_YEAR_PREM
                                       )
                                select POL_NO,               ENDOR_NO,                   BASIC_SCONT_GB,      DMBO_CD,
                                       i_basis_from,         ACDNT_RESP_WANT,            MAN_RESP_WANT,       INSUR_AMT,
                                       INSUR_AMT_GB,         DUCT_AMT_GB,                s_basic_prem,        i_basis_from,
                                       i_iend_cont_date,     s_appy_prem,                BASIC_RANGE_R,       CANCEL_CALC_GB,
                                       APPY_TO,              BASIS_FROM + trunc(i_basis_from - i_istar_cont_date),
                                       BASIS_TO,             USER_ID,                    i_basic_year_prem,   i_appy_year_prem
                                  from TBID0013
                                 where POL_NO   = i_pol_no
                                   and ENDOR_NO = i_endor_no
                                   and DMBO_CD  = i_dmbo_cd
                                   and APPY_TO >= i_iend_cont_date
                                   and APPY_TO <= i_iend_cont_date;

                  exception when others then o_result := 'Error';
                                             raise_application_error(-20001, '기준일 이후 일할 보험료 Insert[TBID0013] Error[30]: '|| sqlerrm);

          end;
                                       l_log_data := l_log_data ||  '1*29[' || '기준일이후 일할보험료 Insert[TBID0013] OK...5' ||chr(13)||chr(10);

          /***********************************************************/
          /* 기준일 이전 보험료을 TBID0013에 Update 시킴             */
          /***********************************************************/
          begin
                --20130422 TO_DATE 처리 최재혁
                Merge  into TBID0013 A
                       using (select *
                                from TBID0013 B1
                               where B1.POL_NO    = i_pol_no
                                 and B1.ENDOR_NO  = i_endor_no_bef_max
                                 and B1.DMBO_CD   = i_dmbo_cd
                                 and B1.APPY_FROM >= to_date(to_char(s_0013_c_appy_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                                 and B1.APPY_FROM <= to_date(to_char(s_0013_c_appy_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                              ) B
                          on  (    A.POL_NO = B.POL_NO
                               and A.ENDOR_NO       = i_endor_no
                               and B.ENDOR_NO       = i_endor_no_bef_max
                               and A.BASIC_SCONT_GB = B.BASIC_SCONT_GB
                               and A.DMBO_CD        = B.DMBO_CD
                               and A.APPY_FROM      = B.APPY_FROM
                              )
                when matched then
                update set A.ACDNT_RESP_WANT  = B.ACDNT_RESP_WANT
                         , A.MAN_RESP_WANT    = B.MAN_RESP_WANT
                         , A.INSUR_AMT        = B.INSUR_AMT
                         , A.INSUR_AMT_GB     = B.INSUR_AMT_GB
                         , A.DUCT_AMT_GB      = B.DUCT_AMT_GB
                         , A.BASIC_PREM       = s_basic_prem1
                         , A.DMBO_START_DATE  = B.APPY_FROM
                         , A.DMBO_END_DATE    = i_basis_from
                         , A.APPY_PREM        = s_appy_prem1
                         , A.BASIC_RANGE_R    = B.BASIC_RANGE_R
                         , A.CANCEL_CALC_GB   = B.CANCEL_CALC_GB
                         , A.APPY_TO          = i_basis_from
                         , A.BASIS_FROM       = B.BASIS_FROM
                         , A.BASIS_TO         = B.BASIS_FROM + trunc(i_basis_from - s_0013_b_basis_from)
                         , A.USER_ID          = B.USER_ID
                         , A.BASIC_YEAR_PREM  = B.BASIC_YEAR_PREM
                         , A.APPY_YEAR_PREM   = B.APPY_YEAR_PREM;

                exception when others then o_result := 'Error';
                                          raise_application_error(-20001, '기준일 이전 일할(단기)보험료 Update[TBID0013] Error[40]: '|| sqlerrm);
          end;
                                                    l_log_data := l_log_data ||  '1*30[' || '기준일이후 일할(단기)보험료 Update[TBID0013] OK...6'  ||chr(13)||chr(10);

   END IF;

   /********************************************************************/
   /*                                                                  */
   /* TBID0014 TABLE 생성하기                                          */
   /*                                                                  */
   /********************************************************************/
   begin
         Insert into TBID0014(POL_NO            ,DMBO_CD               ,CALC_FYMD                     ,CALC_EYMD
                             ,BASIC_PREM        ,APPY_PREM             ,ENDOR_NO                      ,APPY_FROM
                             ,APPY_TO           ,BASIS_FROM            ,BASIS_TO                      ,USER_ID
                             )
                       select POL_NO            ,DMBO_CD               ,APPY_FROM                     ,APPY_TO
                             ,BASIC_PREM        ,APPY_PREM             ,i_endor_no                    ,APPY_FROM
                             ,APPY_TO           ,BASIS_FROM            ,BASIS_TO                      ,i_user_id
                         from TBID0013
                        where POL_NO   = i_pol_no
                            and ENDOR_NO = i_endor_no
                            and DMBO_CD  = i_dmbo_cd;
         exception  when others then o_result := 'Error';
                                           raise_application_error(-20001, ' Insert [TBID0014] Error[50]: '|| sqlerrm);

    end;
                                                  l_log_data := l_log_data || '1*31[' ||  ' Insert [TBID0014] OK1...'  ||chr(13)||chr(10);

    /************************/
    /* Log 남기기         ***/
    /************************/
    --IF    l_log_level = 1 or nvl(regexp_substr(l_log_step,i_dmbo_cd),' ') = i_dmbo_cd then
    --      PR_INSERT_LOG(l_log_date,l_log_sp_name,l_log_no,'배서[분납]_2',i_dmbo_cd,l_log_data);
    --END IF;
    --l_log_data := '';

    /********************************************************************/
    /*                                                                  */
    /* TBID0015 TABLE 생성하기                                          */
    /*                                                                  */
    /********************************************************************/

    /******************************************************************************/
    /* 이전 배서[TBID0015]에서 납입회차까지의 보험료를 Sum 한다-기납입 보험료 산출*/
    /*  기준이 되는 seq_no 를 가져와야 한다.20130423 최재혁추가                   */
    /******************************************************************************/
    begin
          select nvl(sum(BASIC_PREM),0)
               , nvl(sum(DMBO_PREM) ,0)
               , nvl(max(seq_no), 0)
           into  V_BEF_15_BASIC_PREM
               , V_BEF_15_DMBO_PREM
               , V_MAX_SEQ_NO
           from  TBID0015
          where  POL_NO   = i_pol_no
            and  ENDOR_NO = i_endor_no -1
            and  DMBO_CD  = i_dmbo_cd
            and  BNP_NO  <= i_end_nab_no;

            exception when no_data_found then V_BEF_15_BASIC_PREM :=0;
                                              V_BEF_15_DMBO_PREM :=0;
                      when others        then o_result := 'Error';
                                            raise_application_error(-20001, 'PR_RENT_D_ENDOR_BUNAP_RATE Insert Error[130] :'|| sqlerrm);
      end;

                                                  l_log_data := l_log_data || '2*01[' || '납입회차까지 보험료Sum[TBID0015] OK...1'   ||chr(13)||chr(10);

    /***************************************************/
    /** 담보해지:현재배서 적용종료일이 기준일과 같으면 */
    /***************************************************/
    IF    i_basis_from = s_0013_c_appy_to then
                                                    l_log_data := l_log_data || '2*02[**** 담보 해지_TBID0015 ********]'  ||chr(13)||chr(10);
            /**************************************************************************/
            /* 이전 회차 보험료(기 납입 보험료)는 무조건 신규 배서에 Insert 시킴      */
            /**************************************************************************/
               begin
                  insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                        DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                        IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                        BASIS_FROM,               BASIS_TO,               USER_ID )
                                select  POL_NO,                   i_endor_no,             BNP_NO,                     SEQ_NO,
                                        DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                        IEND_VALID_DATE,          i_endor_no -1,          APPY_FROM,                  APPY_TO,
                                        BASIS_FROM,               BASIS_TO,               i_user_id
                                  from  TBID0015
                                 where  POL_NO   = i_pol_no
                                   and  ENDOR_NO = i_endor_no -1
                                   and  DMBO_CD  = i_dmbo_cd
                                   and  BNP_NO  <= i_end_nab_no;
                exception when others then o_result := 'Error';
                                           raise_application_error(-20001, '담보해지 Insert [TBID0015] Error[131]: '|| sqlerrm);
            end;
                                                  l_log_data := l_log_data || '2*03[' || '담보해지 Insert [TBID0015] OK...2' ||chr(13)||chr(10);

            /************************************/
            /* 기간별 보험료[TBID0013] Sum      */
            /************************************/
            begin
                   select nvl(sum(BASIC_PREM),0)
                        , nvl(sum(APPY_PREM) ,0)
                     into V_BASIC_PREM
                        , V_APPY_PREM
                     from TBID0013
                    where POL_NO   =  i_pol_no
                      and ENDOR_NO =  i_endor_no
                      and DMBO_CD  =  i_dmbo_cd;

                   exception when others then V_BASIC_PREM := 0;
                                              V_APPY_PREM  := 0;
            end;

          /* 기 납입 보험료에서 기간별 사용한 총 보험료를 빼준다 */
          s_appy_prem  := V_APPY_PREM  - V_BEF_15_DMBO_PREM;
          s_basic_prem := V_BASIC_PREM - V_BEF_15_BASIC_PREM;

                                                  l_log_data := l_log_data || '2*05[' || V_APPY_PREM          ||']=기간보험료'                 ||chr(13)||chr(10);
                                                  l_log_data := l_log_data || '2*06[' || V_BEF_15_DMBO_PREM   ||']=기납입 보험료'              ||chr(13)||chr(10);
                                                  l_log_data := l_log_data || '2*07[' || s_appy_prem          ||']=기간보험료 - 기납입보험료'  ||chr(13)||chr(10);
          /***************************/
          /** TBID0015 Table Insert **/
          /***************************/
          begin
                  insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                        DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                        IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                        BASIS_FROM,               BASIS_TO,               USER_ID )
                                 select POL_NO,                   i_endor_no,             BNP_NO,                     i_bef_15_seq_no,
                                        DMBO_CD,                  s_basic_prem,           s_appy_prem,                ISTAR_VALID_DATE,
                                        IEND_VALID_DATE,          i_endor_no-1,           APPY_FROM,                  APPY_TO,
                                        BASIS_FROM,               BASIS_TO,               i_user_id
                                   from TBID0015
                                  where POL_NO   = i_pol_no
                                    and ENDOR_NO = i_endor_no -1
                                    and DMBO_CD  = i_dmbo_cd
                                    and BNP_NO   = i_end_nab_no
                                    and SEQ_NO   = V_MAX_SEQ_NO;

                exception when others then o_result := 'Error';
                                         raise_application_error(-20001, '담보해지 Insert [TBID0015] Error[132]: '|| sqlerrm);
          end;
                                      l_log_data := l_log_data || '2*08[' || '담보해지 Insert [TBID0015] OK..3' ||chr(13)||chr(10);

    /**********************************************************************************/
    /** 담보추가:기준일 과 현재배서 적용일이 같으면서 이전배서의적용시작일이 없으면 */
    /********************************************************************************/
    ELSIF i_basis_from = s_0013_c_appy_from and s_0013_b_appy_from is null then
          /*****************************************************************/
          /* 회차별 보험료를 산정 한다                                     */
          /* FN_RENT_BUNAP_AMT:                                            */
          /*    [ In] 납입방법/상품종류/'0'/분납회수/적용보험료/           */
          /*          기본보험료/보험종기/Sort_Gubun                       */
          /*    [Out] f_bunhal_bohum                                       */
          /*          납입회수,분납일자,분납 유효일자,기준보험료,적용보험료*/
          /*                                                               */
          /* Description : 납입회차 역순으로 자료 나옴                     */
          /*****************************************************************/
                                                  l_log_data := l_log_data || '2*09[**** 담보 추가_TBID0015 ********]'  ||chr(13)||chr(10);
          f_bunhal_bohum := FN_RENT_BUNAP_AMT(i_na_mth,i_i_kind_cd,i_spcl_agre_gb,i_bnp_cnt,i_dmbo_appy_prem,i_dmbo_basic_prem,i_istar_cont_date,'DESC');

          /***********************************************************/
          /* 기준일 이후 보험료 산정(일할계산)                       */
          /***********************************************************/
          s_appy_prem    := round(i_dmbo_appy_prem   * ((to_date(i_iend_cont_date) - to_date(i_basis_from)) / (to_date(i_iend_cont_date) - to_date(i_istar_cont_date))),-1) ;
          s_basic_prem   := round(i_dmbo_basic_prem  * ((to_date(i_iend_cont_date) - to_date(i_basis_from)) / (to_date(i_iend_cont_date) - to_date(i_istar_cont_date))),-1) ;
                                                  l_log_data := l_log_data || '2*10[' || s_appy_prem              ||']=일할 적용보험료'  ||chr(13)||chr(10);
                                                  l_log_data := l_log_data || '2*11[' || s_basic_prem             ||']=일할 기본보험료'  ||chr(13)||chr(10);


          /***********************************************************/
          /* 회차별 보험료 Looping 갯수 산정                         */
          /***********************************************************/
          f_idx1  := length(f_bunhal_bohum) - length(replace(f_bunhal_bohum,',','')) + 1;
          f_idx2  := 0;
                                                  l_log_data := l_log_data || '2*12 [' || f_idx1  ||']=f_idx1' ||chr(13)||chr(10);
                                                  l_log_data := l_log_data || '2*13 [' || f_idx2  ||']=f_idx2' ||chr(13)||chr(10);
          Loop
                f_idx2 := f_idx2 + 1;
                if    f_idx2 > f_idx1 then
                      exit;
                end if;

                /***********************************************************/
                /* 회차별 보험료 정보를 구분자로 Substring 함              */
                /***********************************************************/
                s_bunhal_bohum           := regexp_substr(f_bunhal_bohum,'[^,]+',1,f_idx2);

                s_bunhal_nabib_cnt       := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,1));
                s_bunhal_nabib_from_date := to_date  (regexp_substr(s_bunhal_bohum,'[^|]+',1,2));
                s_bunhal_nabib_to_date   := to_date  (regexp_substr(s_bunhal_bohum,'[^|]+',1,3));
                s_bunhal_nabib_amt1      := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,4));   /* 기준보험료 */
                s_bunhal_nabib_amt2      := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,5));   /* 적용보험료 */

                                                  l_log_data := l_log_data || '2*'|| f_idx2 || '-02[' || s_bunhal_nabib_cnt         ||']=납입회차'       ||chr(13)||chr(10);
                                                  l_log_data := l_log_data || '2*'|| f_idx2 || '-03[' || s_bunhal_nabib_from_date   ||']=납입일자'       ||chr(13)||chr(10);
                                                  l_log_data := l_log_data || '2*'|| f_idx2 || '-04[' || s_bunhal_nabib_to_date     ||']=납입유효일자'   ||chr(13)||chr(10);
                                                  l_log_data := l_log_data || '2*'|| f_idx2 || '-06[' || s_bunhal_nabib_amt2        ||']=적용보험료'     ||chr(13)||chr(10);

                s_bunhal_amt1  := s_basic_prem;
                s_bunhal_amt2  := s_appy_prem;
                /***********************************************************/
                /* 회차별 보험료 정보를 구분자로 Substring 함              */
                /***********************************************************/
                s_basic_prem   := s_basic_prem - s_bunhal_nabib_amt1;
                s_appy_prem    := s_appy_prem  - s_bunhal_nabib_amt2;
                                                  l_log_data := l_log_data || '2*'|| f_idx2 || '-08[' || s_appy_prem    ||']=일할적용보험료-회차적용보험료' ||chr(13)||chr(10);
                                                  l_log_data := l_log_data || '2*'|| f_idx2 || '-09[' || i_end_nab_no   ||']=종납회차 '                     ||chr(13)||chr(10);

                /***********************************************************/
                /* 현재 납입 회차와 분납회차가 같으면                      */
                /* 납입순번을 i_bef_15_seq_no 하여 계산된 보험료에서       */
                /* 회차별로 차감 하고 남은 금액을 모두 Insert.. Loop Exit  */
                /***********************************************************/
                if    i_end_nab_no = s_bunhal_nabib_cnt then
                      begin
                            insert into TBID0015( POL_NO,                    ENDOR_NO,                   BNP_NO,                     SEQ_NO,
                                                  DMBO_CD ,                  BASIC_PREM,                 DMBO_PREM,                  ISTAR_VALID_DATE,
                                                  IEND_VALID_DATE,           OLD_ENDOR_NO,               APPY_FROM,                  APPY_TO,
                                                  BASIS_FROM,                BASIS_TO,                   USER_ID )
                                           select i_pol_no,                  i_endor_no,                 s_bunhal_nabib_cnt,         i_bef_15_seq_no,
                                                  i_dmbo_cd,                 s_bunhal_amt1,              s_bunhal_amt2,              to_date(i_basis_from),
                                                  to_date(i_iend_cont_date), i_endor_no-1,               to_date(i_basis_from),      to_date(i_iend_cont_date),
                                                  to_date(i_basis_from),     to_date(i_iend_cont_date),  i_user_id
                                             from DUAL;
                            exception when others then o_result := 'Error';
                                                       raise_application_error(-20001, '납입회차=분납회차 Insert[TBID0015] Error[150]: '|| sqlerrm);
                      end;
                                                 l_log_data := l_log_data || '2*'|| f_idx2 || '-10[' || '종납회차=분납회차 Insert OK...1' ||chr(13)||chr(10);
                      exit;
                end if;

                /************************/
                /* Log 남기기         ***/
                /************************/
              --  if    l_log_level = 1  then /**Log 남기기 ****/
              --        PR_INSERT_LOG(l_log_date,l_log_sp_name,l_log_no,'배서[분납]_' || f_idx2 ,i_dmbo_cd,l_log_data);
              --  end if;

              --  l_log_data := '';

          End Loop;

    /*****************************************************************************************/
    /* 보험료 변동없음:이전 배서의 보험료와 현재 계산된 보험료가 같으면 이전 Data Insert시킴 */
    /* TBID0015 Table은 이미 Insert 되어 있음                                                */
    /*****************************************************************************************/
    ELSIF s_0013_appy_prem  =  s_0013_b_appy_prem  and i_endor_no_bef_max = i_endor_no -1 then
          begin
                 insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                       DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                       IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                       BASIS_FROM,               BASIS_TO,               USER_ID )
                               select  POL_NO,                   i_endor_no,             BNP_NO,                     SEQ_NO,
                                       DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                       IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                       BASIS_FROM,               BASIS_TO,               i_user_id
                                  from TBID0015
                                 where POL_NO   = i_pol_no
                                   and ENDOR_NO = i_endor_no -1
                                   and DMBO_CD  = i_dmbo_cd;
               exception when others then o_result := 'Error';
                                           raise_application_error(-20001, '이전배서 보험료동일 Insert[TBID0015] Error[180]: ' || sqlerrm);
            end;
                                                    l_log_data := l_log_data || '2*14[**** 이전배서 보험료 동일_TBID0015 ********]'  ||chr(13)||chr(10);
                                                  l_log_data := l_log_data || '2*15[' || '이전배서 보험료동일 Insert OK..4'    ||chr(13)||chr(10);

    /*****************************************************************************************/
    /* 이전 회차 보험료(기 납입 보험료)는 무조건 신규 배서에 Insert 시킴                    */
    /*****************************************************************************************/
    ELSE
         begin
                  insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                        DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                        IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                        BASIS_FROM,               BASIS_TO,               USER_ID )
                                select  POL_NO,                   i_endor_no,             BNP_NO,                     SEQ_NO,
                                        DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                        IEND_VALID_DATE,          i_endor_no -1,          APPY_FROM,                  APPY_TO,
                                        BASIS_FROM,               BASIS_TO,               i_user_id
                                  from  TBID0015
                                 where  POL_NO   = i_pol_no
                                   and  ENDOR_NO = i_endor_no -1
                                   and  DMBO_CD  = i_dmbo_cd
                                   and  BNP_NO  <= i_end_nab_no;
               exception when others then o_result := 'Error';
                                           raise_application_error(-20001, '이전배서 보험료 Insert [TBID0015] Error[190]: '|| sqlerrm);
         end;
                                                  l_log_data := l_log_data || '2*16[**** 이전배서 보험료 다름_TBID0015 ********]'    ||chr(13)||chr(10);
                                                  l_log_data := l_log_data || '2*17[' || '이전배서 보험료 Insert [TBID0015] OK...5' ||chr(13)||chr(10);

          /*****************************************************************/
          /* 회차별 보험료를 산정 한다                                     */
          /* FN_RENT_BUNAP_AMT:                                            */
          /*    [ In] 납입방법/상품종류/'0'/분납회수/적용보험료/           */
          /*          기본보험료/보험종기/Sort_Gubun                       */
          /*    [Out] f_bunhal_bohum                                       */
          /*          납입회수,분납일자,분납 유효일자,기준보험료,적용보험료*/
          /*                                                               */
          /* Description : 납입회차 순으로 자료 나옴                       */
          /*****************************************************************/

          f_bunhal_bohum := FN_RENT_BUNAP_AMT(i_na_mth,i_i_kind_cd,i_spcl_agre_gb,i_bnp_cnt,i_dmbo_appy_prem,i_dmbo_basic_prem,to_date(i_istar_cont_date),'ASC');


          /**********************************************************************/
          /**TBID0014 SUM  Return 해 준다                                       */
          /**********************************************************************/
          begin
                select nvl(sum(BASIC_PREM),0)
                     , nvl(sum(APPY_PREM) ,0)
                  into V_RETURN_AMT1
                     , V_RETURN_AMT2
                  from TBID0014
                 where POL_NO   = i_pol_no
                   and ENDOR_NO = i_endor_no
                   and DMBO_CD  = i_dmbo_cd;

                exception when no_data_found then V_RETURN_AMT1 :=0;
                                                  V_RETURN_AMT2 :=0;
                          when others        then o_result := 'Error';
                                                  raise_application_error(-20001, 'TBID0014 Sum[TBID0015] Error[220]: '|| sqlerrm);
          end;
                                                  l_log_data := l_log_data || '2*20 [' || 'TBID0014 Sum[TBID0015] OK...7' ||chr(13)||chr(10);

          /***********************************************************/
          /* 이전 배서의 종납회차 정보를 구분자로 Substring 함       */
          /***********************************************************/
          s_bunhal_bohum  := regexp_substr(f_bunhal_bohum,'[^,]+',1,i_end_nab_no);

          s_bunhal_nabib_cnt         := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,1));
          s_bunhal_nabib_from_date   := to_date  (regexp_substr(s_bunhal_bohum,'[^|]+',1,2));
          s_bunhal_nabib_to_date     := to_date  (regexp_substr(s_bunhal_bohum,'[^|]+',1,3));
          s_bunhal_nabib_amt1        := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,4));   /* 기준보험료 */
          s_bunhal_nabib_amt2        := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,5));   /* 적용보험료 */

                                                  l_log_data := l_log_data || '2*21[' || s_bunhal_nabib_cnt        ||']=납입회차'       ||chr(13)||chr(10);
                                                  l_log_data := l_log_data || '2*22[' || s_bunhal_nabib_from_date  ||']=납입일자'       ||chr(13)||chr(10);
                                                  l_log_data := l_log_data || '2*23[' || s_bunhal_nabib_to_date    ||']=납입유효일자'   ||chr(13)||chr(10);
                                                  l_log_data := l_log_data || '2*24[' || s_bunhal_nabib_amt2       ||']=적용보험료'     ||chr(13)||chr(10);

                                                  l_log_data := l_log_data || '2*25[' || V_RETURN_AMT2             ||']=①적용보험료'            ||chr(13)||chr(10);
                                                  l_log_data := l_log_data || '2*26[' || s_appy_prem               ||']=②회차누적적용보험료'    ||chr(13)||chr(10);
                                                  l_log_data := l_log_data || '2*27[' || V_BEF_15_DMBO_PREM        ||']=③이전배서납입보험료'    ||chr(13)||chr(10);

          /* 현재배서의[TBID0014] 의 SUM 보험료 -  종납회차 이전의 SUM 보험료*/
          s_basic_prem  := V_RETURN_AMT1  -  V_BEF_15_BASIC_PREM ;
          s_appy_prem   := V_RETURN_AMT2  -  V_BEF_15_DMBO_PREM;
                                                  l_log_data := l_log_data || '2*28[' || s_appy_prem               ||']=①-②-③'    ||chr(13)||chr(10);
          if    s_appy_prem <> 0 then
                begin
                        insert into TBID0015( POL_NO,                    ENDOR_NO,                  BNP_NO,                     SEQ_NO,
                                              DMBO_CD ,                  BASIC_PREM,                DMBO_PREM,                  ISTAR_VALID_DATE,
                                              IEND_VALID_DATE,           OLD_ENDOR_NO,              APPY_FROM,                  APPY_TO,
                                              BASIS_FROM,                BASIS_TO,                  USER_ID )
                                       select i_pol_no,                  i_endor_no,                s_bunhal_nabib_cnt,         i_bef_15_seq_no,
                                              i_dmbo_cd,                 s_basic_prem,              s_appy_prem,                to_date(i_basis_from),
                                              to_date(i_iend_cont_date), i_endor_no-1,              to_date(i_basis_from),      to_date(i_iend_cont_date),
                                              to_date(i_basis_from),     to_date(i_iend_cont_date), i_user_id
                                         from DUAL;
                      exception when others then o_result := 'Error';
                                               raise_application_error(-20001, '추징/환수 TBID0015 Insert [TBID0015] Error[200]: '|| sqlerrm);
                  end;
          end if;
                                      l_log_data := l_log_data || '2*29[' || '추징/환수 Insert [TBID0015] OK..3'  ||chr(13)||chr(10);


    END IF;

    IF   o_result is null then
         o_result  := 'OK' || '|' || V_RETURN_AMT1 || '|' || V_RETURN_AMT2;
-- GENERATED BY QueryOne AT 2017-02-08 09:04:42
-- USING krma_app@10.100.10.54:8629(krmadb)

CREATE OR REPLACE -- added during DDL generation.
PROCEDURE          KRMA_APP.PR_RENT_D_L_ENDOR_BUNAP_RATE (i_pol_no              in  varchar2
                                                                ,i_endor_no            in  number
                                                                ,i_endor_no_bef_max    in  number
                                                                ,i_dmbo_cd             in  varchar2
                                                                ,i_na_mth              in  varchar2
                                                                ,i_spcl_agre_gb        in  varchar2
                                                                ,i_dmbo_basic_prem     in  number
                                                                ,i_dmbo_appy_prem      in  number
                                                                ,i_bnp_cnt             in  number
                                                                ,i_istar_cont_date     in  date
                                                                ,i_seq_no              in  number
                                                                ,i_i_kind_cd           in  varchar2
                                                                ,i_iend_cont_date      in  date
                                                                ,i_basis_from          in  date
                                                                ,i_basis_to            in  date
                                                                ,i_user_id             in  tbid0014.user_id%type
                                                                ,i_end_nab_no          in  number
                                                                ,i_bef_15_seq_no       in  number
                                                                ,i_basic_year_prem     in  number
                                                                ,i_appy_year_prem      in  number
                                                                ,o_result              out varchar2) as
/**************************************************************************************************************************/
/* Procedure Name :  PR_RENT_D_L_ENDOR_BUNAP_RATE                                                                           */
/* Function       :  배서 담보별, 기간별 분납 회차별 보험료 산정 (일일자차)                                               */
/* Parameter  i_pol_no             [ IN] 증권번호                                                                         */
/*            i_endor_no           [ IN] 배서번호                                                                         */
/*            i_endor_no_bef_max   [ IN] 이전배서번호(당일 배서가 2회 이상 발생시 처리 하기 위함                          */
/*            i_dmbo_cd            [ IN] 담보코드                                                                         */
/*            i_na_mth             [ IN] 납입방법-(1.일시납2.비연속분납3.연속분납(A0005)                                  */
/*            i_spcl_agre_gb       [ IN] '0'                                                                              */
/*            i_dmbo_basic_prem    [ IN] 담보 기본보험료                                                                  */
/*            i_dmbo_appy_prem     [ IN] 담보 적용보험료                                                                  */
/*            i_bnp_cnt            [ IN] 분납회수-1:일시납,2:2분납,3:3분납,4:4분납,5: 5분납,6:6분납,7:7분납,8:8분납(A0007)*/
/*            i_istar_cont_date    [ IN] 보험시기                                                                         */
/*            i_seq_no             [ IN] '0'                                                                              */
/*            i_i_kind_cd          [ IN] 보험종목                                                                         */
/*            i_iend_cont_date     [ IN] 보험종기                                                                         */
/*            i_basis_from         [ IN] 적용시작일                                                                       */
/*            i_basis_to           [ IN] 적용종료일                                                                       */
/*            i_user_id            [ IN] 사용자번호                                                                       */
/*            i_end_nab_no         [ IN] 최종납입회차                                                                     */
/*            i_bef_15_seq_no      [ IN] Max Seq                                                                          */
/*            i_basic_year_prem    [ IN] 년간기본보험료                                                                   */
/*            i_appy_year_prem     [ IN] 년간적용보험료                                                                   */
/*            o_result             [Out] sp 결과(보험료)                                                                  */
/*Description : TBID0013 담보별 분담금 TABLE은 화면에서 생성시                                                            */
/*            - 이전배서(기준일 이전의 적용일자를 가진 배서)의 내용을 그대로 옮겨 놓는다                                  */
/*              (단 화면에서 바뀐 담보 내용으로 Update 함)                                                                */
/*            - 추가된 담보는 기준일을 적용시작일로 보험종기를 적용종료일로 세팅 한다.                                    */
/*            - 삭제된 담보는 이전배서의 적용시작일을 현배서의 적용시작일로 기준일을 적용종료일로 세팅한다.               */
/**************************************************************************************************************************/
V_0013_INFO                  varchar2(1000);
s_0013_c_info                varchar2(500);
s_0013_c_endor_no            number;
s_0013_c_appy_from           date;
s_0013_c_appy_to             date;
s_0013_c_appy_prem           number;
s_0013_c_basic_prem          number;
s_0013_c_cancel_calc_gb      varchar2(3);
s_0013_c_basis_from          date;
s_0013_c_basis_to            date;

s_0013_b_info                varchar2(500);
s_0013_b_endor_no            number;
s_0013_b_appy_from           date;
s_0013_b_appy_to             date;
s_0013_b_appy_prem           number;
s_0013_b_basic_prem          number;
s_0013_b_cancel_calc_gb      varchar2(3);
s_0013_b_basis_from          date;
s_0013_b_basis_to            date;

s_0013_appy_prem             number;
s_0013_basic_prem            number;

V_BEF_15_BASIC_PREM          number;
V_BEF_15_DMBO_PREM           number;
V_RETURN_AMT1                number;
V_RETURN_AMT2                number;
V_APPY_PREM                  number;
V_BASIC_PREM                 number;
V_MAX_SEQ_NO                 number;
V_ENDOR_CD                   varchar2(4);

s_appy_prem                  number:=0;
s_basic_prem                 number:=0;
s_appy_prem1                 number:=0;
s_basic_prem1                number:=0;

f_fn_rent_short_rate         number;

f_bunhal_bohum               varchar2(4000);
f_idx1                       number;
f_idx2                       number;

s_bunhal_bohum               varchar2(200);
s_bunhal_nabib_cnt           number;
s_bunhal_nabib_from_date     date;
s_bunhal_nabib_to_date       date;
s_bunhal_nabib_amt1          number;
s_bunhal_nabib_amt2          number;
s_bunhal_amt1                number;
s_bunhal_amt2                number;

s_cont_dd                    number;               --공제기간일수

/******************/
/*** lOG 변수 *****/
/******************/
l_log_level                  number        := 1;                                  -- 로그레벨[0~1]: 0->l_log_step에 정의된 항목과 찍는다..  1->모두찍는다.)
l_log_sp_name                varchar2(50)  := 'PR_RENT_D_AMT[ENDOR_BUNAP_RATE_PLAN]' ;        -- 로그 Stored Procedure Name
l_log_data                   varchar2(5000);
l_log_date                   varchar2(16)  := to_char(sysdate,'yyyymmddhh24miss');
l_log_step                   varchar2(100) :='';   /* 담보코드: '01 02 03 13 04 05 06 07 21 22 23 99'*/
l_log_no                     varchar2(20)  := i_pol_no ||'-'|| i_endor_no;

BEGIN
     o_result :=null ;

   l_log_data := l_log_data || '*00[ 기간연자 배서 '            ||chr(13)||chr(10);
     l_log_data := l_log_data || '*00[' || i_pol_no           ||']=증권번호'            ||chr(13)||chr(10);
     l_log_data := l_log_data || '*00[' || i_endor_no         ||']=배서번호'            ||chr(13)||chr(10);
     l_log_data := l_log_data || '*00[' || i_endor_no_bef_max ||']=이전배서번호(Max)'   ||chr(13)||chr(10);
     l_log_data := l_log_data || '*00[' || i_dmbo_cd          ||']=담보코드'            ||chr(13)||chr(10);
     l_log_data := l_log_data || '*00[' || i_na_mth           ||']=납입방법'            ||chr(13)||chr(10);
     l_log_data := l_log_data || '*00[' || i_spcl_agre_gb     ||']=i_spcl_agre_gb'      ||chr(13)||chr(10);
     l_log_data := l_log_data || '*00[' || i_dmbo_basic_prem  ||']=기본보험료'          ||chr(13)||chr(10);
     l_log_data := l_log_data || '*00[' || i_dmbo_appy_prem   ||']=적용보험료'          ||chr(13)||chr(10);
     l_log_data := l_log_data || '*00[' || i_bnp_cnt          ||']=분납회수'            ||chr(13)||chr(10);
     l_log_data := l_log_data || '*00[' || i_istar_cont_date  ||']=보험시기'            ||chr(13)||chr(10);
     l_log_data := l_log_data || '*00[' || i_seq_no           ||']=분납Seq'             ||chr(13)||chr(10);
     l_log_data := l_log_data || '*00[' || i_i_kind_cd        ||']=보험종목'            ||chr(13)||chr(10);
     l_log_data := l_log_data || '*00[' || i_iend_cont_date   ||']=보험종기'            ||chr(13)||chr(10);
     l_log_data := l_log_data || '*00[' || i_basis_from       ||']=기준일'              ||chr(13)||chr(10);
     l_log_data := l_log_data || '*00[' || i_basis_to         ||']=적용종료일'          ||chr(13)||chr(10);
     l_log_data := l_log_data || '*00[' || i_user_id          ||']=User Id'             ||chr(13)||chr(10);
     l_log_data := l_log_data || '*00[' || i_end_nab_no       ||']=최종납입회차'        ||chr(13)||chr(10);
     l_log_data := l_log_data || '*00[' || i_bef_15_seq_no    ||']=분납Max Seq'         ||chr(13)||chr(10);

     /***********************************************************************/
     /*                                                                     */
     /* TBID0013 TABLE Insert 및 Update                                     */
     /*                                                                     */
     /***********************************************************************/

     /*********************************************************/
     /* 현재 배서,기준일 이전 배서(TBID0013) 정보 Select      */
     /* 같은날 배서서 2번 이상 일어날 경우는 이전배서가 아니라*/
     /* 기준일 이전의 배서중 가장 큰 배서 번호정보 Select     */
     /*********************************************************/
     begin
          select WM_CONCAT(ENDOR_NO ||'|'|| APPY_FROM ||'|'|| APPY_TO ||'|'||  APPY_PREM ||'|'||  BASIC_PREM ||'|'|| BASIS_FROM ||'|'|| BASIS_TO || '|' || CANCEL_CALC_GB )
            into V_0013_INFO
            from (select ENDOR_NO                                               /*배서번호*/
                       , to_char(APPY_FROM, 'YYYYMMDDHH24MISS') AS APPY_FROM    /*적용시작일*/
                       , to_char(APPY_TO, 'YYYYMMDDHH24MISS') AS APPY_TO        /*적용종료일*/
                       , APPY_PREM                                              /*적용보험료*/
                       , BASIC_PREM                                             /*기본보험료*/
                       , CANCEL_CALC_GB                                         /*일할/단기구분*/
                       , to_char(BASIS_FROM, 'YYYYMMDDHH24MISS') AS BASIS_FROM  /*기준시작일*/
                       , to_char(BASIS_TO, 'YYYYMMDDHH24MISS') AS BASIS_TO      /*기준종료일*/
                    from TBID0013
                   where POL_NO    = i_pol_no
                     and ENDOR_NO  = i_endor_no_bef_max
                     and DMBO_CD   = i_dmbo_cd
                     and APPY_TO  >= i_iend_cont_date
                     and APPY_TO  <= i_iend_cont_date
                 union all
                  select ENDOR_NO                                    /*배서번호*/
                       , to_char(APPY_FROM, 'YYYYMMDDHH24MISS')    /*적용시작일*/
                       , to_char(APPY_TO, 'YYYYMMDDHH24MISS')      /*적용종료일*/
                       , APPY_PREM                                 /*적용보험료*/
                       , BASIC_PREM                                /*기본보험료*/
                       , CANCEL_CALC_GB                            /*일할/단기구분*/
                       , to_char(BASIS_FROM, 'YYYYMMDDHH24MISS')   /*기준시작일*/
                       , to_char(BASIS_TO, 'YYYYMMDDHH24MISS')     /*기준종료일*/
                    from TBID0013
                   where POL_NO    =  i_pol_no
                     and ENDOR_NO  =  i_endor_no
                     and DMBO_CD   =  i_dmbo_cd
                   order by ENDOR_NO
                 );

          exception when others then raise_application_error(-20001, '현재,이전 배서 Select [TBID0013] Error[00]: '|| sqlerrm);
     end;
                                                    l_log_data := l_log_data || '1*01['|| '현재,이전 배서 Select [TBID0013]  OK...0' ||chr(13)||chr(10);

     s_0013_b_info   := regexp_substr(V_0013_INFO,'[^,]+',1,1);
     if  i_endor_no_bef_max = to_number(regexp_substr(s_0013_b_info,'[^|]+',1,1)) then
          s_0013_b_appy_from      := to_date  (regexp_substr(s_0013_b_info,'[^|]+',1,2), 'YYYYMMDDHH24MISS');     -- 이전배서 TBID0013 시작일자
          s_0013_b_appy_to        := to_date  (regexp_substr(s_0013_b_info,'[^|]+',1,3), 'YYYYMMDDHH24MISS');     -- 이전배서 TBID0013 종료일자
          s_0013_b_appy_prem      := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,4));                         -- 이전배서 TBID0013 적용보험료
          s_0013_b_basic_prem     := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,5));                         -- 이전배서 TBID0013 기본보험료
          s_0013_b_basis_from     := to_date  (regexp_substr(s_0013_b_info,'[^|]+',1,6), 'YYYYMMDDHH24MISS');     -- 이전배서 TBID0013 기준시작일자
          s_0013_b_basis_to       := to_date  (regexp_substr(s_0013_b_info,'[^|]+',1,7), 'YYYYMMDDHH24MISS');     -- 이전배서 TBID0013 기준종료일자
          s_0013_b_cancel_calc_gb := regexp_substr(s_0013_b_info,'[^|]+',1,8);                                    -- 이전배서 TBID0013 일할/단기 구분

          s_0013_c_info           := regexp_substr(V_0013_INFO,'[^,]+',1,2);
          s_0013_c_appy_from      := to_date  (regexp_substr(s_0013_c_info,'[^|]+',1,2), 'YYYYMMDDHH24MISS');     -- 현재 TBID0013 시작일자
          s_0013_c_appy_to        := to_date  (regexp_substr(s_0013_c_info,'[^|]+',1,3), 'YYYYMMDDHH24MISS');     -- 현재 TBID0013 종료일자
          s_0013_c_appy_prem      := to_number(regexp_substr(s_0013_c_info,'[^|]+',1,4));                         -- 현재 TBID0013 적용보험료
          s_0013_c_basic_prem     := to_number(regexp_substr(s_0013_c_info,'[^|]+',1,5));                         -- 현재 TBID0013 기본보험료
          s_0013_c_basis_from     := to_date  (regexp_substr(s_0013_c_info,'[^|]+',1,6), 'YYYYMMDDHH24MISS');     -- 현재 TBID0013 기준시작일자
          s_0013_c_basis_to       := to_date  (regexp_substr(s_0013_c_info,'[^|]+',1,7), 'YYYYMMDDHH24MISS');     -- 현재 TBID0013 기준종료일자
          s_0013_c_cancel_calc_gb := regexp_substr(s_0013_c_info,'[^|]+',1,8);                                    -- 현재 TBID0013 일할/단기 구분
     else
          s_0013_c_info           := regexp_substr(V_0013_INFO,'[^,]+',1,1);
          s_0013_c_appy_from      := to_date  (regexp_substr(s_0013_c_info,'[^|]+',1,2), 'YYYYMMDDHH24MISS');     -- 현재 TBID0013 시작일자
          s_0013_c_appy_to        := to_date  (regexp_substr(s_0013_c_info,'[^|]+',1,3), 'YYYYMMDDHH24MISS');     -- 현재 TBID0013 종료일자
          s_0013_c_appy_prem      := to_number(regexp_substr(s_0013_c_info,'[^|]+',1,4));                         -- 현재 TBID0013 적용보험료
          s_0013_c_basic_prem     := to_number(regexp_substr(s_0013_c_info,'[^|]+',1,5));                         -- 현재 TBID0013 기본보험료
          s_0013_c_basis_from     := to_date  (regexp_substr(s_0013_c_info,'[^|]+',1,6), 'YYYYMMDDHH24MISS');     -- 현재 TBID0013 기준시작일자
          s_0013_c_basis_to       := to_date  (regexp_substr(s_0013_c_info,'[^|]+',1,7), 'YYYYMMDDHH24MISS');     -- 현재 TBID0013 기준종료일자
          s_0013_c_cancel_calc_gb := regexp_substr(s_0013_c_info,'[^|]+',1,8);                                    -- 현재 TBID0013 일할/단기 구분
     end if;

     --임의해지를 판단하기 위해서 배서코드를 검색한다. 20130509_최재혁
     begin
          select ENDOR_CD
            into V_ENDOR_CD
            from TBIC0203
           where POL_NO   = i_pol_no
             and ENDOR_NO = i_endor_no
           group by ENDOR_CD;

          exception when no_data_found then
               V_ENDOR_CD := '000D';
     end;

     /* 보험 일수 계산 : 시간이 1초라도 초과하면 1일치 보험료가 계산된다. 즉 무조건 올림처리*/
     s_cont_dd := ceil( i_iend_cont_date - i_istar_cont_date );

     /* 보험료 변동여부를 확인한기 위해서 계산한다. */
     /* 임의해지인 경우 날짜 계산이 달라지기 때문에. '301D' 는 임의해지코드..*/
     if V_ENDOR_CD <> '301D' then
          /* 년간 총 적용보험료 * (보험일수 - trunc(현재배서 적용시작일 - 보험시기)) / 보험일수 */
          s_0013_appy_prem  := round(i_dmbo_appy_prem * ((s_cont_dd - trunc(s_0013_c_appy_from - i_istar_cont_date)) / s_cont_dd), -1);
          s_0013_basic_prem := round(i_dmbo_basic_prem * ((s_cont_dd - trunc(s_0013_c_appy_from - i_istar_cont_date)) / s_cont_dd), -1);
     else
          /* 년간 총 적용보험료 * (보험일수 - ceil(현재배서 적용시작일 - 보험시기)) / 보험일수 */
          s_0013_appy_prem  := round(i_dmbo_appy_prem * ((s_cont_dd - ceil(s_0013_c_appy_from - i_istar_cont_date)) / s_cont_dd), -1);
          s_0013_basic_prem := round(i_dmbo_basic_prem * ((s_cont_dd - ceil(s_0013_c_appy_from - i_istar_cont_date)) / s_cont_dd), -1);
     end if;

                                                    l_log_data := l_log_data || '1*02[' || s_0013_c_info           ||']=현재배서TBID0013정보'  ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*03[' || s_0013_c_appy_from      ||']=현재배서 적용시작일'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*04[' || s_0013_c_appy_to        ||']=현재배서 적용종료일'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*05[' || s_0013_c_appy_prem      ||']=현재배서 적용보험료'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*06[' || s_0013_c_basic_prem     ||']=현재배서 기본보험료'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*07[' || s_0013_c_cancel_calc_gb ||']=현재배서 일할단기구분' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*08[' || s_0013_c_basis_from     ||']=현재배서 기준시작일'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*09[' || s_0013_c_basis_to       ||']=현재배서 기준종료일'   ||chr(13)||chr(10);

                                                    l_log_data := l_log_data || '1*10[' || s_0013_b_info           ||']=이전배서TBID0013정보'  ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*11[' || s_0013_b_appy_from      ||']=이전배서 적용시작일'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*12[' || s_0013_b_appy_to        ||']=이전배서 적용종료일'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*13[' || s_0013_b_appy_prem      ||']=이전배서 적용보험료'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*14[' || s_0013_b_basic_prem     ||']=이전배서 기본보험료'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*15[' || s_0013_b_cancel_calc_gb ||']=이전배서 일할단기구분' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*16[' || s_0013_b_basis_from     ||']=이전배서 기준시작일'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*17[' || s_0013_b_basis_to       ||']=이전배서 기준종료일'   ||chr(13)||chr(10);

                                                    l_log_data := l_log_data || '1*18[' || s_0013_appy_prem        ||']=배서일기준 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*19[' || s_0013_basic_prem       ||']=배서일기준 기본보험료' ||chr(13)||chr(10);

    /********************************************/
    /** 기준일 이전 Data[TBID0013] Insert       */
    /********************************************/
    begin
          insert into TBID0013(POL_NO,               ENDOR_NO,                   BASIC_SCONT_GB,      DMBO_CD,
                               APPY_FROM,            ACDNT_RESP_WANT,            MAN_RESP_WANT,       INSUR_AMT,
                               INSUR_AMT_GB,         DUCT_AMT_GB,                BASIC_PREM,          DMBO_START_DATE,
                               DMBO_END_DATE,        APPY_PREM,                  BASIC_RANGE_R,       CANCEL_CALC_GB,
                               APPY_TO,              BASIS_FROM,                 BASIS_TO,
                               USER_ID,              BASIC_YEAR_PREM,            APPY_YEAR_PREM
                                 )
                        select POL_NO,               i_endor_no,                 BASIC_SCONT_GB,      DMBO_CD,
                               APPY_FROM,            ACDNT_RESP_WANT,            MAN_RESP_WANT,       INSUR_AMT,
                               INSUR_AMT_GB,         DUCT_AMT_GB,                BASIC_PREM,          DMBO_START_DATE,
                               DMBO_END_DATE,        APPY_PREM,                  BASIC_RANGE_R,       CANCEL_CALC_GB,
                               APPY_TO,              BASIS_FROM,                 BASIS_TO,
                               USER_ID,              BASIC_YEAR_PREM,            APPY_YEAR_PREM
                          from TBID0013
                         where POL_NO   = i_pol_no
                           and ENDOR_NO = i_endor_no_bef_max
                           and DMBO_CD  = i_dmbo_cd;
                           --and APPY_TO < i_basis_from;
          exception when others then o_result := null;

    end;
                                                  l_log_data := l_log_data || '1*16[' || '기준일 이전 정보 Insert[TBID0013] OK...1'  ||chr(13)||chr(10);

    /************************/
    /* Log 남기기         ***/
    /************************/
  --  if    l_log_level = 1 or nvl(regexp_substr(l_log_step,i_dmbo_cd),' ') = i_dmbo_cd then
  --        PR_INSERT_LOG(l_log_date,l_log_sp_name,l_log_no,'배서[분납]_1',i_dmbo_cd,l_log_data);
  --  end if;
  --  l_log_data := '';


          s_appy_prem  :=0;
          s_basic_prem :=0;

          /* 보험료 일할 계산 = 년간 총 적용보험료 * (보험종기 -기준일) / (보험종기 - 보험시기)   */
          s_appy_prem  := round(i_dmbo_appy_prem * ((s_cont_dd - trunc(i_basis_from - i_istar_cont_date)) / s_cont_dd), -1);
          s_basic_prem := round(i_dmbo_basic_prem * ((s_cont_dd - trunc(i_basis_from - i_istar_cont_date)) / s_cont_dd), -1);
                                                  l_log_data := l_log_data || '1*21[**** 담보 추가_TBID0013 ********]'                ||chr(13)||chr(10);
                                                  l_log_data := l_log_data || '1*22[' || s_appy_prem   ||']=담보추가 일할 적용보험료' ||chr(13)||chr(10);
                                                  l_log_data := l_log_data || '1*23[' || s_basic_prem  ||']=담보추가 일할 기본보험료' ||chr(13)||chr(10);

          /*****************************/
          /* TBID0013 Table Update    **/
          /*****************************/
          begin
                  --20130422 TO_DATE 처리 최재혁
                  update TBID0013
                     set BASIC_PREM        = s_basic_prem
                       , APPY_PREM         = s_appy_prem
                       , DMBO_START_DATE   = i_basis_from
                       , DMBO_END_DATE     = i_iend_cont_date
                       , APPY_TO        = i_iend_cont_date
                       , BASIS_TO          = i_iend_cont_date
                       , BASIC_YEAR_PREM   = i_basic_year_prem
                       , APPY_YEAR_PREM    = i_appy_year_prem
                   where POL_NO    = i_pol_no
                     and ENDOR_NO  = i_endor_no
                     and DMBO_CD   = i_dmbo_cd
                     and APPY_FROM  >= i_basis_from
                     and APPY_FROM  <= i_basis_from;

                exception  when others then o_result := 'Error';
                                           raise_application_error(-20001, '추가된보 보험료 Update [TBID0013] Error Error[20]: '|| sqlerrm);
          end;
                                                    l_log_data := l_log_data || '1*24[' ||  '추가담보 Update[TBID0013] OK...4' ||chr(13)||chr(10);


   /********************************************************************/
   /*                                                                  */
   /* TBID0014 TABLE 생성하기                                          */
   /*                                                                  */
   /********************************************************************/
   begin
         Insert into TBID0014(POL_NO            ,DMBO_CD               ,CALC_FYMD                     ,CALC_EYMD
                             ,BASIC_PREM        ,APPY_PREM             ,ENDOR_NO                      ,APPY_FROM
                             ,APPY_TO           ,BASIS_FROM            ,BASIS_TO                      ,USER_ID
                             )
                       select POL_NO            ,DMBO_CD               ,APPY_FROM                     ,APPY_TO
                             ,BASIC_PREM        ,APPY_PREM             ,i_endor_no                    ,APPY_FROM
                             ,APPY_TO           ,BASIS_FROM            ,BASIS_TO                      ,i_user_id
                         from TBID0013
                        where POL_NO   = i_pol_no
                            and ENDOR_NO = i_endor_no
                            and DMBO_CD  = i_dmbo_cd;
         exception  when others then o_result := 'Error';
                                           raise_application_error(-20001, ' Insert [TBID0014] Error[50]: '|| sqlerrm);

    end;
                                                  l_log_data := l_log_data || '1*31[' ||  ' Insert [TBID0014] OK1...'  ||chr(13)||chr(10);

    /************************/
    /* Log 남기기         ***/
    /************************/
    --IF    l_log_level = 1 or nvl(regexp_substr(l_log_step,i_dmbo_cd),' ') = i_dmbo_cd then
    --      PR_INSERT_LOG(l_log_date,l_log_sp_name,l_log_no,'배서[분납]_2',i_dmbo_cd,l_log_data);
    --END IF;
    --l_log_data := '';

    /********************************************************************/
    /*                                                                  */
    /* TBID0015 TABLE 생성하기                                          */
    /*                                                                  */
    /********************************************************************/

    /******************************************************************************/
    /* 이전 배서[TBID0015]에서 납입회차까지의 보험료를 Sum 한다-기납입 보험료 산출*/
    /*  기준이 되는 seq_no 를 가져와야 한다.20130423 최재혁추가                   */
    /******************************************************************************/
    begin
          select nvl(sum(BASIC_PREM),0)
               , nvl(sum(DMBO_PREM) ,0)
               , nvl(max(seq_no), 0)
           into  V_BEF_15_BASIC_PREM
               , V_BEF_15_DMBO_PREM
               , V_MAX_SEQ_NO
           from  TBID0015
          where  POL_NO   = i_pol_no
            and  ENDOR_NO = i_endor_no -1
            and  DMBO_CD  = i_dmbo_cd
            and  BNP_NO  <= i_end_nab_no;

            exception when no_data_found then V_BEF_15_BASIC_PREM :=0;
                                              V_BEF_15_DMBO_PREM :=0;
                      when others        then o_result := 'Error';
                                            raise_application_error(-20001, 'PR_RENT_D_ENDOR_BUNAP_RATE Insert Error[130] :'|| sqlerrm);
      end;

                                                  l_log_data := l_log_data || '2*01[' || '납입회차까지 보험료Sum[TBID0015] OK...1'   ||chr(13)||chr(10);


         begin
                  insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                        DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                        IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                        BASIS_FROM,               BASIS_TO,               USER_ID )
                                select  POL_NO,                   i_endor_no,             BNP_NO,                     SEQ_NO,
                                        DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                        IEND_VALID_DATE,          i_endor_no -1,          APPY_FROM,                  APPY_TO,
                                        BASIS_FROM,               BASIS_TO,               i_user_id
                                  from  TBID0015
                                 where  POL_NO   = i_pol_no
                                   and  ENDOR_NO = i_endor_no -1
                                   and  DMBO_CD  = i_dmbo_cd
                                   and  BNP_NO  <= i_end_nab_no;
               exception when others then o_result := 'Error';
                                           raise_application_error(-20001, '이전배서 보험료 Insert [TBID0015] Error[190]: '|| sqlerrm);
         end;
                                                  l_log_data := l_log_data || '2*16[**** 이전배서 보험료 다름_TBID0015 ********]'    ||chr(13)||chr(10);
                                                  l_log_data := l_log_data || '2*17[' || '이전배서 보험료 Insert [TBID0015] OK...5' ||chr(13)||chr(10);

          /*****************************************************************/
          /* 회차별 보험료를 산정 한다                                     */
          /* FN_RENT_BUNAP_AMT:                                            */
          /*    [ In] 납입방법/상품종류/'0'/분납회수/적용보험료/           */
          /*          기본보험료/보험종기/Sort_Gubun                       */
          /*    [Out] f_bunhal_bohum                                       */
          /*          납입회수,분납일자,분납 유효일자,기준보험료,적용보험료*/
          /*                                                               */
          /* Description : 납입회차 순으로 자료 나옴                       */
          /*****************************************************************/

          f_bunhal_bohum := FN_RENT_BUNAP_AMT(i_na_mth,i_i_kind_cd,i_spcl_agre_gb,i_bnp_cnt,i_dmbo_appy_prem,i_dmbo_basic_prem,to_date(i_istar_cont_date),'ASC');


          /**********************************************************************/
          /**TBID0014 SUM  Return 해 준다                                       */
          /**********************************************************************/
          begin
                select nvl(sum(BASIC_PREM),0)
                     , nvl(sum(APPY_PREM) ,0)
                  into V_RETURN_AMT1
                     , V_RETURN_AMT2
                  from TBID0014
                 where POL_NO   = i_pol_no
                   and ENDOR_NO = i_endor_no
                   and DMBO_CD  = i_dmbo_cd;

                exception when no_data_found then V_RETURN_AMT1 :=0;
                                                  V_RETURN_AMT2 :=0;
                          when others        then o_result := 'Error';
                                                  raise_application_error(-20001, 'TBID0014 Sum[TBID0015] Error[220]: '|| sqlerrm);
          end;
                                                  l_log_data := l_log_data || '2*20 [' || 'TBID0014 Sum[TBID0015] OK...7' ||chr(13)||chr(10);

          /***********************************************************/
          /* 이전 배서의 종납회차 정보를 구분자로 Substring 함       */
          /***********************************************************/
          s_bunhal_bohum  := regexp_substr(f_bunhal_bohum,'[^,]+',1,i_end_nab_no);

          s_bunhal_nabib_cnt         := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,1));
          s_bunhal_nabib_from_date   := to_date  (regexp_substr(s_bunhal_bohum,'[^|]+',1,2));
          s_bunhal_nabib_to_date     := to_date  (regexp_substr(s_bunhal_bohum,'[^|]+',1,3));
          s_bunhal_nabib_amt1        := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,4));   /* 기준보험료 */
          s_bunhal_nabib_amt2        := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,5));   /* 적용보험료 */

                                                  l_log_data := l_log_data || '2*21[' || s_bunhal_nabib_cnt        ||']=납입회차'       ||chr(13)||chr(10);
                                                  l_log_data := l_log_data || '2*22[' || s_bunhal_nabib_from_date  ||']=납입일자'       ||chr(13)||chr(10);
                                                  l_log_data := l_log_data || '2*23[' || s_bunhal_nabib_to_date    ||']=납입유효일자'   ||chr(13)||chr(10);
                                                  l_log_data := l_log_data || '2*24[' || s_bunhal_nabib_amt2       ||']=적용보험료'     ||chr(13)||chr(10);

                                                  l_log_data := l_log_data || '2*25[' || V_RETURN_AMT2             ||']=①적용보험료'            ||chr(13)||chr(10);
                                                  l_log_data := l_log_data || '2*26[' || s_appy_prem               ||']=②회차누적적용보험료'    ||chr(13)||chr(10);
                                                  l_log_data := l_log_data || '2*27[' || V_BEF_15_DMBO_PREM        ||']=③이전배서납입보험료'    ||chr(13)||chr(10);

          /* 현재배서의[TBID0014] 의 SUM 보험료 -  종납회차 이전의 SUM 보험료*/
          s_basic_prem  := V_RETURN_AMT1  -  V_BEF_15_BASIC_PREM ;
          s_appy_prem   := V_RETURN_AMT2  -  V_BEF_15_DMBO_PREM;
                                                  l_log_data := l_log_data || '2*28[' || s_appy_prem               ||']=①-②-③'    ||chr(13)||chr(10);
          if    s_appy_prem <> 0 then
                begin
                        insert into TBID0015( POL_NO,                    ENDOR_NO,                  BNP_NO,                     SEQ_NO,
                                              DMBO_CD ,                  BASIC_PREM,                DMBO_PREM,                  ISTAR_VALID_DATE,
                                              IEND_VALID_DATE,           OLD_ENDOR_NO,              APPY_FROM,                  APPY_TO,
                                              BASIS_FROM,                BASIS_TO,                  USER_ID )
                                       select i_pol_no,                  i_endor_no,                s_bunhal_nabib_cnt,         i_bef_15_seq_no,
                                              i_dmbo_cd,                 s_basic_prem,              s_appy_prem,                to_date(s_0013_c_basis_to),
                                              to_date(i_iend_cont_date), i_endor_no-1,              to_date(s_0013_c_basis_to),      to_date(i_iend_cont_date),
                                              to_date(s_0013_c_basis_to),     to_date(i_iend_cont_date), i_user_id
                                         from DUAL;
                      exception when others then o_result := 'Error';
                                               raise_application_error(-20001, '추징/환수 TBID0015 Insert [TBID0015] Error[200]: '|| sqlerrm);
                  end;
          end if;
                                      l_log_data := l_log_data || '2*29[' || '추징/환수 Insert [TBID0015] OK..3'  ||chr(13)||chr(10);


    IF   o_result is null then
         o_result  := 'OK' || '|' || V_RETURN_AMT1 || '|' || V_RETURN_AMT2;
    END IF;

    l_log_data := l_log_data ||'3*01 [' || o_result    ||']=o_result'    ||chr(13)||chr(10);
    l_log_data := l_log_data ||'3*02 Good Bye......Endors'               ||chr(13)||chr(10);

    /************************/
    /* Log 남기기         ***/
    /************************/
    IF    l_log_level = 1 or nvl(regexp_substr(l_log_step,i_dmbo_cd),' ') = i_dmbo_cd then
         PR_INSERT_LOG(l_log_date,l_log_sp_name,l_log_no,'배서[분납]',i_dmbo_cd,l_log_data);
    END IF;

    l_log_data := '';


    exception when others then dbms_output.put_line('PR_RENT_D_ENDOR_BUNAP_RATE Main Error[999]: '||sqlerrm);
                       raise_application_error(-20001, 'PR_RENT_D_ENDOR_BUNAP_RATE Main Error[999]: '||sqlerrm);
END;
-- GENERATED BY QueryOne AT 2017-04-11 13:59:57
-- USING krma_app@10.100.10.54:8629(krmadb)

-- GENERATED BY QueryOne AT 2017-04-05 15:12:01
-- USING krma_app@10.100.10.54:8629(krmadb)

CREATE OR replace
PROCEDURE          KRMA_APP.PR_RENT_ENDOR_BUNAP_AMT (i_pol_no              in  varchar2
                                                     ,i_endor_no            in  number
                                                     ,i_dmbo_cd             in  varchar2
                                                     ,i_dmbo_basic_prem     in  number
                                                     ,i_dmbo_appy_prem      in  number
                                                     ,i_istar_cont_date     in  date
                                                     ,i_i_kind_cd           in  varchar2
                                                     ,i_iend_cont_date      in  date
                                                     ,i_basis_from          in  date
                                                     ,i_basis_to            in  date
                                                     ,i_user_id             in  tbid0014.user_id%type
                                                     ,i_car_kind_cd         in  TBID0001.CAR_KIND_CD%TYPE
                                                     ,i_car_type_cd         in  TBID0001.CAR_TYPE_CD%TYPE
                                                     ,i_ient_carr_r         in  TBID0001.IENT_CARR_R%TYPE
                                                     ,i_dsc_tot_r           in  TBIB0001.SPCIAL_INC_R%TYPE
                                                     ,i_special_rate        in  NUMBER
                                                     ,i_treat_rate          in  NUMBER
                                                     ,i_fn_rent_mul_acci_rate     in  NUMBER
                                                     ,i_grpcont_dsc_r      in  TBIB0001.GRPCONT_DSC_R%TYPE
                                                     ,i_indgrp_gb      in TBID0001.INDGRP_GB%TYPE
                                                     ,i_dvdadd_rate    in  TBIB0205.DVDADD_RATE%TYPE
                                                     ,i_gubun          IN  VARCHAR2
                                                     ,i_endor_cd       in  varchar2
                                                     ,o_result              out varchar2) AS

/**************************************************************************************************************************/
/* Procedure Name :  PR_RENT_ENDOR_BUNAP_AMT                                                                              */
/* Function       :  배서 담보별 기본 적용  보험료 산정(구간 일할만)                                                      */
/* Parameter  i_pol_no             [ IN] 증권번호                                                                         */
/*            i_endor_no           [ IN] 배서번호                                                                         */
/*            i_endor_no_bef_max   [ IN] 이전배서번호(당일 배서가 2회 이상 발생시 처리 하기 위함                          */
/*            i_dmbo_cd            [ IN] 담보코드                                                                         */
/*            i_dmbo_basic_prem    [ IN] 담보 기본보험료                                                                  */
/*            i_dmbo_appy_prem     [ IN] 담보 적용보험료                                                                  */
/*            i_istar_cont_date    [ IN] 보험시기                                                                         */
/*            i_i_kind_cd          [ IN] 보험종목                                                                         */
/*            i_iend_cont_date     [ IN] 보험종기                                                                         */
/*            i_basis_from         [ IN] 적용시작일                                                                       */
/*            i_basis_to           [ IN] 적용종료일                                                                       */
/*            i_user_id            [ IN] 사용자번호                                                                       */
/*            i_car_kind_cd        [ IN] 차종                                                                             */
/*            i_car_type_cd        [ IN] 차종세분                                                                         */
/*            i_ient_carr_r        [ IN] 가입경력율                                                                       */
/*            i_dsc_tot_r          [ IN] 할인할증+특별할증                                                                */
/*            i_special_rate       [ IN] 특별요율                                                                         */
/*            i_treat_rate         [ IN] 연령한정요율                                                                     */
/*            i_fn_rent_mul_acci_rate      [ IN] 물적할증요율                                                             */
/*            i_grpcont_dsc_r      [ IN] 단체특성범위율                                                                   */
/*            i_indgrp_gb          [ IN] 개별단체구분                                                                     */
/*            i_dvdadd_rate        [ IN] 분납할증율                                                                        */
/*            o_result             [Out] sp 결과(보험료)                                                                  */
/**************************************************************************************************************************/

V_RETURN_AMT1                number;
V_RETURN_AMT2                number;

s_0203_basic_prem            NUMBER;         /*기본보험료*/

s_dmbo_basic_prem            number:=0;

s_dmbo_appy_prem   number:=0;
s_basic_year_prem  number:=0;
s_appy_year_prem   number:=0;


f_idx1                       number;
f_idx2                       number;

s_tot_date                NUMBER:=0;
V_0012_INFO                         varchar2(300);

s_grpcont_dsc_r      TBIB0001.GRPCONT_DSC_R%TYPE := 0.0;
s_dsc_tot_r          TBIB0001.SPCIAL_INC_R%TYPE := 0.0;
s_car_kind_cd        TBIB0001.CAR_KIND_CD%TYPE;
s_car_type_cd        TBIB0001.CAR_TYPE_CD%TYPE;
s_grp_dmbo_rate VARCHAR2(100); /*2017.02.08 담보별 단체특성율*/

s_dmbo_ent_amt_gb  VARCHAR2(2) := '';
V_ENDOR_GB                   varchar2(2);
V_ISTAR_CONT_DATE    TBIB0001.ISTAR_CONT_DATE%TYPE;           /*[IN] 보험시기     (보험료 계산 기준 일자)*/


  /***특별요율 변수 *******/
     s_special_rate                      number := 100;                           /* [특별요율]*/
     s_treat_rate                        number := 1.0;

/******************/
/*** lOG 변수 *****/
/******************/
l_log_level                  number        := 1;                                  /* 로그레벨[0~1]: 0->l_log_step에 정의된 항목과 찍는다..  1->모두찍는다.)*/
l_log_sp_name                varchar2(50)  := 'PR_RENT_AMT[PR_RENT_ENDOR_BUNAP_AMT_TEST]' ;        /* 로그 Stored Procedure Name*/
l_log_data                   varchar2(4000);
l_log_date                   varchar2(16)  := to_char(sysdate,'yyyymmddhh24miss');
l_log_step                   varchar2(100) :='';   /* 담보코드: '01 02 03 13 04 05 06 07 21 22 23 99'*/
l_log_no                     varchar2(20)  := i_pol_no ||'-'|| i_endor_no;

BEGIN
    o_result :=null ;
  l_log_data := l_log_data || '**99[' || i_gubun           ||']=i_gubun'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_pol_no           ||']=증권번호'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_endor_no         ||']=배서번호'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_dmbo_basic_prem  ||']=기본보험료'          ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_dmbo_appy_prem   ||']=적용보험료'          ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_istar_cont_date  ||']=보험시기'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_i_kind_cd        ||']=보험종목'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_iend_cont_date   ||']=보험종기'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_basis_from       ||']=기준일'              ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_basis_to         ||']=적용종료일'          ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_user_id          ||']=User Id'             ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_car_kind_cd      ||']=차종'             ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_car_type_cd      ||']=차종세분'             ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_ient_carr_r      ||']=가입경력율'             ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_dsc_tot_r        ||']=할인할증+특별할증'             ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_special_rate     ||']=특별요율'             ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_treat_rate       ||']=연령한정요율'             ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_fn_rent_mul_acci_rate          ||']=물적할증요율'             ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_grpcont_dsc_r    ||']=단체특성범위율'             ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_indgrp_gb        ||']=개별단체구분'             ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_dvdadd_rate      ||']=분납할증율'             ||chr(13)||chr(10);
    l_log_data := l_log_data || '**99[' || i_endor_cd      ||']=배서코드'             ||chr(13)||chr(10);

     /*최초 일할 계산용 분담금 가져오기*/

    /*배서구분: 배서코드 첫자리*/
    V_ENDOR_GB := substr(i_endor_cd, 1, 1);

    if '20160229' BETWEEN TO_CHAR(i_istar_cont_date,'YYYYMMDD') AND TO_CHAR(i_iend_cont_date,'YYYYMMDD') THEN
     s_tot_date := 366;
    ELSE
      s_tot_date := 365;
    END IF;

    IF i_gubun IN ('(5)','(6)') then

        /*****************************************************************/
        /*** 특별약관 코드 및 특별요율 코드 조회 *************************/
        /*****************************************************************/
        begin
             select to_char(replace(WM_CONCAT(RATE_CD),',','|'))
               into V_0012_INFO
               from TBID0012
              where POL_NO   = i_pol_no
                and ENDOR_NO = i_endor_no-1;

        end;

        l_log_data := l_log_data || '**99*01 [' || V_0012_INFO    ||']=V_0012_INFO' ||chr(13)||chr(10);

        begin
                   select GRPCONT_DSC_R         , nvl(DSC_INC_R,0)+nvl(SPCIAL_INC_R,0), CAR_KIND_CD    ,CAR_TYPE_CD, ISTAR_CONT_DATE
                    into s_grpcont_dsc_r                       /* [IN] 단체특성범위율    **************/
                        , s_dsc_tot_r                       /* [IN] 할인할증+특별할 **/
                        , s_car_kind_cd                         /* [IN] c차종  **************/
                        , s_car_type_cd                          /* [IN] 차종타입    **************/
                        , V_ISTAR_CONT_DATE
                    from  TBID0001 A
                   where  POL_NO   = i_pol_no
                     and  ENDOR_NO = i_endor_no-1;

        end;

        l_log_data := l_log_data || '**99*01 [' || i_dmbo_cd    ||']=담보코드' ||chr(13)||chr(10);
        l_log_data := l_log_data || '**99*01 [' || s_grpcont_dsc_r    ||']=특별요율' ||chr(13)||chr(10);
        l_log_data := l_log_data || '**99*01 [' || s_dsc_tot_r    ||']=할인할증+특별할' ||chr(13)||chr(10);
        l_log_data := l_log_data || '**99*01 [' || s_car_kind_cd    ||']=차종' ||chr(13)||chr(10);
        l_log_data := l_log_data || '**99*01 [' || s_car_type_cd    ||']=차종타입' ||chr(13)||chr(10);
        l_log_data := l_log_data || '**99*01 [' || V_ISTAR_CONT_DATE    ||']=원보험시기' ||chr(13)||chr(10);

         PR_RENT_SPECIAL_RATE_2('2'          ,i_pol_no        ,i_endor_no-1           ,i_i_kind_cd      ,s_car_kind_cd
                              ,s_car_type_cd         ,V_ISTAR_CONT_DATE      ,i_dmbo_cd       ,V_0012_INFO      ,s_special_rate
                              ,s_treat_rate);

    l_log_data := l_log_data || '**99*01 [' || s_special_rate    ||']=특별요율' ||chr(13)||chr(10);
        l_log_data := l_log_data || '**99*01 [' || s_treat_rate    ||']=연령한정' ||chr(13)||chr(10);

        IF V_ENDOR_GB <> '6' THEN

          IF V_ENDOR_GB = '7' THEN

              begin

                  SELECT A.INSUR_AMT_GB
                    INTO s_dmbo_ent_amt_gb
                    FROM TBID0013 A
                   WHERE A.POL_NO = i_pol_no
                     AND ENDOR_NO = i_endor_no-1
                     AND dmbo_cd = i_dmbo_cd
                     /* 20150430 당일배서시 여러건 나오는 문제 부분*/
                     /*AND to_date(i_basis_to) BETWEEN TO_DATE(appy_from) AND TO_DATE(appy_to)*/
                     AND to_date(i_istar_cont_date) >= TO_DATE(appy_from)
                     AND to_date(i_istar_cont_date) < TO_DATE(appy_to)
                  ;
              END;

          ELSE

              begin
                  SELECT CASE WHEN (SELECT A.INSUR_AMT_GB
                    FROM TBID0013 A
                   WHERE A.POL_NO = i_pol_no
                     AND ENDOR_NO = i_endor_no-1
                     AND dmbo_cd = i_dmbo_cd
                     /* 20150430 당일배서시 여러건 나오는 문제 부분*/
                     /*AND to_date(i_basis_to) BETWEEN TO_DATE(appy_from) AND TO_DATE(appy_to)*/
                     AND to_date(i_basis_to) >= TO_DATE(appy_from)
                     AND to_date(i_basis_to) < TO_DATE(appy_to)
                     ) IS NULL THEN '99'
                     ELSE (SELECT A.INSUR_AMT_GB
                    FROM TBID0013 A
                   WHERE A.POL_NO = i_pol_no
                     AND ENDOR_NO = i_endor_no-1
                     AND dmbo_cd = i_dmbo_cd
                     /* 20150430 당일배서시 여러건 나오는 문제 부분*/
                     /*AND to_date(i_basis_to) BETWEEN TO_DATE(appy_from) AND TO_DATE(appy_to)*/
                     AND to_date(i_basis_to) >= TO_DATE(appy_from)
                     AND to_date(i_basis_to) < TO_DATE(appy_to)
                     ) END
                     INTO s_dmbo_ent_amt_gb
                     FROM dual
                     ;

                   /*IF s_dmbo_ent_amt_gb = '' THEN s_dmbo_ent_amt_gb := '99'; */
                   /*END IF;*/

              END;
            END IF;

        ELSE

      begin

                SELECT A.INSUR_AMT_GB
                  INTO s_dmbo_ent_amt_gb
                  FROM TBID0013 A
                 WHERE A.POL_NO = i_pol_no
                   AND ENDOR_NO = i_endor_no-1
                   AND dmbo_cd = i_dmbo_cd
                   /* 20150430 당일배서시 여러건 나오는 문제 부분*/
                   /*AND to_date(i_basis_to) BETWEEN TO_DATE(appy_from) AND TO_DATE(appy_to)*/
                   AND to_date(i_basis_to) >= TO_DATE(appy_from)
                   AND to_date(i_basis_to) <= TO_DATE(appy_to)
                ;
            END;

        END IF;

        l_log_data := l_log_data || '**99*01 [' || s_dmbo_ent_amt_gb    ||']=가입금액' ||chr(13)||chr(10);

        IF s_dmbo_ent_amt_gb <> '99' THEN

          if '20160331' BETWEEN TO_CHAR(i_basis_from,'YYYYMMDD') AND TO_CHAR(i_basis_to,'YYYYMMDD') THEN
            l_log_data := l_log_data || '**99*01**구간' ||chr(13)||chr(10);

              BEGIN

                  SELECT
                          CASE WHEN B.DMBO_CD IN ('01','02','03','13') THEN
                              ROUND(B.BASIC_PREM*(TO_DATE('20160331', 'YYYYMMDD') - TO_DATE(i_basis_from))/s_tot_date +
                                   (SELECT C.BASIC_PREM*(TO_DATE(i_basis_to) - TO_DATE('20160331', 'YYYYMMDD'))/s_tot_date
                                      FROM TBIB0203 C
                                     WHERE B.DMBO_ENT_AMT_GB = C.DMBO_ENT_AMT_GB
                                       AND B.DMBO_CD = C.DMBO_CD
                                       AND C.DMBO_CD = i_dmbo_cd
                                       AND C.I_KIND_CD = i_i_kind_cd
                                       AND B.CAR_KIND = C.CAR_KIND
                                       AND B.CAR_KIND2 = C.CAR_KIND2
                                       AND C.APLY_FYMD >= to_date(i_istar_cont_date)
                                       --AND C.APLY_EYMD >= to_date(i_basis_to)
     AND C.APLY_EYMD < TO_DATE('20170301'))
                              )
                          ELSE
                            B.BASIC_PREM
                          END
                        INTO s_0203_basic_prem
                        FROM /*TBID0013 A ,*/
                             TBIB0203 B
                       WHERE  1=1
                             /*AND A.POL_NO          = i_pol_no*/
                             /*AND  ENDOR_NO        = i_endor_no*/
                             AND B.DMBO_ENT_AMT_GB = s_dmbo_ent_amt_gb
                             /*AND A.DMBO_CD = B.DMBO_CD*/
                             AND B.DMBO_CD = i_dmbo_cd
                             AND B.I_KIND_CD = i_i_kind_cd
                             AND B.CO_GB = '0'
                             AND B.CAR_KIND = i_car_kind_cd
                             AND B.CAR_KIND2 = i_car_type_cd
                             AND B.APLY_FYMD <= TO_DATE(i_istar_cont_date) /* 20130422 TO_DATE 처리 최재혁 */
                             AND B.APLY_EYMD >= TO_DATE(i_istar_cont_date) /* 20130422 TO_DATE 처리 최재혁 */
                    ;

              END;
          ELSE
  l_log_data := l_log_data || '**99*01**비구간' ||i_basis_from||chr(13)||chr(10);
  IF TO_DATE(i_istar_cont_date) >='20170301' THEN
   BEGIN
     select ROUND(B.BASIC_PREM*((TO_DATE(i_basis_to) - TO_DATE(i_basis_from)) / s_tot_date))
       into s_0203_basic_prem
      from /*TBID0013 A,*/
       TBIB0203 B
     where 1=1/*A.POL_NO          = i_pol_no*/
       /*and  ENDOR_NO         = i_endor_no*/
      /*AND A.INSUR_AMT_GB = B.DMBO_ENT_AMT_GB*/
      AND B.DMBO_ENT_AMT_GB = s_dmbo_ent_amt_gb
      /*AND A.DMBO_CD = B.DMBO_CD*/
      AND B.DMBO_CD = i_dmbo_cd
      AND B.I_KIND_CD = i_i_kind_cd
      AND B.CO_GB = '0'
      AND B.CAR_KIND = i_car_kind_cd
      AND B.CAR_KIND2 = i_car_type_cd
      AND B.APLY_FYMD <= TO_DATE(i_basis_from) /* 20130422 TO_DATE 처리 최재혁 */
      AND B.APLY_EYMD >= TO_DATE(i_basis_from) /* 20130422 TO_DATE 처리 최재혁 */
      /*AND A.APPY_FROM <= TO_DATE(i_basis_from)*/
      /*AND A.APPY_TO >= TO_DATE(i_basis_from)*/
       ;
    END;
   /*2017.03.03 3월보험료 분기*/
  ELSE
   IF TO_DATE(i_basis_from)  >= '20170301' THEN
    BEGIN
      SELECT ROUND(B.BASIC_PREM*((TO_DATE(i_basis_to) - TO_DATE(i_basis_from)) / s_tot_date))
        into s_0203_basic_prem
       from
        TBIB0203 B
      where 1=1
       AND B.DMBO_ENT_AMT_GB = s_dmbo_ent_amt_gb
       AND B.DMBO_CD = i_dmbo_cd
       AND B.I_KIND_CD = i_i_kind_cd
       AND B.CO_GB = '0'
       AND B.CAR_KIND = i_car_kind_cd
       AND B.CAR_KIND2 = i_car_type_cd
       AND B.APLY_FYMD <= TO_DATE(i_basis_from)
       AND B.APLY_FYMD >= TO_DATE('20160401')
      AND B.APLY_EYMD < TO_DATE('20170301')
        ;
     END;
   ELSIF TO_DATE(i_basis_from) >='20160401' THEN
    BEGIN
      SELECT ROUND(B.BASIC_PREM*((TO_DATE(i_basis_to) - TO_DATE(i_basis_from)) / s_tot_date))
        into s_0203_basic_prem
       from
        TBIB0203 B
      where 1=1
       AND B.DMBO_ENT_AMT_GB = s_dmbo_ent_amt_gb
       AND B.DMBO_CD = i_dmbo_cd
       AND B.I_KIND_CD = i_i_kind_cd
       AND B.CO_GB = '0'
       AND B.CAR_KIND = i_car_kind_cd
       AND B.CAR_KIND2 = i_car_type_cd
       AND B.APLY_FYMD <= TO_DATE(i_basis_from)
      AND B.APLY_EYMD >= TO_DATE('20160401')
        ;
     END;
   ELSE
    BEGIN
      SELECT ROUND(B.BASIC_PREM*((TO_DATE(i_basis_to) - TO_DATE(i_basis_from)) / s_tot_date))
        into s_0203_basic_prem
       from
        TBIB0203 B
      where 1=1
       AND B.DMBO_ENT_AMT_GB = s_dmbo_ent_amt_gb
       AND B.DMBO_CD = i_dmbo_cd
       AND B.I_KIND_CD = i_i_kind_cd
       AND B.CO_GB = '0'
       AND B.CAR_KIND = i_car_kind_cd
       AND B.CAR_KIND2 = i_car_type_cd
       AND B.APLY_FYMD >= TO_DATE(i_basis_from)
       AND B.APLY_EYMD < TO_DATE('20170301')
        ;
    END;
   END IF;
  END IF;
          END IF;
     END IF;

    ELSE

 if '20160331' BETWEEN TO_CHAR(i_basis_from,'YYYYMMDD') AND TO_CHAR(i_basis_to,'YYYYMMDD') THEN

          l_log_data := l_log_data || '**99*01**구간' ||chr(13)||chr(10);

            BEGIN
                SELECT
                        CASE WHEN B.DMBO_CD IN ('01','02','03','13') THEN
                            ROUND(B.BASIC_PREM*(TO_DATE('20160331', 'YYYYMMDD') - TO_DATE(i_basis_from))/s_tot_date +
                                 (SELECT C.BASIC_PREM*(TO_DATE(i_basis_to) - TO_DATE('20160331', 'YYYYMMDD'))/s_tot_date
                                    FROM TBIB0203 C
                                   WHERE B.DMBO_ENT_AMT_GB = C.DMBO_ENT_AMT_GB
                                     AND B.DMBO_CD = C.DMBO_CD
                                     AND C.DMBO_CD = i_dmbo_cd
                                     AND C.I_KIND_CD = i_i_kind_cd
                                     AND B.CAR_KIND = C.CAR_KIND
                                     AND B.CAR_KIND2 = C.CAR_KIND2
                                     AND C.APLY_FYMD >= to_date(i_istar_cont_date)
                                     --AND C.APLY_EYMD >= to_date(i_basis_to)
         AND C.APLY_EYMD < TO_DATE('20170301'))
                            )
                        ELSE
                          B.BASIC_PREM
                        END
                      INTO s_0203_basic_prem
                      FROM TBID0013 A ,
                           TBIB0203 B
                     WHERE  A.POL_NO          = i_pol_no
                         and  ENDOR_NO        = i_endor_no
                           AND A.INSUR_AMT_GB = B.DMBO_ENT_AMT_GB
                           AND A.DMBO_CD = B.DMBO_CD
                           AND A.DMBO_CD = i_dmbo_cd
                           AND B.I_KIND_CD = i_i_kind_cd
                           AND B.CO_GB = '0'
                           AND B.CAR_KIND = i_car_kind_cd
                           AND B.CAR_KIND2 = i_car_type_cd
                           AND B.APLY_FYMD <= TO_DATE(i_istar_cont_date) /* 20130422 TO_DATE 처리 최재혁 */
                           AND B.APLY_EYMD >= TO_DATE(i_istar_cont_date) /* 20130422 TO_DATE 처리 최재혁 */
                  ;

            END;
        ELSE
   l_log_data := l_log_data || '**99*01**비구간' ||i_basis_from||chr(13)||chr(10);
  IF TO_DATE(i_istar_cont_date) >= '20170301' THEN
   BEGIN
      select ROUND(B.BASIC_PREM*((TO_DATE(i_basis_to) - TO_DATE(i_basis_from)) / s_tot_date))
    into s_0203_basic_prem
    from TBID0013 A
       , TBIB0203 B
    where A.POL_NO          = i_pol_no
       AND  ENDOR_NO         = i_endor_no
       AND A.INSUR_AMT_GB = B.DMBO_ENT_AMT_GB
       AND A.DMBO_CD = B.DMBO_CD
       AND A.DMBO_CD = i_dmbo_cd
       AND B.I_KIND_CD = i_i_kind_cd
       AND B.CO_GB = '0'
       AND B.CAR_KIND = i_car_kind_cd
       AND B.CAR_KIND2 = i_car_type_cd
       AND B.APLY_FYMD <= TO_DATE(i_basis_from) /* 20130422 TO_DATE 처리 최재혁 */
       AND B.APLY_EYMD >= TO_DATE(i_basis_from) /* 20130422 TO_DATE 처리 최재혁 */
     ;
   END;
  ELSE
   IF TO_DATE(i_basis_from)  >= '20170301' THEN
    BEGIN
       select ROUND(B.BASIC_PREM*((TO_DATE(i_basis_to) - TO_DATE(i_basis_from)) / s_tot_date))
     into s_0203_basic_prem
     from TBID0013 A
        , TBIB0203 B
     where A.POL_NO          = i_pol_no
        AND  ENDOR_NO         = i_endor_no
        AND A.INSUR_AMT_GB = B.DMBO_ENT_AMT_GB
        AND A.DMBO_CD = B.DMBO_CD
        AND A.DMBO_CD = i_dmbo_cd
        AND B.I_KIND_CD = i_i_kind_cd
        AND B.CO_GB = '0'
        AND B.CAR_KIND = i_car_kind_cd
        AND B.CAR_KIND2 = i_car_type_cd
        AND B.APLY_FYMD <= TO_DATE(i_basis_from)
        AND B.APLY_FYMD >= TO_DATE('20160401')
        AND B.APLY_EYMD < TO_DATE('20170301')
      ;
    END;
   ELSIF TO_DATE(i_basis_from)  >= '20160401' THEN
    BEGIN
       select ROUND(B.BASIC_PREM*((TO_DATE(i_basis_to) - TO_DATE(i_basis_from)) / s_tot_date))
     into s_0203_basic_prem
     from TBID0013 A
        , TBIB0203 B
     where A.POL_NO          = i_pol_no
        AND  ENDOR_NO         = i_endor_no
        AND A.INSUR_AMT_GB = B.DMBO_ENT_AMT_GB
        AND A.DMBO_CD = B.DMBO_CD
        AND A.DMBO_CD = i_dmbo_cd
        AND B.I_KIND_CD = i_i_kind_cd
        AND B.CO_GB = '0'
        AND B.CAR_KIND = i_car_kind_cd
        AND B.CAR_KIND2 = i_car_type_cd
        AND B.APLY_FYMD <= TO_DATE(i_basis_from)
        AND B.APLY_EYMD >= TO_DATE('20160401')
      ;
    END;
   ELSE
    BEGIN
       select ROUND(B.BASIC_PREM*((TO_DATE(i_basis_to) - TO_DATE(i_basis_from)) / s_tot_date))
     into s_0203_basic_prem
     from TBID0013 A
        , TBIB0203 B
     where A.POL_NO          = i_pol_no
        AND  ENDOR_NO         = i_endor_no
        AND A.INSUR_AMT_GB = B.DMBO_ENT_AMT_GB
        AND A.DMBO_CD = B.DMBO_CD
        AND A.DMBO_CD = i_dmbo_cd
        AND B.I_KIND_CD = i_i_kind_cd
        AND B.CO_GB = '0'
        AND B.CAR_KIND = i_car_kind_cd
        AND B.CAR_KIND2 = i_car_type_cd
        AND B.APLY_FYMD >= TO_DATE(i_basis_from)
        AND B.APLY_EYMD < TO_DATE('20170301')
      ;
    END;
   END IF;
  END IF;
        END IF;

      s_grpcont_dsc_r := i_grpcont_dsc_r;
        s_dsc_tot_r := i_dsc_tot_r;
        s_car_kind_cd := i_car_kind_cd;
        s_car_type_cd := i_car_type_cd;
        s_special_rate := i_special_rate;
        s_treat_rate := i_treat_rate;
    END IF;

 /*2017.02.08 담보별 단체특성율을 가져온다.*/
 begin
                SELECT A.GRP_DMBO_RATE
                  INTO s_grp_dmbo_rate
                  FROM TBID0013 A
                 WHERE A.POL_NO = i_pol_no
                   AND ENDOR_NO = i_endor_no-1
                   AND dmbo_cd = i_dmbo_cd
     --AND BASIS_FROM = TO_DATE(TO_CHAR(TO_DATE(i_basis_from),'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                   AND to_date(i_basis_to) >= TO_DATE(appy_from)
                   AND to_date(i_basis_to) <= TO_DATE(appy_to)
                ;
                                    l_log_data := l_log_data || '*000000000000000000' ||s_grp_dmbo_rate||chr(13)||chr(10);
            END;

    /********************************/
   /* 00.기본보험료 세팅 **/
   /********************************/
   s_dmbo_basic_prem  :=   s_0203_basic_prem;
                                    l_log_data := l_log_data || '*99*000* [' || s_0203_basic_prem ||']=기본보험료' ||chr(13)||chr(10);


   If    i_dmbo_cd  not in ('21','22','23') then

         /********************************/
         /* 30.(가입경력+법규율) 곱하기 **/
         /********************************/
                                         l_log_data := l_log_data || '*99*031* [' || i_ient_carr_r    ||']=가입경력'              ||chr(13)||chr(10);
         if    i_ient_carr_r > 0 then  /* 가입경력이 0보다 클때*/
               s_dmbo_appy_prem := s_dmbo_basic_prem * trunc(i_ient_carr_r/100, 5);
                                         l_log_data := l_log_data || '*99*032* [' || s_dmbo_appy_prem ||']=기본보험료 * 가입경력' ||chr(13)||chr(10);
         else
               s_dmbo_appy_prem := s_dmbo_basic_prem;
         end if;
                                         l_log_data := l_log_data || '*99*033* [' || s_dmbo_appy_prem ||']=적용보험료'            ||chr(13)||chr(10);

         /*****************************************/
         /* 40.적용요율(할인할증+특별할증)곱하기 **/
         /*****************************************/
                                         l_log_data := l_log_data || '*99*041* [' || s_dsc_tot_r      ||']=할인할증+특별할증'     ||chr(13)||chr(10);
         if    i_dsc_tot_r > 0 then    /* 할인할증이 0보다 클때*/
               s_dmbo_appy_prem := s_dmbo_appy_prem * trunc(i_dsc_tot_r/100, 3);
         end if;
                                         l_log_data := l_log_data || '*99*043* [' || s_dmbo_appy_prem ||']=적용보험료 * (할인할증+특별할증)'    ||chr(13)||chr(10);
         /**********************/
         /* 50. 특약/특별요율 **/
         /**********************/
                                         l_log_data := l_log_data || '*99*051* [' || s_special_rate    ||']=특별요율' ||chr(13)||chr(10);
                                         l_log_data := l_log_data || '*99*052* [' || s_treat_rate      ||']=연령한정요율'   ||chr(13)||chr(10);

         if    i_dmbo_cd in ('03' ,'13','06') then

               /***************/
               /* 70.물적할증**/
               /***************/
                                         l_log_data := l_log_data || '*99*071* [' || i_fn_rent_mul_acci_rate   ||']=물적할증요율'  ||chr(13)||chr(10);

               if      i_fn_rent_mul_acci_rate > 0 then  /* 특별할증이 0보다 클때*/
                       s_dmbo_appy_prem := s_dmbo_appy_prem * trunc(i_fn_rent_mul_acci_rate/100, 3);
               end if;
                                         l_log_data := l_log_data || '*99*073* [' || s_dmbo_appy_prem ||']=적용보험료 * 물적할증요율' ||chr(13)||chr(10);

               s_dmbo_appy_prem := s_dmbo_appy_prem * trunc(s_special_rate/100, 3) * trunc(s_treat_rate, 3) ;
                                         l_log_data := l_log_data || '*99*076* [' || s_dmbo_appy_prem ||']=적용보험료 * 특별요율 * 연령한정요율' ||chr(13)||chr(10);
         else
               s_dmbo_appy_prem := s_dmbo_appy_prem * trunc(s_special_rate/100, 3) * trunc(s_treat_rate, 3) ;
                                         l_log_data := l_log_data || '*99*053* [' || s_dmbo_appy_prem  ||']=적용보험료*특별요율*연령한정요율'   ||chr(13)||chr(10);
         end if;

         /*****************************/
         /*  80. 단체업체특성범위요율 */
         /*****************************/
                                         l_log_data := l_log_data || '*99*081* [' || s_grpcont_dsc_r     ||']=단체특성범위율' ||chr(13)||chr(10);
                                         l_log_data := l_log_data || '*99*082* [' || i_indgrp_gb         ||']=개별단체구분'   ||chr(13)||chr(10);

 /*2017.02.08 요율세분화 추가*/
 IF TO_CHAR(i_istar_cont_date,'YYYYMMDD')  < '20170401' THEN
  if     s_grpcont_dsc_r != 0  then
           s_dmbo_appy_prem := s_dmbo_appy_prem * (trunc(s_grpcont_dsc_r/100, 4) );
  END IF;
 ELSE
  s_dmbo_appy_prem := s_dmbo_appy_prem * (TRUNC(s_grp_dmbo_rate/100, 4) );
 END IF;
 /*요율세분화 끝.*/
 /*
         if     s_grpcont_dsc_r != 0  then
           s_dmbo_appy_prem := s_dmbo_appy_prem * (trunc(s_grpcont_dsc_r/100, 4) );
         end if;
 */
         l_log_data := l_log_data || '*99*084* [' || s_dmbo_appy_prem    ||']=적용보험료 * 단체특성범위율' ||chr(13)||chr(10);
         /*********************************************************************************************************/
         /*  81. 분납할증                                                                                         */
         /* 단기자차(s_0203_calc_gb='3')는 일시납이므로 계산하지 않는다. 20130513 추가                            */
         /* 분납할증 안하기로 했다가 다시 해달라 해서 원복처리함...20130514_최재혁                                */
         /*********************************************************************************************************/
         s_dmbo_appy_prem  := s_dmbo_appy_prem * (i_dvdadd_rate/100);
                                        l_log_data := l_log_data || '*99*085* [' || i_dvdadd_rate/100     ||']=분납할증율/100' ||chr(13)||chr(10);


   Else
          s_dmbo_appy_prem   := s_dmbo_basic_prem;
          s_basic_year_prem  := s_dmbo_basic_prem;
          s_appy_year_prem   := s_dmbo_basic_prem;

   End if;

    s_appy_year_prem := round(s_appy_year_prem/10, 0) * 10 ;  /*년간적용보험료(일할/단기 적용전)*/

     s_dmbo_appy_prem := round(s_dmbo_appy_prem/10, 0) ;
                                     l_log_data  := l_log_data || '*99*111* [' || s_dmbo_appy_prem ||']=round(적용보험료/10, 0)' ||chr(13)||chr(10);

     s_dmbo_appy_prem := s_dmbo_appy_prem * 10;
                                     l_log_data  := l_log_data || '*99*112* [' || s_dmbo_appy_prem ||']=적용보험료 * 10'         ||chr(13)||chr(10);


    IF  o_result is null THEN
        o_result  := 'OK' || '|' || s_dmbo_appy_prem || '|' || s_dmbo_basic_prem;
    END IF;

    l_log_data := l_log_data ||'3*01 [' || o_result    ||']=o_result'    ||chr(13)||chr(10);
    l_log_data := l_log_data ||'3*02 Good Bye......Endors'               ||chr(13)||chr(10);

    /************************/
    /* Log 남기기         ***/
    /************************/
    IF    l_log_level = 1 or nvl(regexp_substr(l_log_step,i_dmbo_cd),' ') = i_dmbo_cd then
        PR_INSERT_LOG(l_log_date,l_log_sp_name,l_log_no,'배서[분담금가져오기]',i_dmbo_cd,l_log_data);
    END IF;
    l_log_data := '';

    exception when others then dbms_output.put_line('PR_RENT_ENDOR_BUNAP_AMT Main Error[999]: '||sqlerrm);
                               raise_application_error(-20001, 'PR_RENT_ENDOR_BUNAP_AMT Main Error[999]: '||sqlerrm);
END;
CREATE OR replace
PROCEDURE          KRMA_APP.PR_RENT_ENDOR_BUNAP_RATE (i_pol_no              in  varchar2
                                                     ,i_endor_no            in  number
                                                     ,i_endor_no_bef_max    in  number
                                                     ,i_dmbo_cd             in  varchar2
                                                     ,i_na_mth              in  varchar2
                                                     ,i_spcl_agre_gb        in  varchar2
                                                     ,i_dmbo_basic_prem     in  number
                                                     ,i_dmbo_appy_prem      in  number
                                                     ,i_bnp_cnt             in  number
                                                     ,i_istar_cont_date     in  date
                                                     ,i_seq_no              in  number
                                                     ,i_i_kind_cd           in  varchar2
                                                     ,i_iend_cont_date      in  date
                                                     ,i_basis_from          in  date
                                                     ,i_basis_to            in  date
                                                     ,i_user_id             in  tbid0014.user_id%type
                                                     ,i_end_nab_no          in  number
                                                     ,i_bef_15_seq_no       in  number
                                                     ,i_endor_cd            in  varchar2
                                                     ,i_all_cliam_date      in  date
                                                     ,i_day_endor_cnt       in  number
                                                     ,i_short_day_gb        in  varchar2
                                                     ,i_basic_year_prem     in  number
                                                     ,i_appy_year_prem      in  number
                                                     ,o_result              out varchar2) as
/**************************************************************************************************************************/
/* Procedure Name :  PR_RENT_ENDOR_BUNAP_RATE                                                                            */
/* Function       :  배서 담보별, 기간별 분납 회차별 보험료 산정                                                          */
/* Parameter  i_pol_no             [ IN] 증권번호                                                                         */
/*            i_endor_no           [ IN] 배서번호                                                                         */
/*            i_endor_no_bef_max   [ IN] 이전배서번호(당일 배서가 2회 이상 발생시 처리 하기 위함                          */
/*            i_dmbo_cd            [ IN] 담보코드                                                                         */
/*            i_na_mth             [ IN] 납입방법-(1.일시납2.비연속분납3.연속분납(A0005)                                  */
/*            i_spcl_agre_gb       [ IN] '0'                                                                              */
/*            i_dmbo_basic_prem    [ IN] 담보 기본보험료                                                                  */
/*            i_dmbo_appy_prem     [ IN] 담보 적용보험료                                                                  */
/*            i_bnp_cnt            [ IN] 분납회수-1:일시납,2:2분납,3:3분납,4:4분납,5: 5분납,6:6분납,7:7분납,8:8분납(A0007)*/
/*            i_istar_cont_date    [ IN] 보험시기                                                                         */
/*            i_seq_no             [ IN] '0'                                                                              */
/*            i_i_kind_cd          [ IN] 보험종목                                                                         */
/*            i_iend_cont_date     [ IN] 보험종기                                                                         */
/*            i_basis_from         [ IN] 적용시작일                                                                       */
/*            i_basis_to           [ IN] 적용종료일                                                                       */
/*            i_user_id            [ IN] 사용자번호                                                                       */
/*            i_end_nab_no         [ IN] 최종납입회차                                                                     */
/*            i_bef_15_seq_no      [ IN] Max Seq                                                                          */
/*            i_endor_cd           [ IN] 배서코드                                                                         */
/*            i_all_cliam_date     [ IN] 차량대체일자                                                                     */
/*            i_day_endor_cnt      [ IN] 당일배서건수                                                                     */
/*            i_basic_year_prem    [ IN] 년간기본보험료                                                                   */
/*            i_appy_year_prem     [ IN] 년간적용보험료                                                                   */
/*            o_result             [Out] sp 결과(보험료)                                                                  */
/*Description : TBID0013 담보별 분담금 TABLE은 화면에서 생성시                                                            */
/*            - 이전배서(기준일 이전의 적용일자를 가진 배서)의 내용을 그대로 옮겨 놓는다                                  */
/*              (단 화면에서 바뀐 담보 내용으로 Update 함)                                                                */
/*            - 추가된 담보는 기준일을 적용시작일로 보험종기를 적용종료일로 세팅 한다.                                    */
/*            - 삭제된 담보는 이전배서의 적용시작일을 현배서의 적용시작일로 기준일을 적용종료일로 세팅한다.               */
/**************************************************************************************************************************/
V_0013_INFO                  varchar2(300);
s_0013_c_info                varchar2(150);
s_0013_c_endor_no            number;
s_0013_c_appy_from           date;
s_0013_c_appy_to             date;
s_0013_c_appy_prem           number;
s_0013_c_basic_prem          number;
s_0013_c_appy_year_prem      number;
s_0013_c_basic_year_prem     number;
s_0013_c_cancel_calc_gb      varchar2(3);


s_0013_b_info                varchar2(150);
s_0013_b_endor_no            number;
s_0013_b_appy_from           date;
s_0013_b_appy_to             date;
s_0013_b_appy_prem           number;
s_0013_b_basic_prem          number;
s_0013_b_appy_year_prem      number;
s_0013_b_basic_year_prem     number;
s_0013_b_cancel_calc_gb      varchar2(3);

s_0013_appy_prem             number;
s_0013_basic_prem            number;

s_row_cnt                    number;/*ljm 20150923 추가*/

V_BEF_15_BASIC_PREM          number;
V_BEF_15_DMBO_PREM           number;
V_RETURN_AMT1                number;
V_RETURN_AMT2                number;
V_APPY_PREM                  number;
V_BASIC_PREM                 number;
V_MAX_SEQ_NO                 number;
V_ENDOR_CD                   varchar2(4);
V_ENDOR_GB                   varchar2(2);
V_ACCI_CHECK                 varchar2(1);
V_SUM_APPY_PREM              number;
V_SUM_DMBO_PREM              number;
V_ALL_CLAIM                  varchar2(1);
V_DMBO_END_DATE              date;
V_BASIS_TO_DATE              date;
V_DANGI_APPY_FROM            date;
V_DANGI_APPY_PREM            number;
V_DANGI_BASIC_PREM           number;
V_DAMBO_START_DT             date;/*LJM 20150923 추가*/
V_DAMBO_START_DT_TEMP        date;/*LJM 20151218 추가*/
V_DAMBO_START_DT_CHAR        varchar2(20);/*LJM 20151218 추가*/
V_DAMBO_START_DT_CACEL       varchar2(20);/*LJM 20151218 추가*/
V_ENDRO_TOTAL_CNT            number;/*LJM 20151218 추가*/
V_ENDRO_CURR_CNT             number  := 1;/*LJM 20151218 추가*/
V_ENDRO_NO_MINUS             number;/*LJM 20151218 추가*/
V_DATA_INFO             varchar2(3000);/*LJM 20151218 추가*/

s_appy_prem                  number:=0;
s_basic_prem                 number:=0;
s_appy_prem1                 number:=0;
s_basic_prem1                number:=0;

f_fn_rent_short_rate         number:=1;/** ljm 20150904 1로 세팅*/

f_bunhal_bohum               varchar2(4000);
f_idx1                       number;
f_idx2                       number;

s_bunhal_bohum               varchar2(200);
s_bunhal_nabib_cnt           number;
s_bunhal_nabib_from_date     date;
s_bunhal_nabib_to_date       date;
s_bunhal_nabib_amt1          number;
s_bunhal_nabib_amt2          number;
s_bunhal_amt1                number;
s_bunhal_amt2                number;

/******************/
/*** lOG 변수 *****/
/******************/
l_log_level                  number        := 1;                                  /* 로그레벨[0~1]: 0->l_log_step에 정의된 항목과 찍는다..  1->모두찍는다.)*/
l_log_sp_name                varchar2(50)  := 'PR_RENT_AMT[ENDOR_BUNAP_RATE_PLAN]' ;        /* 로그 Stored Procedure Name*/
l_log_data                   varchar2(4000);
l_log_date                   varchar2(16)  := to_char(sysdate,'yyyymmddhh24miss');
l_log_step                   varchar2(100) :='';   /* 담보코드: '01 02 03 13 04 05 06 07 21 22 23 99'*/
l_log_no                     varchar2(20)  := i_pol_no ||'-'|| i_endor_no;

BEGIN
    o_result :=null ;
    l_log_data := l_log_data || '*00[' || i_pol_no           ||']=증권번호'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_endor_no         ||']=배서번호'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_endor_no_bef_max ||']=이전배서번호(Max)'   ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_dmbo_cd          ||']=담보코드'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_na_mth           ||']=납입방법'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_spcl_agre_gb     ||']=i_spcl_agre_gb'      ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_dmbo_basic_prem  ||']=기본보험료'          ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_dmbo_appy_prem   ||']=적용보험료'          ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_bnp_cnt          ||']=분납회수'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_istar_cont_date  ||']=보험시기'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_seq_no           ||']=분납Seq'             ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_i_kind_cd        ||']=보험종목'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_iend_cont_date   ||']=보험종기'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_basis_from       ||']=기준일'              ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_basis_to         ||']=적용종료일'          ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_user_id          ||']=User Id'             ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_end_nab_no       ||']=최종납입회차'        ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_bef_15_seq_no    ||']=분납Max Seq'         ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_short_day_gb    ||']=일할단기구분'         ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_appy_year_prem    ||']=년간적용보험료'         ||chr(13)||chr(10);

    /***********************************************************************/
    /*                                                                     */
    /* TBID0013 TABLE Insert 및 Update                                     */
    /*                                                                     */
    /***********************************************************************/

    /*배서구분: 배서코드 첫자리*/
    V_ENDOR_GB := substr(i_endor_cd, 1, 1);

    /*********************************************************/
    /* 해당담보 사고여부 확인 (Y:사고, N:사고아님)           */
    /* 진행중인 건수가 있으면 무조건 사고                    */
    /* 진행중인 건수가 없고 공제금 지급이 0보다 크면 사고    */
    /*********************************************************/
    if i_dmbo_cd  not in ('21','22','23') then
        begin
            select case when sum(decode(STAT, '3', 1, 0)) > 0                                                                              then 'Y'
                        when sum(decode(STAT, '3', 1, 0)) = 0 and sum(DC_AMT) > 0 and i_dmbo_cd <> '02'                                    then 'Y'
                        when sum(decode(STAT, '3', 1, 0)) = 0 and sum(DC_AMT) > 0 and sum(DC_AMT) <> sum(COM_DC_AMT) and i_dmbo_cd = '02'  then 'Y'
                        else 'N' end
              into V_ACCI_CHECK
              from ( select CA02.POL_NO
                          , CF01.ACCIDENT_NO
                          , CF01.HND_COVER
                          , nvl(( select sum(DC_AMT)
                                    from TBCE0001
                                   where ACCIDENT_NO = CF01.ACCIDENT_NO
                                     and HND_COVER   = CF01.HND_COVER
                                     and DMGE_NO     = CF01.DMGE_NO
                                     and DECIDE_DATE is not null ),0 ) DC_AMT
                          , nvl(( select sum(COM_DC_AMT)
                                    from TBCE0001
                                   where ACCIDENT_NO = CF01.ACCIDENT_NO
                                     and HND_COVER   = CF01.HND_COVER
                                     and DMGE_NO     = CF01.DMGE_NO
                                     and DECIDE_DATE is not null ),0 ) COM_DC_AMT
                          , case when CF01.DECIDE_DATE is not null then '1'
                                 when CF01.DC_END_DATE is not null then '2'
                                 else '3' end STAT
                       from TBCA0002 CA02
                          , TBCF0001 CF01
                      where CA02.ACCIDENT_NO = CF01.ACCIDENT_NO
                        and CA02.POL_NO      = i_pol_no
                        and CF01.LAST='Y'
                        and (CF01.HND_COVER = decode(i_dmbo_cd, '01', '21', '02', '21', '03', '33', '04', '44','08','45', '05', '55', '06', '66', '13', '33')
                            or CF01.HND_COVER = decode(i_dmbo_cd, '01', '11', '02', '11', '03', '33', '04', '44','08','45', '05', '55', '06', '66', '13', '33'))
                        );
            exception when no_data_found then
                V_ACCI_CHECK := 'N';
        end;
    else
        if i_dmbo_cd = '21' then
            begin
                select decode(nvl(count(*), 0), 0, 'N', 'Y')
                  into V_ACCI_CHECK
                  from TBCH0001
                 where H_GBN='ME400'
                   and POL_NO    = i_pol_no
                   and DELETE_YN = 'N'
                   and LAST='Y'
                   and ACT_SVC_CODE NOT IN ('51','53','54','55');
                exception when no_data_found then
                    V_ACCI_CHECK := 'N';
            end;
        else
            V_ACCI_CHECK := 'N';
        end if;
    end if;
                                                    l_log_data := l_log_data || '1*00[' || V_ACCI_CHECK           ||']=사고여부 확인정보'  ||chr(13)||chr(10);

    /*********************************************************/
    /* 전손처리 됐는지 확인(Y:전손처리, N:전손처리아님)      */
    /* CD01.DMGE_DEGREE 가 '1' 이 아닌경우는 전손처리함      */
    /* CD01.DMGE_DEGREE                                      */
    /* 1    피해구분    대물    분손                         */
    /* 2    피해구분    대물    추정전손                     */
    /* 3    피해구분    대물    절대전손                     */
    /* 4    피해구분    대물    전손(폐차)                   */
    /* 5    피해구분    대물    전손(재활용)                 */
    /* 6    피해구분    대물    도난                         */
    /*********************************************************/
    if i_dmbo_cd = '06' then
        if V_ACCI_CHECK = 'Y' then
            begin
                select decode(count(CD01.DMGE_DEGREE), 0, 'N', 'Y')    /*TEST 시 decode(count(NVL(CD01.DMGE_DEGREE, 'X')), 0, 'N', 'Y')*/
                  into V_ALL_CLAIM
                  from TBCA0002 CA02
                     , TBCD0001 CD01
                 where CA02.ACCIDENT_NO = CD01.ACCIDENT_NO
                   and CD01.LAST        = 'Y'
                   and CD01.HND_COVER   = '66'
                   and CA02.POL_NO      = i_pol_no
                   and CD01.DMGE_DEGREE IS NOT NULL                    /*TEST 시 주석처리*/
                   and CD01.DMGE_DEGREE <> '1';                        /*TEST 시 NVL(CD01.DMGE_DEGREE , 'X')<> '1'*/
                exception when others then
                    V_ACCI_CHECK := 'N';
            end;
        else
            V_ALL_CLAIM := 'N';
        end if;
    else
        V_ALL_CLAIM := 'N';
    end if;
                                                    l_log_data := l_log_data || '1*000[' || V_ALL_CLAIM           ||']=전손처리 확인정보'  ||chr(13)||chr(10);

    /*********************************************************/
    /* 현재 배서,기준일 이전 배서(TBID0013) 정보 Select      */
    /* 같은날 배서서 2번 이상 일어날 경우는 이전배서가 아니라*/
    /* 기준일 이전의 배서중 가장 큰 배서 번호정보 Select     */
    /* 801은 단기자차     */
    /*********************************************************/
    BEGIN
        if i_endor_cd = '801' THEN
          select WM_CONCAT(ENDOR_NO ||'|'|| APPY_FROM ||'|'|| APPY_TO ||'|'||  APPY_PREM ||'|'||  BASIC_PREM ||'|'|| APPY_YEAR_PREM ||'|'|| BASIC_YEAR_PREM ||'|'|| CANCEL_CALC_GB)
            into V_0013_INFO
            from (select ENDOR_NO                   /*배서번호*/
                       , APPY_FROM                  /*적용시작일*/
                       , APPY_TO                    /*적용종료일*/
                       , APPY_PREM                  /*적용보험료*/
                       , BASIC_PREM                 /*기본보험료*/
                       , APPY_YEAR_PREM             /*적용연간보험료*/
                       , BASIC_YEAR_PREM            /*기본연간보험료*/
                       , CANCEL_CALC_GB             /*일할/단기구분*/
                    from TBID0013
                   where POL_NO     = i_pol_no
                     and ENDOR_NO   = i_endor_no_bef_max
                     and DMBO_CD    = i_dmbo_cd
                     and APPY_FROM < case when i_endor_cd = '111' or i_endor_cd = '211' then APPY_FROM
                                           else to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS') end
                     and APPY_TO   > case when i_endor_cd = '111' or i_endor_cd = '211' then APPY_FROM
                                           else to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS') end
                     /*and APPY_TO >= to_date(to_char(i_iend_cont_date, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')*/
                     /*and APPY_TO <= to_date(to_char(i_iend_cont_date, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')*/
                  union all
                  select ENDOR_NO                   /*배서번호*/
                       , APPY_FROM                  /*적용시작일*/
                       , APPY_TO                    /*적용종료일*/
                       , APPY_PREM                  /*적용보험료*/
                       , BASIC_PREM                 /*기본보험료*/
                       , APPY_YEAR_PREM             /*적용연간보험료*/
                       , BASIC_YEAR_PREM            /*기본연간보험료*/
                       , CANCEL_CALC_GB             /*일할/단기구분*/
                    from TBID0013
                   where POL_NO    =  i_pol_no
                     and ENDOR_NO  =  i_endor_no
                     and DMBO_CD   =  i_dmbo_cd
                   order by ENDOR_NO,APPY_FROM   /*APPY_FROM ljm 추가*/
                 );
        else
          select WM_CONCAT(ENDOR_NO ||'|'|| APPY_FROM ||'|'|| APPY_TO ||'|'||  APPY_PREM ||'|'||  BASIC_PREM ||'|'|| APPY_YEAR_PREM ||'|'|| BASIC_YEAR_PREM ||'|'|| CANCEL_CALC_GB)
            into V_0013_INFO
            from (select ENDOR_NO                   /*배서번호*/
                       , APPY_FROM                  /*적용시작일*/
                       , APPY_TO                    /*적용종료일*/
                       , APPY_PREM                  /*적용보험료*/
                       , BASIC_PREM                 /*기본보험료*/
                       , APPY_YEAR_PREM             /*적용연간보험료*/
                       , BASIC_YEAR_PREM            /*기본연간보험료*/
                       , CANCEL_CALC_GB             /*일할/단기구분*/
                    from TBID0013
                   where POL_NO     = i_pol_no
                     and ENDOR_NO   = i_endor_no_bef_max
                     and DMBO_CD    = i_dmbo_cd
                     and APPY_FROM <= case when i_endor_cd = '111' or i_endor_cd = '211' then APPY_FROM
                                           else to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS') end
                     and APPY_TO   >= case when i_endor_cd = '111' or i_endor_cd = '211' then APPY_FROM
                                           else to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS') end
                     /*and APPY_TO >= to_date(to_char(i_iend_cont_date, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')*/
                     /*and APPY_TO <= to_date(to_char(i_iend_cont_date, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')*/
                  union all
                  select ENDOR_NO                   /*배서번호*/
                       , APPY_FROM                  /*적용시작일*/
                       , APPY_TO                    /*적용종료일*/
                       , APPY_PREM                  /*적용보험료*/
                       , BASIC_PREM                 /*기본보험료*/
                       , APPY_YEAR_PREM             /*적용연간보험료*/
                       , BASIC_YEAR_PREM            /*기본연간보험료*/
                       , CANCEL_CALC_GB             /*일할/단기구분*/
                    from TBID0013
                   where POL_NO    =  i_pol_no
                     and ENDOR_NO  =  i_endor_no
                     and DMBO_CD   =  i_dmbo_cd
                   order by ENDOR_NO , APPY_FROM /*APPY_FROM ljm 추가*/
                 );
          END IF;

        exception when others then raise_application_error(-20001, '현재,이전 배서 Select [TBID0013] Error[00]: '|| sqlerrm);
    end;

    /**담보 가입시기 구하기**/
    /**ljm 20150923 추가  **/
    /* 해지시작일자 구하기*/
    BEGIN
        SELECT
            nvl(to_char(MAX(DMBO_START_DATE),'yy/mm/dd'),'0000')
            into V_DAMBO_START_DT_CACEL
        FROM TBID0013
        where POL_NO    =  i_pol_no
        and   DMBO_CD   =  i_dmbo_cd
        and ENDOR_NO  =  i_endor_no
        and   CANCEL_CALC_GB = '2'
        ;
        exception when others then raise_application_error(-20001, '담보 해지시작일자  Select [TBID0013] Error[00]: '|| sqlerrm);
    end;

   /* 담보추가시작일자 구하기*/


   if V_DAMBO_START_DT_CACEL = '0000' then
        BEGIN
            SELECT
                MIN(DMBO_START_DATE)
                into V_DAMBO_START_DT
            FROM TBID0013
            where POL_NO    =  i_pol_no
            and   DMBO_CD   =  i_dmbo_cd
            ;
            exception when others then raise_application_error(-20001, '담보 가입시작일자  Select [TBID0013] Error[00]: '|| sqlerrm);
        end;
    else
        BEGIN
            SELECT
                MAX(DMBO_START_DATE)
                into V_DAMBO_START_DT
            FROM TBID0013
            where POL_NO    =  i_pol_no
            and   DMBO_CD   =  i_dmbo_cd
            and ENDOR_NO  =  i_endor_no
            and   CANCEL_CALC_GB = '2'
            ;
            exception when others then raise_application_error(-20001, '담보 추가 가입일자  Select [TBID0013] Error[00]: '|| sqlerrm);
        end;


        BEGIN
            SELECT
                COUNT(*)
                INTO V_ENDRO_TOTAL_CNT
            FROM TBID0013
            where POL_NO    =  i_pol_no
            and   DMBO_CD   =  i_dmbo_cd
            and ENDOR_NO  =  i_endor_no -1
            ;
            exception when others then raise_application_error(-20001, '담보 추가 가입일자  Select [TBID0013] Error[00]: '|| sqlerrm);
        end;

        LOOP
            BEGIN
                SELECT
                    WM_CONCAT(DMBO_START_DATE || '|' || DMBO_END_DATE  || '|' || CANCEL_CALC_GB)
                    INTO V_DATA_INFO
                FROM TBID0013
                where POL_NO    =  i_pol_no
                and   DMBO_CD   =  i_dmbo_cd
                and ENDOR_NO  =  i_endor_no
                ;
                exception when others then raise_application_error(-20001, '담보 추가 가입일자  Select [TBID0013] Error[00]: '|| sqlerrm);
             END;

             BEGIN
                SELECT DMBO_START_DATE
                       INTO V_DAMBO_START_DT_TEMP
                FROM TBID0013
                WHERE POL_NO    =  i_pol_no
                and   DMBO_CD   =  i_dmbo_cd
                and ENDOR_NO    =  i_endor_no -1
                AND DMBO_END_DATE = V_DAMBO_START_DT;
                exception when NO_DATA_FOUND THEN V_DAMBO_START_DT_TEMP := NULL;
                WHEN others then raise_application_error(-20001, '담보 추가 해지일자  Select [TBID0013] Error[00]: ' || 'DATA INFO' || V_DATA_INFO  || '        '  || TO_CHAR(V_DAMBO_START_DT,'YYYYMMDDHH24MISS' ) || '         ' || sqlerrm);
             END;

             IF V_DAMBO_START_DT_TEMP IS NOT NULL THEN
                V_DAMBO_START_DT := V_DAMBO_START_DT_TEMP;
             END IF;
             V_ENDRO_CURR_CNT := V_ENDRO_CURR_CNT +1;


             EXIT WHEN V_DAMBO_START_DT_TEMP IS NULL OR V_ENDRO_CURR_CNT > V_ENDRO_TOTAL_CNT;


        END LOOP;




    end if;

    V_DAMBO_START_DT := to_char(V_DAMBO_START_DT,'yy/mm/dd');

    l_log_data := l_log_data || 'V_DAMBO_START_DT==>' || TO_CHAR(V_DAMBO_START_DT,'YYYYMMDDHH24MISS') ||chr(13)||chr(10);
    l_log_data := l_log_data || '1*01['|| '현재,이전 배서 Select [TBID0013]  OK...0' ||chr(13)||chr(10);
    s_row_cnt       := regexp_count(V_0013_INFO,'[^,]+'); /*ljm 20150923 추가*/
    s_0013_b_info   := regexp_substr(V_0013_INFO,'[^,]+',1,1);
    if  i_endor_no_bef_max = to_number(regexp_substr(s_0013_b_info,'[^|]+',1,1)) then
        s_0013_b_appy_from       := to_date  (regexp_substr(s_0013_b_info,'[^|]+',1,2));     /* 이전배서 TBID0013 시작일자*/
        s_0013_b_appy_to         := to_date  (regexp_substr(s_0013_b_info,'[^|]+',1,3));     /* 이전배서 TBID0013 종료일자*/
        s_0013_b_appy_prem       := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,4));     /* 이전배서 TBID0013 적용보험료*/
        s_0013_b_basic_prem      := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,5));     /* 이전배서 TBID0013 기본보험료*/
        s_0013_b_appy_year_prem  := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,6));     /* 이전배서 TBID0013 적용연간보험료*/
        s_0013_b_basic_year_prem := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,7));     /* 이전배서 TBID0013 기본연간보험료*/
        s_0013_b_cancel_calc_gb  := regexp_substr(s_0013_b_info,'[^|]+',1,8);                /* 이전배서 TBID0013 일할/단기 구분*/

        s_0013_c_info            := regexp_substr(V_0013_INFO,'[^,]+',1,s_row_cnt);
        s_0013_c_appy_from       := to_date  (regexp_substr(s_0013_c_info,'[^|]+',1,2));     /* 현재 TBID0013 시작일자*/
        s_0013_c_appy_to         := to_date  (regexp_substr(s_0013_c_info,'[^|]+',1,3));     /* 현재 TBID0013 종료일자*/
        s_0013_c_appy_prem       := to_number(regexp_substr(s_0013_c_info,'[^|]+',1,4));     /* 현재 TBID0013 적용보험료*/
        s_0013_c_basic_prem      := to_number(regexp_substr(s_0013_c_info,'[^|]+',1,5));     /* 현재 TBID0013 기본보험료*/
        s_0013_c_appy_year_prem  := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,6));     /* 현재 TBID0013 적용연간보험료*/
        s_0013_c_basic_year_prem := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,7));     /* 현재 TBID0013 기본연간보험료*/
        s_0013_c_cancel_calc_gb  := regexp_substr(s_0013_c_info,'[^|]+',1,8);                /* 현재 TBID0013 일할/단기 구분*/


    else
        s_0013_c_info            := regexp_substr(V_0013_INFO,'[^,]+',1,1);
        s_0013_c_appy_from       := to_date  (regexp_substr(s_0013_c_info,'[^|]+',1,2));     /* 현재 TBID0013 시작일자*/
        s_0013_c_appy_to         := to_date  (regexp_substr(s_0013_c_info,'[^|]+',1,3));     /* 현재 TBID0013 종료일자*/
        s_0013_c_appy_prem       := to_number(regexp_substr(s_0013_c_info,'[^|]+',1,4));     /* 현재 TBID0013 적용보험료*/
        s_0013_c_basic_prem      := to_number(regexp_substr(s_0013_c_info,'[^|]+',1,5));     /* 현재 TBID0013 기본보험료*/
        s_0013_c_appy_year_prem  := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,6));     /* 현재 TBID0013 적용보험료*/
        s_0013_c_basic_year_prem := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,7));     /* 현재 TBID0013 기본연간보험료*/
        s_0013_c_cancel_calc_gb  := regexp_substr(s_0013_c_info,'[^|]+',1,8);                /* 현재 TBID0013 일할/단기 구분*/
    end if;

                                                    l_log_data := l_log_data || '1*02[' || s_0013_c_info           ||']=현재배서TBID0013정보'  ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*03[' || s_0013_c_appy_from      ||']=현재배서 적용시작일'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*04[' || s_0013_c_appy_to        ||']=현재배서 적용종료일'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*05[' || s_0013_c_appy_prem      ||']=현재배서 적용보험료'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*06[' || s_0013_c_basic_prem     ||']=현재배서 기본보험료'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*07[' || s_0013_c_cancel_calc_gb ||']=현재배서 일할단기구분' ||chr(13)||chr(10);

                                                    l_log_data := l_log_data || '1*08[' || s_0013_b_info           ||']=이전배서TBID0013정보'  ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*09[' || s_0013_b_appy_from      ||']=이전배서 적용시작일'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*10[' || s_0013_b_appy_to        ||']=이전배서 적용종료일'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*11[' || s_0013_b_appy_prem      ||']=이전배서 적용보험료'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*12[' || s_0013_b_basic_prem     ||']=이전배서 기본보험료'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*13[' || s_0013_b_cancel_calc_gb ||']=이전배서 일할단기구분' ||chr(13)||chr(10);

    /*일할 계약 계산*/
    if  i_short_day_gb = '1' then
        /*단기자차의 경우 단기요율로 계산해야한다. 20130514_최재혁*/
        if s_0013_c_cancel_calc_gb <> '1' then
            /* 단기요율 계산 = 적용종료일 - 적용시작일 */
            f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_c_appy_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
            f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

            /* 보험료 단기 계산 = 년간 총 적용보험료 * 단기적용율   */
            s_0013_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);
            s_0013_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);
    l_log_data := l_log_data || '1*14(2)[' || f_fn_rent_short_rate        ||']=배서일기준(단기) 적용보험료' ||chr(13)||chr(10);
    l_log_data := l_log_data || '1*14(2)[' || i_istar_cont_date        ||']=시작일자' ||chr(13)||chr(10);
    l_log_data := l_log_data || '1*14(2)[' || i_iend_cont_date        ||']=종료일자' ||chr(13)||chr(10);
    l_log_data := l_log_data || '1*14(2)[' || s_0013_c_appy_from        ||']=담보시작일자' ||chr(13)||chr(10);
    l_log_data := l_log_data || '1*14(2)[' || s_0013_c_appy_to        ||']=담보종료일자' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*14(2)[' || s_0013_appy_prem        ||']=배서일기준(단기) 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*15(2)[' || s_0013_basic_prem       ||']=배서일기준(단기) 기본보험료' ||chr(13)||chr(10);

        else
            /* 년간 총 적용보험료 * (보험종기 - 현재배서 적용시작일) / (보험종기 - 보험시기) --> 보험적용일 부터 보험 종기 까지 보험료 산출 */
            s_0013_appy_prem  := round(i_dmbo_appy_prem  * ((i_iend_cont_date - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1);
            s_0013_basic_prem := round(i_dmbo_basic_prem * ((i_iend_cont_date - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1);

                                                    l_log_data := l_log_data || '1*14[' || s_0013_appy_prem        ||']=배서일기준 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*15[' || s_0013_basic_prem       ||']=배서일기준 기본보험료' ||chr(13)||chr(10);

        end if;
    /*단기 계약 계산*/
    else
        /* 단기요율 계산 = 보험종기 - 보험시기 */
        /* i_istar_cont_date == >  V_DAMBO_START_DT     i_iend_cont_date  == > s_0013_c_appy_to 변경*/
        f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,V_DAMBO_START_DT  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
        f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

        /* 보험료 단기 계산 = 년간 총 적용보험료 * 단기적용율   */
        /*s_0013_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);*/
          s_0013_appy_prem   := round(s_0013_c_appy_prem  * f_fn_rent_short_rate * ((s_0013_c_appy_to - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date))  ,-1);
          s_0013_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate * ((s_0013_c_appy_to - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)) ,-1);
        /*s_0013_appy_prem   := round(s_0013_c_appy_prem  * f_fn_rent_short_rate  ,-1); ljm 주석으로 막음*/
        /*s_0013_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1); ljm 주석으로 막음*/

                                                    l_log_data := l_log_data || '1*14(2)[' || s_0013_appy_prem        ||']=배서일기준(단기계약) 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*15(2)[' || s_0013_basic_prem       ||']=배서일기준(단기계약) 기본보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*99(2)[' || s_0013_c_appy_from       ||']=현재배서시작일' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*99(2)[' || s_0013_c_appy_to       ||']=현재배서종료일' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*99(2)[' || V_DAMBO_START_DT       ||']=단기율시작일자' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*99(2)[' || f_fn_rent_short_rate       ||']=단기율' ||chr(13)||chr(10);
    end if;

    /********************************************/
    /** 기준일 이전 Data[TBID0013] Insert       */
    /* 2017.02.08 담보별 단체특성율 추가 */
    /********************************************/
    begin
        insert into TBID0013(POL_NO,               ENDOR_NO,                   BASIC_SCONT_GB,      DMBO_CD,
                             APPY_FROM,            ACDNT_RESP_WANT,            MAN_RESP_WANT,       INSUR_AMT,
                             INSUR_AMT_GB,         DUCT_AMT_GB,                BASIC_PREM,          DMBO_START_DATE,
                             DMBO_END_DATE,        APPY_PREM,                  BASIC_RANGE_R,       CANCEL_CALC_GB,
                             APPY_TO,              BASIS_FROM,                 BASIS_TO,
                             USER_ID,              BASIC_YEAR_PREM,            APPY_YEAR_PREM , GRP_DMBO_RATE
                               )
                      select POL_NO,               i_endor_no,                 BASIC_SCONT_GB,      DMBO_CD,
                             APPY_FROM,            ACDNT_RESP_WANT,            MAN_RESP_WANT,       INSUR_AMT,
                             INSUR_AMT_GB,         DUCT_AMT_GB,                BASIC_PREM,          DMBO_START_DATE,
                             DMBO_END_DATE,        APPY_PREM,                  BASIC_RANGE_R,       CANCEL_CALC_GB,
                             APPY_TO,              BASIS_FROM,                 BASIS_TO,
                             USER_ID,              BASIC_YEAR_PREM,            APPY_YEAR_PREM, GRP_DMBO_RATE
                        from TBID0013
                       where POL_NO   = i_pol_no
                         and ENDOR_NO = i_endor_no_bef_max
                         and DMBO_CD  = i_dmbo_cd
                         /*and APPY_TO < to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS');   --20130422 TO_DATE 처리 최재혁*/
                         and APPY_TO < case when i_dmbo_cd = '06' then to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS') + 1   /*20140521 담보코드가 자차일 경우 이전배서의 종기와 신규배서의 시기가 일치할 경우 조건문이 일치하여 복사가 안되는 현상을 방지하기 위해 + 1을 적용하여 구분함*/
                                            else to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')                             /*20130422 TO_DATE 처리 최재혁*/
                                            END ;
        exception when others then o_result := null;
    end;
                                                    l_log_data := l_log_data || '1*16[' || '기준일 이전 정보 Insert[TBID0013] OK...1'  ||chr(13)||chr(10);

    /************************/
    /* Log 남기기         ***/
    /************************/
  /*  if    l_log_level = 1 or nvl(regexp_substr(l_log_step,i_dmbo_cd),' ') = i_dmbo_cd then*/
  /*        PR_INSERT_LOG(l_log_date,l_log_sp_name,l_log_no,'배서[분납]_1',i_dmbo_cd,l_log_data);*/
  /*  end if;*/
  /*  l_log_data := '';*/

    /***************************************************/
    /** 담보해지:현재배서 적용종료일이 기준일과 같으면**/
    /***************************************************/
    IF  i_basis_from = s_0013_c_appy_to then
                                                    l_log_data := l_log_data || '1*17[**** 담보 해지_TBID0013 ********]' ||chr(13)||chr(10);
        /* 사고여부 처리*/
        /* 사고 아닌경우*/
        if  V_ACCI_CHECK = 'N' then
            /*일할 계약건*/
            if i_short_day_gb = '1' THEN
                /* 단기, 단기자차 계산 ( 2: 단기, 3:단기자차) */
                if  s_0013_c_cancel_calc_gb <> '1' AND i_dmbo_cd <> '13' AND V_ENDOR_GB in ('1','2') then
                    /*단기자차는 해지시 환급금 없다*/
                    /*단기 계산*/
                    if s_0013_c_cancel_calc_gb = '2' then
                        /*공백기간 환급이 아니면 */
                        if V_ENDOR_GB <> '6' THEN
                             /*f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,i_istar_cont_date  ,i_basis_from  ,i_istar_cont_date  ,i_iend_cont_date);*/
                            f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,V_DAMBO_START_DT  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date); /*ljm 해지시 단기율 구하는 부분 수정*/
                            f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);
                            if s_0013_c_appy_to = s_0013_c_appy_from then
                                f_fn_rent_short_rate  := 0;
                            end if;
                            /****************************/
                            /* TBID0013 Table Update   **/
                            /****************************/
                            begin
                                update TBID0013
                                   set
                                       BASIC_PREM  = CASE WHEN (i_basis_from -V_DAMBO_START_DT) = 0 THEN 0 ELSE round(BASIC_YEAR_PREM *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (i_basis_from -V_DAMBO_START_DT) ,-1) END
                                     , APPY_PREM   = CASE WHEN (i_basis_from -V_DAMBO_START_DT) = 0 THEN 0 ELSE round(APPY_YEAR_PREM  *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (i_basis_from -V_DAMBO_START_DT) ,-1) END
                                    /*    BASIC_PREM  = CASE WHEN (i_basis_from -i_istar_cont_date) = 0 THEN 0 ELSE round(BASIC_YEAR_PREM *  f_fn_rent_short_rate  ,-1) END*/
                                    /*    , APPY_PREM   = CASE WHEN (i_basis_from -i_istar_cont_date) = 0 THEN 0 ELSE round(APPY_YEAR_PREM  *  f_fn_rent_short_rate  ,-1) END*/
                                     /* ljm 20150904 해지시 보험료 산출수정*/
                                     , SHORT_R     = f_fn_rent_short_rate /* ljm 20150904 단기율 추가*/
                                 where POL_NO      = i_pol_no
                                   and ENDOR_NO    = i_endor_no
                                   and DMBO_CD     = i_dmbo_cd
                                   and APPY_TO >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                                   and APPY_TO <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      /*20130422 TO_DATE 처리 최재혁*/


                                exception  when others then o_result := 'Error';
                                                  raise_application_error(-20001, '해지담보 보험료 Update [TBID0013] Error Error[10]: '|| sqlerrm);
                            end;
                            /*ljm 해지지 기존 구간보험료 재산출*/
                            begin
                                update TBID0013
                                   set
                                       BASIC_PREM  = CASE WHEN (i_basis_from -V_DAMBO_START_DT) = 0 THEN 0 ELSE round(BASIC_YEAR_PREM *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (i_basis_from -V_DAMBO_START_DT) ,-1) END
                                     , APPY_PREM   = CASE WHEN (i_basis_from -V_DAMBO_START_DT) = 0 THEN 0 ELSE round(APPY_YEAR_PREM  *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (i_basis_from -V_DAMBO_START_DT) ,-1) END
                                    /*    BASIC_PREM  = CASE WHEN (i_basis_from -i_istar_cont_date) = 0 THEN 0 ELSE round(BASIC_YEAR_PREM *  f_fn_rent_short_rate  ,-1) END*/
                                    /*    , APPY_PREM   = CASE WHEN (i_basis_from -i_istar_cont_date) = 0 THEN 0 ELSE round(APPY_YEAR_PREM  *  f_fn_rent_short_rate  ,-1) END*/
                                     /* ljm 20150904 해지시 보험료 산출수정*/
                                     , SHORT_R     = f_fn_rent_short_rate /* ljm 20150904 단기율 추가*/
                                 where POL_NO      = i_pol_no
                                   and ENDOR_NO    = i_endor_no
                                   and DMBO_CD     = i_dmbo_cd
                                   and APPY_FROM >= to_date(to_char(V_DAMBO_START_DT, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS');


                                exception  when others then o_result := 'Error';
                                                  raise_application_error(-20001, '해지담보 보험료 Update [TBID0013] Error Error[10]: '|| sqlerrm);
                            end;

                            l_log_data := l_log_data || '1*88일할해지[' || V_DAMBO_START_DT    ||']=담보시작일'  ||chr(13)||chr(10);
                            /*ljm 단기율 다시 산출 추가*/
                            f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,V_DAMBO_START_DT  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date); /*ljm 해지시 단기율 구하는 부분 수정*/
                            f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                        /*공백기간 환급(실제 발생하진 않지만 추가함)*/
                        else
                            f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,i_istar_cont_date  ,i_all_cliam_date  ,i_istar_cont_date  ,i_iend_cont_date);
                            f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);
                            /****************************/
                            /* TBID0013 Table Update   **/
                            /****************************/
                            begin
                                update TBID0013
                                   set BASIC_PREM    = CASE WHEN (i_all_cliam_date -i_istar_cont_date) = 0 THEN 0 ELSE round(BASIC_YEAR_PREM *  f_fn_rent_short_rate * (to_date(i_all_cliam_date) - to_date(APPY_FROM)) / (i_all_cliam_date -i_istar_cont_date) ,-1) END
                                     , APPY_PREM     = CASE WHEN (i_all_cliam_date -i_istar_cont_date) = 0 THEN 0 ELSE round(APPY_YEAR_PREM  *  f_fn_rent_short_rate * (to_date(i_all_cliam_date) - to_date(APPY_FROM)) / (i_all_cliam_date -i_istar_cont_date) ,-1) END
                                     , DMBO_END_DATE = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                                     , APPY_TO       = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                                     , BASIS_TO      = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                                 where POL_NO        = i_pol_no
                                   and ENDOR_NO      = i_endor_no
                                   and DMBO_CD       = i_dmbo_cd
                                   and APPY_TO      >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                                   and APPY_TO      <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      /*20130422 TO_DATE 처리 최재혁*/


                                exception  when others then o_result := 'Error';
                                                  raise_application_error(-20001, '해지담보 보험료 Update [TBID0013] Error Error[10]: '|| sqlerrm);
                            end;
                        end if;
                                                            l_log_data := l_log_data || '1*18[' || i_istar_cont_date    ||']=시작일'  ||chr(13)||chr(10);
                                                            l_log_data := l_log_data || '1*18[' || V_DAMBO_START_DT    ||']=담보시작일'  ||chr(13)||chr(10);
                                                            l_log_data := l_log_data || '1*18[' || i_basis_from    ||']=i_basis_from'  ||chr(13)||chr(10);
                                                            l_log_data := l_log_data || '1*18[' || i_iend_cont_date    ||']=i_iend_cont_date'  ||chr(13)||chr(10);
                                                            l_log_data := l_log_data || '1*18[' || s_0013_c_appy_from    ||']=s_0013_c_appy_from'  ||chr(13)||chr(10);
                                                            l_log_data := l_log_data || '1*18[' || s_0013_c_appy_to    ||']=s_0013_c_appy_to'  ||chr(13)||chr(10);
                                                            l_log_data := l_log_data || '1*18[' || f_fn_rent_short_rate    ||']=단기요율'  ||chr(13)||chr(10);
                                                            l_log_data := l_log_data || '1*19[' || s_appy_prem    ||']=담보해지 단기 적용보험료'  ||chr(13)||chr(10);
                    end if;
                /* 일할 계산 */
                else
                    /*공백기간 환급이 아니면 */
                    if V_ENDOR_GB <> '6' THEN

                         if s_0013_c_cancel_calc_gb <> '1' then
                                        /* 단기요율 계산 = 적용종료일 - 적용시작일 */
                                        /*단기율 구하는 날짜 s_0013_c_appy_from = > V_DAMBO_START_DT*/
                                f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,V_DAMBO_START_DT  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                                f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                                IF i_dmbo_cd <> '13' then

                                    /* 보험료 단기 계산 = 년간 총 적용보험료 * 단기적용율   */
                                    /*s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);*/
                                    /*s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);*/
                                    /*ljm 20151022 보험료 구할시 기간적용 추가*/
                                    s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate * ((s_0013_c_appy_to - s_0013_b_appy_from) / (s_0013_c_appy_to - V_DAMBO_START_DT))    ,-1);
                                    s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate * ((s_0013_c_appy_to - s_0013_b_appy_from) / (s_0013_c_appy_to - V_DAMBO_START_DT))    ,-1);
                                                l_log_data := l_log_data || '1*19(2)[' || f_fn_rent_short_rate        ||']=배f_fn_rent_short_rate서일기준(단기) 적용보험료' ||chr(13)||chr(10);
                                                                            l_log_data := l_log_data || '1*19(2)[' || s_appy_prem        ||']=담보해지(단기) 적용보험료' ||chr(13)||chr(10);
                                                                            l_log_data := l_log_data || '1*19(2)[' || s_basic_prem       ||']=담보해지(단기) 기본보험료' ||chr(13)||chr(10);
                                                                            l_log_data := l_log_data || '1*19(2)[' || s_0013_b_appy_from       ||']=전배서 기준일자' ||chr(13)||chr(10);

                                    /*ljm 해지지 기존 구간보험료 재산출*/
                                    begin
                                        update TBID0013
                                           set
                                               BASIC_PREM  = CASE WHEN (s_0013_c_appy_to -V_DAMBO_START_DT) = 0 THEN 0 ELSE round(BASIC_YEAR_PREM *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (s_0013_c_appy_to -V_DAMBO_START_DT) ,-1) END
                                             , APPY_PREM   = CASE WHEN (s_0013_c_appy_to -V_DAMBO_START_DT) = 0 THEN 0 ELSE round(APPY_YEAR_PREM  *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (s_0013_c_appy_to -V_DAMBO_START_DT) ,-1) END
                                            /*    BASIC_PREM  = CASE WHEN (i_basis_from -i_istar_cont_date) = 0 THEN 0 ELSE round(BASIC_YEAR_PREM *  f_fn_rent_short_rate  ,-1) END*/
                                            /*    , APPY_PREM   = CASE WHEN (i_basis_from -i_istar_cont_date) = 0 THEN 0 ELSE round(APPY_YEAR_PREM  *  f_fn_rent_short_rate  ,-1) END*/
                                             /* ljm 20150904 해지시 보험료 산출수정*/
                                             , SHORT_R     = f_fn_rent_short_rate /* ljm 20150904 단기율 추가*/
                                         where POL_NO      = i_pol_no
                                           and ENDOR_NO    = i_endor_no
                                           and DMBO_CD     = i_dmbo_cd
                                           and APPY_FROM >= to_date(to_char(V_DAMBO_START_DT, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS');


                                         exception  when others then o_result := 'Error';
                                                          raise_application_error(-20001, '해지담보 보험료 Update [TBID0013] Error Error[10]: '|| sqlerrm);
                                    end;

                                else
                                     /*이전보험료를 일할계산함 = 이전 배서의 기간보험료 * (기준일-이전배서 대상시작일) / (이전배서 대상종료일 - 이전배서 대상시작일)*/
                                      s_appy_prem  := round(s_0013_b_appy_prem  * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                                      s_basic_prem := round(s_0013_b_basic_prem * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                                                                          l_log_data := l_log_data || '1*19[' || s_appy_prem    ||']=담보(대물임의)해지 일할 적용보험료'  ||chr(13)||chr(10);

                                end if;


                        ELSE

                              /*이전보험료를 일할계산함 = 이전 배서의 기간보험료 * (기준일-이전배서 대상시작일) / (이전배서 대상종료일 - 이전배서 대상시작일)*/
                              s_appy_prem  := round(s_0013_b_appy_prem  * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                              s_basic_prem := round(s_0013_b_basic_prem * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                                                                  l_log_data := l_log_data || '1*19[' || s_appy_prem    ||']=담보해지 일할 적용보험료'  ||chr(13)||chr(10);

                        END IF;

                        /****************************/
                        /* TBID0013 Table Update   **/
                        /****************************/
                        begin
                            update TBID0013
                               set BASIC_PREM      = s_basic_prem
                                 , APPY_PREM       = s_appy_prem
                              /*  , BASIC_YEAR_PREM = i_basic_year_prem*/
                              /*   , APPY_YEAR_PREM  = i_appy_year_prem*/
                                , SHORT_R     = f_fn_rent_short_rate /* ljm 20150904 단기율 추가*/
                             where POL_NO      = i_pol_no
                               and ENDOR_NO    = i_endor_no
                               and DMBO_CD     = i_dmbo_cd
                               and APPY_TO >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                               and APPY_TO <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      /*20130422 TO_DATE 처리 최재혁*/

                            exception  when others then o_result := 'Error';
                                                           raise_application_error(-20001, '해지담보 보험료 Update [TBID0013] Error Error[11]: '|| sqlerrm);
                        end;
                                                            l_log_data := l_log_data || '1*20[' ||  '해지담보 Update [TBID0013] OK...2'   ||chr(13)||chr(10);
                    /*공백기간 환급이면 */
                    else
                        /*이전보험료를 일할계산함 = 이전 배서의 기간보험료 * (전차량 사용종료일-이전배서 대상시작일) / (이전배서 대상종료일 - 이전배서 대상시작일)*/
                        s_appy_prem  := round(s_0013_b_appy_prem  * ((i_all_cliam_date - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                        s_basic_prem := round(s_0013_b_basic_prem * ((i_all_cliam_date - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                                                            l_log_data := l_log_data || '1*19[' || s_appy_prem    ||']=담보해지 일할 적용보험료'  ||chr(13)||chr(10);

                        /****************************/
                        /* TBID0013 Table Update   **/
                        /****************************/
                        begin
                            update TBID0013
                               set BASIC_PREM      = s_basic_prem
                                 , APPY_PREM       = s_appy_prem
                              /*   , BASIC_YEAR_PREM = i_basic_year_prem*/
                              /*   , APPY_YEAR_PREM  = i_appy_year_prem*/
                                 , DMBO_END_DATE = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                                 , APPY_TO       = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                                 , BASIS_TO      = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                             where POL_NO      = i_pol_no
                               and ENDOR_NO    = i_endor_no
                               and DMBO_CD     = i_dmbo_cd
                               and APPY_TO >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                               and APPY_TO <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      /*20130422 TO_DATE 처리 최재혁*/

                            exception  when others then o_result := 'Error';
                                                           raise_application_error(-20001, '해지담보 보험료 Update [TBID0013] Error Error[11]: '|| sqlerrm);
                        end;
                                                            l_log_data := l_log_data || '1*20[' ||  '해지담보(공백기간) Update [TBID0013] OK...2'   ||chr(13)||chr(10);
                    end if;
                end if;
            /*단기계약건*/
            else
                /*ljm 20151006 i_istar_cont_date => V_DAMBO_START_DT*/
                f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,V_DAMBO_START_DT  ,i_basis_from  ,i_istar_cont_date  ,i_iend_cont_date);
                f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);
                /****************************/
                /* TBID0013 Table Update   **/
                /****************************/
                begin
                    update TBID0013
                       set
                           BASIC_PREM  = CASE WHEN (i_basis_from -V_DAMBO_START_DT) = 0 THEN 0 ELSE round(i_dmbo_basic_prem *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (i_basis_from -V_DAMBO_START_DT) ,-1) END
                         , APPY_PREM   = CASE WHEN (i_basis_from -V_DAMBO_START_DT) = 0 THEN 0 ELSE round(s_0013_b_appy_year_prem  *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (i_basis_from -V_DAMBO_START_DT) ,-1) END
                        /* ljm 20150914 적용보험료 와 기본보험료 구하는 공식 위에내용을 아래 내용으로 수정.  i_dmbo_appy_prem ==> s_0013_b_appy_year_prem*/
                        /*    BASIC_PREM  = CASE WHEN (i_basis_from -i_istar_cont_date) = 0 THEN 0 ELSE round(i_dmbo_basic_prem *  f_fn_rent_short_rate  ,-1) END*/
                        /* , APPY_PREM   = CASE WHEN (i_basis_from -i_istar_cont_date) = 0 THEN 0 ELSE round(s_0013_b_appy_year_prem  *  f_fn_rent_short_rate  ,-1) END*/
                         , SHORT_R     = f_fn_rent_short_rate /* ljm 20150904 단기율 추가*/
                     where POL_NO      = i_pol_no
                       and ENDOR_NO    = i_endor_no
                       and DMBO_CD     = i_dmbo_cd
                       and APPY_TO >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                       and APPY_TO <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      /*20130422 TO_DATE 처리 최재혁*/


                    exception  when others then o_result := 'Error';
                                                  raise_application_error(-20001, '해지담보(단기계약) 보험료 Update [TBID0013] Error[10]: '|| sqlerrm);
                end;
                l_log_data := l_log_data || '1*99[' || round(i_appy_year_prem)  ||']=연간보험료' ||chr(13)||chr(10);
                l_log_data := l_log_data || '1*99[' || round(i_dmbo_appy_prem  *  f_fn_rent_short_rate  ,-1)  ||']=적용보험료' ||chr(13)||chr(10);
                l_log_data := l_log_data || '1*99[' || i_dmbo_appy_prem  ||']=보험료' ||chr(13)||chr(10);
                l_log_data := l_log_data || '1*99[' || f_fn_rent_short_rate  ||']=단기율' ||chr(13)||chr(10);

                /* LJM 20151019 해지시 전기간 적용보험료 다시 계산*/
                begin
                    update TBID0013
                       set
                           BASIC_PREM  = CASE WHEN (i_basis_from -V_DAMBO_START_DT) = 0 THEN 0 ELSE round(BASIC_YEAR_PREM *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (i_basis_from -V_DAMBO_START_DT) ,-1) END
                         , APPY_PREM   = CASE WHEN (i_basis_from -V_DAMBO_START_DT) = 0 THEN 0 ELSE round(APPY_YEAR_PREM  *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (i_basis_from -V_DAMBO_START_DT) ,-1) END
                        /* ljm 20150914 적용보험료 와 기본보험료 구하는 공식 위에내용을 아래 내용으로 수정.  i_dmbo_appy_prem ==> s_0013_b_appy_year_prem*/
                        /*    BASIC_PREM  = CASE WHEN (i_basis_from -i_istar_cont_date) = 0 THEN 0 ELSE round(i_dmbo_basic_prem *  f_fn_rent_short_rate  ,-1) END*/
                        /* , APPY_PREM   = CASE WHEN (i_basis_from -i_istar_cont_date) = 0 THEN 0 ELSE round(s_0013_b_appy_year_prem  *  f_fn_rent_short_rate  ,-1) END*/
                         , SHORT_R     = f_fn_rent_short_rate /* ljm 20150904 단기율 추가*/
                     where POL_NO      = i_pol_no
                       and ENDOR_NO    = i_endor_no
                       and DMBO_CD     = i_dmbo_cd
                       and APPY_FROM >= to_date(to_char(V_DAMBO_START_DT, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS');

                    exception  when others then o_result := 'Error';
                                                  raise_application_error(-20001, '해지담보(단기계약) 보험료 Update [TBID0013] Error[10]: '|| sqlerrm);
                end;


            end if;
        else


            /*해지시 사고가 있으면 분납금을 모두 받는다. */
            /****************************/
            /* TBID0013 Table Update   **/
            /****************************/
            /*공백기간 환급이 아니면 */
            if V_ENDOR_GB <> '6' then

                if i_dmbo_cd = '13' AND V_ENDOR_GB in ('1','2') then
                     /*이전보험료를 일할계산함 = 이전 배서의 기간보험료 * (기준일-이전배서 대상시작일) / (이전배서 대상종료일 - 이전배서 대상시작일)*/
                      s_appy_prem  := round(s_0013_b_appy_prem  * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                      s_basic_prem := round(s_0013_b_basic_prem * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                                                          l_log_data := l_log_data || '1*19[' || s_appy_prem    ||']=담보(대물임의)해지 일할 적용보험료'  ||chr(13)||chr(10);


                    /****************************/
                    /* TBID0013 Table Update   **/
                    /****************************/
                    begin
                        update TBID0013
                           set BASIC_PREM      = s_basic_prem
                             , APPY_PREM       = s_appy_prem
                          /*  , BASIC_YEAR_PREM = i_basic_year_prem*/
                          /*   , APPY_YEAR_PREM  = i_appy_year_prem*/
                            , SHORT_R     = f_fn_rent_short_rate /* ljm 20150904 단기율 추가*/
                         where POL_NO      = i_pol_no
                           and ENDOR_NO    = i_endor_no
                           and DMBO_CD     = i_dmbo_cd
                           and APPY_TO >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                           and APPY_TO <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      /*20130422 TO_DATE 처리 최재혁*/

                        exception  when others then o_result := 'Error';
                                                       raise_application_error(-20001, '해지담보 보험료 Update [TBID0013] Error Error[11]: '|| sqlerrm);
                    end;
                                                        l_log_data := l_log_data || '1*20[' ||  '해지담보 Update [TBID0013] OK...2'   ||chr(13)||chr(10);
                else

                    /* 후에 받아야할 돈을 다 처리해야함으로 보험료 계산이 필요없다. */
                    begin
                        update TBID0013
                           set DMBO_END_DATE = to_date(to_char(i_basis_from,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                             , APPY_TO       = to_date(to_char(i_basis_from,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                             , BASIS_TO      = to_date(to_char(i_basis_from,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                         where POL_NO        = i_pol_no
                           and ENDOR_NO      = i_endor_no
                           and DMBO_CD       = i_dmbo_cd
                           and APPY_TO      >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                           and APPY_TO      <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      /*20130422 TO_DATE 처리 최재혁*/

                        exception  when others then o_result := 'Error';
                                           raise_application_error(-20001, '해지담보(전손처리) 보험료 Update [TBID0013] Error Error[11]: '|| sqlerrm);
                    end;

                                                                l_log_data := l_log_data || '1*20[' ||  '자차 전손처리 담보 Update [TBID0013] OK'   ||chr(13)||chr(10);
                end if;
            else
                begin
                    update TBID0013
                       set DMBO_END_DATE = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                         , APPY_TO       = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                         , BASIS_TO      = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                     where POL_NO        = i_pol_no
                       and ENDOR_NO      = i_endor_no
                       and DMBO_CD       = i_dmbo_cd
                       and APPY_TO      >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                       and APPY_TO      <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      /*20130422 TO_DATE 처리 최재혁*/

                    exception  when others then o_result := 'Error';
                                       raise_application_error(-20001, '해지담보(전손처리) 보험료 Update [TBID0013] Error Error[11]: '|| sqlerrm);
                end;
            end if;
        end if;
    /**********************************************************/
    /** 담보추가:기준일 과 현재배서의 적용시작일이 같으면     */
    /**********************************************************/
    ELSIF  i_basis_from = s_0013_c_appy_from  then
        s_appy_prem  :=0;
        s_basic_prem :=0;
        f_fn_rent_short_rate := 0;

        /*단기 자차*/
        if  i_endor_cd = '801' then
            /* 보험료 계산 - 일할, 단기 구분한다. */
            if  s_0013_c_cancel_calc_gb <> '1' then
                /* 단기요율 계산 = 적용종료일 - 적용시작일 */
                f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_c_appy_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                /* 보험료 단기 계산 = 년간 총 적용보험료 * 단기적용율   */
                s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);
                s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);
                                                    l_log_data := l_log_data || '1*21[**** 담보 추가_TBID0013 ********]'                ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*22[' || s_appy_prem   ||']=담보추가 단기 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*23[' || s_basic_prem  ||']=담보추가 단기 기본보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*23[' || s_0013_c_appy_from  ||']=담보시작일자' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*23[' || s_0013_c_appy_to  ||']=담보종료일자' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*23[' || i_istar_cont_date  ||']=시작일자' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*23[' || i_iend_cont_date  ||']=종료일자' ||chr(13)||chr(10);
            else
                /* 보험료 일할 계산 = 년간 총 적용보험료 * (적용종료일 - 적용시작일) / (보험종기 - 보험시기)   */
                s_appy_prem  :=round(i_dmbo_appy_prem   * ((s_0013_c_appy_to - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;
                s_basic_prem :=round(i_dmbo_basic_prem  * ((s_0013_c_appy_to - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;
                                                    l_log_data := l_log_data || '1*21[**** 담보 추가_TBID0013 ********]'                ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*22[' || s_appy_prem   ||']=담보추가 일할 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*23[' || s_basic_prem  ||']=담보추가 일할 기본보험료' ||chr(13)||chr(10);

            end if;
        /*단기 아닌경우*/
        else
            /*일할계약*/
            if i_short_day_gb = '1' then
                /* 보험료 계산 - 일할, 단기 구분한다. */
                if  s_0013_c_cancel_calc_gb <> '1' then
                    /* 단기요율 계산 = 적용종료일 - 적용시작일 */
                    f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_c_appy_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                    f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                    /* 보험료 단기 계산 = 년간 총 적용보험료 * 단기적용율   */
                    s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);
                    s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);
                                                    l_log_data := l_log_data || '1*21[**** 담보 추가_TBID0013 ********]'                ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*22(2)[' || s_appy_prem   ||']=담보추가 단기 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*23(2)[' || s_basic_prem  ||']=담보추가 단기 기본보험료' ||chr(13)||chr(10);
                else
                    /* 보험료 일할 계산 = 년간 총 적용보험료 * (적용종료일 - 적용시작일) / (보험종기 - 보험시기)   */
                    s_appy_prem  :=round(i_dmbo_appy_prem   * ((s_0013_c_appy_to - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;
                    s_basic_prem :=round(i_dmbo_basic_prem  * ((s_0013_c_appy_to - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;
                                                    l_log_data := l_log_data || '1*21[**** 담보 추가_TBID0013 ********]'                ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*22[' || s_appy_prem   ||']=담보추가 일할 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*23[' || s_basic_prem  ||']=담보추가 일할 기본보험료' ||chr(13)||chr(10);

                end if;
            /*단기계약*/
            else
                /*분납부활*/
                if V_ENDOR_GB = '7' then
                    /*이전 데이터  적용시작일 찾기 */
                    select max(trunc(APPY_FROM)), sum(APPY_PREM), sum(BASIC_PREM)
                      into V_DANGI_APPY_FROM, V_DANGI_APPY_PREM, V_DANGI_BASIC_PREM
                      from TBID0013
                     where POL_NO   = i_pol_no
                       and ENDOR_NO = i_endor_no - 1
                       and DMBO_CD  = i_dmbo_cd
                       and APPY_TO  =(select MAX(APPY_TO)
                                        from TBID0013
                                       where POL_NO   = i_pol_no
                                         and ENDOR_NO = i_endor_no - 1
                                         and DMBO_CD  = i_dmbo_cd);

                    /* 보험료 쪼개기. 기존 단기 보험료를 기간별로 쪼갠다.  */
                    /* 보험료 쪼개기. 전 데이터 적용보험료 * ((현재담보종기 - 기준일자)/(현재담보종기-전 데이터 적용시작일))  */
                    s_appy_prem   := round(V_DANGI_APPY_PREM   * ((s_0013_c_appy_to - i_basis_from)/( s_0013_c_appy_to - V_DANGI_APPY_FROM )),-1);
                    s_basic_prem  := round(V_DANGI_BASIC_PREM  * ((s_0013_c_appy_to - i_basis_from)/( s_0013_c_appy_to - V_DANGI_APPY_FROM )),-1);
                                                    l_log_data := l_log_data || '1*21[**** 담보 추가(단기계약-분납부활))_TBID0013 ********]'                ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*22[' || s_appy_prem   ||']=담보추가(단기계약-분납부활) 단기 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*23[' || s_basic_prem  ||']=담보추가(단기계약-분납부활) 단기 기본보험료' ||chr(13)||chr(10);
                /*분납부활 아님*/
                else
                    /* 단기요율 계산 = 적용종료일 - 적용시작일 */
                    f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_c_appy_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                    f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                    /* 보험료 단기 계산 = 년간 총 적용보험료 * 단기적용율   */
                    s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);
                    s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);
                                                    l_log_data := l_log_data || '1*21[**** 담보 추가(단기계약)_TBID0013 ********]'                ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*22[' || s_appy_prem   ||']=담보추가(단기계약) 단기 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*23[' || s_basic_prem  ||']=담보추가(단기계약) 단기 기본보험료' ||chr(13)||chr(10);
                end if;
            end if;
        end if;

        /*****************************/
        /* TBID0013 Table Update    **/
        /*****************************/
        begin
            /*20130422 TO_DATE 처리 최재혁*/
            update TBID0013
               set BASIC_PREM        = s_basic_prem
                 , APPY_PREM         = s_appy_prem
                 , DMBO_START_DATE   = to_date(to_char(i_basis_from,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                 , DMBO_END_DATE     = APPY_TO
                 , BASIC_YEAR_PREM   = i_basic_year_prem
                 , APPY_YEAR_PREM    = i_appy_year_prem
                 , SHORT_R           = f_fn_rent_short_rate /*ljm 20150904 단기율 관리 추가*/

             where POL_NO    = i_pol_no
               and ENDOR_NO  = i_endor_no
               and DMBO_CD   = i_dmbo_cd
               and APPY_FROM  >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
               and APPY_FROM  <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');

            exception  when others then o_result := 'Error';
                                           raise_application_error(-20001, '추가담보 보험료 Update [TBID0013] Error Error[20]: '|| sqlerrm);
        end;
                                                     l_log_data := l_log_data || '1*24[' ||  '추가담보 Update[TBID0013] OK...4' ||chr(13)||chr(10);

        /*분납 부활이면 이전 데이터*/
        if V_ENDOR_GB = '7' then
            /*일할계약, 단기계약 동일*/
            begin
                update TBID0013
                   set basic_prem = round(basic_year_prem * ((i_basis_from - trunc(basis_from)) / (i_iend_cont_date - i_istar_cont_date)),-1)
                     , appy_prem  = round(appy_year_prem * ((i_basis_from - trunc(basis_from)) / (i_iend_cont_date - i_istar_cont_date)),-1)
                     , basis_to   = to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                 where POL_NO     = i_pol_no
                   and ENDOR_NO   = i_endor_no
                   and DMBO_CD    = i_dmbo_cd
                   and APPY_TO    = ( select MAX(APPY_TO)
                                        from TBID0013
                                       where POL_NO   = i_pol_no
                                         and ENDOR_NO = i_endor_no - 1
                                         and DMBO_CD  = i_dmbo_cd );
                exception when others then o_result := null;
            end;
                                                     l_log_data := l_log_data || '1*24-1[' ||  '분납부활(이전데이터) Update[TBID0013] OK...4' ||chr(13)||chr(10);
        end if;

        if i_day_endor_cnt > 0 then
            /********************************************/
            /** 기준일 이전 Data[TBID0013] Insert       */
            /* 당일배서일 경우에만                      */
    /* 2017.02.08 담보별 단체특성율 추가 */
            /********************************************/
            begin
                insert into TBID0013(POL_NO,               ENDOR_NO,                   BASIC_SCONT_GB,      DMBO_CD,
                                     APPY_FROM,            ACDNT_RESP_WANT,            MAN_RESP_WANT,       INSUR_AMT,
                                     INSUR_AMT_GB,         DUCT_AMT_GB,                BASIC_PREM,          DMBO_START_DATE,
                                     DMBO_END_DATE,        APPY_PREM,                  BASIC_RANGE_R,       CANCEL_CALC_GB,
                                     APPY_TO,              BASIS_FROM,                 BASIS_TO,
                                     USER_ID,              BASIC_YEAR_PREM,            APPY_YEAR_PREM , GRP_DMBO_RATE
                                       )
                              select POL_NO,               i_endor_no,                 BASIC_SCONT_GB,      DMBO_CD,
                                     APPY_FROM,            ACDNT_RESP_WANT,            MAN_RESP_WANT,       INSUR_AMT,
                                     INSUR_AMT_GB,         DUCT_AMT_GB,                BASIC_PREM,          DMBO_START_DATE,
                                     DMBO_END_DATE,        APPY_PREM,                  BASIC_RANGE_R,       CANCEL_CALC_GB,
                                     APPY_TO,              BASIS_FROM,                 BASIS_TO,
                                     USER_ID,              BASIC_YEAR_PREM,            APPY_YEAR_PREM , GRP_DMBO_RATE
                                from TBID0013
                               where POL_NO   = i_pol_no
                                 and ENDOR_NO = i_endor_no_bef_max
                                 and DMBO_CD  = i_dmbo_cd
                                 and APPY_TO  = to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');
                exception when others then o_result := null;
            end;
                                                     l_log_data := l_log_data || '1*24-1[' ||  '추가담보(당일배서) Update[TBID0013] OK...4' ||chr(13)||chr(10);
        end if;


    /************************************************************************/
    /** 보험료 변동                                                        **/
    /** 2013.05.30일 추가                                                  **/
    /** 보험료변동이 없어도 공백기간환급이면 적용받도록 수정함             **/
    /** 2013.05.30일 추가                                                  **/
    /** 보험료변동이 없어도 공백기간환급이면 적용받도록 수정함             **/
    /************************************************************************/
    ELSIF (s_0013_appy_prem <> s_0013_b_appy_prem) or (s_0013_appy_prem = s_0013_b_appy_prem and V_ENDOR_GB = '6')  then
                                                     l_log_data := l_log_data || '1*25[**** 보험료변동_TBID0013 ********]'  ||chr(13)||chr(10);
        /* 기준일 이전 사용기간에 대한 보험료 계산 */
        /* 공백기간환급 구분을 먼저 처리한다.*/
        /* 공백기간 환급이 아니면 */
        if V_ENDOR_GB <> '6' then
            /*일할계약*/
            if i_short_day_gb = '1' then
                /* 단기 계산 ( 2: 단기, 3:단기자차)*/
                if    s_0013_c_cancel_calc_gb <> '1' then
                    /*단기요율 계산 : 기준일자 - 적용시작일 로 단기요율 계산   */
                    /* ljm 20150914 단기자차 관련 단기율 구하는 부분 if로 분리하여 추가 처리*/
                    if    s_0013_c_cancel_calc_gb = '3' then
                        f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_b_appy_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                        f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                        s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate  * ((i_basis_from - s_0013_b_appy_from) / (s_0013_c_appy_to - s_0013_b_appy_from))     ,-1 );
                        s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate  * ((i_basis_from - s_0013_b_appy_from) / (s_0013_c_appy_to - s_0013_b_appy_from))     ,-1);
                    else
                        f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_b_appy_from  ,i_basis_from  ,i_istar_cont_date  ,i_iend_cont_date);
                        f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                        s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate,-1);
                        s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate,-1);

                    end if;

                    l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1      ||']=보험료변동 단기 적용보험료(변경전)'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_0013_b_appy_year_prem      ||']=연간적용보험료 (변경전)'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_0013_c_cancel_calc_gb      ||']=단기 단기자차'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || (i_basis_from - s_0013_b_appy_from)  ||']=보험료계산일자'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || (s_0013_c_appy_to - s_0013_b_appy_from)  ||']=보험료계산일자'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_0013_c_appy_to      ||']=보험종료일자'  ||chr(13)||chr(10);

                else
                    /* = 이전 배서의 기간보험료 * (기준일자-이전배서 대상시작일) / (이전배서 대상종료일 - 이전배서 대상시작일)*/
                    s_appy_prem1  := round(s_0013_b_appy_prem  * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                    s_basic_prem1 := round(s_0013_b_basic_prem * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1    ||']=보험료변동 일할 적용보험료'  ||chr(13)||chr(10);
                end if;
            /*단기계약*/
            else
                /*단기요율 계산 : 기준일자 - 적용시작일 로 단기요율 계산   */
                /*f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_b_appy_from  ,i_basis_from  ,i_istar_cont_date  ,i_iend_cont_date);*/
                /*f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);*/
                /*s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate,-1);*/
                /*s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate,-1);*/
                /* ljm 20150914 단기계약시 단기율 산출로직 수정 기준종료일 - 공제시기 분담금 로직 아래로 변경*/
                f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,V_DAMBO_START_DT  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                /*s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate   * ((i_basis_from - s_0013_b_appy_from) / (s_0013_c_appy_to - s_0013_b_appy_from))     ,-1);*/
                /*s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate   * ((i_basis_from - s_0013_b_appy_from) / (s_0013_c_appy_to - s_0013_b_appy_from))     ,-1);*/
                /* ljm 20151012 분모가 되는 기간 s_0013_b_appy_from = > V_DAMBO_START_DT 담보시기로 변경*/
                s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate   * ((i_basis_from - s_0013_b_appy_from) / (s_0013_c_appy_to - V_DAMBO_START_DT))     ,-1);
                s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate   * ((i_basis_from - s_0013_b_appy_from) / (s_0013_c_appy_to - V_DAMBO_START_DT))     ,-1);


                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율(단기계약)'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*26[' || s_0013_b_appy_from  ||']=전기준시작일'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*26[' || s_0013_c_appy_to  ||']=담보종료일자'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*26[' || V_DAMBO_START_DT  ||']=담보시작일자'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*26[' || (i_basis_from - s_0013_b_appy_from)  ||']=분자계산일자'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*26[' || (s_0013_c_appy_to - V_DAMBO_START_DT)  ||']=분모계산일자'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1      ||']=보험료변동 단기(단기계약) 적용보험료(변경전)'  ||chr(13)||chr(10);
            end if;

        /* 공백기간 환급 */
        else
            /* 사고 아닌경우*/
            if  V_ACCI_CHECK = 'N' then
                /*일할 계약*/
                if i_short_day_gb = '1' then
                    /* 단기 계산 ( 2: 단기, 3:단기자차)*/
                    if    s_0013_c_cancel_calc_gb <> '1' then
                        /*단기요율 계산 : 전차량 사용종료일 - 적용시작일 로 단기요율 계산   */
                        f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_b_appy_from  ,i_all_cliam_date  ,i_istar_cont_date  ,i_iend_cont_date);
                        f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                        s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate,-1);
                        s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate,-1);
                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율(공백기간)'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1      ||']=보험료변동 단기(공백기간) 적용보험료(변경전)'  ||chr(13)||chr(10);
                    /* 일할 계산 */
                    else
                        /* = 이전 배서의 기간보험료 * (전차량 사용종료일-이전배서 대상시작일) / (이전배서 대상종료일 - 이전배서 대상시작일)*/
                        s_appy_prem1  := round(s_0013_b_appy_prem  * ((i_all_cliam_date - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                        s_basic_prem1 := round(s_0013_b_basic_prem * ((i_all_cliam_date - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1    ||']=보험료변동(공백기간) 일할 적용보험료'  ||chr(13)||chr(10);
                    end if;
                /*단기 계약*/
                else
                    /*단기요율 계산 : 전차량 사용종료일 - 적용시작일 로 단기요율 계산   */
                    /*f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_b_appy_from  ,i_all_cliam_date  ,i_istar_cont_date  ,i_iend_cont_date);*/
                    /*f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);*/
                    /*s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate,-1);*/
                    /*s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate,-1);*/

                    /* ljm 20150916 단기율 및 분담금 구하는 방법 변경   단기율 기준종료일 ？ 공제시기
                        분담금 분담금 = 변경전 연간분담금 * 단기요율 * (전차량종료일 ？ 전 기준시작일 )  / ( 기준종료일 ？ 공제시기 )
                    */
                    f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,V_DAMBO_START_DT  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                    f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);
                    /*s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate  * ((i_all_cliam_date - s_0013_b_appy_from) / (s_0013_c_appy_to - s_0013_b_appy_from))           ,-1);*/
                    /*s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate  * ((i_all_cliam_date - s_0013_b_appy_from) / (s_0013_c_appy_to - s_0013_b_appy_from)),-1);*/
                    /* ljm 20151013 s_0013_b_appy_from => V_DAMBO_START_DT 변경*/
                    s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate  * ((i_all_cliam_date - s_0013_b_appy_from) / (s_0013_c_appy_to - V_DAMBO_START_DT))           ,-1);
                    s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate  * ((i_all_cliam_date - s_0013_b_appy_from) / (s_0013_c_appy_to - V_DAMBO_START_DT)),-1);
                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율(단기계약-공백기간)'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*26[' || s_0013_b_appy_from  ||']=전기준일시작일'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*26[' || s_0013_b_appy_to  ||']=전기준일종료일'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*26[' || V_DAMBO_START_DT  ||']=단기율시작일자'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*26[' || s_0013_c_appy_to  ||']=단기율종료일자'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*26[' || i_all_cliam_date  ||']=차량대체일'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1      ||']=보험료변동 단기(단기계약-공백기간) 적용보험료(변경전)'  ||chr(13)||chr(10);
                end if;
            /* 사고인 경우*/
            else
                /*전손처리 아닌경우*/
                if V_ALL_CLAIM = 'N' then
                    /*일할 계약 */
                    if i_short_day_gb = '1' then
                        /* 단기 계산 ( 2: 단기, 3:단기자차)*/
                        if    s_0013_c_cancel_calc_gb <> '1' then
                            /*단기요율 계산 : 전차량 사용종료일 - 적용시작일 로 단기요율 계산   */
                            f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_b_appy_from  ,i_basis_from  ,i_istar_cont_date  ,i_iend_cont_date);
                            f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                            s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate,-1);
                            s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate,-1);
                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율(공백기간-사고있음)'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1      ||']=보험료변동 단기(공백기간-사고있음) 적용보험료(변경전)'  ||chr(13)||chr(10);
                        /* 일할 계산 */
                        else
                            /* = 이전 배서의 기간보험료 * (전차량 사용종료일-이전배서 대상시작일) / (이전배서 대상종료일 - 이전배서 대상시작일)*/
                            s_appy_prem1  := round(s_0013_b_appy_prem  * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                            s_basic_prem1 := round(s_0013_b_basic_prem * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1    ||']=보험료변동(공백기간-사고있음) 일할 적용보험료'  ||chr(13)||chr(10);
                        end if;
                    /*단기 계약*/
                    else
                        /*단기요율 계산 : 전차량 사용종료일 - 적용시작일 로 단기요율 계산   */
                        f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_b_appy_from  ,i_basis_from  ,i_istar_cont_date  ,i_iend_cont_date);
                        f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                        s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate,-1);
                        s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate,-1);
                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율(공백기간-사고있음)'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1      ||']=보험료변동 단기(공백기간-사고있음) 적용보험료(변경전)'  ||chr(13)||chr(10);
                    end if;
                /*전손처리*/
                else
                    /*기존 보험료 그대로 받는다 */
                    s_appy_prem1  := s_0013_b_appy_prem;
                    s_basic_prem1 := s_0013_b_basic_prem;
                end if;
            end if;
        end if;

        /* 기준일 이전 데이터 날짜 update 하기 위해 날짜 계산 */
        if V_ENDOR_GB = '6' then
            V_DMBO_END_DATE := i_all_cliam_date;
            if V_ACCI_CHECK = 'N' then
                V_BASIS_TO_DATE := i_all_cliam_date;
            else
                V_BASIS_TO_DATE := i_basis_from;
            end if;
        else
            V_DMBO_END_DATE := i_basis_from;
            V_BASIS_TO_DATE := i_basis_from;
        end if;

        /* 기준일 이후 사용기간에 대한 보험료 계산 */
        /* 분납부활이 여부에 따라서 처리가 달라짐 */
        /* 일할 단기 계산 */
        /*일할 계약*/
        if i_short_day_gb = '1' then
            if    s_0013_c_cancel_calc_gb <> '1' then
                /*단기요율 계산 : 적용종료일 - 기준일자 로 단기요율 계산   */
                 /* ljm 20150914 단기자차 관련 단기율 구하는 부분 if로 분리하여 추가 처리*/
                if    s_0013_c_cancel_calc_gb = '3' then
                        f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_b_appy_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                        f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                        s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate  * ((s_0013_c_appy_to - i_basis_from) / (s_0013_c_appy_to - s_0013_b_appy_from))     ,-1 );
                        s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate  * ((s_0013_c_appy_to - i_basis_from) / (s_0013_c_appy_to - s_0013_b_appy_from))     ,-1);
                    else
                        f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,i_basis_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                        f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                        s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);
                        s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);

                    end if;




                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*26[' || i_dmbo_appy_prem  ||']=년간적용보험료'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*26[' || (s_0013_c_appy_to - i_basis_from)  ||']=계산일자'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*26[' || (s_0013_c_appy_to - s_0013_b_appy_from)  ||']=계산일자'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem    ||']=보험료변동 단기 적용보험료(변경후)'  ||chr(13)||chr(10);
            else
                /* 기준일 이후 기간 동안 = 년보험료 * (보험종기 - 기준일) / (보험종기 - 보험시기)*/
                s_appy_prem   := round(i_dmbo_appy_prem  *   ((i_iend_cont_date  - i_basis_from) / (i_iend_cont_date  - i_istar_cont_date)) ,-1);
                s_basic_prem  := round(i_dmbo_basic_prem *   ((i_iend_cont_date  - i_basis_from) / (i_iend_cont_date  - i_istar_cont_date)) ,-1);
                                                     l_log_data := l_log_data || '1*28[' || s_appy_prem    ||']=년적용보험료*(보험종기-기준일)/(보험종기-보험시기)'  ||chr(13)||chr(10);
            end if;
        /*단기 계약*/
        else
            /*단기요율 계산 : 적용종료일 - 기준일자 로 단기요율 계산   */
            /*f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,i_basis_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);*/
            /*f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);*/
            /*s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);*/
            /*s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);*/
               /* ljm 20150914 단기계약시 단기율 산출로직 수정 기준종료일 - 공제시기 분담금 로직 아래로 변경*/
              f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,V_DAMBO_START_DT  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
              f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);
              s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate  * ((s_0013_c_appy_to - i_basis_from) / (s_0013_c_appy_to - V_DAMBO_START_DT))      ,-1);
              s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate  * ((s_0013_c_appy_to - i_basis_from) / (s_0013_c_appy_to - V_DAMBO_START_DT))      ,-1);

                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*26[' || s_0013_b_appy_from  ||']=전기준시작일'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*26[' || s_0013_c_appy_to  ||']=기준종료일'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*26[' || i_basis_from  ||']=배서기준일'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem    ||']=보험료변동 단기 적용보험료(변경후)'  ||chr(13)||chr(10);
        end if;

        /***********************************************************/
        /* 기준일 이후 보험료을 TBID0013에 Insert 시킴             */
        /* 단기자차의 담보종기가 보험종기로 생성되는 오류가        */
        /* 발생하여 단기자차인경우와 분기처리하여 처리             */
        /* ljm 20150914                                            */
 /*2017.02.08 담보별 단체특성율 추가    */
        /***********************************************************/
        if    s_0013_c_cancel_calc_gb = '3' then
            begin
                /*20130422 TO_DATE 처리 최재혁, BASIS_FROM 잘못들어가는거 수정.*/
                insert into TBID0013(POL_NO,               ENDOR_NO,                   BASIC_SCONT_GB,        DMBO_CD,
                                     ACDNT_RESP_WANT,      MAN_RESP_WANT,              INSUR_AMT,             INSUR_AMT_GB,
                                     DUCT_AMT_GB,          BASIC_PREM,                 APPY_PREM,             BASIC_RANGE_R,
                                     CANCEL_CALC_GB,       APPY_TO,                    BASIS_TO,              USER_ID,
                                     BASIC_YEAR_PREM,      APPY_YEAR_PREM,
                                     APPY_FROM,
                                     DMBO_START_DATE,
                                     DMBO_END_DATE,
                                     BASIS_FROM ,
         GRP_DMBO_RATE
                                     )
                              select POL_NO,               ENDOR_NO,                   BASIC_SCONT_GB,        DMBO_CD,
                                     ACDNT_RESP_WANT,      MAN_RESP_WANT,              INSUR_AMT,             INSUR_AMT_GB,
                                     DUCT_AMT_GB,          s_basic_prem,               s_appy_prem,           BASIC_RANGE_R,
                                     CANCEL_CALC_GB,       APPY_TO,                    BASIS_TO,              USER_ID,
                                     i_basic_year_prem,    i_appy_year_prem,
                                     to_date(to_char(i_basis_from    ,'yyyymmdd')||'235959', 'yyyymmddhh24miss'),
                                     to_date(to_char(i_basis_from    ,'yyyymmdd')||'235959', 'yyyymmddhh24miss'),
                                     /*to_date(to_char(i_iend_cont_date,'yyyymmdd')||'235959', 'yyyymmddhh24miss'),*/
                                     to_date(to_char(s_0013_c_appy_to,'yyyymmdd')||'235959', 'yyyymmddhh24miss'), /* ljm수정 단기자차시 담보적용종기가 보험종기로 생성되어 수정.*/
                                     to_date(to_char(i_basis_from    ,'yyyymmdd')||'235959', 'yyyymmddhh24miss') ,
         GRP_DMBO_RATE
                                from TBID0013
                               where POL_NO   = i_pol_no
                                 and ENDOR_NO = i_endor_no
                                 and DMBO_CD  = i_dmbo_cd
                                 and APPY_FROM <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                                 and APPY_TO   >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');
                                 /*and APPY_TO >= to_date(to_char(i_iend_cont_date, 'yyyymmdd')||'000000', 'yyyymmddhh24miss')*/
                                 /*and APPY_TO <= to_date(to_char(i_iend_cont_date, 'yyyymmdd')||'235959', 'yyyymmddhh24miss');*/

                exception when others then o_result := 'Error';
                                                 raise_application_error(-20001, '기준일 이후 일할 보험료 Insert[TBID0013] Error[30]: '|| sqlerrm);

            end;
       else
            begin
                /*20130422 TO_DATE 처리 최재혁, BASIS_FROM 잘못들어가는거 수정.*/
                insert into TBID0013(POL_NO,               ENDOR_NO,                   BASIC_SCONT_GB,        DMBO_CD,
                                     ACDNT_RESP_WANT,      MAN_RESP_WANT,              INSUR_AMT,             INSUR_AMT_GB,
                                     DUCT_AMT_GB,          BASIC_PREM,                 APPY_PREM,             BASIC_RANGE_R,
                                     CANCEL_CALC_GB,       APPY_TO,                    BASIS_TO,              USER_ID,
                                     BASIC_YEAR_PREM,      APPY_YEAR_PREM,
                                     APPY_FROM,
                                     DMBO_START_DATE,
                                     DMBO_END_DATE,
                                     BASIS_FROM,
         GRP_DMBO_RATE
                                     )
                              select POL_NO,               ENDOR_NO,                   BASIC_SCONT_GB,        DMBO_CD,
                                     ACDNT_RESP_WANT,      MAN_RESP_WANT,              INSUR_AMT,             INSUR_AMT_GB,
                                     DUCT_AMT_GB,          s_basic_prem,               s_appy_prem,           BASIC_RANGE_R,
                                     CANCEL_CALC_GB,       APPY_TO,                    BASIS_TO,              USER_ID,
                                     i_basic_year_prem,    i_appy_year_prem,
                                     to_date(to_char(i_basis_from    ,'yyyymmdd')||'235959', 'yyyymmddhh24miss'),
                                     to_date(to_char(i_basis_from    ,'yyyymmdd')||'235959', 'yyyymmddhh24miss'),
                                     to_date(to_char(i_iend_cont_date,'yyyymmdd')||'235959', 'yyyymmddhh24miss'),
                                     /*to_date(to_char(s_0013_c_appy_to,'yyyymmdd')||'235959', 'yyyymmddhh24miss'), -- ljm수정 단기자차시 담보적용종기가 보험종기로 생성되어 수정.*/
                                     to_date(to_char(i_basis_from    ,'yyyymmdd')||'235959', 'yyyymmddhh24miss') ,
         GRP_DMBO_RATE
                                from TBID0013
                               where POL_NO   = i_pol_no
                                 and ENDOR_NO = i_endor_no
                                 and DMBO_CD  = i_dmbo_cd
                                 and APPY_FROM <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                                 and APPY_TO   >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');
                                 /*and APPY_TO >= to_date(to_char(i_iend_cont_date, 'yyyymmdd')||'000000', 'yyyymmddhh24miss')*/
                                 /*and APPY_TO <= to_date(to_char(i_iend_cont_date, 'yyyymmdd')||'235959', 'yyyymmddhh24miss');*/

                exception when others then o_result := 'Error';
                                                 raise_application_error(-20001, '기준일 이후 일할 보험료 Insert[TBID0013] Error[30]: '|| sqlerrm);

            end;


       end if;









                                                      l_log_data := l_log_data ||  '1*29[' || '기준일이후 일할보험료 Insert[TBID0013] OK...5' ||chr(13)||chr(10);

        /***********************************************************/
        /* 기준일 이전 보험료을 TBID0013에 Update 시킴             */
        /***********************************************************/
        begin
            /*20130422 TO_DATE 처리 최재혁*/
            Merge  into TBID0013 A
                   using (select *
                           from TBID0013 B1
                          where B1.POL_NO    = i_pol_no
                            and B1.ENDOR_NO  = i_endor_no_bef_max
                            and B1.DMBO_CD   = i_dmbo_cd
                            and B1.APPY_FROM >= to_date(to_char(s_0013_c_appy_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                            and B1.APPY_FROM <= to_date(to_char(s_0013_c_appy_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                         ) B
                      on (    A.POL_NO = B.POL_NO
                          and A.ENDOR_NO       = i_endor_no
                          and B.ENDOR_NO       = i_endor_no_bef_max
                          and A.BASIC_SCONT_GB = B.BASIC_SCONT_GB
                          and A.DMBO_CD        = B.DMBO_CD
                          and A.APPY_FROM      = B.APPY_FROM
                         )
            when matched then
            update set A.ACDNT_RESP_WANT  = B.ACDNT_RESP_WANT
                     , A.MAN_RESP_WANT    = B.MAN_RESP_WANT
                     , A.INSUR_AMT        = B.INSUR_AMT
                     , A.INSUR_AMT_GB     = B.INSUR_AMT_GB
                     , A.DUCT_AMT_GB      = B.DUCT_AMT_GB
                     , A.BASIC_PREM       = s_basic_prem1
                     , A.DMBO_START_DATE  = to_date(to_char(s_0013_c_appy_from,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                     , A.DMBO_END_DATE    = to_date(to_char(V_DMBO_END_DATE,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                     , A.APPY_PREM        = s_appy_prem1
                     , A.BASIC_RANGE_R    = B.BASIC_RANGE_R
                     , A.CANCEL_CALC_GB   = B.CANCEL_CALC_GB
                     , A.APPY_TO          = to_date(to_char(V_DMBO_END_DATE,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                     , A.BASIS_FROM       = to_date(to_char(s_0013_c_appy_from,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                     , A.BASIS_TO         = to_date(to_char(V_BASIS_TO_DATE,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                     , A.USER_ID          = B.USER_ID
                     , A.BASIC_YEAR_PREM  = B.BASIC_YEAR_PREM
                     , A.APPY_YEAR_PREM   = B.APPY_YEAR_PREM;

            exception when others then o_result := 'Error';
                                          raise_application_error(-20001, '기준일 이전 일할(단기)보험료 Update[TBID0013] Error[40]: '|| sqlerrm);
        end;
                                                      l_log_data := l_log_data ||  '1*30[' || '기준일이전 일할(단기)보험료 Update[TBID0013] OK...6'  ||chr(13)||chr(10);

    END IF;

    /********************************************************************/
    /*                                                                  */
    /* TBID0014 TABLE 생성하기                                          */
    /*                                                                  */
    /********************************************************************/
    begin
        Insert into TBID0014(POL_NO            ,DMBO_CD               ,CALC_FYMD                     ,CALC_EYMD
                            ,BASIC_PREM        ,APPY_PREM             ,ENDOR_NO                      ,APPY_FROM
                            ,APPY_TO           ,BASIS_FROM            ,BASIS_TO                      ,USER_ID
                            )
                      select POL_NO            ,DMBO_CD               ,APPY_FROM                     ,APPY_TO
                            ,BASIC_PREM        ,APPY_PREM             ,i_endor_no                    ,APPY_FROM
                            ,APPY_TO           ,BASIS_FROM            ,BASIS_TO                      ,i_user_id
                        from TBID0013
                       where POL_NO   = i_pol_no
                         and ENDOR_NO = i_endor_no
                         and DMBO_CD  = i_dmbo_cd;
        exception  when others then o_result := 'Error';
                                           raise_application_error(-20001, ' Insert [TBID0014] Error[50]: '|| sqlerrm);

    end;
                                                      l_log_data := l_log_data || '1*31[' ||  ' Insert [TBID0014] OK1...'  ||chr(13)||chr(10);

    /************************/
    /* Log 남기기         ***/
    /************************/
    /*IF    l_log_level = 1 or nvl(regexp_substr(l_log_step,i_dmbo_cd),' ') = i_dmbo_cd then*/
    /*      PR_INSERT_LOG(l_log_date,l_log_sp_name,l_log_no,'배서[분납]_2',i_dmbo_cd,l_log_data);*/
    /*END IF;*/
    /*l_log_data := '';*/

    /********************************************************************/
    /*                                                                  */
    /* TBID0015 TABLE 생성하기                                          */
    /*                                                                  */
    /********************************************************************/

    /******************************************************************************/
    /* 이전 배서[TBID0015]에서 납입회차까지의 보험료를 Sum 한다-기납입 보험료 산출*/
    /*  기준이 되는 seq_no 를 가져와야 한다.20130423 최재혁추가                   */
    /******************************************************************************/
    begin
        select nvl(sum(BASIC_PREM),0)
             , nvl(sum(DMBO_PREM) ,0)
             , nvl(max(seq_no), 0)
          into V_BEF_15_BASIC_PREM
             , V_BEF_15_DMBO_PREM
             , V_MAX_SEQ_NO
          from TBID0015
         where POL_NO   = i_pol_no
           and ENDOR_NO = i_endor_no -1
           and DMBO_CD  = i_dmbo_cd
           and BNP_NO  <= i_end_nab_no;

        exception when no_data_found then V_BEF_15_BASIC_PREM :=0;
                                          V_BEF_15_DMBO_PREM :=0;
                  when others        then o_result := 'Error';
                                            raise_application_error(-20001, 'PR_RENT_ENDOR_BUNAP_RATE Insert Error[130] :'|| sqlerrm);
    end;

                                                      l_log_data := l_log_data || '2*01[' || '납입회차까지 보험료Sum[TBID0015] OK...1'   ||chr(13)||chr(10);

    /***************************************************/
    /** 담보해지:현재배서 적용종료일이 기준일과 같으면 */
    /***************************************************/
    IF    i_basis_from = s_0013_c_appy_to then
                                                      l_log_data := l_log_data || '2*02[**** 담보 해지_TBID0015 ********]'  ||chr(13)||chr(10);
        /**************************************************************************/
        /* 이전 회차 보험료(기 납입 보험료)는 무조건 신규 배서에 Insert 시킴      */
        /**************************************************************************/
        begin
            insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                  DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                  IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                  BASIS_FROM,               BASIS_TO,               USER_ID )
                          select  POL_NO,                   i_endor_no,             BNP_NO,                     SEQ_NO,
                                  DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                  IEND_VALID_DATE,          i_endor_no -1,          APPY_FROM,                  APPY_TO,
                                  BASIS_FROM,               BASIS_TO,               i_user_id
                            from  TBID0015
                           where  POL_NO   = i_pol_no
                             and  ENDOR_NO = i_endor_no -1
                             and  DMBO_CD  = i_dmbo_cd
                             and  BNP_NO   <= i_end_nab_no;
            exception when others then o_result := 'Error';
                                           raise_application_error(-20001, '담보해지 Insert [TBID0015] Error[131]: '|| sqlerrm);
        end;
                                                      l_log_data := l_log_data || '2*03[' || '담보해지 Insert [TBID0015] OK...2' ||chr(13)||chr(10);

        /************************************/
        /* 기간별 보험료[TBID0013] Sum      */
        /************************************/
        begin
            select nvl(sum(BASIC_PREM),0)
                 , nvl(sum(APPY_PREM) ,0)
              into V_BASIC_PREM
                 , V_APPY_PREM
              from TBID0013
             where POL_NO   =  i_pol_no
               and ENDOR_NO =  i_endor_no
               and DMBO_CD  =  i_dmbo_cd;

            exception when others then V_BASIC_PREM := 0;
                                       V_APPY_PREM  := 0;
        end;

        /* 기 납입 보험료에서 기간별 사용한 총 보험료를 빼준다 */
        s_appy_prem  := V_APPY_PREM  - V_BEF_15_DMBO_PREM;
        s_basic_prem := V_BASIC_PREM - V_BEF_15_BASIC_PREM;

                                                    l_log_data := l_log_data || '2*05[' || V_APPY_PREM          ||']=기간보험료'                 ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '2*06[' || V_BEF_15_DMBO_PREM   ||']=기납입 보험료'              ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '2*07[' || s_appy_prem          ||']=기간보험료 - 기납입보험료'  ||chr(13)||chr(10);
        /***************************/
        /** TBID0015 Table Insert **/
        /***************************/
        begin
            insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                  DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                  IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                  BASIS_FROM,               BASIS_TO,               USER_ID )
                           select POL_NO,                   i_endor_no,             BNP_NO,                     i_bef_15_seq_no,
                                  i_dmbo_cd,                s_basic_prem,           s_appy_prem,                ISTAR_VALID_DATE,
                                  IEND_VALID_DATE,          i_endor_no-1,           APPY_FROM,                  APPY_TO,
                                  BASIS_FROM,               BASIS_TO,               i_user_id
                             from TBID0015
                            where POL_NO   = i_pol_no
                              and ENDOR_NO = i_endor_no -1
                              and BNP_NO   = i_end_nab_no
                              and rownum   = 1;

            exception when others then o_result := 'Error';
                                         raise_application_error(-20001, '담보해지 Insert [TBID0015] Error[132]: '|| sqlerrm);
        end;
                                                   l_log_data := l_log_data || '2*08[' || '담보해지 Insert [TBID0015] OK..3' ||chr(13)||chr(10);

    /********************************************************************************/
    /** 담보추가:기준일 과 현재배서 적용일이 같으면서 이전배서의적용시작일이 없으면 */
    /********************************************************************************/
    ELSIF i_basis_from = s_0013_c_appy_from and s_0013_b_appy_from is null then
        /**************************************************************************/
        /* 이전 회차 보험료(기 납입 보험료)는 무조건 신규 배서에 Insert 시킴      */
        /**************************************************************************/
        begin
            insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                  DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                  IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                  BASIS_FROM,               BASIS_TO,               USER_ID )
                          select  POL_NO,                   i_endor_no,             BNP_NO,                     SEQ_NO,
                                  DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                  IEND_VALID_DATE,          i_endor_no -1,          APPY_FROM,                  APPY_TO,
                                  BASIS_FROM,               BASIS_TO,               i_user_id
                            from  TBID0015
                           where  POL_NO   = i_pol_no
                             and  ENDOR_NO = i_endor_no -1
                             and  DMBO_CD  = i_dmbo_cd
                             and  BNP_NO   <= i_end_nab_no;
            exception when others then o_result := 'Error';
                                           raise_application_error(-20001, '담보추가 Insert [TBID0015] Error[131]: '|| sqlerrm);
        end;
                                                      l_log_data := l_log_data || '2*03[' || '담보추가 Insert [TBID0015] OK...2' ||chr(13)||chr(10);

        /*분납부활이 아닌경우*/
        if V_ENDOR_GB <> '7' then
            /*****************************************************************/
            /* 회차별 보험료를 산정 한다                                     */
            /* FN_RENT_BUNAP_AMT:                                            */
            /*    [ In] 납입방법/상품종류/'0'/분납회수/적용보험료/           */
            /*          기본보험료/보험종기/Sort_Gubun                       */
            /*    [Out] f_bunhal_bohum                                       */
            /*          납입회수,분납일자,분납 유효일자,기준보험료,적용보험료*/
            /*                                                               */
            /* Description : 납입회차 역순으로 자료 나옴                     */
            /*****************************************************************/
                                                       l_log_data := l_log_data || '2*09[**** 담보 추가_TBID0015 ********]'  ||chr(13)||chr(10);

            f_bunhal_bohum := FN_RENT_BUNAP_AMT(i_na_mth,i_i_kind_cd,i_spcl_agre_gb,i_bnp_cnt,i_dmbo_appy_prem,i_dmbo_basic_prem,i_istar_cont_date,'DESC');
            l_log_data := l_log_data || '2*11(DESC) [' || i_dmbo_appy_prem  ||']=i_dmbo_appy_prem' ||chr(13)||chr(10);
                l_log_data := l_log_data || '2*11(DESC) [' || i_dmbo_basic_prem  ||']=i_dmbo_basic_prem' ||chr(13)||chr(10);
                l_log_data := l_log_data || '2*11(DESC) [' || f_bunhal_bohum  ||']=DESC' ||chr(13)||chr(10);

            /***********************************************************/
            /* 기준일 이후 보험료 산정(일할계산)                       */
            /***********************************************************/
            if  i_endor_cd <> '801' then             /*단기자차가 아니면 (기존대로)*/
                  /* 보험료 일할 계산 = 년간 총 적용보험료 * (보험종기 -기준일) / (보험종기 - 보험시기)   */
                s_appy_prem  :=round(i_dmbo_appy_prem   * ((i_iend_cont_date - i_basis_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;
                s_basic_prem :=round(i_dmbo_basic_prem  * ((i_iend_cont_date - i_basis_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;
                                                        l_log_data := l_log_data || '2*10[' || s_appy_prem   ||']=일할 적용보험료' ||chr(13)||chr(10);
                                                        l_log_data := l_log_data || '2*11[' || s_basic_prem  ||']=일할 기본보험료' ||chr(13)||chr(10);
            else
                /* 보험료 계산 - 일할, 단기 구분한다. */
                if  s_0013_c_cancel_calc_gb <> '1' then
                    /* 단기요율 계산 = 적용종료일 - 적용시작일 */
                    f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_c_appy_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                    f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                    /* 보험료 단기 계산 = 년간 총 적용보험료 * 단기적용율   */
                    s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);
                    s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);
                                                        l_log_data := l_log_data || '2*10[' || s_appy_prem   ||']=단기 적용보험료' ||chr(13)||chr(10);
                                                        l_log_data := l_log_data || '2*11[' || s_basic_prem  ||']=단기 기본보험료' ||chr(13)||chr(10);
                else
                    /* 보험료 일할 계산 = 년간 총 적용보험료 * (적용종료일 - 적용시작일) / (보험종기 - 보험시기)   */
                    s_appy_prem  :=round(i_dmbo_appy_prem   * ((s_0013_c_appy_to - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;
                    s_basic_prem :=round(i_dmbo_basic_prem  * ((s_0013_c_appy_to - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;
                                                        l_log_data := l_log_data || '2*10[' || s_appy_prem   ||']=일할 적용보험료' ||chr(13)||chr(10);
                                                        l_log_data := l_log_data || '2*11[' || s_basic_prem  ||']=일할 기본보험료' ||chr(13)||chr(10);
                end if;
            end if;

            if  i_dmbo_cd in ('21','22','23') THEN
                     /***********************************************************/
                /* 위 담보일 경우 최종납입회차에 넣고 끝낸다.        */
                /***********************************************************/
                    begin
                    insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                          DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                          IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                          BASIS_FROM,               BASIS_TO,               USER_ID )
                                   select i_pol_no,                 i_endor_no,             i_end_nab_no,               i_bef_15_seq_no,
                                          i_dmbo_cd,                s_basic_prem,           s_appy_prem,                s_0013_c_appy_from,
                                          s_0013_c_appy_to,         i_endor_no-1,           s_0013_c_appy_from,         s_0013_c_appy_to,
                                          s_0013_c_appy_from,       s_0013_c_appy_to,       i_user_id
                                     from DUAL;
                    exception when others then o_result := 'Error';
                                                       raise_application_error(-20001, '긴출관련 분납  Insert[TBID0015] Error[160]: '|| sqlerrm);
                end;
                                                  l_log_data := l_log_data || '2*'|| f_idx2 || '-11[' || '긴출관련 분납 Insert OK...2'  ||chr(13)||chr(10);

            elsif  i_endor_cd <> '801'  then             /*단기자차가 아니면 (기존대로)*/
                /***********************************************************/
                /* 회차별 보험료 Looping 갯수 산정                         */
                /***********************************************************/
                f_idx1  := length(f_bunhal_bohum) - length(replace(f_bunhal_bohum,',','')) + 1;
                f_idx2  := 0;
                                                           l_log_data := l_log_data || '2*12 [' || f_idx1  ||']=f_idx1' ||chr(13)||chr(10);
                                                           l_log_data := l_log_data || '2*13 [' || f_idx2  ||']=f_idx2' ||chr(13)||chr(10);
                Loop
                    f_idx2 := f_idx2 + 1;
                    if  f_idx2 > f_idx1 then
                        exit;
                    end if;

                    /***********************************************************/
                    /* 회차별 보험료 정보를 구분자로 Substring 함              */
                    /***********************************************************/
                    s_bunhal_bohum           := regexp_substr(f_bunhal_bohum,'[^,]+',1,f_idx2);

                    s_bunhal_nabib_cnt       := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,1));
                    s_bunhal_nabib_from_date := to_date  (regexp_substr(s_bunhal_bohum,'[^|]+',1,2));
                    s_bunhal_nabib_to_date   := to_date  (regexp_substr(s_bunhal_bohum,'[^|]+',1,3));
                    s_bunhal_nabib_amt1      := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,4));   /* 기준보험료 */
                    s_bunhal_nabib_amt2      := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,5));   /* 적용보험료 */

                                                           l_log_data := l_log_data || '2*'|| f_idx2 || '-02[' || s_bunhal_nabib_cnt         ||']=납입회차'       ||chr(13)||chr(10);
                                                           l_log_data := l_log_data || '2*'|| f_idx2 || '-03[' || s_bunhal_nabib_from_date   ||']=납입일자'       ||chr(13)||chr(10);
                                                           l_log_data := l_log_data || '2*'|| f_idx2 || '-04[' || s_bunhal_nabib_to_date     ||']=납입유효일자'   ||chr(13)||chr(10);
                                                           l_log_data := l_log_data || '2*'|| f_idx2 || '-06[' || s_bunhal_nabib_amt2        ||']=적용보험료'     ||chr(13)||chr(10);

                    s_bunhal_amt1  := s_basic_prem;
                    s_bunhal_amt2  := s_appy_prem;
                    /***********************************************************/
                    /* 회차별 보험료 정보를 구분자로 Substring 함              */
                    /***********************************************************/
                    s_basic_prem   := s_basic_prem - s_bunhal_nabib_amt1;
                    s_appy_prem    := s_appy_prem  - s_bunhal_nabib_amt2;
                                                           l_log_data := l_log_data || '2*'|| f_idx2 || '-08[' || s_appy_prem    ||']=일할적용보험료-회차적용보험료' ||chr(13)||chr(10);
                                                           l_log_data := l_log_data || '2*'|| f_idx2 || '-09[' || i_end_nab_no   ||']=종납회차 '                     ||chr(13)||chr(10);

                    /***********************************************************/
                    /* 현재 납입 회차와 분납회차가 같으면                      */
                    /* 납입순번을 i_bef_15_seq_no 하여 계산된 보험료에서       */
                    /* 회차별로 차감 하고 남은 금액을 모두 Insert.. Loop Exit  */
                    /***********************************************************/
                    if  i_end_nab_no = s_bunhal_nabib_cnt then
                        begin
                            insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                                  DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                                  IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                                  BASIS_FROM,               BASIS_TO,               USER_ID )
                                           select i_pol_no,                 i_endor_no,             s_bunhal_nabib_cnt,         i_bef_15_seq_no,
                                                  i_dmbo_cd,                s_bunhal_amt1,          s_bunhal_amt2,              i_basis_from,
                                                  i_iend_cont_date,         i_endor_no-1,           i_basis_from,               i_iend_cont_date,
                                                  i_basis_from,             i_iend_cont_date,       i_user_id
                                             from DUAL;
                                    exception when others then o_result := 'Error';
                                                               raise_application_error(-20001, '납입회차=분납회차 Insert[TBID0015] Error[150]: '|| sqlerrm);
                        end;
                                                         l_log_data := l_log_data || '2*'|| f_idx2 || '-10[' || '종납회차=분납회차 Insert OK...1' ||chr(13)||chr(10);
                        exit;

                    /***********************************************************/
                    /* 일할계산된 보험료에서 회차별 분할 보험료를 마이너스 한  */
                    /* 금액이 0 보다 크면 아직 남은 회차가 있음으로            */
                    /* Looping 계속                                            */
                    /***********************************************************/
                    elsif s_appy_prem > 0 then

                        begin
                            insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                                  DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                                  IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                                  BASIS_FROM,               BASIS_TO,               USER_ID )
                                           select i_pol_no,                 i_endor_no,             s_bunhal_nabib_cnt,         0,
                                                  i_dmbo_cd,                s_bunhal_nabib_amt1,    s_bunhal_nabib_amt2,        s_bunhal_nabib_from_date,
                                                  s_bunhal_nabib_to_date,   i_endor_no-1,           s_bunhal_nabib_from_date,   s_bunhal_nabib_to_date,
                                                  s_bunhal_nabib_from_date, s_bunhal_nabib_to_date, i_user_id
                                             from DUAL;
                            exception when others then o_result := 'Error';
                                                               raise_application_error(-20001, '분납회차있음 Insert[TBID0015] Error[160]: '|| sqlerrm);
                        end;
                                                          l_log_data := l_log_data || '2*'|| f_idx2 || '-10[' || '분납회차있음 Insert OK...2'  ||chr(13)||chr(10);
                    /***********************************************************/
                    /* 일할계산된 보험료에서 회차별 분할 보험료를 마이너스 한  */
                    /* 금액이 0 보다 작으면 남은 회차 없음..                   */
                    /* 남은 금액 Inser 하고 Loop  Exit                         */
                    /***********************************************************/
                    else
                        begin
                            insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                                  DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                                  IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                                  BASIS_FROM,               BASIS_TO,               USER_ID )
                                           select i_pol_no,                 i_endor_no,             s_bunhal_nabib_cnt,         0,
                                                  i_dmbo_cd,                s_bunhal_amt1,          s_bunhal_amt2,              s_bunhal_nabib_from_date,
                                                  s_bunhal_nabib_to_date,   i_endor_no-1,           s_bunhal_nabib_from_date,   s_bunhal_nabib_to_date,
                                                  s_bunhal_nabib_from_date, s_bunhal_nabib_to_date, i_user_id
                                             from DUAL;
                                    exception when others then o_result := 'Error';
                                                        raise_application_error(-20001, '분납회차 남아있지 않음.. Insert[TBID0015] Error[170]: '|| sqlerrm);
                        end;
                                                          l_log_data := l_log_data || '2*'|| f_idx2 || '-10[' || '분납회차 끝 Insert OK...3'  ||chr(13)||chr(10);
                        exit;
                    end if;

                    /************************/
                    /* Log 남기기         ***/
                    /************************/
                    --  if    l_log_level = 1  then /**Log 남기기 ****/
                    /*        PR_INSERT_LOG(l_log_date,l_log_sp_name,l_log_no,'배서[분납]_' || f_idx2 ,i_dmbo_cd,l_log_data);*/
                    /*  end if;*/

                    /*  l_log_data := '';*/

                End Loop;
            else
                /***********************************************************/
                /* 단기자차 추가의 경우 최종납입회차에 넣고 끝낸다.        */
                /***********************************************************/
                begin
                    insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                          DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                          IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                          BASIS_FROM,               BASIS_TO,               USER_ID )
                                   select i_pol_no,                 i_endor_no,             i_end_nab_no,               i_bef_15_seq_no,
                                          i_dmbo_cd,                s_basic_prem,           s_appy_prem,                s_0013_c_appy_from,
                                          s_0013_c_appy_to,         i_endor_no-1,           s_0013_c_appy_from,         s_0013_c_appy_to,
                                          s_0013_c_appy_from,       s_0013_c_appy_to,       i_user_id
                                     from DUAL;
                    exception when others then o_result := 'Error';
                                                       raise_application_error(-20001, '단기자차 분납  Insert[TBID0015] Error[160]: '|| sqlerrm);
                end;
                                                  l_log_data := l_log_data || '2*'|| f_idx2 || '-10[' || '단기자차 분납 Insert OK...2'  ||chr(13)||chr(10);
            end if;
        /*분납부활일 경우*/
        else
            begin
                insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                      DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                      IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                      BASIS_FROM,               BASIS_TO,               USER_ID )
                               select POL_NO,                   i_endor_no,             BNP_NO,                     SEQ_NO,
                                      DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                      IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                      BASIS_FROM,               BASIS_TO,               i_user_id
                                 from TBID0015
                                where POL_NO   = i_pol_no
                                  and ENDOR_NO = i_endor_no -1
                                  and DMBO_CD  = i_dmbo_cd
                                  and BNP_NO   > i_end_nab_no;
                   exception when others then o_result := 'Error';
                                               raise_application_error(-20001, '이전배서 보험료동일 Insert[TBID0015] Error[180]: ' || sqlerrm);
            end;
                                                  l_log_data := l_log_data || '2*14[**** 이전배서 보험료 동일_TBID0015 ********]'  ||chr(13)||chr(10);
                                                  l_log_data := l_log_data || '2*15[' || '이전배서 보험료동일 Insert OK..4'    ||chr(13)||chr(10);
        end if;

    /*****************************************************************************************/
    /* 보험료 변동없음:이전 배서의 보험료와 현재 계산된 보험료가 같으면 이전 Data Insert시킴 */
    /* TBID0015 Table은 이미 Insert 되어 있음                                                */
    /*****************************************************************************************/
    ELSIF  s_0013_appy_prem  =  s_0013_b_appy_prem  and i_endor_no_bef_max = i_endor_no -1 and V_ENDOR_GB <> '6' then
        begin
            insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                  DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                  IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                  BASIS_FROM,               BASIS_TO,               USER_ID )
                           select POL_NO,                   i_endor_no,             BNP_NO,                     SEQ_NO,
                                  DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                  IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                  BASIS_FROM,               BASIS_TO,               i_user_id
                             from TBID0015
                            where POL_NO   = i_pol_no
                              and ENDOR_NO = i_endor_no -1
                              and DMBO_CD  = i_dmbo_cd;
               exception when others then o_result := 'Error';
                                           raise_application_error(-20001, '이전배서 보험료동일 Insert[TBID0015] Error[180]: ' || sqlerrm);
        end;
                                                  l_log_data := l_log_data || '2*14[**** 이전배서 보험료 동일_TBID0015 ********]'  ||chr(13)||chr(10);
                                                  l_log_data := l_log_data || '2*15[' || '이전배서 보험료동일 Insert OK..4'    ||chr(13)||chr(10);

    ELSE
        /*****************************************************************************************/
        /* 이전 회차 보험료(기 납입 보험료)는 무조건 신규 배서에 Insert 시킴                    */
        /*****************************************************************************************/
        begin
            insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                  DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                  IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                  BASIS_FROM,               BASIS_TO,               USER_ID )
                           select POL_NO,                   i_endor_no,             BNP_NO,                     SEQ_NO,
                                  DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                  IEND_VALID_DATE,          i_endor_no -1,          APPY_FROM,                  APPY_TO,
                                  BASIS_FROM,               BASIS_TO,               i_user_id
                             from TBID0015
                            where POL_NO   = i_pol_no
                              and ENDOR_NO = i_endor_no -1
                              and DMBO_CD  = i_dmbo_cd
                              and BNP_NO   <= i_end_nab_no;
            exception when others then o_result := 'Error';
                                       raise_application_error(-20001, '이전배서 보험료 Insert [TBID0015] Error[190]: '|| sqlerrm);
        end;
                                              l_log_data := l_log_data || '2*16[**** 이전배서 보험료 다름_TBID0015 ********]'    ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*17[' || '이전배서 보험료 Insert [TBID0015] OK...5' ||chr(13)||chr(10);

        /*****************************************************************/
        /* 회차별 보험료를 산정 한다                                     */
        /* FN_RENT_BUNAP_AMT:                                            */
        /*    [ In] 납입방법/상품종류/'0'/분납회수/적용보험료/           */
        /*          기본보험료/보험종기/Sort_Gubun                       */
        /*    [Out] f_bunhal_bohum                                       */
        /*          납입회수,분납일자,분납 유효일자,기준보험료,적용보험료*/
        /*                                                               */
        /* Description : 납입회차 순으로 자료 나옴                       */
        /*****************************************************************/

        f_bunhal_bohum := FN_RENT_BUNAP_AMT(i_na_mth,i_i_kind_cd,i_spcl_agre_gb,i_bnp_cnt,i_dmbo_appy_prem,i_dmbo_basic_prem,i_istar_cont_date,'ASC');

        s_basic_prem  :=0 ;
        s_appy_prem   :=0 ;

        /***********************************************************/
        /* 회차별 보험료 Looping 갯수 산정                         */
        /***********************************************************/
        f_idx1  := length(f_bunhal_bohum) - length(replace(f_bunhal_bohum,',','')) + 1;
        f_idx2  := 0;
                                              l_log_data := l_log_data || '2*18[' || f_idx1  ||']=f_idx1' ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*19[' || f_idx2  ||']=f_idx2' ||chr(13)||chr(10);
        Loop
            f_idx2 := f_idx2 + 1;

            if  f_idx2 > f_idx1 then
                exit;
            end if;

            /***********************************************************/
            /* 회차별 보험료 정보를 구분자로 Substring 함              */
            /***********************************************************/

            s_bunhal_bohum  := regexp_substr(f_bunhal_bohum,'[^,]+',1,f_idx2);

            s_bunhal_nabib_cnt         := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,1));
            s_bunhal_nabib_from_date   := to_date  (regexp_substr(s_bunhal_bohum,'[^|]+',1,2));
            s_bunhal_nabib_to_date     := to_date  (regexp_substr(s_bunhal_bohum,'[^|]+',1,3));
            s_bunhal_nabib_amt1        := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,4));   /* 기준보험료 */
            s_bunhal_nabib_amt2        := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,5));   /* 적용보험료 */
                                              l_log_data := l_log_data || '2*'|| f_idx2 || '-02[' || s_bunhal_nabib_cnt         ||']=납입회차'       ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*'|| f_idx2 || '-03[' || s_bunhal_nabib_from_date   ||']=납입일자'       ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*'|| f_idx2 || '-04[' || s_bunhal_nabib_to_date     ||']=납입유효일자'   ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*'|| f_idx2 || '-06[' || s_bunhal_nabib_amt2        ||']=적용보험료'     ||chr(13)||chr(10);

            /***********************************************************/
            /* 분납회차가 종납 회차보다 크면                           */
            /* 분납률에 따라 계산 되어진 보험료 Insert 시킴            */
            /***********************************************************/
            if  s_bunhal_nabib_cnt > i_end_nab_no  and  i_dmbo_cd not in ('21','22','23')  then
                /*자차이고 계산방법이 단기가 아니면(단기자차가 아니면)*/
                if i_dmbo_cd||s_0013_c_cancel_calc_gb <> '063' then
                    begin
                        insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                              DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                              IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                              BASIS_FROM,               BASIS_TO,               USER_ID )
                                       select i_pol_no,                 i_endor_no,             s_bunhal_nabib_cnt,         0 ,
                                              i_dmbo_cd,                s_bunhal_nabib_amt1,    s_bunhal_nabib_amt2,        s_bunhal_nabib_from_date,
                                              s_bunhal_nabib_to_date,   i_endor_no-1,           s_bunhal_nabib_from_date,   s_bunhal_nabib_to_date,
                                              s_bunhal_nabib_from_date, s_bunhal_nabib_to_date, i_user_id
                                         from DUAL;
                        exception when others then o_result := 'Error';
                                                       raise_application_error(-20001, '분납률에 따라 Insert[TBID0015] Error[210]: '|| sqlerrm);
                    end;


                    s_basic_prem   := s_basic_prem  + s_bunhal_nabib_amt1;
                    s_appy_prem    := s_appy_prem   + s_bunhal_nabib_amt2;
                                              l_log_data := l_log_data || '2*'|| f_idx2 || '-07[' || s_appy_prem     ||']=회차누적 적용보험료'    ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*'|| f_idx2 || '-08[' || '분납률에 따라 Insert OK...6'  ||chr(13)||chr(10);
                end if;
            end if;

            /************************/
            /* Log 남기기         ***/
            /************************/
            --if    l_log_level = 1  then  /**Log 남기기 ****/
            /*      PR_INSERT_LOG(l_log_date,l_log_sp_name,l_log_no,'배서[분납]',i_dmbo_cd,l_log_data);*/
            /*end if;*/

            /*l_log_data := '';*/

        End Loop;

        /**********************************************************************/
        /**TBID0014 SUM  Return 해 준다                                       */
        /**********************************************************************/
        begin
              select nvl(sum(BASIC_PREM),0)
                   , nvl(sum(APPY_PREM) ,0)
                into V_RETURN_AMT1
                   , V_RETURN_AMT2
                from TBID0014
               where POL_NO   = i_pol_no
                 and ENDOR_NO = i_endor_no
                 and DMBO_CD  = i_dmbo_cd;

            exception when no_data_found then V_RETURN_AMT1 :=0;
                                              V_RETURN_AMT2 :=0;
                      when others        then o_result := 'Error';
                                              raise_application_error(-20001, 'TBID0014 Sum[TBID0015] Error[220]: '|| sqlerrm);
        end;
                                              l_log_data := l_log_data || '2*20 [' || 'TBID0014 Sum[TBID0015] OK...7' ||chr(13)||chr(10);

        /***********************************************************/
        /* 이전 배서의 종납회차 정보를 구분자로 Substring 함       */
        /***********************************************************/
        s_bunhal_bohum  := regexp_substr(f_bunhal_bohum,'[^,]+',1,i_end_nab_no);

        s_bunhal_nabib_cnt         := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,1));
        s_bunhal_nabib_from_date   := to_date  (regexp_substr(s_bunhal_bohum,'[^|]+',1,2));
        s_bunhal_nabib_to_date     := to_date  (regexp_substr(s_bunhal_bohum,'[^|]+',1,3));
        s_bunhal_nabib_amt1        := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,4));   /* 기준보험료 */
        s_bunhal_nabib_amt2        := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,5));   /* 적용보험료 */

                                              l_log_data := l_log_data || '2*21[' || s_bunhal_nabib_cnt        ||']=납입회차'       ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*22[' || s_bunhal_nabib_from_date  ||']=납입일자'       ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*23[' || s_bunhal_nabib_to_date    ||']=납입유효일자'   ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*24[' || s_bunhal_nabib_amt2       ||']=적용보험료'     ||chr(13)||chr(10);

                                              l_log_data := l_log_data || '2*25[' || V_RETURN_AMT2             ||']=①적용보험료'            ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*26[' || s_appy_prem               ||']=②회차누적적용보험료'    ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*27[' || V_BEF_15_DMBO_PREM        ||']=③이전배서납입보험료'    ||chr(13)||chr(10);

        /* 현재배서의[TBID0014] 의 SUM 보험료 - 종납회차이후의 분납보험료 -  종납회차 이전의 SUM 보험료*/
        s_basic_prem  := V_RETURN_AMT1  -  s_basic_prem - V_BEF_15_BASIC_PREM ;
        s_appy_prem   := V_RETURN_AMT2  -  s_appy_prem  - V_BEF_15_DMBO_PREM;
                                              l_log_data := l_log_data || '2*28[' || s_appy_prem               ||']=①-②-③'    ||chr(13)||chr(10);
        if  s_appy_prem <> 0 then
            begin
                insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                      DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                      IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                      BASIS_FROM,               BASIS_TO,               USER_ID )
                               select i_pol_no,                 i_endor_no,             s_bunhal_nabib_cnt,         i_bef_15_seq_no,
                                      i_dmbo_cd,                s_basic_prem,           s_appy_prem,                s_bunhal_nabib_from_date,
                                      s_bunhal_nabib_to_date,   i_endor_no-1,           s_bunhal_nabib_from_date,   s_bunhal_nabib_to_date,
                                      s_bunhal_nabib_from_date, s_bunhal_nabib_to_date, i_user_id
                                 from DUAL;
                exception when others then o_result := 'Error';
                                           raise_application_error(-20001, '추징/환수 TBID0015 Insert [TBID0015] Error[200]: '|| sqlerrm);
            end;
        end if;
                                              l_log_data := l_log_data || '2*29[' || '추징/환수 Insert [TBID0015] OK..3'  ||chr(13)||chr(10);
    END IF;


    IF  o_result is null then
        o_result  := 'OK' || '|' || V_RETURN_AMT1 || '|' || V_RETURN_AMT2;
    END IF;

    l_log_data := l_log_data ||'3*01 [' || o_result    ||']=o_result'    ||chr(13)||chr(10);
    l_log_data := l_log_data ||'3*02 Good Bye......Endors'               ||chr(13)||chr(10);

    /************************/
    /* Log 남기기         ***/
    /************************/
    IF    l_log_level = 1 or nvl(regexp_substr(l_log_step,i_dmbo_cd),' ') = i_dmbo_cd then
        PR_INSERT_LOG(l_log_date,l_log_sp_name,l_log_no,'배서[분납]',i_dmbo_cd,l_log_data);
    END IF;
    l_log_data := '';

    exception when others then dbms_output.put_line('PR_RENT_ENDOR_BUNAP_RATE Main Error[999]: '||sqlerrm);
                               raise_application_error(-20001, 'PR_RENT_ENDOR_BUNAP_RATE Main Error[999]: '||sqlerrm);
END;
CREATE -- added during DDL generation.
PROCEDURE PR_RENT_ENDOR_BUNAP_RATE_BACK (i_pol_no              in  varchar2
                                                     ,i_endor_no            in  number
                                                     ,i_endor_no_bef_max    in  number
                                                     ,i_dmbo_cd             in  varchar2
                                                     ,i_na_mth              in  varchar2
                                                     ,i_spcl_agre_gb        in  varchar2
                                                     ,i_dmbo_basic_prem     in  number
                                                     ,i_dmbo_appy_prem      in  number
                                                     ,i_bnp_cnt             in  number
                                                     ,i_istar_cont_date     in  date
                                                     ,i_seq_no              in  number
                                                     ,i_i_kind_cd           in  varchar2
                                                     ,i_iend_cont_date      in  date
                                                     ,i_basis_from          in  date
                                                     ,i_basis_to            in  date
                                                     ,i_user_id             in  tbid0014.user_id%type
                                                     ,i_end_nab_no          in  number
                                                     ,i_bef_15_seq_no       in  number
                                                     ,i_endor_cd            in  varchar2
                                                     ,i_all_cliam_date      in  date
                                                     ,i_day_endor_cnt       in  number
                                                     ,i_short_day_gb        in  varchar2
                                                     ,i_basic_year_prem     in  number
                                                     ,i_appy_year_prem      in  number
                                                     ,o_result              out varchar2) as
/**************************************************************************************************************************/
/* Procedure Name :  PR_RENT_ENDOR_BUNAP_RATE                                                                             */
/* Function       :  배서 담보별, 기간별 분납 회차별 보험료 산정                                                          */
/* Parameter  i_pol_no             [ IN] 증권번호                                                                         */
/*            i_endor_no           [ IN] 배서번호                                                                         */
/*            i_endor_no_bef_max   [ IN] 이전배서번호(당일 배서가 2회 이상 발생시 처리 하기 위함                          */
/*            i_dmbo_cd            [ IN] 담보코드                                                                         */
/*            i_na_mth             [ IN] 납입방법-(1.일시납2.비연속분납3.연속분납(A0005)                                  */
/*            i_spcl_agre_gb       [ IN] '0'                                                                              */
/*            i_dmbo_basic_prem    [ IN] 담보 기본보험료                                                                  */
/*            i_dmbo_appy_prem     [ IN] 담보 적용보험료                                                                  */
/*            i_bnp_cnt            [ IN] 분납회수-1:일시납,2:2분납,3:3분납,4:4분납,5: 5분납,6:6분납,7:7분납,8:8분납(A0007)*/
/*            i_istar_cont_date    [ IN] 보험시기                                                                         */
/*            i_seq_no             [ IN] '0'                                                                              */
/*            i_i_kind_cd          [ IN] 보험종목                                                                         */
/*            i_iend_cont_date     [ IN] 보험종기                                                                         */
/*            i_basis_from         [ IN] 적용시작일                                                                       */
/*            i_basis_to           [ IN] 적용종료일                                                                       */
/*            i_user_id            [ IN] 사용자번호                                                                       */
/*            i_end_nab_no         [ IN] 최종납입회차                                                                     */
/*            i_bef_15_seq_no      [ IN] Max Seq                                                                          */
/*            i_endor_cd           [ IN] 배서코드                                                                         */
/*            i_all_cliam_date     [ IN] 차량대체일자                                                                     */
/*            i_day_endor_cnt      [ IN] 당일배서건수                                                                     */
/*            i_basic_year_prem    [ IN] 년간기본보험료                                                                   */
/*            i_appy_year_prem     [ IN] 년간적용보험료                                                                   */
/*            o_result             [Out] sp 결과(보험료)                                                                  */
/*Description : TBID0013 담보별 분담금 TABLE은 화면에서 생성시                                                            */
/*            - 이전배서(기준일 이전의 적용일자를 가진 배서)의 내용을 그대로 옮겨 놓는다                                  */
/*              (단 화면에서 바뀐 담보 내용으로 Update 함)                                                                */
/*            - 추가된 담보는 기준일을 적용시작일로 보험종기를 적용종료일로 세팅 한다.                                    */
/*            - 삭제된 담보는 이전배서의 적용시작일을 현배서의 적용시작일로 기준일을 적용종료일로 세팅한다.               */
/**************************************************************************************************************************/
V_0013_INFO                  varchar2(300);
s_0013_c_info                varchar2(150);
s_0013_c_endor_no            number;
s_0013_c_appy_from           date;
s_0013_c_appy_to             date;
s_0013_c_appy_prem           number;
s_0013_c_basic_prem          number;
s_0013_c_appy_year_prem      number;
s_0013_c_basic_year_prem     number;
s_0013_c_cancel_calc_gb      varchar2(3);


s_0013_b_info                varchar2(150);
s_0013_b_endor_no            number;
s_0013_b_appy_from           date;
s_0013_b_appy_to             date;
s_0013_b_appy_prem           number;
s_0013_b_basic_prem          number;
s_0013_b_appy_year_prem      number;
s_0013_b_basic_year_prem     number;
s_0013_b_cancel_calc_gb      varchar2(3);

s_0013_appy_prem             number;
s_0013_basic_prem            number;

V_BEF_15_BASIC_PREM          number;
V_BEF_15_DMBO_PREM           number;
V_RETURN_AMT1                number;
V_RETURN_AMT2                number;
V_APPY_PREM                  number;
V_BASIC_PREM                 number;
V_MAX_SEQ_NO                 number;
V_ENDOR_CD                   varchar2(4);
V_ENDOR_GB                   varchar2(2);
V_ACCI_CHECK                 varchar2(1);
V_SUM_APPY_PREM              number;
V_SUM_DMBO_PREM              number;
V_ALL_CLAIM                  varchar2(1);
V_DMBO_END_DATE              date;
V_BASIS_TO_DATE              date;
V_DANGI_APPY_FROM            date;
V_DANGI_APPY_PREM            number;
V_DANGI_BASIC_PREM           number;

s_appy_prem                  number:=0;
s_basic_prem                 number:=0;
s_appy_prem1                 number:=0;
s_basic_prem1                number:=0;

f_fn_rent_short_rate         number;

f_bunhal_bohum               varchar2(4000);
f_idx1                       number;
f_idx2                       number;

s_bunhal_bohum               varchar2(200);
s_bunhal_nabib_cnt           number;
s_bunhal_nabib_from_date     date;
s_bunhal_nabib_to_date       date;
s_bunhal_nabib_amt1          number;
s_bunhal_nabib_amt2          number;
s_bunhal_amt1                number;
s_bunhal_amt2                number;

/******************/
/*** lOG 변수 *****/
/******************/
l_log_level                  number        := 1;                                  -- 로그레벨[0~1]: 0->l_log_step에 정의된 항목과 찍는다..  1->모두찍는다.)
l_log_sp_name                varchar2(50)  := 'PR_RENT_AMT[ENDOR_BUNAP_RATE_PLAN]' ;        -- 로그 Stored Procedure Name
l_log_data                   varchar2(4000);
l_log_date                   varchar2(16)  := to_char(sysdate,'yyyymmddhh24miss');
l_log_step                   varchar2(100) :='';   /* 담보코드: '01 02 03 13 04 05 06 07 21 22 23 99'*/
l_log_no                     varchar2(20)  := i_pol_no ||'-'|| i_endor_no;

BEGIN
    o_result :=null ;
    l_log_data := l_log_data || '*00[' || i_pol_no           ||']=증권번호'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_endor_no         ||']=배서번호'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_endor_no_bef_max ||']=이전배서번호(Max)'   ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_dmbo_cd          ||']=담보코드'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_na_mth           ||']=납입방법'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_spcl_agre_gb     ||']=i_spcl_agre_gb'      ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_dmbo_basic_prem  ||']=기본보험료'          ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_dmbo_appy_prem   ||']=적용보험료'          ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_bnp_cnt          ||']=분납회수'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_istar_cont_date  ||']=보험시기'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_seq_no           ||']=분납Seq'             ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_i_kind_cd        ||']=보험종목'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_iend_cont_date   ||']=보험종기'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_basis_from       ||']=기준일'              ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_basis_to         ||']=적용종료일'          ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_user_id          ||']=User Id'             ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_end_nab_no       ||']=최종납입회차'        ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_bef_15_seq_no    ||']=분납Max Seq'         ||chr(13)||chr(10);

    /***********************************************************************/
    /*                                                                     */
    /* TBID0013 TABLE Insert 및 Update                                     */
    /*                                                                     */
    /***********************************************************************/

    --배서구분: 배서코드 첫자리
    V_ENDOR_GB := substr(i_endor_cd, 1, 1);

    /*********************************************************/
    /* 해당담보 사고여부 확인 (Y:사고, N:사고아님)           */
    /* 진행중인 건수가 있으면 무조건 사고                    */
    /* 진행중인 건수가 없고 공제금 지급이 0보다 크면 사고    */
    /*********************************************************/
    if i_dmbo_cd  not in ('21','22','23') then
        begin
            select case when sum(decode(STAT, '3', 1, 0)) > 0                                                                              then 'Y'
                        when sum(decode(STAT, '3', 1, 0)) = 0 and sum(DC_AMT) > 0 and i_dmbo_cd <> '02'                                    then 'Y'
                        when sum(decode(STAT, '3', 1, 0)) = 0 and sum(DC_AMT) > 0 and sum(DC_AMT) <> sum(COM_DC_AMT) and i_dmbo_cd = '02'  then 'Y'
                        else 'N' end
              into V_ACCI_CHECK
              from ( select CA02.POL_NO
                          , CF01.ACCIDENT_NO
                          , CF01.HND_COVER
                          , nvl(( select sum(DC_AMT)
                                    from TBCE0001
                                   where ACCIDENT_NO = CF01.ACCIDENT_NO
                                     and HND_COVER   = CF01.HND_COVER
                                     and DMGE_NO     = CF01.DMGE_NO
                                     and DECIDE_DATE is not null ),0 ) DC_AMT
                          , nvl(( select sum(COM_DC_AMT)
                                    from TBCE0001
                                   where ACCIDENT_NO = CF01.ACCIDENT_NO
                                     and HND_COVER   = CF01.HND_COVER
                                     and DMGE_NO     = CF01.DMGE_NO
                                     and DECIDE_DATE is not null ),0 ) COM_DC_AMT
                          , case when CF01.DECIDE_DATE is not null then '1'
                                 when CF01.DC_END_DATE is not null then '2'
                                 else '3' end STAT
                       from TBCA0002 CA02
                          , TBCF0001 CF01
                      where CA02.ACCIDENT_NO = CF01.ACCIDENT_NO
                        and CA02.POL_NO      = i_pol_no
                        and CF01.LAST='Y'
                        and CF01.HND_COVER = decode(i_dmbo_cd, '01', '21', '02', '21', '03', '33', '04', '44', '05', '55', '06', '66', '13', '33'));
            exception when no_data_found then
                V_ACCI_CHECK := 'N';
        end;
    else
        if i_dmbo_cd = '21' then
            begin
                select decode(nvl(count(*), 0), 0, 'N', 'Y')
                  into V_ACCI_CHECK
                  from TBCH0001
                 where H_GBN='ME400'
                   and POL_NO    = i_pol_no
                   and DELETE_YN = 'N'
                   and LAST='Y'
                   and ACT_SVC_CODE NOT IN ('51','53','54','55');
                exception when no_data_found then
                    V_ACCI_CHECK := 'N';
            end;
        else
            V_ACCI_CHECK := 'N';
        end if;
    end if;
                                                    l_log_data := l_log_data || '1*00[' || V_ACCI_CHECK           ||']=사고여부 확인정보'  ||chr(13)||chr(10);

    /*********************************************************/
    /* 전손처리 됐는지 확인(Y:전손처리, N:전손처리아님)      */
    /* CD01.DMGE_DEGREE 가 '1' 이 아닌경우는 전손처리함      */
    /* CD01.DMGE_DEGREE                                      */
    /* 1    피해구분    대물    분손                         */
    /* 2    피해구분    대물    추정전손                     */
    /* 3    피해구분    대물    절대전손                     */
    /* 4    피해구분    대물    전손(폐차)                   */
    /* 5    피해구분    대물    전손(재활용)                 */
    /* 6    피해구분    대물    도난                         */
    /*********************************************************/
    if i_dmbo_cd = '06' then
        if V_ACCI_CHECK = 'Y' then
            begin
                select decode(count(CD01.DMGE_DEGREE), 0, 'N', 'Y')    --TEST 시 decode(count(NVL(CD01.DMGE_DEGREE, 'X')), 0, 'N', 'Y')
                  into V_ALL_CLAIM
                  from TBCA0002 CA02
                     , TBCD0001 CD01
                 where CA02.ACCIDENT_NO = CD01.ACCIDENT_NO
                   and CD01.LAST        = 'Y'
                   and CD01.HND_COVER   = '66'
                   and CA02.POL_NO      = i_pol_no
                   and CD01.DMGE_DEGREE IS NOT NULL                    --TEST 시 주석처리
                   and CD01.DMGE_DEGREE <> '1';                        --TEST 시 NVL(CD01.DMGE_DEGREE , 'X')<> '1'
                exception when others then
                    V_ACCI_CHECK := 'N';
            end;
        else
            V_ALL_CLAIM := 'N';
        end if;
    else
        V_ALL_CLAIM := 'N';
    end if;
                                                    l_log_data := l_log_data || '1*000[' || V_ALL_CLAIM           ||']=전손처리 확인정보'  ||chr(13)||chr(10);

    /*********************************************************/
    /* 현재 배서,기준일 이전 배서(TBID0013) 정보 Select      */
    /* 같은날 배서서 2번 이상 일어날 경우는 이전배서가 아니라*/
    /* 기준일 이전의 배서중 가장 큰 배서 번호정보 Select     */
    /*********************************************************/
    begin
        select WM_CONCAT(ENDOR_NO ||'|'|| APPY_FROM ||'|'|| APPY_TO ||'|'||  APPY_PREM ||'|'||  BASIC_PREM ||'|'|| APPY_YEAR_PREM ||'|'|| BASIC_YEAR_PREM ||'|'|| CANCEL_CALC_GB)
          into V_0013_INFO
          from (select ENDOR_NO                   /*배서번호*/
                     , APPY_FROM                  /*적용시작일*/
                     , APPY_TO                    /*적용종료일*/
                     , APPY_PREM                  /*적용보험료*/
                     , BASIC_PREM                 /*기본보험료*/
                     , APPY_YEAR_PREM             /*적용연간보험료*/
                     , BASIC_YEAR_PREM            /*기본연간보험료*/
                     , CANCEL_CALC_GB             /*일할/단기구분*/
                  from TBID0013
                 where POL_NO     = i_pol_no
                   and ENDOR_NO   = i_endor_no_bef_max
                   and DMBO_CD    = i_dmbo_cd
                   and APPY_FROM <= case when i_endor_cd = '111' or i_endor_cd = '211' then APPY_FROM
                                         else to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS') end
                   and APPY_TO   >= case when i_endor_cd = '111' or i_endor_cd = '211' then APPY_FROM
                                         else to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS') end
                   --and APPY_TO >= to_date(to_char(i_iend_cont_date, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                   --and APPY_TO <= to_date(to_char(i_iend_cont_date, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                union all
                select ENDOR_NO                   /*배서번호*/
                     , APPY_FROM                  /*적용시작일*/
                     , APPY_TO                    /*적용종료일*/
                     , APPY_PREM                  /*적용보험료*/
                     , BASIC_PREM                 /*기본보험료*/
                     , APPY_YEAR_PREM             /*적용연간보험료*/
                     , BASIC_YEAR_PREM            /*기본연간보험료*/
                     , CANCEL_CALC_GB             /*일할/단기구분*/
                  from TBID0013
                 where POL_NO    =  i_pol_no
                   and ENDOR_NO  =  i_endor_no
                   and DMBO_CD   =  i_dmbo_cd
                 order by ENDOR_NO
               );

        exception when others then raise_application_error(-20001, '현재,이전 배서 Select [TBID0013] Error[00]: '|| sqlerrm);
    end;
                                                    l_log_data := l_log_data || '1*01['|| '현재,이전 배서 Select [TBID0013]  OK...0' ||chr(13)||chr(10);

    s_0013_b_info   := regexp_substr(V_0013_INFO,'[^,]+',1,1);
    if  i_endor_no_bef_max = to_number(regexp_substr(s_0013_b_info,'[^|]+',1,1)) then
        s_0013_b_appy_from       := to_date  (regexp_substr(s_0013_b_info,'[^|]+',1,2));     -- 이전배서 TBID0013 시작일자
        s_0013_b_appy_to         := to_date  (regexp_substr(s_0013_b_info,'[^|]+',1,3));     -- 이전배서 TBID0013 종료일자
        s_0013_b_appy_prem       := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,4));     -- 이전배서 TBID0013 적용보험료
        s_0013_b_basic_prem      := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,5));     -- 이전배서 TBID0013 기본보험료
        s_0013_b_appy_year_prem  := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,6));     -- 이전배서 TBID0013 적용연간보험료
        s_0013_b_basic_year_prem := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,7));     -- 이전배서 TBID0013 기본연간보험료
        s_0013_b_cancel_calc_gb  := regexp_substr(s_0013_b_info,'[^|]+',1,8);                -- 이전배서 TBID0013 일할/단기 구분

        s_0013_c_info            := regexp_substr(V_0013_INFO,'[^,]+',1,2);
        s_0013_c_appy_from       := to_date  (regexp_substr(s_0013_c_info,'[^|]+',1,2));     -- 현재 TBID0013 시작일자
        s_0013_c_appy_to         := to_date  (regexp_substr(s_0013_c_info,'[^|]+',1,3));     -- 현재 TBID0013 종료일자
        s_0013_c_appy_prem       := to_number(regexp_substr(s_0013_c_info,'[^|]+',1,4));     -- 현재 TBID0013 적용보험료
        s_0013_c_basic_prem      := to_number(regexp_substr(s_0013_c_info,'[^|]+',1,5));     -- 현재 TBID0013 기본보험료
        s_0013_c_appy_year_prem  := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,6));     -- 현재 TBID0013 적용연간보험료
        s_0013_c_basic_year_prem := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,7));     -- 현재 TBID0013 기본연간보험료
        s_0013_c_cancel_calc_gb  := regexp_substr(s_0013_c_info,'[^|]+',1,8);                -- 현재 TBID0013 일할/단기 구분
    else
        s_0013_c_info            := regexp_substr(V_0013_INFO,'[^,]+',1,1);
        s_0013_c_appy_from       := to_date  (regexp_substr(s_0013_c_info,'[^|]+',1,2));     -- 현재 TBID0013 시작일자
        s_0013_c_appy_to         := to_date  (regexp_substr(s_0013_c_info,'[^|]+',1,3));     -- 현재 TBID0013 종료일자
        s_0013_c_appy_prem       := to_number(regexp_substr(s_0013_c_info,'[^|]+',1,4));     -- 현재 TBID0013 적용보험료
        s_0013_c_basic_prem      := to_number(regexp_substr(s_0013_c_info,'[^|]+',1,5));     -- 현재 TBID0013 기본보험료
        s_0013_c_appy_year_prem  := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,6));     -- 현재 TBID0013 적용보험료
        s_0013_c_basic_year_prem := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,7));     -- 현재 TBID0013 기본연간보험료
        s_0013_c_cancel_calc_gb  := regexp_substr(s_0013_c_info,'[^|]+',1,8);                -- 현재 TBID0013 일할/단기 구분
    end if;

                                                    l_log_data := l_log_data || '1*02[' || s_0013_c_info           ||']=현재배서TBID0013정보'  ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*03[' || s_0013_c_appy_from      ||']=현재배서 적용시작일'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*04[' || s_0013_c_appy_to        ||']=현재배서 적용종료일'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*05[' || s_0013_c_appy_prem      ||']=현재배서 적용보험료'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*06[' || s_0013_c_basic_prem     ||']=현재배서 기본보험료'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*07[' || s_0013_c_cancel_calc_gb ||']=현재배서 일할단기구분' ||chr(13)||chr(10);

                                                    l_log_data := l_log_data || '1*08[' || s_0013_b_info           ||']=이전배서TBID0013정보'  ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*09[' || s_0013_b_appy_from      ||']=이전배서 적용시작일'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*10[' || s_0013_b_appy_to        ||']=이전배서 적용종료일'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*11[' || s_0013_b_appy_prem      ||']=이전배서 적용보험료'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*12[' || s_0013_b_basic_prem     ||']=이전배서 기본보험료'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*13[' || s_0013_b_cancel_calc_gb ||']=이전배서 일할단기구분' ||chr(13)||chr(10);

    --일할 계약 계산
    if  i_short_day_gb = '1' then
        --단기자차의 경우 단기요율로 계산해야한다. 20130514_최재혁
        if s_0013_c_cancel_calc_gb <> '1' then
            /* 단기요율 계산 = 적용종료일 - 적용시작일 */
            f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_c_appy_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
            f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

            /* 보험료 단기 계산 = 년간 총 적용보험료 * 단기적용율   */
            s_0013_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);
            s_0013_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);

                                                    l_log_data := l_log_data || '1*14(2)[' || s_0013_appy_prem        ||']=배서일기준(단기) 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*15(2)[' || s_0013_basic_prem       ||']=배서일기준(단기) 기본보험료' ||chr(13)||chr(10);

        else
            /* 년간 총 적용보험료 * (보험종기 - 현재배서 적용시작일) / (보험종기 - 보험시기) --> 보험적용일 부터 보험 종기 까지 보험료 산출 */
            s_0013_appy_prem  := round(i_dmbo_appy_prem  * ((i_iend_cont_date - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1);
            s_0013_basic_prem := round(i_dmbo_basic_prem * ((i_iend_cont_date - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1);

                                                    l_log_data := l_log_data || '1*14[' || s_0013_appy_prem        ||']=배서일기준 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*15[' || s_0013_basic_prem       ||']=배서일기준 기본보험료' ||chr(13)||chr(10);

        end if;
    --단기 계약 계산
    else
        /* 단기요율 계산 = 보험종기 - 보험시기 */
        f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,i_istar_cont_date  ,i_iend_cont_date  ,i_istar_cont_date  ,i_iend_cont_date);
        f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

        /* 보험료 단기 계산 = 년간 총 적용보험료 * 단기적용율   */
        s_0013_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);
        s_0013_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);

                                                    l_log_data := l_log_data || '1*14(2)[' || s_0013_appy_prem        ||']=배서일기준(단기계약) 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*15(2)[' || s_0013_basic_prem       ||']=배서일기준(단기계약) 기본보험료' ||chr(13)||chr(10);
    end if;

    /********************************************/
    /** 기준일 이전 Data[TBID0013] Insert       */
    /********************************************/
    begin
        insert into TBID0013(POL_NO,               ENDOR_NO,                   BASIC_SCONT_GB,      DMBO_CD,
                             APPY_FROM,            ACDNT_RESP_WANT,            MAN_RESP_WANT,       INSUR_AMT,
                             INSUR_AMT_GB,         DUCT_AMT_GB,                BASIC_PREM,          DMBO_START_DATE,
                             DMBO_END_DATE,        APPY_PREM,                  BASIC_RANGE_R,       CANCEL_CALC_GB,
                             APPY_TO,              BASIS_FROM,                 BASIS_TO,
                             USER_ID,              BASIC_YEAR_PREM,            APPY_YEAR_PREM
                               )
                      select POL_NO,               i_endor_no,                 BASIC_SCONT_GB,      DMBO_CD,
                             APPY_FROM,            ACDNT_RESP_WANT,            MAN_RESP_WANT,       INSUR_AMT,
                             INSUR_AMT_GB,         DUCT_AMT_GB,                BASIC_PREM,          DMBO_START_DATE,
                             DMBO_END_DATE,        APPY_PREM,                  BASIC_RANGE_R,       CANCEL_CALC_GB,
                             APPY_TO,              BASIS_FROM,                 BASIS_TO,
                             USER_ID,              BASIC_YEAR_PREM,            APPY_YEAR_PREM
                        from TBID0013
                       where POL_NO   = i_pol_no
                         and ENDOR_NO = i_endor_no_bef_max
                         and DMBO_CD  = i_dmbo_cd
                         and APPY_TO < to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS');   --20130422 TO_DATE 처리 최재혁
        exception when others then o_result := null;
    end;
                                                    l_log_data := l_log_data || '1*16[' || '기준일 이전 정보 Insert[TBID0013] OK...1'  ||chr(13)||chr(10);

    /************************/
    /* Log 남기기         ***/
    /************************/
  --  if    l_log_level = 1 or nvl(regexp_substr(l_log_step,i_dmbo_cd),' ') = i_dmbo_cd then
  --        PR_INSERT_LOG(l_log_date,l_log_sp_name,l_log_no,'배서[분납]_1',i_dmbo_cd,l_log_data);
  --  end if;
  --  l_log_data := '';

    /***************************************************/
    /** 담보해지:현재배서 적용종료일이 기준일과 같으면**/
    /***************************************************/
    IF  i_basis_from = s_0013_c_appy_to then
                                                    l_log_data := l_log_data || '1*17[**** 담보 해지_TBID0013 ********]' ||chr(13)||chr(10);
        /* 사고여부 처리*/
        /* 사고 아닌경우*/
        if  V_ACCI_CHECK = 'N' then
            --일할 계약건
            if i_short_day_gb = '1' then
                /* 단기, 단기자차 계산 ( 2: 단기, 3:단기자차) */
                if  s_0013_c_cancel_calc_gb <> '1' then
                    /*단기자차는 해지시 환급금 없다*/
                    /*단기 계산*/
                    if s_0013_c_cancel_calc_gb = '2' then
                        /*공백기간 환급이 아니면 */
                        if V_ENDOR_GB <> '6' then
                            f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,i_istar_cont_date  ,i_basis_from  ,i_istar_cont_date  ,i_iend_cont_date);
                            f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);
                            /****************************/
                            /* TBID0013 Table Update   **/
                            /****************************/
                            begin
                                update TBID0013
                                   set BASIC_PREM  = round(BASIC_YEAR_PREM *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (i_basis_from -i_istar_cont_date) ,-1)
                                     , APPY_PREM   = round(APPY_YEAR_PREM  *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (i_basis_from -i_istar_cont_date) ,-1)
                                 where POL_NO      = i_pol_no
                                   and ENDOR_NO    = i_endor_no
                                   and DMBO_CD     = i_dmbo_cd
                                   and APPY_TO >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                                   and APPY_TO <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      --20130422 TO_DATE 처리 최재혁


                                exception  when others then o_result := 'Error';
                                                  raise_application_error(-20001, '해지담보 보험료 Update [TBID0013] Error Error[10]: '|| sqlerrm);
                            end;
                        /*공백기간 환급(실제 발생하진 않지만 추가함)*/
                        else
                            f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,i_istar_cont_date  ,i_all_cliam_date  ,i_istar_cont_date  ,i_iend_cont_date);
                            f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);
                            /****************************/
                            /* TBID0013 Table Update   **/
                            /****************************/
                            begin
                                update TBID0013
                                   set BASIC_PREM    = round(BASIC_YEAR_PREM *  f_fn_rent_short_rate * (to_date(i_all_cliam_date) - to_date(APPY_FROM)) / (i_all_cliam_date -i_istar_cont_date) ,-1)
                                     , APPY_PREM     = round(APPY_YEAR_PREM  *  f_fn_rent_short_rate * (to_date(i_all_cliam_date) - to_date(APPY_FROM)) / (i_all_cliam_date -i_istar_cont_date) ,-1)
                                     , DMBO_END_DATE = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                                     , APPY_TO       = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                                     , BASIS_TO      = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                                 where POL_NO        = i_pol_no
                                   and ENDOR_NO      = i_endor_no
                                   and DMBO_CD       = i_dmbo_cd
                                   and APPY_TO      >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                                   and APPY_TO      <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      --20130422 TO_DATE 처리 최재혁


                                exception  when others then o_result := 'Error';
                                                  raise_application_error(-20001, '해지담보 보험료 Update [TBID0013] Error Error[10]: '|| sqlerrm);
                            end;
                        end if;
                                                            l_log_data := l_log_data || '1*18[' || f_fn_rent_short_rate    ||']=단기요율'  ||chr(13)||chr(10);
                                                            l_log_data := l_log_data || '1*19[' || s_appy_prem    ||']=담보해지 단기 적용보험료'  ||chr(13)||chr(10);
                    end if;
                /* 일할 계산 */
                else
                    /*공백기간 환급이 아니면 */
                    if V_ENDOR_GB <> '6' then
                        /*이전보험료를 일할계산함 = 이전 배서의 기간보험료 * (기준일-이전배서 대상시작일) / (이전배서 대상종료일 - 이전배서 대상시작일)*/
                        s_appy_prem  := round(s_0013_b_appy_prem  * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                        s_basic_prem := round(s_0013_b_basic_prem * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                                                            l_log_data := l_log_data || '1*19[' || s_appy_prem    ||']=담보해지 일할 적용보험료'  ||chr(13)||chr(10);

                        /****************************/
                        /* TBID0013 Table Update   **/
                        /****************************/
                        begin
                            update TBID0013
                               set BASIC_PREM      = s_basic_prem
                                 , APPY_PREM       = s_appy_prem
                              --  , BASIC_YEAR_PREM = i_basic_year_prem
                              --   , APPY_YEAR_PREM  = i_appy_year_prem
                             where POL_NO      = i_pol_no
                               and ENDOR_NO    = i_endor_no
                               and DMBO_CD     = i_dmbo_cd
                               and APPY_TO >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                               and APPY_TO <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      --20130422 TO_DATE 처리 최재혁

                            exception  when others then o_result := 'Error';
                                                           raise_application_error(-20001, '해지담보 보험료 Update [TBID0013] Error Error[11]: '|| sqlerrm);
                        end;
                                                            l_log_data := l_log_data || '1*20[' ||  '해지담보 Update [TBID0013] OK...2'   ||chr(13)||chr(10);
                    /*공백기간 환급이면 */
                    else
                        /*이전보험료를 일할계산함 = 이전 배서의 기간보험료 * (전차량 사용종료일-이전배서 대상시작일) / (이전배서 대상종료일 - 이전배서 대상시작일)*/
                        s_appy_prem  := round(s_0013_b_appy_prem  * ((i_all_cliam_date - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                        s_basic_prem := round(s_0013_b_basic_prem * ((i_all_cliam_date - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                                                            l_log_data := l_log_data || '1*19[' || s_appy_prem    ||']=담보해지 일할 적용보험료'  ||chr(13)||chr(10);

                        /****************************/
                        /* TBID0013 Table Update   **/
                        /****************************/
                        begin
                            update TBID0013
                               set BASIC_PREM      = s_basic_prem
                                 , APPY_PREM       = s_appy_prem
                              --   , BASIC_YEAR_PREM = i_basic_year_prem
                              --   , APPY_YEAR_PREM  = i_appy_year_prem
                                 , DMBO_END_DATE = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                                 , APPY_TO       = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                                 , BASIS_TO      = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                             where POL_NO      = i_pol_no
                               and ENDOR_NO    = i_endor_no
                               and DMBO_CD     = i_dmbo_cd
                               and APPY_TO >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                               and APPY_TO <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      --20130422 TO_DATE 처리 최재혁

                            exception  when others then o_result := 'Error';
                                                           raise_application_error(-20001, '해지담보 보험료 Update [TBID0013] Error Error[11]: '|| sqlerrm);
                        end;
                                                            l_log_data := l_log_data || '1*20[' ||  '해지담보(공백기간) Update [TBID0013] OK...2'   ||chr(13)||chr(10);
                    end if;
                end if;
            --단기계약건
            else
                f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,i_istar_cont_date  ,i_basis_from  ,i_istar_cont_date  ,i_iend_cont_date);
                f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);
                /****************************/
                /* TBID0013 Table Update   **/
                /****************************/
                begin
                    update TBID0013
                       set BASIC_PREM  = round(i_dmbo_basic_prem *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (i_basis_from -i_istar_cont_date) ,-1)
                         , APPY_PREM   = round(i_dmbo_appy_prem  *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (i_basis_from -i_istar_cont_date) ,-1)
                     where POL_NO      = i_pol_no
                       and ENDOR_NO    = i_endor_no
                       and DMBO_CD     = i_dmbo_cd
                       and APPY_TO >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                       and APPY_TO <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      --20130422 TO_DATE 처리 최재혁


                    exception  when others then o_result := 'Error';
                                                  raise_application_error(-20001, '해지담보(단기계약) 보험료 Update [TBID0013] Error[10]: '|| sqlerrm);
                end;
            end if;
        else
            /*해지시 사고가 있으면 분납금을 모두 받는다. */
            /****************************/
            /* TBID0013 Table Update   **/
            /****************************/
            /*공백기간 환급이 아니면 */
            if V_ENDOR_GB <> '6' then
                /* 후에 받아야할 돈을 다 처리해야함으로 보험료 계산이 필요없다. */
                begin
                    update TBID0013
                       set DMBO_END_DATE = to_date(to_char(i_basis_from,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                         , APPY_TO       = to_date(to_char(i_basis_from,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                         , BASIS_TO      = to_date(to_char(i_basis_from,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                     where POL_NO        = i_pol_no
                       and ENDOR_NO      = i_endor_no
                       and DMBO_CD       = i_dmbo_cd
                       and APPY_TO      >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                       and APPY_TO      <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      --20130422 TO_DATE 처리 최재혁

                    exception  when others then o_result := 'Error';
                                       raise_application_error(-20001, '해지담보(전손처리) 보험료 Update [TBID0013] Error Error[11]: '|| sqlerrm);
                end;
                                                            l_log_data := l_log_data || '1*20[' ||  '자차 전손처리 담보 Update [TBID0013] OK'   ||chr(13)||chr(10);
            else
                begin
                    update TBID0013
                       set DMBO_END_DATE = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                         , APPY_TO       = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                         , BASIS_TO      = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                     where POL_NO        = i_pol_no
                       and ENDOR_NO      = i_endor_no
                       and DMBO_CD       = i_dmbo_cd
                       and APPY_TO      >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                       and APPY_TO      <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      --20130422 TO_DATE 처리 최재혁

                    exception  when others then o_result := 'Error';
                                       raise_application_error(-20001, '해지담보(전손처리) 보험료 Update [TBID0013] Error Error[11]: '|| sqlerrm);
                end;
            end if;
        end if;
    /**********************************************************/
    /** 담보추가:기준일 과 현재배서의 적용시작일이 같으면     */
    /**********************************************************/
    ELSIF  i_basis_from = s_0013_c_appy_from  then
        s_appy_prem  :=0;
        s_basic_prem :=0;
        f_fn_rent_short_rate := 0;

        /*단기 자차*/
        if  i_endor_cd = '801' then
            /* 보험료 계산 - 일할, 단기 구분한다. */
            if  s_0013_c_cancel_calc_gb <> '1' then
                /* 단기요율 계산 = 적용종료일 - 적용시작일 */
                f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_c_appy_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                /* 보험료 단기 계산 = 년간 총 적용보험료 * 단기적용율   */
                s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);
                s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);
                                                    l_log_data := l_log_data || '1*21[**** 담보 추가_TBID0013 ********]'                ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*22[' || s_appy_prem   ||']=담보추가 단기 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*23[' || s_basic_prem  ||']=담보추가 단기 기본보험료' ||chr(13)||chr(10);
            else
                /* 보험료 일할 계산 = 년간 총 적용보험료 * (적용종료일 - 적용시작일) / (보험종기 - 보험시기)   */
                s_appy_prem  :=round(i_dmbo_appy_prem   * ((s_0013_c_appy_to - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;
                s_basic_prem :=round(i_dmbo_basic_prem  * ((s_0013_c_appy_to - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;
                                                    l_log_data := l_log_data || '1*21[**** 담보 추가_TBID0013 ********]'                ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*22[' || s_appy_prem   ||']=담보추가 일할 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*23[' || s_basic_prem  ||']=담보추가 일할 기본보험료' ||chr(13)||chr(10);

            end if;
        /*단기 아닌경우*/
        else
            --일할계약
            if i_short_day_gb = '1' then
                /* 보험료 계산 - 일할, 단기 구분한다. */
                if  s_0013_c_cancel_calc_gb <> '1' then
                    /* 단기요율 계산 = 적용종료일 - 적용시작일 */
                    f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_c_appy_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                    f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                    /* 보험료 단기 계산 = 년간 총 적용보험료 * 단기적용율   */
                    s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);
                    s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);
                                                    l_log_data := l_log_data || '1*21[**** 담보 추가_TBID0013 ********]'                ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*22[' || s_appy_prem   ||']=담보추가 단기 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*23[' || s_basic_prem  ||']=담보추가 단기 기본보험료' ||chr(13)||chr(10);
                else
                    /* 보험료 일할 계산 = 년간 총 적용보험료 * (적용종료일 - 적용시작일) / (보험종기 - 보험시기)   */
                    s_appy_prem  :=round(i_dmbo_appy_prem   * ((s_0013_c_appy_to - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;
                    s_basic_prem :=round(i_dmbo_basic_prem  * ((s_0013_c_appy_to - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;
                                                    l_log_data := l_log_data || '1*21[**** 담보 추가_TBID0013 ********]'                ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*22[' || s_appy_prem   ||']=담보추가 일할 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*23[' || s_basic_prem  ||']=담보추가 일할 기본보험료' ||chr(13)||chr(10);

                end if;
            --단기계약
            else
                --분납부활
                if V_ENDOR_GB = '7' then
                    /*이전 데이터  적용시작일 찾기 */
                    select max(trunc(APPY_FROM)), sum(APPY_PREM), sum(BASIC_PREM)
                      into V_DANGI_APPY_FROM, V_DANGI_APPY_PREM, V_DANGI_BASIC_PREM
                      from TBID0013
                     where POL_NO   = i_pol_no
                       and ENDOR_NO = i_endor_no - 1
                       and DMBO_CD  = i_dmbo_cd
                       and APPY_TO  =(select MAX(APPY_TO)
                                        from TBID0013
                                       where POL_NO   = i_pol_no
                                         and ENDOR_NO = i_endor_no - 1
                                         and DMBO_CD  = i_dmbo_cd);

                    /* 보험료 쪼개기. 기존 단기 보험료를 기간별로 쪼갠다.  */
                    /* 보험료 쪼개기. 전 데이터 적용보험료 * ((현재담보종기 - 기준일자)/(현재담보종기-전 데이터 적용시작일))  */
                    s_appy_prem   := round(V_DANGI_APPY_PREM   * ((s_0013_c_appy_to - i_basis_from)/( s_0013_c_appy_to - V_DANGI_APPY_FROM )),-1);
                    s_basic_prem  := round(V_DANGI_BASIC_PREM  * ((s_0013_c_appy_to - i_basis_from)/( s_0013_c_appy_to - V_DANGI_APPY_FROM )),-1);
                                                    l_log_data := l_log_data || '1*21[**** 담보 추가(단기계약-분납부활))_TBID0013 ********]'                ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*22[' || s_appy_prem   ||']=담보추가(단기계약-분납부활) 단기 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*23[' || s_basic_prem  ||']=담보추가(단기계약-분납부활) 단기 기본보험료' ||chr(13)||chr(10);
                --분납부활 아님
                else
                    /* 단기요율 계산 = 적용종료일 - 적용시작일 */
                    f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_c_appy_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                    f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                    /* 보험료 단기 계산 = 년간 총 적용보험료 * 단기적용율   */
                    s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);
                    s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);
                                                    l_log_data := l_log_data || '1*21[**** 담보 추가(단기계약)_TBID0013 ********]'                ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*22[' || s_appy_prem   ||']=담보추가(단기계약) 단기 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*23[' || s_basic_prem  ||']=담보추가(단기계약) 단기 기본보험료' ||chr(13)||chr(10);
                end if;
            end if;
        end if;

        /*****************************/
        /* TBID0013 Table Update    **/
        /*****************************/
        begin
            --20130422 TO_DATE 처리 최재혁
            update TBID0013
               set BASIC_PREM        = s_basic_prem
                 , APPY_PREM         = s_appy_prem
                 , DMBO_START_DATE   = to_date(to_char(i_basis_from,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                 , DMBO_END_DATE     = APPY_TO
                 , BASIC_YEAR_PREM   = i_basic_year_prem
                 , APPY_YEAR_PREM    = i_appy_year_prem
             where POL_NO    = i_pol_no
               and ENDOR_NO  = i_endor_no
               and DMBO_CD   = i_dmbo_cd
               and APPY_FROM  >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
               and APPY_FROM  <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');

            exception  when others then o_result := 'Error';
                                           raise_application_error(-20001, '추가담보 보험료 Update [TBID0013] Error Error[20]: '|| sqlerrm);
        end;
                                                     l_log_data := l_log_data || '1*24[' ||  '추가담보 Update[TBID0013] OK...4' ||chr(13)||chr(10);

        /*분납 부활이면 이전 데이터*/
        if V_ENDOR_GB = '7' then
            --일할계약, 단기계약 동일
            begin
                update TBID0013
                   set basic_prem = round(basic_year_prem * ((i_basis_from - trunc(basis_from)) / (trunc(basis_to) - trunc(basis_from))),-1)
                     , appy_prem  = round(appy_year_prem * ((i_basis_from - trunc(basis_from)) / (trunc(basis_to) - trunc(basis_from))),-1)
                     , basis_to   = to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                 where POL_NO     = i_pol_no
                   and ENDOR_NO   = i_endor_no
                   and DMBO_CD    = i_dmbo_cd
                   and APPY_TO    = ( select MAX(APPY_TO)
                                        from TBID0013
                                       where POL_NO   = i_pol_no
                                         and ENDOR_NO = i_endor_no - 1
                                         and DMBO_CD  = i_dmbo_cd );
                exception when others then o_result := null;
            end;
                                                     l_log_data := l_log_data || '1*24-1[' ||  '분납부활(이전데이터) Update[TBID0013] OK...4' ||chr(13)||chr(10);
        end if;

        if i_day_endor_cnt > 0 then
            /********************************************/
            /** 기준일 이전 Data[TBID0013] Insert       */
            /* 당일배서일 경우에만                      */
            /********************************************/
            begin
                insert into TBID0013(POL_NO,               ENDOR_NO,                   BASIC_SCONT_GB,      DMBO_CD,
                                     APPY_FROM,            ACDNT_RESP_WANT,            MAN_RESP_WANT,       INSUR_AMT,
                                     INSUR_AMT_GB,         DUCT_AMT_GB,                BASIC_PREM,          DMBO_START_DATE,
                                     DMBO_END_DATE,        APPY_PREM,                  BASIC_RANGE_R,       CANCEL_CALC_GB,
                                     APPY_TO,              BASIS_FROM,                 BASIS_TO,
                                     USER_ID,              BASIC_YEAR_PREM,            APPY_YEAR_PREM
                                       )
                              select POL_NO,               i_endor_no,                 BASIC_SCONT_GB,      DMBO_CD,
                                     APPY_FROM,            ACDNT_RESP_WANT,            MAN_RESP_WANT,       INSUR_AMT,
                                     INSUR_AMT_GB,         DUCT_AMT_GB,                BASIC_PREM,          DMBO_START_DATE,
                                     DMBO_END_DATE,        APPY_PREM,                  BASIC_RANGE_R,       CANCEL_CALC_GB,
                                     APPY_TO,              BASIS_FROM,                 BASIS_TO,
                                     USER_ID,              BASIC_YEAR_PREM,            APPY_YEAR_PREM
                                from TBID0013
                               where POL_NO   = i_pol_no
                                 and ENDOR_NO = i_endor_no_bef_max
                                 and DMBO_CD  = i_dmbo_cd
                                 and APPY_TO  = to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');
                exception when others then o_result := null;
            end;
                                                     l_log_data := l_log_data || '1*24-1[' ||  '추가담보(당일배서) Update[TBID0013] OK...4' ||chr(13)||chr(10);
        end if;


    /************************************************************************/
    /** 보험료 변동                                                        **/
    /** 2013.05.30일 추가                                                  **/
    /** 보험료변동이 없어도 공백기간환급이면 적용받도록 수정함             **/
    /** 2013.05.30일 추가                                                  **/
    /** 보험료변동이 없어도 공백기간환급이면 적용받도록 수정함             **/
    /************************************************************************/
    ELSIF (s_0013_appy_prem <> s_0013_b_appy_prem) or (s_0013_appy_prem = s_0013_b_appy_prem and V_ENDOR_GB = '6')  then
                                                     l_log_data := l_log_data || '1*25[**** 보험료변동_TBID0013 ********]'  ||chr(13)||chr(10);
        /* 기준일 이전 사용기간에 대한 보험료 계산 */
        /* 공백기간환급 구분을 먼저 처리한다.*/
        /* 공백기간 환급이 아니면 */
        if V_ENDOR_GB <> '6' then
            /*일할계약*/
            if i_short_day_gb = '1' then
                /* 단기 계산 ( 2: 단기, 3:단기자차)*/
                if    s_0013_c_cancel_calc_gb <> '1' then
                    /*단기요율 계산 : 기준일자 - 적용시작일 로 단기요율 계산   */
                    f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_b_appy_from  ,i_basis_from  ,i_istar_cont_date  ,i_iend_cont_date);
                    f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                    s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate,-1);
                    s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate,-1);
                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1      ||']=보험료변동 단기 적용보험료(변경전)'  ||chr(13)||chr(10);
                else
                    /* = 이전 배서의 기간보험료 * (기준일자-이전배서 대상시작일) / (이전배서 대상종료일 - 이전배서 대상시작일)*/
                    s_appy_prem1  := round(s_0013_b_appy_prem  * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                    s_basic_prem1 := round(s_0013_b_basic_prem * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1    ||']=보험료변동 일할 적용보험료'  ||chr(13)||chr(10);
                end if;
            /*단기계약*/
            else
                /*단기요율 계산 : 기준일자 - 적용시작일 로 단기요율 계산   */
                f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_b_appy_from  ,i_basis_from  ,i_istar_cont_date  ,i_iend_cont_date);
                f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate,-1);
                s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate,-1);
                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율(단기계약)'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1      ||']=보험료변동 단기(단기계약) 적용보험료(변경전)'  ||chr(13)||chr(10);
            end if;

        /* 공백기간 환급 */
        else
            /* 사고 아닌경우*/
            if  V_ACCI_CHECK = 'N' then
                /*일할 계약*/
                if i_short_day_gb = '1' then
                    /* 단기 계산 ( 2: 단기, 3:단기자차)*/
                    if    s_0013_c_cancel_calc_gb <> '1' then
                        /*단기요율 계산 : 전차량 사용종료일 - 적용시작일 로 단기요율 계산   */
                        f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_b_appy_from  ,i_all_cliam_date  ,i_istar_cont_date  ,i_iend_cont_date);
                        f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                        s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate,-1);
                        s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate,-1);
                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율(공백기간)'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1      ||']=보험료변동 단기(공백기간) 적용보험료(변경전)'  ||chr(13)||chr(10);
                    /* 일할 계산 */
                    else
                        /* = 이전 배서의 기간보험료 * (전차량 사용종료일-이전배서 대상시작일) / (이전배서 대상종료일 - 이전배서 대상시작일)*/
                        s_appy_prem1  := round(s_0013_b_appy_prem  * ((i_all_cliam_date - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                        s_basic_prem1 := round(s_0013_b_basic_prem * ((i_all_cliam_date - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1    ||']=보험료변동(공백기간) 일할 적용보험료'  ||chr(13)||chr(10);
                    end if;
                /*단기 계약*/
                else
                    /*단기요율 계산 : 전차량 사용종료일 - 적용시작일 로 단기요율 계산   */
                    f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_b_appy_from  ,i_all_cliam_date  ,i_istar_cont_date  ,i_iend_cont_date);
                    f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                    s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate,-1);
                    s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate,-1);
                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율(단기계약-공백기간)'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1      ||']=보험료변동 단기(단기계약-공백기간) 적용보험료(변경전)'  ||chr(13)||chr(10);
                end if;
            /* 사고인 경우*/
            else
                /*전손처리 아닌경우*/
                if V_ALL_CLAIM = 'N' then
                    /*일할 계약 */
                    if i_short_day_gb = '1' then
                        /* 단기 계산 ( 2: 단기, 3:단기자차)*/
                        if    s_0013_c_cancel_calc_gb <> '1' then
                            /*단기요율 계산 : 전차량 사용종료일 - 적용시작일 로 단기요율 계산   */
                            f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_b_appy_from  ,i_basis_from  ,i_istar_cont_date  ,i_iend_cont_date);
                            f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                            s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate,-1);
                            s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate,-1);
                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율(공백기간-사고있음)'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1      ||']=보험료변동 단기(공백기간-사고있음) 적용보험료(변경전)'  ||chr(13)||chr(10);
                        /* 일할 계산 */
                        else
                            /* = 이전 배서의 기간보험료 * (전차량 사용종료일-이전배서 대상시작일) / (이전배서 대상종료일 - 이전배서 대상시작일)*/
                            s_appy_prem1  := round(s_0013_b_appy_prem  * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                            s_basic_prem1 := round(s_0013_b_basic_prem * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1    ||']=보험료변동(공백기간-사고있음) 일할 적용보험료'  ||chr(13)||chr(10);
                        end if;
                    /*단기 계약*/
                    else
                        /*단기요율 계산 : 전차량 사용종료일 - 적용시작일 로 단기요율 계산   */
                        f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_b_appy_from  ,i_basis_from  ,i_istar_cont_date  ,i_iend_cont_date);
                        f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                        s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate,-1);
                        s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate,-1);
                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율(공백기간-사고있음)'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1      ||']=보험료변동 단기(공백기간-사고있음) 적용보험료(변경전)'  ||chr(13)||chr(10);
                    end if;
                /*전손처리*/
                else
                    /*기존 보험료 그대로 받는다 */
                    s_appy_prem1  := s_0013_b_appy_prem;
                    s_basic_prem1 := s_0013_b_basic_prem;
                end if;
            end if;
        end if;

        /* 기준일 이전 데이터 날짜 update 하기 위해 날짜 계산 */
        if V_ENDOR_GB = '6' then
            V_DMBO_END_DATE := i_all_cliam_date;
            if V_ACCI_CHECK = 'N' then
                V_BASIS_TO_DATE := i_all_cliam_date;
            else
                V_BASIS_TO_DATE := i_basis_from;
            end if;
        else
            V_DMBO_END_DATE := i_basis_from;
            V_BASIS_TO_DATE := i_basis_from;
        end if;

        /* 기준일 이후 사용기간에 대한 보험료 계산 */
        /* 분납부활이 여부에 따라서 처리가 달라짐 */
        /* 일할 단기 계산 */
        /*일할 계약*/
        if i_short_day_gb = '1' then
            if    s_0013_c_cancel_calc_gb <> '1' then
                /*단기요율 계산 : 적용종료일 - 기준일자 로 단기요율 계산   */
                f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,i_basis_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);
                s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);
                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem    ||']=보험료변동 단기 적용보험료(변경후)'  ||chr(13)||chr(10);
            else
                /* 기준일 이후 기간 동안 = 년보험료 * (보험종기 - 기준일) / (보험종기 - 보험시기)*/
                s_appy_prem   := round(i_dmbo_appy_prem  *   ((i_iend_cont_date  - i_basis_from) / (i_iend_cont_date  - i_istar_cont_date)) ,-1);
                s_basic_prem  := round(i_dmbo_basic_prem *   ((i_iend_cont_date  - i_basis_from) / (i_iend_cont_date  - i_istar_cont_date)) ,-1);
                                                     l_log_data := l_log_data || '1*28[' || s_appy_prem    ||']=년적용보험료*(보험종기-기준일)/(보험종기-보험시기)'  ||chr(13)||chr(10);
            end if;
        /*단기 계약*/
        else
            /*단기요율 계산 : 적용종료일 - 기준일자 로 단기요율 계산   */
            f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,i_basis_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
            f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

            s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);
            s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);
                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem    ||']=보험료변동 단기 적용보험료(변경후)'  ||chr(13)||chr(10);
        end if;

        /***********************************************************/
        /* 기준일 이후 보험료을 TBID0013에 Insert 시킴             */
        /***********************************************************/
        begin
            --20130422 TO_DATE 처리 최재혁, BASIS_FROM 잘못들어가는거 수정.
            insert into TBID0013(POL_NO,               ENDOR_NO,                   BASIC_SCONT_GB,        DMBO_CD,
                                 ACDNT_RESP_WANT,      MAN_RESP_WANT,              INSUR_AMT,             INSUR_AMT_GB,
                                 DUCT_AMT_GB,          BASIC_PREM,                 APPY_PREM,             BASIC_RANGE_R,
                                 CANCEL_CALC_GB,       APPY_TO,                    BASIS_TO,              USER_ID,
                                 BASIC_YEAR_PREM,      APPY_YEAR_PREM,
                                 APPY_FROM,
                                 DMBO_START_DATE,
                                 DMBO_END_DATE,
                                 BASIS_FROM
                                 )
                          select POL_NO,               ENDOR_NO,                   BASIC_SCONT_GB,        DMBO_CD,
                                 ACDNT_RESP_WANT,      MAN_RESP_WANT,              INSUR_AMT,             INSUR_AMT_GB,
                                 DUCT_AMT_GB,          s_basic_prem,               s_appy_prem,           BASIC_RANGE_R,
                                 CANCEL_CALC_GB,       APPY_TO,                    BASIS_TO,              USER_ID,
                                 i_basic_year_prem,    i_appy_year_prem,
                                 to_date(to_char(i_basis_from    ,'yyyymmdd')||'235959', 'yyyymmddhh24miss'),
                                 to_date(to_char(i_basis_from    ,'yyyymmdd')||'235959', 'yyyymmddhh24miss'),
                                 to_date(to_char(i_iend_cont_date,'yyyymmdd')||'235959', 'yyyymmddhh24miss'),
                                 to_date(to_char(i_basis_from    ,'yyyymmdd')||'235959', 'yyyymmddhh24miss')
                            from TBID0013
                           where POL_NO   = i_pol_no
                             and ENDOR_NO = i_endor_no
                             and DMBO_CD  = i_dmbo_cd
                             and APPY_FROM <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                             and APPY_TO   >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');
                             --and APPY_TO >= to_date(to_char(i_iend_cont_date, 'yyyymmdd')||'000000', 'yyyymmddhh24miss')
                             --and APPY_TO <= to_date(to_char(i_iend_cont_date, 'yyyymmdd')||'235959', 'yyyymmddhh24miss');

            exception when others then o_result := 'Error';
                                             raise_application_error(-20001, '기준일 이후 일할 보험료 Insert[TBID0013] Error[30]: '|| sqlerrm);

        end;
                                                      l_log_data := l_log_data ||  '1*29[' || '기준일이후 일할보험료 Insert[TBID0013] OK...5' ||chr(13)||chr(10);

        /***********************************************************/
        /* 기준일 이전 보험료을 TBID0013에 Update 시킴             */
        /***********************************************************/
        begin
            --20130422 TO_DATE 처리 최재혁
            Merge  into TBID0013 A
                   using (select *
                           from TBID0013 B1
                          where B1.POL_NO    = i_pol_no
                            and B1.ENDOR_NO  = i_endor_no_bef_max
                            and B1.DMBO_CD   = i_dmbo_cd
                            and B1.APPY_FROM >= to_date(to_char(s_0013_c_appy_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                            and B1.APPY_FROM <= to_date(to_char(s_0013_c_appy_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                         ) B
                      on (    A.POL_NO = B.POL_NO
                          and A.ENDOR_NO       = i_endor_no
                          and B.ENDOR_NO       = i_endor_no_bef_max
                          and A.BASIC_SCONT_GB = B.BASIC_SCONT_GB
                          and A.DMBO_CD        = B.DMBO_CD
                          and A.APPY_FROM      = B.APPY_FROM
                         )
            when matched then
            update set A.ACDNT_RESP_WANT  = B.ACDNT_RESP_WANT
                     , A.MAN_RESP_WANT    = B.MAN_RESP_WANT
                     , A.INSUR_AMT        = B.INSUR_AMT
                     , A.INSUR_AMT_GB     = B.INSUR_AMT_GB
                     , A.DUCT_AMT_GB      = B.DUCT_AMT_GB
                     , A.BASIC_PREM       = s_basic_prem1
                     , A.DMBO_START_DATE  = to_date(to_char(s_0013_c_appy_from,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                     , A.DMBO_END_DATE    = to_date(to_char(V_DMBO_END_DATE,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                     , A.APPY_PREM        = s_appy_prem1
                     , A.BASIC_RANGE_R    = B.BASIC_RANGE_R
                     , A.CANCEL_CALC_GB   = B.CANCEL_CALC_GB
                     , A.APPY_TO          = to_date(to_char(V_DMBO_END_DATE,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                     , A.BASIS_FROM       = to_date(to_char(s_0013_c_appy_from,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                     , A.BASIS_TO         = to_date(to_char(V_BASIS_TO_DATE,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                     , A.USER_ID          = B.USER_ID
                     , A.BASIC_YEAR_PREM  = B.BASIC_YEAR_PREM
                     , A.APPY_YEAR_PREM   = B.APPY_YEAR_PREM;

            exception when others then o_result := 'Error';
                                          raise_application_error(-20001, '기준일 이전 일할(단기)보험료 Update[TBID0013] Error[40]: '|| sqlerrm);
        end;
                                                      l_log_data := l_log_data ||  '1*30[' || '기준일이전 일할(단기)보험료 Update[TBID0013] OK...6'  ||chr(13)||chr(10);

    END IF;

    /********************************************************************/
    /*                                                                  */
    /* TBID0014 TABLE 생성하기                                          */
    /*                                                                  */
    /********************************************************************/
    begin
        Insert into TBID0014(POL_NO            ,DMBO_CD               ,CALC_FYMD                     ,CALC_EYMD
                            ,BASIC_PREM        ,APPY_PREM             ,ENDOR_NO                      ,APPY_FROM
                            ,APPY_TO           ,BASIS_FROM            ,BASIS_TO                      ,USER_ID
                            )
                      select POL_NO            ,DMBO_CD               ,APPY_FROM                     ,APPY_TO
                            ,BASIC_PREM        ,APPY_PREM             ,i_endor_no                    ,APPY_FROM
                            ,APPY_TO           ,BASIS_FROM            ,BASIS_TO                      ,i_user_id
                        from TBID0013
                       where POL_NO   = i_pol_no
                         and ENDOR_NO = i_endor_no
                         and DMBO_CD  = i_dmbo_cd;
        exception  when others then o_result := 'Error';
                                           raise_application_error(-20001, ' Insert [TBID0014] Error[50]: '|| sqlerrm);

    end;
                                                      l_log_data := l_log_data || '1*31[' ||  ' Insert [TBID0014] OK1...'  ||chr(13)||chr(10);

    /************************/
    /* Log 남기기         ***/
    /************************/
    --IF    l_log_level = 1 or nvl(regexp_substr(l_log_step,i_dmbo_cd),' ') = i_dmbo_cd then
    --      PR_INSERT_LOG(l_log_date,l_log_sp_name,l_log_no,'배서[분납]_2',i_dmbo_cd,l_log_data);
    --END IF;
    --l_log_data := '';

    /********************************************************************/
    /*                                                                  */
    /* TBID0015 TABLE 생성하기                                          */
    /*                                                                  */
    /********************************************************************/

    /******************************************************************************/
    /* 이전 배서[TBID0015]에서 납입회차까지의 보험료를 Sum 한다-기납입 보험료 산출*/
    /*  기준이 되는 seq_no 를 가져와야 한다.20130423 최재혁추가                   */
    /******************************************************************************/
    begin
        select nvl(sum(BASIC_PREM),0)
             , nvl(sum(DMBO_PREM) ,0)
             , nvl(max(seq_no), 0)
          into V_BEF_15_BASIC_PREM
             , V_BEF_15_DMBO_PREM
             , V_MAX_SEQ_NO
          from TBID0015
         where POL_NO   = i_pol_no
           and ENDOR_NO = i_endor_no -1
           and DMBO_CD  = i_dmbo_cd
           and BNP_NO  <= i_end_nab_no;

        exception when no_data_found then V_BEF_15_BASIC_PREM :=0;
                                          V_BEF_15_DMBO_PREM :=0;
                  when others        then o_result := 'Error';
                                            raise_application_error(-20001, 'PR_RENT_ENDOR_BUNAP_RATE Insert Error[130] :'|| sqlerrm);
    end;

                                                      l_log_data := l_log_data || '2*01[' || '납입회차까지 보험료Sum[TBID0015] OK...1'   ||chr(13)||chr(10);

    /***************************************************/
    /** 담보해지:현재배서 적용종료일이 기준일과 같으면 */
    /***************************************************/
    IF    i_basis_from = s_0013_c_appy_to then
                                                      l_log_data := l_log_data || '2*02[**** 담보 해지_TBID0015 ********]'  ||chr(13)||chr(10);
        /**************************************************************************/
        /* 이전 회차 보험료(기 납입 보험료)는 무조건 신규 배서에 Insert 시킴      */
        /**************************************************************************/
        begin
            insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                  DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                  IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                  BASIS_FROM,               BASIS_TO,               USER_ID )
                          select  POL_NO,                   i_endor_no,             BNP_NO,                     SEQ_NO,
                                  DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                  IEND_VALID_DATE,          i_endor_no -1,          APPY_FROM,                  APPY_TO,
                                  BASIS_FROM,               BASIS_TO,               i_user_id
                            from  TBID0015
                           where  POL_NO   = i_pol_no
                             and  ENDOR_NO = i_endor_no -1
                             and  DMBO_CD  = i_dmbo_cd
                             and  BNP_NO   <= i_end_nab_no;
            exception when others then o_result := 'Error';
                                           raise_application_error(-20001, '담보해지 Insert [TBID0015] Error[131]: '|| sqlerrm);
        end;
                                                      l_log_data := l_log_data || '2*03[' || '담보해지 Insert [TBID0015] OK...2' ||chr(13)||chr(10);

        /************************************/
        /* 기간별 보험료[TBID0013] Sum      */
        /************************************/
        begin
            select nvl(sum(BASIC_PREM),0)
                 , nvl(sum(APPY_PREM) ,0)
              into V_BASIC_PREM
                 , V_APPY_PREM
              from TBID0013
             where POL_NO   =  i_pol_no
               and ENDOR_NO =  i_endor_no
               and DMBO_CD  =  i_dmbo_cd;

            exception when others then V_BASIC_PREM := 0;
                                       V_APPY_PREM  := 0;
        end;

        /* 기 납입 보험료에서 기간별 사용한 총 보험료를 빼준다 */
        s_appy_prem  := V_APPY_PREM  - V_BEF_15_DMBO_PREM;
        s_basic_prem := V_BASIC_PREM - V_BEF_15_BASIC_PREM;

                                                    l_log_data := l_log_data || '2*05[' || V_APPY_PREM          ||']=기간보험료'                 ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '2*06[' || V_BEF_15_DMBO_PREM   ||']=기납입 보험료'              ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '2*07[' || s_appy_prem          ||']=기간보험료 - 기납입보험료'  ||chr(13)||chr(10);
        /***************************/
        /** TBID0015 Table Insert **/
        /***************************/
        begin
            insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                  DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                  IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                  BASIS_FROM,               BASIS_TO,               USER_ID )
                           select POL_NO,                   i_endor_no,             BNP_NO,                     i_bef_15_seq_no,
                                  i_dmbo_cd,                s_basic_prem,           s_appy_prem,                ISTAR_VALID_DATE,
                                  IEND_VALID_DATE,          i_endor_no-1,           APPY_FROM,                  APPY_TO,
                                  BASIS_FROM,               BASIS_TO,               i_user_id
                             from TBID0015
                            where POL_NO   = i_pol_no
                              and ENDOR_NO = i_endor_no -1
                              and BNP_NO   = i_end_nab_no
                              and rownum   = 1;

            exception when others then o_result := 'Error';
                                         raise_application_error(-20001, '담보해지 Insert [TBID0015] Error[132]: '|| sqlerrm);
        end;
                                                   l_log_data := l_log_data || '2*08[' || '담보해지 Insert [TBID0015] OK..3' ||chr(13)||chr(10);

    /********************************************************************************/
    /** 담보추가:기준일 과 현재배서 적용일이 같으면서 이전배서의적용시작일이 없으면 */
    /********************************************************************************/
    ELSIF i_basis_from = s_0013_c_appy_from and s_0013_b_appy_from is null then
        /**************************************************************************/
        /* 이전 회차 보험료(기 납입 보험료)는 무조건 신규 배서에 Insert 시킴      */
        /**************************************************************************/
        begin
            insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                  DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                  IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                  BASIS_FROM,               BASIS_TO,               USER_ID )
                          select  POL_NO,                   i_endor_no,             BNP_NO,                     SEQ_NO,
                                  DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                  IEND_VALID_DATE,          i_endor_no -1,          APPY_FROM,                  APPY_TO,
                                  BASIS_FROM,               BASIS_TO,               i_user_id
                            from  TBID0015
                           where  POL_NO   = i_pol_no
                             and  ENDOR_NO = i_endor_no -1
                             and  DMBO_CD  = i_dmbo_cd
                             and  BNP_NO   <= i_end_nab_no;
            exception when others then o_result := 'Error';
                                           raise_application_error(-20001, '담보추가 Insert [TBID0015] Error[131]: '|| sqlerrm);
        end;
                                                      l_log_data := l_log_data || '2*03[' || '담보추가 Insert [TBID0015] OK...2' ||chr(13)||chr(10);

        /*분납부활이 아닌경우*/
        if V_ENDOR_GB <> '7' then
            /*****************************************************************/
            /* 회차별 보험료를 산정 한다                                     */
            /* FN_RENT_BUNAP_AMT:                                            */
            /*    [ In] 납입방법/상품종류/'0'/분납회수/적용보험료/           */
            /*          기본보험료/보험종기/Sort_Gubun                       */
            /*    [Out] f_bunhal_bohum                                       */
            /*          납입회수,분납일자,분납 유효일자,기준보험료,적용보험료*/
            /*                                                               */
            /* Description : 납입회차 역순으로 자료 나옴                     */
            /*****************************************************************/
                                                       l_log_data := l_log_data || '2*09[**** 담보 추가_TBID0015 ********]'  ||chr(13)||chr(10);
            f_bunhal_bohum := FN_RENT_BUNAP_AMT(i_na_mth,i_i_kind_cd,i_spcl_agre_gb,i_bnp_cnt,i_dmbo_appy_prem,i_dmbo_basic_prem,i_istar_cont_date,'DESC');

            /***********************************************************/
            /* 기준일 이후 보험료 산정(일할계산)                       */
            /***********************************************************/
            if  i_endor_cd <> '801' then             --단기자차가 아니면 (기존대로)
                  /* 보험료 일할 계산 = 년간 총 적용보험료 * (보험종기 -기준일) / (보험종기 - 보험시기)   */
                s_appy_prem  :=round(i_dmbo_appy_prem   * ((i_iend_cont_date - i_basis_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;
                s_basic_prem :=round(i_dmbo_basic_prem  * ((i_iend_cont_date - i_basis_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;
                                                        l_log_data := l_log_data || '2*10[' || s_appy_prem   ||']=일할 적용보험료' ||chr(13)||chr(10);
                                                        l_log_data := l_log_data || '2*11[' || s_basic_prem  ||']=일할 기본보험료' ||chr(13)||chr(10);
            else
                /* 보험료 계산 - 일할, 단기 구분한다. */
                if  s_0013_c_cancel_calc_gb <> '1' then
                    /* 단기요율 계산 = 적용종료일 - 적용시작일 */
                    f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_c_appy_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                    f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                    /* 보험료 단기 계산 = 년간 총 적용보험료 * 단기적용율   */
                    s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);
                    s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);
                                                        l_log_data := l_log_data || '2*10[' || s_appy_prem   ||']=단기 적용보험료' ||chr(13)||chr(10);
                                                        l_log_data := l_log_data || '2*11[' || s_basic_prem  ||']=단기 기본보험료' ||chr(13)||chr(10);
                else
                    /* 보험료 일할 계산 = 년간 총 적용보험료 * (적용종료일 - 적용시작일) / (보험종기 - 보험시기)   */
                    s_appy_prem  :=round(i_dmbo_appy_prem   * ((s_0013_c_appy_to - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;
                    s_basic_prem :=round(i_dmbo_basic_prem  * ((s_0013_c_appy_to - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;
                                                        l_log_data := l_log_data || '2*10[' || s_appy_prem   ||']=일할 적용보험료' ||chr(13)||chr(10);
                                                        l_log_data := l_log_data || '2*11[' || s_basic_prem  ||']=일할 기본보험료' ||chr(13)||chr(10);
                end if;
            end if;

            if  i_endor_cd <> '801' then             --단기자차가 아니면 (기존대로)
                /***********************************************************/
                /* 회차별 보험료 Looping 갯수 산정                         */
                /***********************************************************/
                f_idx1  := length(f_bunhal_bohum) - length(replace(f_bunhal_bohum,',','')) + 1;
                f_idx2  := 0;
                                                           l_log_data := l_log_data || '2*12 [' || f_idx1  ||']=f_idx1' ||chr(13)||chr(10);
                                                           l_log_data := l_log_data || '2*13 [' || f_idx2  ||']=f_idx2' ||chr(13)||chr(10);
                Loop
                    f_idx2 := f_idx2 + 1;
                    if  f_idx2 > f_idx1 then
                        exit;
                    end if;

                    /***********************************************************/
                    /* 회차별 보험료 정보를 구분자로 Substring 함              */
                    /***********************************************************/
                    s_bunhal_bohum           := regexp_substr(f_bunhal_bohum,'[^,]+',1,f_idx2);

                    s_bunhal_nabib_cnt       := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,1));
                    s_bunhal_nabib_from_date := to_date  (regexp_substr(s_bunhal_bohum,'[^|]+',1,2));
                    s_bunhal_nabib_to_date   := to_date  (regexp_substr(s_bunhal_bohum,'[^|]+',1,3));
                    s_bunhal_nabib_amt1      := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,4));   /* 기준보험료 */
                    s_bunhal_nabib_amt2      := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,5));   /* 적용보험료 */

                                                           l_log_data := l_log_data || '2*'|| f_idx2 || '-02[' || s_bunhal_nabib_cnt         ||']=납입회차'       ||chr(13)||chr(10);
                                                           l_log_data := l_log_data || '2*'|| f_idx2 || '-03[' || s_bunhal_nabib_from_date   ||']=납입일자'       ||chr(13)||chr(10);
                                                           l_log_data := l_log_data || '2*'|| f_idx2 || '-04[' || s_bunhal_nabib_to_date     ||']=납입유효일자'   ||chr(13)||chr(10);
                                                           l_log_data := l_log_data || '2*'|| f_idx2 || '-06[' || s_bunhal_nabib_amt2        ||']=적용보험료'     ||chr(13)||chr(10);

                    s_bunhal_amt1  := s_basic_prem;
                    s_bunhal_amt2  := s_appy_prem;
                    /***********************************************************/
                    /* 회차별 보험료 정보를 구분자로 Substring 함              */
                    /***********************************************************/
                    s_basic_prem   := s_basic_prem - s_bunhal_nabib_amt1;
                    s_appy_prem    := s_appy_prem  - s_bunhal_nabib_amt2;
                                                           l_log_data := l_log_data || '2*'|| f_idx2 || '-08[' || s_appy_prem    ||']=일할적용보험료-회차적용보험료' ||chr(13)||chr(10);
                                                           l_log_data := l_log_data || '2*'|| f_idx2 || '-09[' || i_end_nab_no   ||']=종납회차 '                     ||chr(13)||chr(10);

                    /***********************************************************/
                    /* 현재 납입 회차와 분납회차가 같으면                      */
                    /* 납입순번을 i_bef_15_seq_no 하여 계산된 보험료에서       */
                    /* 회차별로 차감 하고 남은 금액을 모두 Insert.. Loop Exit  */
                    /***********************************************************/
                    if  i_end_nab_no = s_bunhal_nabib_cnt then
                        begin
                            insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                                  DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                                  IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                                  BASIS_FROM,               BASIS_TO,               USER_ID )
                                           select i_pol_no,                 i_endor_no,             s_bunhal_nabib_cnt,         i_bef_15_seq_no,
                                                  i_dmbo_cd,                s_bunhal_amt1,          s_bunhal_amt2,              i_basis_from,
                                                  i_iend_cont_date,         i_endor_no-1,           i_basis_from,               i_iend_cont_date,
                                                  i_basis_from,             i_iend_cont_date,       i_user_id
                                             from DUAL;
                                    exception when others then o_result := 'Error';
                                                               raise_application_error(-20001, '납입회차=분납회차 Insert[TBID0015] Error[150]: '|| sqlerrm);
                        end;
                                                         l_log_data := l_log_data || '2*'|| f_idx2 || '-10[' || '종납회차=분납회차 Insert OK...1' ||chr(13)||chr(10);
                        exit;

                    /***********************************************************/
                    /* 일할계산된 보험료에서 회차별 분할 보험료를 마이너스 한  */
                    /* 금액이 0 보다 크면 아직 남은 회차가 있음으로            */
                    /* Looping 계속                                            */
                    /***********************************************************/
                    elsif s_appy_prem > 0 then

                        begin
                            insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                                  DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                                  IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                                  BASIS_FROM,               BASIS_TO,               USER_ID )
                                           select i_pol_no,                 i_endor_no,             s_bunhal_nabib_cnt,         0,
                                                  i_dmbo_cd,                s_bunhal_nabib_amt1,    s_bunhal_nabib_amt2,        s_bunhal_nabib_from_date,
                                                  s_bunhal_nabib_to_date,   i_endor_no-1,           s_bunhal_nabib_from_date,   s_bunhal_nabib_to_date,
                                                  s_bunhal_nabib_from_date, s_bunhal_nabib_to_date, i_user_id
                                             from DUAL;
                            exception when others then o_result := 'Error';
                                                               raise_application_error(-20001, '분납회차있음 Insert[TBID0015] Error[160]: '|| sqlerrm);
                        end;
                                                          l_log_data := l_log_data || '2*'|| f_idx2 || '-10[' || '분납회차있음 Insert OK...2'  ||chr(13)||chr(10);
                    /***********************************************************/
                    /* 일할계산된 보험료에서 회차별 분할 보험료를 마이너스 한  */
                    /* 금액이 0 보다 작으면 남은 회차 없음..                   */
                    /* 남은 금액 Inser 하고 Loop  Exit                         */
                    /***********************************************************/
                    else
                        begin
                            insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                                  DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                                  IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                                  BASIS_FROM,               BASIS_TO,               USER_ID )
                                           select i_pol_no,                 i_endor_no,             s_bunhal_nabib_cnt,         0,
                                                  i_dmbo_cd,                s_bunhal_amt1,          s_bunhal_amt2,              s_bunhal_nabib_from_date,
                                                  s_bunhal_nabib_to_date,   i_endor_no-1,           s_bunhal_nabib_from_date,   s_bunhal_nabib_to_date,
                                                  s_bunhal_nabib_from_date, s_bunhal_nabib_to_date, i_user_id
                                             from DUAL;
                                    exception when others then o_result := 'Error';
                                                        raise_application_error(-20001, '분납회차 남아있지 않음.. Insert[TBID0015] Error[170]: '|| sqlerrm);
                        end;
                                                          l_log_data := l_log_data || '2*'|| f_idx2 || '-10[' || '분납회차 끝 Insert OK...3'  ||chr(13)||chr(10);
                        exit;
                    end if;

                    /************************/
                    /* Log 남기기         ***/
                    /************************/
                    --  if    l_log_level = 1  then /**Log 남기기 ****/
                    --        PR_INSERT_LOG(l_log_date,l_log_sp_name,l_log_no,'배서[분납]_' || f_idx2 ,i_dmbo_cd,l_log_data);
                    --  end if;

                    --  l_log_data := '';

                End Loop;
            else
                /***********************************************************/
                /* 단기자차 추가의 경우 최종납입회차에 넣고 끝낸다.        */
                /***********************************************************/
                begin
                    insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                          DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                          IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                          BASIS_FROM,               BASIS_TO,               USER_ID )
                                   select i_pol_no,                 i_endor_no,             i_end_nab_no,               i_bef_15_seq_no,
                                          i_dmbo_cd,                s_basic_prem,           s_appy_prem,                s_0013_c_appy_from,
                                          s_0013_c_appy_to,         i_endor_no-1,           s_0013_c_appy_from,         s_0013_c_appy_to,
                                          s_0013_c_appy_from,       s_0013_c_appy_to,       i_user_id
                                     from DUAL;
                    exception when others then o_result := 'Error';
                                                       raise_application_error(-20001, '단기자차 분납  Insert[TBID0015] Error[160]: '|| sqlerrm);
                end;
                                                  l_log_data := l_log_data || '2*'|| f_idx2 || '-10[' || '단기자차 분납 Insert OK...2'  ||chr(13)||chr(10);
            end if;
        /*분납부활일 경우*/
        else
            begin
                insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                      DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                      IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                      BASIS_FROM,               BASIS_TO,               USER_ID )
                               select POL_NO,                   i_endor_no,             BNP_NO,                     SEQ_NO,
                                      DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                      IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                      BASIS_FROM,               BASIS_TO,               i_user_id
                                 from TBID0015
                                where POL_NO   = i_pol_no
                                  and ENDOR_NO = i_endor_no -1
                                  and DMBO_CD  = i_dmbo_cd
                                  and BNP_NO   > i_end_nab_no;
                   exception when others then o_result := 'Error';
                                               raise_application_error(-20001, '이전배서 보험료동일 Insert[TBID0015] Error[180]: ' || sqlerrm);
            end;
                                                  l_log_data := l_log_data || '2*14[**** 이전배서 보험료 동일_TBID0015 ********]'  ||chr(13)||chr(10);
                                                  l_log_data := l_log_data || '2*15[' || '이전배서 보험료동일 Insert OK..4'    ||chr(13)||chr(10);
        end if;

    /*****************************************************************************************/
    /* 보험료 변동없음:이전 배서의 보험료와 현재 계산된 보험료가 같으면 이전 Data Insert시킴 */
    /* TBID0015 Table은 이미 Insert 되어 있음                                                */
    /*****************************************************************************************/
    ELSIF  s_0013_appy_prem  =  s_0013_b_appy_prem  and i_endor_no_bef_max = i_endor_no -1 and V_ENDOR_GB <> '6' then
        begin
            insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                  DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                  IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                  BASIS_FROM,               BASIS_TO,               USER_ID )
                           select POL_NO,                   i_endor_no,             BNP_NO,                     SEQ_NO,
                                  DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                  IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                  BASIS_FROM,               BASIS_TO,               i_user_id
                             from TBID0015
                            where POL_NO   = i_pol_no
                              and ENDOR_NO = i_endor_no -1
                              and DMBO_CD  = i_dmbo_cd;
               exception when others then o_result := 'Error';
                                           raise_application_error(-20001, '이전배서 보험료동일 Insert[TBID0015] Error[181]: ' || sqlerrm);
        end;
                                                  l_log_data := l_log_data || '2*14[**** 이전배서 보험료 동일_TBID0015 ********]'  ||chr(13)||chr(10);
                                                  l_log_data := l_log_data || '2*15[' || '이전배서 보험료동일 Insert OK..4'    ||chr(13)||chr(10);

    ELSE
        /*****************************************************************************************/
        /* 이전 회차 보험료(기 납입 보험료)는 무조건 신규 배서에 Insert 시킴                    */
        /*****************************************************************************************/
        begin
            insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                  DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                  IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                  BASIS_FROM,               BASIS_TO,               USER_ID )
                           select POL_NO,                   i_endor_no,             BNP_NO,                     SEQ_NO,
                                  DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                  IEND_VALID_DATE,          i_endor_no -1,          APPY_FROM,                  APPY_TO,
                                  BASIS_FROM,               BASIS_TO,               i_user_id
                             from TBID0015
                            where POL_NO   = i_pol_no
                              and ENDOR_NO = i_endor_no -1
                              and DMBO_CD  = i_dmbo_cd
                              and BNP_NO   <= i_end_nab_no;
            exception when others then o_result := 'Error';
                                       raise_application_error(-20001, '이전배서 보험료 Insert [TBID0015] Error[190]: '|| sqlerrm);
        end;
                                              l_log_data := l_log_data || '2*16[**** 이전배서 보험료 다름_TBID0015 ********]'    ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*17[' || '이전배서 보험료 Insert [TBID0015] OK...5' ||chr(13)||chr(10);

        /*****************************************************************/
        /* 회차별 보험료를 산정 한다                                     */
        /* FN_RENT_BUNAP_AMT:                                            */
        /*    [ In] 납입방법/상품종류/'0'/분납회수/적용보험료/           */
        /*          기본보험료/보험종기/Sort_Gubun                       */
        /*    [Out] f_bunhal_bohum                                       */
        /*          납입회수,분납일자,분납 유효일자,기준보험료,적용보험료*/
        /*                                                               */
        /* Description : 납입회차 순으로 자료 나옴                       */
        /*****************************************************************/

        f_bunhal_bohum := FN_RENT_BUNAP_AMT(i_na_mth,i_i_kind_cd,i_spcl_agre_gb,i_bnp_cnt,i_dmbo_appy_prem,i_dmbo_basic_prem,i_istar_cont_date,'ASC');

        s_basic_prem  :=0 ;
        s_appy_prem   :=0 ;

        /***********************************************************/
        /* 회차별 보험료 Looping 갯수 산정                         */
        /***********************************************************/
        f_idx1  := length(f_bunhal_bohum) - length(replace(f_bunhal_bohum,',','')) + 1;
        f_idx2  := 0;
                                              l_log_data := l_log_data || '2*18[' || f_idx1  ||']=f_idx1' ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*19[' || f_idx2  ||']=f_idx2' ||chr(13)||chr(10);
        Loop
            f_idx2 := f_idx2 + 1;

            if  f_idx2 > f_idx1 then
                exit;
            end if;

            /***********************************************************/
            /* 회차별 보험료 정보를 구분자로 Substring 함              */
            /***********************************************************/

            s_bunhal_bohum  := regexp_substr(f_bunhal_bohum,'[^,]+',1,f_idx2);

            s_bunhal_nabib_cnt         := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,1));
            s_bunhal_nabib_from_date   := to_date  (regexp_substr(s_bunhal_bohum,'[^|]+',1,2));
            s_bunhal_nabib_to_date     := to_date  (regexp_substr(s_bunhal_bohum,'[^|]+',1,3));
            s_bunhal_nabib_amt1        := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,4));   /* 기준보험료 */
            s_bunhal_nabib_amt2        := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,5));   /* 적용보험료 */
                                              l_log_data := l_log_data || '2*'|| f_idx2 || '-02[' || s_bunhal_nabib_cnt         ||']=납입회차'       ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*'|| f_idx2 || '-03[' || s_bunhal_nabib_from_date   ||']=납입일자'       ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*'|| f_idx2 || '-04[' || s_bunhal_nabib_to_date     ||']=납입유효일자'   ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*'|| f_idx2 || '-06[' || s_bunhal_nabib_amt2        ||']=적용보험료'     ||chr(13)||chr(10);

            /***********************************************************/
            /* 분납회차가 종납 회차보다 크면                           */
            /* 분납률에 따라 계산 되어진 보험료 Insert 시킴            */
            /***********************************************************/
            if  s_bunhal_nabib_cnt > i_end_nab_no  and  i_dmbo_cd not in ('21','22','23')  then
                --자차이고 계산방법이 단기가 아니면(단기자차가 아니면)
                if i_dmbo_cd||s_0013_c_cancel_calc_gb <> '063' then
                    begin
                        insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                              DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                              IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                              BASIS_FROM,               BASIS_TO,               USER_ID )
                                       select i_pol_no,                 i_endor_no,             s_bunhal_nabib_cnt,         0 ,
                                              i_dmbo_cd,                s_bunhal_nabib_amt1,    s_bunhal_nabib_amt2,        s_bunhal_nabib_from_date,
                                              s_bunhal_nabib_to_date,   i_endor_no-1,           s_bunhal_nabib_from_date,   s_bunhal_nabib_to_date,
                                              s_bunhal_nabib_from_date, s_bunhal_nabib_to_date, i_user_id
                                         from DUAL;
                        exception when others then o_result := 'Error';
                                                       raise_application_error(-20001, '분납률에 따라 Insert[TBID0015] Error[210]: '|| sqlerrm);
                    end;


                    s_basic_prem   := s_basic_prem  + s_bunhal_nabib_amt1;
                    s_appy_prem    := s_appy_prem   + s_bunhal_nabib_amt2;
                                              l_log_data := l_log_data || '2*'|| f_idx2 || '-07[' || s_appy_prem     ||']=회차누적 적용보험료'    ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*'|| f_idx2 || '-08[' || '분납률에 따라 Insert OK...6'  ||chr(13)||chr(10);
                end if;
            end if;

            /************************/
            /* Log 남기기         ***/
            /************************/
            --if    l_log_level = 1  then  /**Log 남기기 ****/
            --      PR_INSERT_LOG(l_log_date,l_log_sp_name,l_log_no,'배서[분납]',i_dmbo_cd,l_log_data);
            --end if;

            --l_log_data := '';

        End Loop;

        /**********************************************************************/
        /**TBID0014 SUM  Return 해 준다                                       */
        /**********************************************************************/
        begin
              select nvl(sum(BASIC_PREM),0)
                   , nvl(sum(APPY_PREM) ,0)
                into V_RETURN_AMT1
                   , V_RETURN_AMT2
                from TBID0014
               where POL_NO   = i_pol_no
                 and ENDOR_NO = i_endor_no
                 and DMBO_CD  = i_dmbo_cd;

            exception when no_data_found then V_RETURN_AMT1 :=0;
                                              V_RETURN_AMT2 :=0;
                      when others        then o_result := 'Error';
                                              raise_application_error(-20001, 'TBID0014 Sum[TBID0015] Error[220]: '|| sqlerrm);
        end;
                                              l_log_data := l_log_data || '2*20 [' || 'TBID0014 Sum[TBID0015] OK...7' ||chr(13)||chr(10);

        /***********************************************************/
        /* 이전 배서의 종납회차 정보를 구분자로 Substring 함       */
        /***********************************************************/
        s_bunhal_bohum  := regexp_substr(f_bunhal_bohum,'[^,]+',1,i_end_nab_no);

        s_bunhal_nabib_cnt         := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,1));
        s_bunhal_nabib_from_date   := to_date  (regexp_substr(s_bunhal_bohum,'[^|]+',1,2));
        s_bunhal_nabib_to_date     := to_date  (regexp_substr(s_bunhal_bohum,'[^|]+',1,3));
        s_bunhal_nabib_amt1        := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,4));   /* 기준보험료 */
        s_bunhal_nabib_amt2        := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,5));   /* 적용보험료 */

                                              l_log_data := l_log_data || '2*21[' || s_bunhal_nabib_cnt        ||']=납입회차'       ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*22[' || s_bunhal_nabib_from_date  ||']=납입일자'       ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*23[' || s_bunhal_nabib_to_date    ||']=납입유효일자'   ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*24[' || s_bunhal_nabib_amt2       ||']=적용보험료'     ||chr(13)||chr(10);

                                              l_log_data := l_log_data || '2*25[' || V_RETURN_AMT2             ||']=①적용보험료'            ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*26[' || s_appy_prem               ||']=②회차누적적용보험료'    ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*27[' || V_BEF_15_DMBO_PREM        ||']=③이전배서납입보험료'    ||chr(13)||chr(10);

        /* 현재배서의[TBID0014] 의 SUM 보험료 - 종납회차이후의 분납보험료 -  종납회차 이전의 SUM 보험료*/
        s_basic_prem  := V_RETURN_AMT1  -  s_basic_prem - V_BEF_15_BASIC_PREM ;
        s_appy_prem   := V_RETURN_AMT2  -  s_appy_prem  - V_BEF_15_DMBO_PREM;
                                              l_log_data := l_log_data || '2*28[' || s_appy_prem               ||']=①-②-③'    ||chr(13)||chr(10);
        if  s_appy_prem <> 0 then
            begin
                insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                      DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                      IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                      BASIS_FROM,               BASIS_TO,               USER_ID )
                               select i_pol_no,                 i_endor_no,             s_bunhal_nabib_cnt,         i_bef_15_seq_no,
                                      i_dmbo_cd,                s_basic_prem,           s_appy_prem,                s_bunhal_nabib_from_date,
                                      s_bunhal_nabib_to_date,   i_endor_no-1,           s_bunhal_nabib_from_date,   s_bunhal_nabib_to_date,
                                      s_bunhal_nabib_from_date, s_bunhal_nabib_to_date, i_user_id
                                 from DUAL;
                exception when others then o_result := 'Error';
                                           raise_application_error(-20001, '추징/환수 TBID0015 Insert [TBID0015] Error[200]: '|| sqlerrm);
            end;
        end if;
                                              l_log_data := l_log_data || '2*29[' || '추징/환수 Insert [TBID0015] OK..3'  ||chr(13)||chr(10);
    END IF;


    IF  o_result is null then
        o_result  := 'OK' || '|' || V_RETURN_AMT1 || '|' || V_RETURN_AMT2;
    END IF;

    l_log_data := l_log_data ||'3*01 [' || o_result    ||']=o_result'    ||chr(13)||chr(10);
    l_log_data := l_log_data ||'3*02 Good Bye......Endors'               ||chr(13)||chr(10);

    /************************/
    /* Log 남기기         ***/
    /************************/
    IF    l_log_level = 1 or nvl(regexp_substr(l_log_step,i_dmbo_cd),' ') = i_dmbo_cd then
        PR_INSERT_LOG(l_log_date,l_log_sp_name,l_log_no,'배서[분납]',i_dmbo_cd,l_log_data);
    END IF;
    l_log_data := '';

    exception when others then dbms_output.put_line('PR_RENT_ENDOR_BUNAP_RATE Main Error[999]: '||sqlerrm);
                               raise_application_error(-20001, 'PR_RENT_ENDOR_BUNAP_RATE Main Error[999]: '||sqlerrm);
END;

CREATE OR REPLACE-- added during DDL generation.
procedure          KRMA_APP.PR_ENDOR_TO_POL_INSERT
(i_pol_no         in varchar2
,i_endor_no       in number
,r_result        out varchar2) as
/*****************************************************************/
/* 생성일자  : 2013.02.27                                        */
/* 생성자    : 강신규                                            */
/* 업무내용  : 계약 Table 에서 계약 Table로 Insert               */
/* Parameter : [ In] i_pol_no    --계약번호                      */
/*             [ In] i_endor_no  --계약 순차                     */
/*             [Out] r_result    --처리결과                      */
/*****************************************************************/

V_POL_NO     varchar2(20) :='0';
/******************/
/*** lOG 변수 *****/
/******************/
l_log_sp_name                varchar2(50)  := 'PR_ENDOR_TO_POL_INSERT' ;        -- 로그 Stored Procedure Name
l_log_date                   varchar2(16)  := to_char(sysdate,'yyyymmddhh24miss');
BEGIN

    r_result :=null ;

    begin
        select POL_NO
          into V_POL_NO
          from TBID0001
         where POL_NO   = i_pol_no
           and ENDOR_NO = i_endor_no;

         exception when no_data_found   then V_POL_NO :='0';
                   when others          then r_result :='배서-Master Select Error [TBID0001]';
    end;

    IF    V_POL_NO <> '0' then
          begin
              /*********************************************/
              /* 계약 Table 삭제                           */
              /*********************************************/
              delete from TBIC0001 where POL_NO=i_pol_no;
              delete from TBIC0011 where POL_NO=i_pol_no;
              delete from TBIC0012 where POL_NO=i_pol_no;
              delete from TBIC0013 where POL_NO=i_pol_no;
              delete from TBIC0014 where POL_NO=i_pol_no;
              delete from TBIC0015 where POL_NO=i_pol_no;
              delete from TBIC0016 where POL_NO=i_pol_no;
              delete from TBIC0103 where POL_NO=i_pol_no;
              delete from TBIC0104 where POL_NO=i_pol_no;
              exception when others then r_result := null;
                      --dbms_output.put_line('계약 Table Delete Error : '||sqlerrm);

          end;


          /*********************************************/
          /* 계약-계약정보(TBIC0001) INSERT            */
          /*********************************************/
          begin
              insert  into TBIC0001(
                      POL_NO,
                      ENT_DGN_NO,              CUST_NO,                 CO_NO,                   BCO_NO,                  OWN_CD,
                      INDGRP_GB,               CONT_KIND,               CONT_TYPE,               B_ENT_AMT,               BASIC_PREM,
                      NA_MTH,                  ISTAR_CONT_DATE,         IEND_CONT_DATE,          I_KIND_CD,               BNP_CNT,
                      BNP_CNT_R,               CASH_MTH,                CASH_ENT_TYPE,           TOT_INSUR_AMT,           APPY_SUM_PREM,
                      TOT_NAB_PREM,            RIDER_INSUR_AMT,         RIDER_PREM,              SUM_PREM,                HOME_GB,
                      CONT_YY,                 CONT_MM,                 CONT_DD,                 TOT_NAB_CNT,             CONT_STATE,
                      UNION_KIND,              ENDOR_NO,
                      SHORT_DAY_GB,            SHORT_R,                 GRPCONT_DSC_R,           IENT_CARR_CD,            IENT_CARR_R,
                      DSC_INC_CD,              DSC_INC_R,               SPCIAL_INC_R,            SPCIAL_INC_APPY,         ALL_DMBO_R,
                      MUL_ACCI_RATE_CD,        ISD_P_CDGB,              ISD_CD,                  ISD_NAME,                ISD_CONT_RELATION_CD,
                      ISD_ZIP_CD_GB,           ISD_ZIP_CD_DM_GB,        ISD_ZIP_CD,              ISD_ADDR_1,              ISD_ADDR_2,
                      ISD_CALL_SITE_GB,        ISD_OFF_TEL_DDD,         ISD_OFF_TEL,             ISD_TEL_DDD,             ISD_TEL_NO,
                      ISD_HP_NO,               ISD_E_MAIL,              ISD_FAX,                 ISD_ENRNER_RELATION_CD,  ISD_ENRNER_NAME,
                      ISD_ENRNER_PSN_NO,       CONT_CD_GB,              CONT_CD,                 CONT_NAME,               CONT_RELATION_CD,
                      CONT_ZIP_CD_GB,          CONT_ZIP_CD_DM_GB,       CONT_ZIP_CD,             CONT_ADDR_1,             CONT_ADDR_2,
                      CONT_CALL_SITE_GB,       CONT_OFF_TEL_DDD,        CONT_OFF_TEL,            CONT_TEL_DDD,            CONT_TEL_NO,
                      CONT_HP_NO,              CONT_E_MAIL,             CONT_FAX,                CAR_HAN_NO,              CAR_ID_GB,
                      CAR_ID,                  CAR_APPR_NUM_TON,        CAR_OLD_R,               CAR_GAEK,                CAR_AMT,
                      CAR_REG_DATE,            CAR_NO,                  CAR_OUT_NO,              CAR_NO_GB,               CAR_NO_L,
                      CAR_NO_S1,               CAR_NO_S2,               CAR_NO_CITY,             CAR_USE,                 CAR_NM_CD,
                      CAR_KIND_CD,             CAR_TYPE_CD,             CAR_UNIT_GAEK,           CAR_UNIT_AMT,            CAR_Y_TYPE,
                      CAR_PASS_YEAR,           CAR_CC,                  CAR_ACC_GAEK,            CAR_ACC_AMT,             CAR_USE_USE,
                      CAR_AIRBAG,              CAR_NM,                  CAR_COUNTRY,             CAR_GRADE,               CAR_RATE,
                      CAR_ETC_GB,              CAR_ENG_TYPE,            PRE_CONT_CD,             CONT_NO,                 APP_DATE,
                      ENT_DGN_DATE,            CONT_DATE,               APP_PRINT_DATE,          ENT_PRINT_DATE,          ENT_PATH,
                      TREATY_HQ_CD,            TREATY_BRH_CD,           TREATY_CD,               CAR_SEQ,
                      APPY_FROM,               APPY_TO,                 BASIS_FROM,              BASIS_TO,
                      USER_ID,                 CAR_NEW_GB,              STATE_ADD_DATE,          CLAIM_ACCUR_CNT,         CLAIM_LAST_DATE,
                      END_NAB_YM,              END_NAB_NO,              END_CASH_DATE,           FIRST_CASH_DATE,         END_CHANGE_DATE,
                      RCVD_STATE,              RENEW_GB,                RENEW_DATE,              POL_PRINT_DATE,          TRANS_APNT_DD,
                      END_GASU_CNT,            CASH_MTH_CHG_DATE,       ALL_CLIAM_DATE,          ISD_CUST_NO,             CONT_CUST_NO,
                      FILEKEY_FRONT,           FILEKEY_BACK,            FILEKEY_LEFT,            FILEKEY_RIGHT,           FILEKEY_CONTRACT,
                      GRPCONT_DSC_CAR_R,       CUST_CAR_NM
                      )
              select
                      POL_NO,
                      ENT_DGN_NO,              CUST_NO,                 CO_NO,                   BCO_NO,                  OWN_CD,
                      INDGRP_GB,               CONT_KIND,               CONT_TYPE,               B_ENT_AMT,               BASIC_PREM,
                      NA_MTH,                  ISTAR_CONT_DATE,         IEND_CONT_DATE,          I_KIND_CD,               BNP_CNT,
                      BNP_CNT_R,               CASH_MTH,                CASH_ENT_TYPE,           TOT_INSUR_AMT,           APPY_SUM_PREM,
                      TOT_NAB_PREM,            RIDER_INSUR_AMT,         RIDER_PREM,              SUM_PREM,                HOME_GB,
                      CONT_YY,                 CONT_MM,                 CONT_DD,                 TOT_NAB_CNT,             CONT_STATE,
                      UNION_KIND,              i_endor_no,
                      SHORT_DAY_GB,            SHORT_R,                 GRPCONT_DSC_R,           IENT_CARR_CD,            IENT_CARR_R,
                      DSC_INC_CD,              DSC_INC_R,               SPCIAL_INC_R,            SPCIAL_INC_APPY,         ALL_DMBO_R,
                      MUL_ACCI_RATE_CD,        ISD_P_CDGB,              ISD_CD,                  ISD_NAME,                ISD_CONT_RELATION_CD,
                      ISD_ZIP_CD_GB,           ISD_ZIP_CD_DM_GB,        ISD_ZIP_CD,              ISD_ADDR_1,              ISD_ADDR_2,
                      ISD_CALL_SITE_GB,        ISD_OFF_TEL_DDD,         ISD_OFF_TEL,             ISD_TEL_DDD,             ISD_TEL_NO,
                      ISD_HP_NO,               ISD_E_MAIL,              ISD_FAX,                 ISD_ENRNER_RELATION_CD,  ISD_ENRNER_NAME,
                      ISD_ENRNER_PSN_NO,       CONT_CD_GB,              CONT_CD,                 CONT_NAME,               CONT_RELATION_CD,
                      CONT_ZIP_CD_GB,          CONT_ZIP_CD_DM_GB,       CONT_ZIP_CD,             CONT_ADDR_1,             CONT_ADDR_2,
                      CONT_CALL_SITE_GB,       CONT_OFF_TEL_DDD,        CONT_OFF_TEL,            CONT_TEL_DDD,            CONT_TEL_NO,
                      CONT_HP_NO,              CONT_E_MAIL,             CONT_FAX,                CAR_HAN_NO,              CAR_ID_GB,
                      CAR_ID,                  CAR_APPR_NUM_TON,        CAR_OLD_R,               CAR_GAEK,                CAR_AMT,
                      CAR_REG_DATE,            CAR_NO,                  CAR_OUT_NO,              CAR_NO_GB,               CAR_NO_L,
                      CAR_NO_S1,               CAR_NO_S2,               CAR_NO_CITY,             CAR_USE,                 CAR_NM_CD,
                      CAR_KIND_CD,             CAR_TYPE_CD,             CAR_UNIT_GAEK,           CAR_UNIT_AMT,            CAR_Y_TYPE,
                      CAR_PASS_YEAR,           CAR_CC,                  CAR_ACC_GAEK,            CAR_ACC_AMT,             CAR_USE_USE,
                      CAR_AIRBAG,              CAR_NM,                  CAR_COUNTRY,             CAR_GRADE,               CAR_RATE,
                      CAR_ETC_GB,              CAR_ENG_TYPE,            PRE_CONT_CD,             CONT_NO,                 APP_DATE,
                      ENT_DGN_DATE,            CONT_DATE,               APP_PRINT_DATE,          ENT_PRINT_DATE,          ENT_PATH,
                      TREATY_HQ_CD,            TREATY_BRH_CD,           TREATY_CD,               CAR_SEQ,
                      APPY_FROM,               APPY_TO,                 BASIS_FROM,              BASIS_TO,
                      USER_ID,                 CAR_NEW_GB,              STATE_ADD_DATE,          CLAIM_ACCUR_CNT,         CLAIM_LAST_DATE,
                      END_NAB_YM,              END_NAB_NO,              END_CASH_DATE,           FIRST_CASH_DATE,         END_CHANGE_DATE,
                      RCVD_STATE,              RENEW_GB,                RENEW_DATE,              POL_PRINT_DATE,          TRANS_APNT_DD,
                      END_GASU_CNT,            CASH_MTH_CHG_DATE,       ALL_CLIAM_DATE,          ISD_CUST_NO,             CONT_CUST_NO,
                      FILEKEY_FRONT,           FILEKEY_BACK,            FILEKEY_LEFT,            FILEKEY_RIGHT,           FILEKEY_CONTRACT,
                      GRPCONT_DSC_CAR_R,       CUST_CAR_NM
                from  TBID0001
               where  POL_NO   = i_pol_no
                 and  ENDOR_NO = i_endor_no;

               exception when others then
                         r_result := r_result || '계약-계약정보 [TBIC0001 Inert Error]  ';
                         --dbms_output.put_line('계약-계약정보 [TBIC0001 Inert Error]'||sqlerrm);
          end;

          /*********************************************/
          /* 계약-자동차추가정보(TBIC0011) INSERT      */
          /*********************************************/
          begin
              insert  into TBIC0011(
                      POL_NO,
                      INS_AIM_GB,              MLGUN_SEQ_NO,            MLGUN_CD,                MLGUN_NAME,              MADE_CO,
                      ITEM_SPEC,               QTY,                     PRICE,                   MLGUN_AMT,               MLGUN_ENT_AMT,
                      BUY_YM,                  REMARK,                  ENDOR_NO,
                      APPY_FROM,               APPY_TO,                 BASIS_FROM,              BASIS_TO,                USER_ID
                      )
              select
                      POL_NO,
                      INS_AIM_GB,              MLGUN_SEQ_NO,            MLGUN_CD,                MLGUN_NAME,              MADE_CO,
                      ITEM_SPEC,               QTY,                     PRICE,                   MLGUN_AMT,               MLGUN_ENT_AMT,
                      BUY_YM,                  REMARK,                  i_endor_no,
                      APPY_FROM,               APPY_TO,                 BASIS_FROM,              BASIS_TO,                USER_ID
                from  TBID0011
               where  POL_NO   = i_pol_no
                 and  ENDOR_NO = i_endor_no;
               exception when others then
                         r_result := r_result || '계약-자동차추가정보[TBIC0011 Inert Error]  ';
                         -- dbms_output.put_line('계약-자동차추가정보[TBIC0011 Inert Error]'||sqlerrm);
          end;

          /*********************************************/
          /* 계약-특약특별요율(TBIC0012) INSERT      */
          /*********************************************/
          begin
              insert  into TBIC0012(
                      POL_NO,
                      RIDER_ESP_GB,            RATE_CD,                 APPY_R,                  PREM,                    APPY_INS_AMT,
                  APPY_DUCT_AMT,               ENDOR_NO,
                      APPY_FROM,               APPY_TO,                 BASIS_FROM,              BASIS_TO,                USER_ID
                      )
              select
                      POL_NO,
                      RIDER_ESP_GB,            RATE_CD,                 APPY_R,                  PREM,                    APPY_INS_AMT,
                      APPY_DUCT_AMT,           i_endor_no,
                      APPY_FROM,               APPY_TO,                 BASIS_FROM,              BASIS_TO,                USER_ID
                from  TBID0012
               where  POL_NO   = i_pol_no
                 and  ENDOR_NO = i_endor_no;

               exception when others then
                         r_result := r_result || '계약-특약특별요율 [TBIC0012 Inert Error]  ';
                         --dbms_output.put_line('계약-특약특별요율 [TBIC0012 Inert Error] '||sqlerrm);
          end;

          /*********************************************/
          /* 계약-담보별보험료(TBIC0013) INSERT      */
          /* 2017.02.02 담보별요율 컬럼추가*/
          /*********************************************/
          begin
              insert  into TBIC0013(
                      POL_NO,
                      BASIC_SCONT_GB,          DMBO_CD,                 ACDNT_RESP_WANT,         MAN_RESP_WANT,            INSUR_AMT,
                      INSUR_AMT_GB,            DUCT_AMT_GB,             BASIC_PREM,              DMBO_START_DATE,          DMBO_END_DATE,
                      APPY_PREM,               BASIC_RANGE_R,           ENDOR_NO,
                      APPY_FROM,               APPY_TO,                 BASIS_FROM,              BASIS_TO,                 USER_ID, GRP_DMBO_RATE
                      )
              select
                      POL_NO,
                      BASIC_SCONT_GB,          DMBO_CD,                 ACDNT_RESP_WANT,         MAN_RESP_WANT,            INSUR_AMT,
                      INSUR_AMT_GB,            DUCT_AMT_GB,             BASIC_PREM,              DMBO_START_DATE,          DMBO_END_DATE,
                      APPY_PREM,               BASIC_RANGE_R,           i_endor_no,
                      APPY_FROM,               APPY_TO,                 BASIS_FROM,              BASIS_TO,                 USER_ID, GRP_DMBO_RATE
                from  TBID0013
               where  POL_NO   = i_pol_no
                 and  ENDOR_NO = i_endor_no;

              exception when others then
                        r_result := r_result || '계약-담보별보험료 [TBIC0013 Inert Error]  ';
                        --dbms_output.put_line('계약-담보별보험료 [TBIC0013 Inert Error]'||sqlerrm);
          end;


          /*********************************************/
          /* 계약-담보기간별보험료(TBIC0014) INSERT    */
          /*********************************************/
          begin
              insert  into TBIC0014(
                      POL_NO,
                      DMBO_CD,                 CALC_FYMD,               CALC_EYMD,                BASIC_PREM,              APPY_PREM,
                      APPY_FROM,               APPY_TO,                 BASIS_FROM,               BASIS_TO,                USER_ID,
                      BASIC_YEAR_PREM,         APPY_YEAR_PREM,          ENDOR_NO
                      )
              select
                      POL_NO,
                      DMBO_CD,                 CALC_FYMD,               CALC_EYMD,                BASIC_PREM,              APPY_PREM,
                      APPY_FROM,               APPY_TO,                 BASIS_FROM,               BASIS_TO,                USER_ID,
                      BASIC_YEAR_PREM,         APPY_YEAR_PREM,          i_endor_no
                from  TBID0014
               where  POL_NO   = i_pol_no
                 and  ENDOR_NO = i_endor_no;

              exception when others then
                        r_result := r_result || '계약-담보기간별보험료 [TBIC0014 Inert Error]  ';
                        --dbms_output.put_line('계약-담보기간별보험료 [TBIC0014 Inert Error] '||sqlerrm);
          end;


          /*********************************************/
          /* 계약-담보별분납계획(TBIC0015) INSERT      */
          /*********************************************/
          begin
              insert  into TBIC0015(
                      POL_NO,
                      BNP_NO,                  SEQ_NO,                  DMBO_CD,                  BASIC_PREM,              DMBO_PREM,
                      ISTAR_VALID_DATE,        IEND_VALID_DATE,         ENDOR_NO,
                      APPY_FROM,               APPY_TO,                 BASIS_FROM,               BASIS_TO,                USER_ID
                      )
              select
                      POL_NO,
                      BNP_NO,                  SEQ_NO,                  DMBO_CD,                  BASIC_PREM,              DMBO_PREM,
                      ISTAR_VALID_DATE,        IEND_VALID_DATE,         i_endor_no,
                      APPY_FROM,               APPY_TO,                 BASIS_FROM,               BASIS_TO,                USER_ID
                from  TBID0015
               where  POL_NO   = i_pol_no
                 and  ENDOR_NO = i_endor_no;

              exception when others then
                        r_result := r_result || '계약-담보별분납계획 [TBIC0015 Inert Error]  ';
                        --dbms_output.put_line('계약-담보별분납계획 [TBIC0015 Inert Error] '||sqlerrm);
          end;

          /*********************************************/
          /* 계약-분납계획(TBIC0016)         INSERT    */
          /*********************************************/
          begin
              insert  into TBIC0016(
                      POL_NO,
                      BNP_NO,                  SEQ_NO,                  I_KIND_CD,                RCPT_CD,                 NA_DATE,
                      ACCOUNT_MTH,             ACCOUNT_ID,              ENDOR_NO,
                      MANG_NO,                 BNP_GUIDE_DATE,          BNP_RATION,               BNP_DATE,                BNP_PREM,
                      BNP_DEDUCT_AMT,          PROC_STATUS,             RCPT_GB,                  RCPT_NO,
                      TREATY_HQ_CD,            TREATY_BRH_CD,           TREATY_CD,
                      APPY_FROM,               APPY_TO,                 BASIS_FROM,               BASIS_TO,                USER_ID,
                      CANC_SCHEDULE_DATE
                      )
              select
                      POL_NO,
                      BNP_NO,                  SEQ_NO,                  I_KIND_CD,                RCPT_CD,                 NA_DATE,
                      ACCOUNT_MTH,             ACCOUNT_ID,              i_endor_no,
                      MANG_NO,                 BNP_GUIDE_DATE,          BNP_RATION,               BNP_DATE,                BNP_PREM,
                      BNP_DEDUCT_AMT,          PROC_STATUS,             RCPT_GB,                  RCPT_NO,
                      TREATY_HQ_CD,            TREATY_BRH_CD,           TREATY_CD,
                      APPY_FROM,               APPY_TO,                 BASIS_FROM,               BASIS_TO,                USER_ID,
                      FN_GET_CANC_SCHEDULE_DATE(BNP_DATE)
                from  TBID0016
               where  POL_NO   = i_pol_no
                 and  ENDOR_NO = i_endor_no;

              exception when others then
                        r_result := r_result || '계약-분납계획 [TBIC0016 Inert Error]  ';
                       --dbms_output.put_line('계약-분납계획 [TBIC0016 Inert Error] '||sqlerrm);
          end;

          /*********************************************/
          /* 계약-질권정보(TBIC0103)         INSERT    */
          /*********************************************/
          begin
              insert  into TBIC0103(
                      POL_NO,
                      PLG_SEQ,                 BCO_ENT_NO,              PLG_AMT,                  PLG_SPEC,                PLG_SETUP_DATE,
                      PLG_CD,                  PLG_NAME,                ZIP_CD,                   ADDR_1,                  ADDR_2,
                      APPY_FROM,               APPY_TO,                 BASIS_FROM,               BASIS_TO,                USER_ID,
                      ENDOR_NO
                      )
              select
                      POL_NO,
                      PLG_SEQ,                 BCO_ENT_NO,              PLG_AMT,                  PLG_SPEC,                PLG_SETUP_DATE,
                      PLG_CD,                  PLG_NAME,                ZIP_CD,                   ADDR_1,                  ADDR_2,
                      APPY_FROM,               APPY_TO,                 BASIS_FROM,               BASIS_TO,                USER_ID,
                      i_endor_no
                from  TBID0103
               where  POL_NO   = i_pol_no
                 and  ENDOR_NO = i_endor_no;

              exception when others then
                        r_result := r_result || '계약-질권정보 [TBIC0016 Inert Error] ';
              --dbms_output.put_line('계약-질권정보 [TBIC0016 Inert Error]'||sqlerrm);
          end;

          /*********************************************/
          /* 계약-계약운전자정보(TBIC0104)   INSERT    */
          /*********************************************/
          begin
              insert  into TBIC0104(
                      POL_NO,
                      DRV_SEQ,                 DRV_CARRER,              CONT_AGE,                 LICENSE_GB,               LICENSE_NO,
                      LICENSE_DATE,            SEX_FM,                  DRV_GB,                   DRV_NAME,                 DRV_ID,
                      ISD_P_REL,               ENDOR_NO,                DRV_HP_NO,                DRV_E_MAIL,               DRV_ZIP_CD_GB,
                      DRV_ZIP_CD,              DRV_ADDR_1,              DRV_ADDR_2,
                      APPY_FROM,               APPY_TO,                 BASIS_FROM,               BASIS_TO,                 USER_ID
                      )
              select
                      POL_NO,
                      DRV_SEQ,                 DRV_CARRER,              CONT_AGE,                 LICENSE_GB,               LICENSE_NO,
                      LICENSE_DATE,            SEX_FM,                  DRV_GB,                   DRV_NAME,                 DRV_ID,
                      ISD_P_REL,               i_endor_no,              DRV_HP_NO,                DRV_E_MAIL,               DRV_ZIP_CD_GB,
                      DRV_ZIP_CD,              DRV_ADDR_1,              DRV_ADDR_2,
                      APPY_FROM,               APPY_TO,                 BASIS_FROM,               BASIS_TO,                 USER_ID
                from  TBID0104
               where  POL_NO   = i_pol_no
                 and  ENDOR_NO = i_endor_no;

              exception when others then
                        r_result := r_result || '계약-계약운전자정보 [TBIC0016 Inert Error] ';
                       -- dbms_output.put_line('계약-계약운전자정보 [TBIC0016 Inert Error] '||sqlerrm);
          end;
    ELSE
        r_result := r_result  ||  '*PR_ENDOR_TO_POL_INSERT Main Error';

    END IF;
    if    r_result is null then
          r_result := 'OK';
    end if;

   PR_INSERT_LOG(l_log_date,l_log_sp_name,i_pol_no,i_endor_no,'',r_result);

    -- commit;
    exception when others then
              dbms_output.put_line('PR_ENDOR_TO_POL_INSERT Main Error: '||sqlerrm);
              raise_application_error(-20010, 'PR_ENDOR_TO_POL_INSERT Main Error: '||sqlerrm);
              r_result := r_result || 'PR_ENDOR_TO_POL_INSERT Insert Eorror' ;

END ;
                                                        l_log_data := l_log_data || '2*11[' || s_basic_prem  ||']=일할 기본보험료' ||chr(13)||chr(10);
                end if;
            end if;

            /* 계산된 보험료에서 기납입보험료를 빼준다
               기납입보험료 - 이전 적용보험료합이 0보타 크면 기납입금액을 빼준다.
            */
            if (V_BEF_15_DMBO_PREM - V_APPY_PREM_BEF) >= 0 then
                s_appy_prem  := s_appy_prem  - (V_BEF_15_DMBO_PREM - V_APPY_PREM_BEF);
                s_basic_prem := s_basic_prem - (V_BEF_15_BASIC_PREM - V_BASIC_PREM_BEF);
            else
                s_appy_prem  := s_appy_prem;
                s_basic_prem := s_basic_prem;
            end if;

            /*****************************************************************/
            /* 회차별 보험료를 산정 한다                                     */
            /* FN_RENT_BUNAP_AMT:                                            */
            /*    [ In] 납입방법/상품종류/'0'/분납회수/적용보험료/           */
            /*          기본보험료/보험종기/Sort_Gubun                       */
            /*    [Out] f_bunhal_bohum                                       */
            /*          납입회수,분납일자,분납 유효일자,기준보험료,적용보험료*/
            /*                                                               */
            /* Description : 납입회차 역순으로 자료 나옴                     */
            /*****************************************************************/
            /*i_dmbo_appy_prem, i_dmbo_basic_prem 왜 연간적용보험료로 계산하는지 이해안됨...*/
            /*f_bunhal_bohum := FN_RENT_BUNAP_AMT(i_na_mth,i_i_kind_cd,i_spcl_agre_gb,i_bnp_cnt,i_dmbo_appy_prem,i_dmbo_basic_prem,i_istar_cont_date,'DESC');*/
            if s_appy_prem >= 0 then
                f_bunhal_bohum := FN_RENT_BUNAP_AMT(i_na_mth,i_i_kind_cd,i_spcl_agre_gb,i_bnp_cnt,s_appy_prem,s_basic_prem,i_istar_cont_date,'DESC');
            else
                f_bunhal_bohum := FN_RENT_BUNAP_AMT(i_na_mth,i_i_kind_cd,i_spcl_agre_gb,i_bnp_cnt,s_appy_prem,s_basic_prem,i_istar_cont_date,'ASC');
            end if;

                         if  i_dmbo_cd in ('21','22','23') THEN
                     /***********************************************************/
                /* 위 담보일 경우 최종납입회차에 넣고 끝낸다.        */
                /***********************************************************/
                    begin
                      insert into TBID0015T( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                            DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                            IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                            BASIS_FROM,               BASIS_TO,               USER_ID,                    WORK_DATE )
                                     select i_pol_no,                 i_endor_no,             i_end_nab_no,               i_bef_15_seq_no,
                                            i_dmbo_cd,                s_basic_prem,           s_appy_prem,                s_0013_c_appy_from,
                                            s_0013_c_appy_to,         i_endor_no_bef_max,     s_0013_c_appy_from,         s_0013_c_appy_to,
                                            s_0013_c_appy_from,       s_0013_c_appy_to,       i_user_id,                  to_date(i_work_date, 'YYYYMMDD')
                                       from DUAL;
                    exception when others then o_result := 'Error';
                                                       raise_application_error(-20001, '긴출관련 분납  Insert[TBID0015] Error[160]: '|| sqlerrm);
                end;
                                                  l_log_data := l_log_data || '2*'|| f_idx2 || '-11[' || '긴출관련 분납 Insert OK...2'  ||chr(13)||chr(10);

           elsif  i_endor_cd <> '801' then             /*단기자차가 아니면 (기존대로)*/
                /***********************************************************/
                /* 회차별 보험료 Looping 갯수 산정                         */
                /***********************************************************/
                f_idx1  := length(f_bunhal_bohum) - length(replace(f_bunhal_bohum,',','')) + 1;
                f_idx2  := 0;
                                                           l_log_data := l_log_data || '2*12 [' || f_idx1  ||']=f_idx1' ||chr(13)||chr(10);
                                                           l_log_data := l_log_data || '2*13 [' || f_idx2  ||']=f_idx2' ||chr(13)||chr(10);
                Loop
                    f_idx2 := f_idx2 + 1;
                    if  f_idx2 > f_idx1 then
                        exit;
                    end if;

                    /***********************************************************/
                    /* 회차별 보험료 정보를 구분자로 Substring 함              */
                    /***********************************************************/
                    s_bunhal_bohum           := regexp_substr(f_bunhal_bohum,'[^,]+',1,f_idx2);

                    s_bunhal_nabib_cnt       := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,1));
                    s_bunhal_nabib_from_date := to_date  (regexp_substr(s_bunhal_bohum,'[^|]+',1,2));
                    s_bunhal_nabib_to_date   := to_date  (regexp_substr(s_bunhal_bohum,'[^|]+',1,3));
                    s_bunhal_nabib_amt1      := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,4));   /* 기준보험료 */
                    s_bunhal_nabib_amt2      := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,5));   /* 적용보험료 */

                                                           l_log_data := l_log_data || '2*'|| f_idx2 || '-02[' || s_bunhal_nabib_cnt         ||']=납입회차'       ||chr(13)||chr(10);
                                                           l_log_data := l_log_data || '2*'|| f_idx2 || '-03[' || s_bunhal_nabib_from_date   ||']=납입일자'       ||chr(13)||chr(10);
                                                           l_log_data := l_log_data || '2*'|| f_idx2 || '-04[' || s_bunhal_nabib_to_date     ||']=납입유효일자'   ||chr(13)||chr(10);
                                                           l_log_data := l_log_data || '2*'|| f_idx2 || '-06[' || s_bunhal_nabib_amt2        ||']=적용보험료'     ||chr(13)||chr(10);

                    s_bunhal_amt1  := s_basic_prem;
                    s_bunhal_amt2  := s_appy_prem;
                    /***********************************************************/
                    /* 회차별 보험료 정보를 구분자로 Substring 함              */
                    /***********************************************************/
                    s_basic_prem   := s_basic_prem - s_bunhal_nabib_amt1;
                    s_appy_prem    := s_appy_prem  - s_bunhal_nabib_amt2;
                                                           l_log_data := l_log_data || '2*'|| f_idx2 || '-08[' || s_appy_prem    ||']=일할적용보험료-회차적용보험료' ||chr(13)||chr(10);
                                                           l_log_data := l_log_data || '2*'|| f_idx2 || '-09[' || i_end_nab_no   ||']=종납회차 '                     ||chr(13)||chr(10);

                    /***********************************************************/
                    /* 현재 납입 회차와 분납회차가 같으면                      */
                    /* 납입순번을 i_bef_15_seq_no 하여 계산된 보험료에서       */
                    /* 회차별로 차감 하고 남은 금액을 모두 Insert.. Loop Exit  */
                    /***********************************************************/
                    if  i_end_nab_no = s_bunhal_nabib_cnt then
                        begin
                            insert into TBID0015T( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                                    DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                                    IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                                    BASIS_FROM,               BASIS_TO,               USER_ID,                    WORK_DATE )
                                             select i_pol_no,                 i_endor_no,             s_bunhal_nabib_cnt,         i_bef_15_seq_no,
                                                    i_dmbo_cd,                s_bunhal_amt1,          s_bunhal_amt2,              i_basis_from,
                                                    i_iend_cont_date,         i_endor_no_bef_max,     i_basis_from,               i_iend_cont_date,
                                                    i_basis_from,             i_iend_cont_date,       i_user_id,                  to_date(i_work_date, 'YYYYMMDD')
                                             from DUAL;
                                    exception when others then o_result := 'Error';
                                                               raise_application_error(-20001, '납입회차=분납회차 Insert[TBID0015T] Error[150]: '|| sqlerrm);
                        end;
                                                         l_log_data := l_log_data || '2*'|| f_idx2 || '-10[' || '종납회차=분납회차 Insert OK...1' ||chr(13)||chr(10);
                        exit;

                    /***********************************************************/
                    /* 일할계산된 보험료에서 회차별 분할 보험료를 마이너스 한  */
                    /* 금액이 0 보다 크면 아직 남은 회차가 있음으로            */
                    /* Looping 계속                                            */
                    /***********************************************************/
                    elsif s_appy_prem > 0 then

                    /*i_end_nab_no+f_idx2, s_bunhal_nabib_cnt*/

                        begin
                            insert into TBID0015T( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                                    DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                                    IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                                    BASIS_FROM,               BASIS_TO,               USER_ID,                    WORK_DATE )
                                             select i_pol_no,                 i_endor_no,             s_bunhal_nabib_cnt,         0,
                                                    i_dmbo_cd,                s_bunhal_nabib_amt1,    s_bunhal_nabib_amt2,        s_bunhal_nabib_from_date,
                                                    s_bunhal_nabib_to_date,   i_endor_no_bef_max,     s_bunhal_nabib_from_date,   s_bunhal_nabib_to_date,
                                                    s_bunhal_nabib_from_date, s_bunhal_nabib_to_date, i_user_id,                  to_date(i_work_date, 'YYYYMMDD')
                                               from DUAL;
                            exception when others then o_result := 'Error';
                                                               raise_application_error(-20001, '분납회차있음 Insert[TBID0015T] Error[160]: '|| sqlerrm);
                        end;
                                                          l_log_data := l_log_data || '2*'|| f_idx2 || '-10[' || '분납회차있음 Insert OK...2'  ||chr(13)||chr(10);
                    /***********************************************************/
                    /* 일할계산된 보험료에서 회차별 분할 보험료를 마이너스 한  */
                    /* 금액이 0 보다 작으면 남은 회차 없음..                   */
                    /* 남은 금액 Inser 하고 Loop  Exit                         */
                    /***********************************************************/
                    else
                        begin
                            insert into TBID0015T( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                                    DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                                    IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                                    BASIS_FROM,               BASIS_TO,               USER_ID,                    WORK_DATE )
                                             select i_pol_no,                 i_endor_no,             s_bunhal_nabib_cnt,         0,
                                                    i_dmbo_cd,                s_bunhal_amt1,          s_bunhal_amt2,              s_bunhal_nabib_from_date,
                                                    s_bunhal_nabib_to_date,   i_endor_no_bef_max,     s_bunhal_nabib_from_date,   s_bunhal_nabib_to_date,
                                                    s_bunhal_nabib_from_date, s_bunhal_nabib_to_date, i_user_id,                  to_date(i_work_date, 'YYYYMMDD')
                                             from DUAL;
                                    exception when others then o_result := 'Error';
                                                        raise_application_error(-20001, '분납회차 남아있지 않음.. Insert[TBID0015T] Error[170]: '|| sqlerrm);
                        end;
                                                          l_log_data := l_log_data || '2*'|| f_idx2 || '-10[' || '분납회차 끝 Insert OK...3'  ||chr(13)||chr(10);
                        exit;
                    end if;

                    /************************/
                    /* Log 남기기         ***/
                    /************************/
                    --  if    l_log_level = 1  then /**Log 남기기 ****/
                    /*        PR_INSERT_LOG(l_log_date,l_log_sp_name,l_log_no,'배서[분납]_' || f_idx2 ,i_dmbo_cd,l_log_data);*/
                    /*  end if;*/

                    /*  l_log_data := '';*/

                End Loop;
            else
                /***********************************************************/
                /* 단기자차 추가의 경우 최종납입회차에 넣고 끝낸다.        */
                /***********************************************************/
                begin
                    insert into TBID0015T( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                            DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                            IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                            BASIS_FROM,               BASIS_TO,               USER_ID,                    WORK_DATE )
                                     select i_pol_no,                 i_endor_no,             i_end_nab_no,               i_bef_15_seq_no,
                                            i_dmbo_cd,                s_basic_prem,           s_appy_prem,                s_0013_c_appy_from,
                                            s_0013_c_appy_to,         i_endor_no_bef_max,     s_0013_c_appy_from,         s_0013_c_appy_to,
                                            s_0013_c_appy_from,       s_0013_c_appy_to,       i_user_id,                  to_date(i_work_date, 'YYYYMMDD')
                                       from DUAL;
                    exception when others then o_result := 'Error';
                                                       raise_application_error(-20001, '단기자차 분납  Insert[TBID0015T] Error[160]: '|| sqlerrm);
                end;
                                                  l_log_data := l_log_data || '2*'|| f_idx2 || '-10[' || '단기자차 분납 Insert OK...2'  ||chr(13)||chr(10);
            end if;
        /*분납부활일 경우*/
        else
            begin
                insert into TBID0015T( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                        DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                        IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                        BASIS_FROM,               BASIS_TO,               USER_ID,                    WORK_DATE )
                                 select POL_NO,                   i_endor_no,             BNP_NO,                     SEQ_NO,
                                        DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                        IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                        BASIS_FROM,               BASIS_TO,               i_user_id,                  to_date(i_work_date, 'YYYYMMDD')
                                   from TBID0015T
                                  where POL_NO    = i_pol_no
                                    and ENDOR_NO  = i_endor_no_bef_max
                                    and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                                    and DMBO_CD   = i_dmbo_cd
                                    and  BNP_NO   > i_end_nab_no;
                   exception when others then o_result := 'Error';
                                               raise_application_error(-20001, '이전배서 보험료동일 Insert[TBID0015T] Error[180]: ' || sqlerrm);
            end;
                                                  l_log_data := l_log_data || '2*14[**** 이전배서 보험료 동일_TBID0015T ********]'  ||chr(13)||chr(10);
                                                  l_log_data := l_log_data || '2*15[' || '이전배서 보험료동일 Insert OK..4'    ||chr(13)||chr(10);
        end if;

    /*****************************************************************************************/
    /* 보험료 변동없음:이전 배서의 보험료와 현재 계산된 보험료가 같으면 이전 Data Insert시킴 */
    /* TBID0015 Table은 이미 Insert 되어 있음                                                */
    /*****************************************************************************************/
    ELSIF  s_0013_appy_prem  =  s_0013_b_appy_prem  and V_ENDOR_GB <> '6' then
        begin
            insert into TBID0015T( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                    DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                    IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                    BASIS_FROM,               BASIS_TO,               USER_ID,                    WORK_DATE )
                             select POL_NO,                   i_endor_no,             BNP_NO,                     SEQ_NO,
                                    DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                    IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                    BASIS_FROM,               BASIS_TO,               i_user_id,                  to_date(i_work_date, 'YYYYMMDD')
                               from TBID0015T
                              where POL_NO    = i_pol_no
                                and ENDOR_NO  = i_endor_no_bef_max
                                and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                                and DMBO_CD   = i_dmbo_cd;
               exception when others then o_result := 'Error';
                                           raise_application_error(-20001, '이전배서 보험료동일 Insert[TBID0015T] Error[180]: ' || sqlerrm);
        end;
                                                  l_log_data := l_log_data || '2*14[**** 이전배서 보험료 동일_TBID0015T ********]'  ||chr(13)||chr(10);
                                                  l_log_data := l_log_data || '2*15[' || '이전배서 보험료동일 Insert OK..4'    ||chr(13)||chr(10);

    ELSE
        /*****************************************************************************************/
        /* 이전 회차 보험료(기 납입 보험료)는 무조건 신규 배서에 Insert 시킴                    */
        /*****************************************************************************************/
        begin
            insert into TBID0015T( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                    DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                    IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                    BASIS_FROM,               BASIS_TO,               USER_ID,                    WORK_DATE )
                             select POL_NO,                   i_endor_no,             BNP_NO,                     SEQ_NO,
                                    DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                    IEND_VALID_DATE,          i_endor_no_bef_max,     APPY_FROM,                  APPY_TO,
                                    BASIS_FROM,               BASIS_TO,               i_user_id,                  to_date(i_work_date, 'YYYYMMDD')
                               from TBID0015T
                              where POL_NO     = i_pol_no
                                and ENDOR_NO   = i_endor_no_bef_max
                                and WORK_DATE  = to_date(i_work_date, 'YYYYMMDD')
                                and DMBO_CD    = i_dmbo_cd
                              and BNP_NO      <= i_end_nab_no;
            exception when others then o_result := 'Error';
                                       raise_application_error(-20001, '이전배서 보험료 Insert [TBID0015T] Error[190]: '|| sqlerrm);
        end;
                                              l_log_data := l_log_data || '2*16[**** 이전배서 보험료 다름_TBID0015T ********]'    ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*17[' || '이전배서 보험료 Insert [TBID0015T] OK...5' ||chr(13)||chr(10);

        /*****************************************************************/
        /* 회차별 보험료를 산정 한다                                     */
        /* FN_RENT_BUNAP_AMT:                                            */
        /*    [ In] 납입방법/상품종류/'0'/분납회수/적용보험료/           */
        /*          기본보험료/보험종기/Sort_Gubun                       */
        /*    [Out] f_bunhal_bohum                                       */
        /*          납입회수,분납일자,분납 유효일자,기준보험료,적용보험료*/
        /*                                                               */
        /* Description : 납입회차 순으로 자료 나옴                       */
        /*****************************************************************/
        f_bunhal_bohum := FN_RENT_BUNAP_AMT(i_na_mth,i_i_kind_cd,i_spcl_agre_gb,i_bnp_cnt,i_dmbo_appy_prem,i_dmbo_basic_prem,i_istar_cont_date,'ASC');

        s_basic_prem  :=0 ;
        s_appy_prem   :=0 ;

        /***********************************************************/
        /* 회차별 보험료 Looping 갯수 산정                         */
        /***********************************************************/
        f_idx1  := length(f_bunhal_bohum) - length(replace(f_bunhal_bohum,',','')) + 1;
        f_idx2  := 0;
                                              l_log_data := l_log_data || '2*18[' || f_idx1  ||']=f_idx1' ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*19[' || f_idx2  ||']=f_idx2' ||chr(13)||chr(10);
        Loop
            f_idx2 := f_idx2 + 1;

            if  f_idx2 > f_idx1 then
                exit;
            end if;

            /***********************************************************/
            /* 회차별 보험료 정보를 구분자로 Substring 함              */
            /***********************************************************/

            s_bunhal_bohum  := regexp_substr(f_bunhal_bohum,'[^,]+',1,f_idx2);

            s_bunhal_nabib_cnt         := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,1));
            s_bunhal_nabib_from_date   := to_date  (regexp_substr(s_bunhal_bohum,'[^|]+',1,2));
            s_bunhal_nabib_to_date     := to_date  (regexp_substr(s_bunhal_bohum,'[^|]+',1,3));
            s_bunhal_nabib_amt1        := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,4));   /* 기준보험료 */
            s_bunhal_nabib_amt2        := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,5));   /* 적용보험료 */
                                              l_log_data := l_log_data || '2*'|| f_idx2 || '-02[' || s_bunhal_nabib_cnt         ||']=납입회차'       ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*'|| f_idx2 || '-03[' || s_bunhal_nabib_from_date   ||']=납입일자'       ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*'|| f_idx2 || '-04[' || s_bunhal_nabib_to_date     ||']=납입유효일자'   ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*'|| f_idx2 || '-06[' || s_bunhal_nabib_amt2        ||']=적용보험료'     ||chr(13)||chr(10);

            /***********************************************************/
            /* 분납회차가 종납 회차보다 크면                           */
            /* 분납률에 따라 계산 되어진 보험료 Insert 시킴            */
            /***********************************************************/
            if  s_bunhal_nabib_cnt > i_end_nab_no  and  i_dmbo_cd not in ('21','22','23')  then
                /*자차이고 계산방법이 단기가 아니면(단기자차가 아니면)*/
                if i_dmbo_cd||s_0013_c_cancel_calc_gb <> '063' then
                    begin
                        insert into TBID0015T( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                                DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                                IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                                BASIS_FROM,               BASIS_TO,               USER_ID,                    WORK_DATE )
                                         select i_pol_no,                 i_endor_no,             s_bunhal_nabib_cnt,         0 ,
                                                i_dmbo_cd,                s_bunhal_nabib_amt1,    s_bunhal_nabib_amt2,        s_bunhal_nabib_from_date,
                                                s_bunhal_nabib_to_date,   i_endor_no_bef_max,     s_bunhal_nabib_from_date,   s_bunhal_nabib_to_date,
                                                s_bunhal_nabib_from_date, s_bunhal_nabib_to_date, i_user_id,                  to_date(i_work_date, 'YYYYMMDD')
                                           from DUAL;
                        exception when others then o_result := 'Error';
                                                       raise_application_error(-20001, '분납률에 따라 Insert[TBID0015T] Error[210]: '|| sqlerrm);
                    end;


                    s_basic_prem   := s_basic_prem  + s_bunhal_nabib_amt1;
                    s_appy_prem    := s_appy_prem   + s_bunhal_nabib_amt2;
                                              l_log_data := l_log_data || '2*'|| f_idx2 || '-07[' || s_appy_prem     ||']=회차누적 적용보험료'    ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*'|| f_idx2 || '-08[' || '분납률에 따라 Insert OK...6'  ||chr(13)||chr(10);
                end if;
            end if;

            /************************/
            /* Log 남기기         ***/
            /************************/
            --if    l_log_level = 1  then  /**Log 남기기 ****/
            /*      PR_INSERT_LOG(l_log_date,l_log_sp_name,l_log_no,'배서[분납]',i_dmbo_cd,l_log_data);*/
            /*end if;*/

            /*l_log_data := '';*/

        End Loop;

        /**********************************************************************/
        /**TBID0014 SUM  Return 해 준다                                       */
        /**********************************************************************/
        begin
              select nvl(sum(BASIC_PREM),0)
                   , nvl(sum(APPY_PREM) ,0)
                into V_RETURN_AMT1
                   , V_RETURN_AMT2
                from TBID0014T
               where POL_NO    = i_pol_no
                 and ENDOR_NO  = i_endor_no
                 and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                 and DMBO_CD   = i_dmbo_cd;

            exception when no_data_found then V_RETURN_AMT1 :=0;
                                              V_RETURN_AMT2 :=0;
                      when others        then o_result := 'Error';
                                              raise_application_error(-20001, 'TBID0014T Sum[TBID0015T] Error[220]: '|| sqlerrm);
        end;
                                              l_log_data := l_log_data || '2*20 [' || 'TBID0014T Sum[TBID0015T] OK...7' ||chr(13)||chr(10);

        /***********************************************************/
        /* 이전 배서의 종납회차 정보를 구분자로 Substring 함       */
        /***********************************************************/
        s_bunhal_bohum  := regexp_substr(f_bunhal_bohum,'[^,]+',1,i_end_nab_no);

        s_bunhal_nabib_cnt         := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,1));
        s_bunhal_nabib_from_date   := to_date  (regexp_substr(s_bunhal_bohum,'[^|]+',1,2));
        s_bunhal_nabib_to_date     := to_date  (regexp_substr(s_bunhal_bohum,'[^|]+',1,3));
        s_bunhal_nabib_amt1        := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,4));   /* 기준보험료 */
        s_bunhal_nabib_amt2        := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,5));   /* 적용보험료 */

                                              l_log_data := l_log_data || '2*21[' || s_bunhal_nabib_cnt        ||']=납입회차'       ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*22[' || s_bunhal_nabib_from_date  ||']=납입일자'       ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*23[' || s_bunhal_nabib_to_date    ||']=납입유효일자'   ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*24[' || s_bunhal_nabib_amt2       ||']=적용보험료'     ||chr(13)||chr(10);

                                              l_log_data := l_log_data || '2*25[' || V_RETURN_AMT2             ||']=①적용보험료'            ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*26[' || s_appy_prem               ||']=②회차누적적용보험료'    ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*27[' || V_BEF_15_DMBO_PREM        ||']=③이전배서납입보험료'    ||chr(13)||chr(10);

        /* 현재배서의[TBID0014] 의 SUM 보험료 - 종납회차이후의 분납보험료 -  종납회차 이전의 SUM 보험료*/
        s_basic_prem  := V_RETURN_AMT1  -  s_basic_prem - V_BEF_15_BASIC_PREM ;
        s_appy_prem   := V_RETURN_AMT2  -  s_appy_prem  - V_BEF_15_DMBO_PREM;
                                              l_log_data := l_log_data || '2*28[' || s_appy_prem               ||']=①-②-③'    ||chr(13)||chr(10);
        if  s_appy_prem <> 0 then
            begin
                insert into TBID0015T( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                        DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                        IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                        BASIS_FROM,               BASIS_TO,               USER_ID,                    WORK_DATE )
                                 select i_pol_no,                 i_endor_no,             s_bunhal_nabib_cnt,         i_bef_15_seq_no,
                                        i_dmbo_cd,                s_basic_prem,           s_appy_prem,                s_bunhal_nabib_from_date,
                                        s_bunhal_nabib_to_date,   i_endor_no_bef_max,     s_bunhal_nabib_from_date,   s_bunhal_nabib_to_date,
                                        s_bunhal_nabib_from_date, s_bunhal_nabib_to_date, i_user_id,                  to_date(i_work_date, 'YYYYMMDD')
                                   from DUAL;
                exception when others then o_result := 'Error';
                                           raise_application_error(-20001, '추징/환수 TBID0015T Insert [TBID0015T] Error[200]: '|| sqlerrm);
            end;
        end if;
                                              l_log_data := l_log_data || '2*29[' || '추징/환수 Insert [TBID0015T] OK..3'  ||chr(13)||chr(10);
   END IF;


   IF    o_result is null then
         o_result  := 'OK' || '|' || V_RETURN_AMT1 || '|' || V_RETURN_AMT2;
   END IF;

   l_log_data := l_log_data ||'3*01 [' || o_result    ||']=o_result'    ||chr(13)||chr(10);
   l_log_data := l_log_data ||'3*02 Good Bye......Endors'               ||chr(13)||chr(10);

   /************************/
   /* Log 남기기         ***/
   /************************/
   IF    l_log_level = 1 or nvl(regexp_substr(l_log_step,i_dmbo_cd),' ') = i_dmbo_cd then
         PR_INSERT_LOG(l_log_date,l_log_sp_name,l_log_no,'배서[분납]',i_dmbo_cd,l_log_data);
   END IF;
   l_log_data := '';


    exception when others then dbms_output.put_line('PR_RENT_C_ENDOR_BUNAP_RATE Main Error[999]: '||sqlerrm);
                               raise_application_error(-20001, 'PR_RENT_C_ENDOR_BUNAP_RATE Main Error[999]: '||sqlerrm);
END;
-- GENERATED BY QueryOne AT 2017-02-08 14:07:03
-- USING krma_app@10.100.10.54:8629(krmadb)

CREATE OR replace
PROCEDURE          KRMA_APP.PR_RENT_C_ENDOR_BUNAP_RATE_TRM (i_pol_no              in  varchar2
                                                     ,i_endor_no            in  number
                                                     ,i_endor_no_bef_max    in  number
                                                     ,i_dmbo_cd             in  varchar2
                                                     ,i_na_mth              in  varchar2
                                                     ,i_spcl_agre_gb        in  varchar2
                                                     ,i_dmbo_basic_prem     in  number
                                                     ,i_dmbo_appy_prem      in  number
                                                     ,i_bnp_cnt             in  number
                                                     ,i_istar_cont_date     in  date
                                                     ,i_seq_no              in  number
                                                     ,i_i_kind_cd           in  varchar2
                                                     ,i_iend_cont_date      in  date
                                                     ,i_basis_from          in  date
                                                     ,i_basis_to            in  date
                                                     ,i_user_id             in  tbid0014.user_id%type
                                                     ,i_end_nab_no          in  number
                                                     ,i_bef_15_seq_no       in  number
                                                     ,i_endor_cd            in  varchar2
                                                     ,i_all_cliam_date      in  date
                                                     ,i_day_endor_cnt       in  number
                                                     ,i_short_day_gb        in  varchar2
                                                     ,i_basic_year_prem     in  number
                                                     ,i_appy_year_prem      in  NUMBER
                                                     ,i_car_kind_cd         in  TBID0001.CAR_KIND_CD%TYPE
                                                     ,i_car_type_cd         in  TBID0001.CAR_TYPE_CD%TYPE
                                                     ,i_ient_carr_r         in  TBID0001.IENT_CARR_R%TYPE
                                                     ,i_dsc_tot_r           in  TBIB0001.SPCIAL_INC_R%TYPE
                                                     ,i_special_rate        in  NUMBER
                                                     ,i_treat_rate          in  NUMBER
                                                     ,i_fn_rent_mul_acci_rate     in  NUMBER
                                                     ,i_grpcont_dsc_r      in  TBIB0001.GRPCONT_DSC_R%TYPE
                                                     ,i_indgrp_gb      in TBID0001.INDGRP_GB%TYPE
                                                     ,i_dvdadd_rate    in  TBIB0205.DVDADD_RATE%TYPE
                                                     ,i_work_date           in  varchar2
                                                     ,o_result              out varchar2) as
/**************************************************************************************************************************/
/* Procedure Name :  PR_RENT_C_ENDOR_BUNAP_RATE_TRM                                                                      */
/* Function       :  소급배서 담보별, 기간별 분납 회차별 보험료 산정                                                      */
/* Parameter  i_pol_no             [ IN] 증권번호                                                                         */
/*            i_endor_no           [ IN] 배서번호                                                                         */
/*            i_endor_no_bef_max   [ IN] 이전배서번호(당일 배서가 2회 이상 발생시 처리 하기 위함                          */
/*            i_dmbo_cd            [ IN] 담보코드                                                                         */
/*            i_na_mth             [ IN] 납입방법-(1.일시납2.비연속분납3.연속분납(A0005)                                  */
/*            i_spcl_agre_gb       [ IN] '0'                                                                              */
/*            i_dmbo_basic_prem    [ IN] 담보 기본보험료                                                                  */
/*            i_dmbo_appy_prem     [ IN] 담보 적용보험료                                                                  */
/*            i_bnp_cnt            [ IN] 분납회수-1:일시납,2:2분납,3:3분납,4:4분납,5: 5분납,6:6분납,7:7분납,8:8분납(A0007)*/
/*            i_istar_cont_date    [ IN] 보험시기                                                                         */
/*            i_seq_no             [ IN] '0'                                                                              */
/*            i_i_kind_cd          [ IN] 보험종목                                                                         */
/*            i_iend_cont_date     [ IN] 보험종기                                                                         */
/*            i_basis_from         [ IN] 적용시작일                                                                       */
/*            i_basis_to           [ IN] 적용종료일                                                                       */
/*            i_user_id            [ IN] 사용자번호                                                                       */
/*            i_end_nab_no         [ IN] 최종납입회차                                                                     */
/*            i_bef_15_seq_no      [ IN] Max Seq                                                                          */
/*            i_endor_cd           [ IN] 배서코드                                                                         */
/*            i_all_cliam_date     [ IN] 차량대체일자                                                                     */
/*            i_day_endor_cnt      [ IN] 당일배서건수                                                                     */
/*            i_basic_year_prem    [ IN] 년간기본보험료                                                                   */
/*            i_appy_year_prem     [ IN] 년간적용보험료                                                                   */
/*            i_car_kind_cd        [ IN] 차종                                                                             */
/*            i_car_type_cd        [ IN] 차종세분                                                                         */
/*            o_result             [Out] sp 결과(보험료)                                                                  */
/*Description : TBID0013T 담보별 분담금 TABLE은 화면에서 생성시                                                            */
/*            - 이전배서(기준일 이전의 적용일자를 가진 배서)의 내용을 그대로 옮겨 놓는다                                  */
/*              (단 화면에서 바뀐 담보 내용으로 Update 함)                                                                */
/*            - 추가된 담보는 기준일을 적용시작일로 보험종기를 적용종료일로 세팅 한다.                                    */
/*            - 삭제된 담보는 이전배서의 적용시작일을 현배서의 적용시작일로 기준일을 적용종료일로 세팅한다.               */
/**************************************************************************************************************************/
V_0013_INFO                  varchar2(300);
s_0013_c_info                varchar2(150);
s_0013_c_endor_no            number;
s_0013_c_appy_from           date;
s_0013_c_appy_to             date;
s_0013_c_appy_prem           number;
s_0013_c_basic_prem          number;
s_0013_c_appy_year_prem      number;
s_0013_c_basic_year_prem     number;
s_0013_c_cancel_calc_gb      varchar2(3);


s_0013_b_info                varchar2(150);
s_0013_b_endor_no            number;
s_0013_b_appy_from           date;
s_0013_b_appy_to             date;
s_0013_b_appy_prem           number;
s_0013_b_basic_prem          number;
s_0013_b_appy_year_prem      number;
s_0013_b_basic_year_prem     number;
s_0013_b_cancel_calc_gb      varchar2(3);

s_0013_appy_prem             number;
s_0013_basic_prem            number;

V_BEF_15_BASIC_PREM          number;
V_BEF_15_DMBO_PREM           number;
V_RETURN_AMT1                number;
V_RETURN_AMT2                number;
V_APPY_PREM                  number;
V_BASIC_PREM                 number;
V_BASIC_PREM_BEF             number;
V_APPY_PREM_BEF              number;
V_MAX_SEQ_NO                 number;
V_ENDOR_CD                   varchar2(4);
V_ENDOR_GB                   varchar2(2);
V_ACCI_CHECK                 varchar2(1);
V_SUM_APPY_PREM              number;
V_SUM_DMBO_PREM              number;
V_ALL_CLAIM                  varchar2(1);
V_DMBO_END_DATE              date;
V_BASIS_TO_DATE              date;
V_DANGI_APPY_FROM            date;
V_DANGI_APPY_PREM            number;
V_DANGI_BASIC_PREM           number;
V_DAMBO_START_DT             date;/*LJM 20150923 추가*/
V_DAMBO_START_DT_TEMP        date;/*LJM 20151218 추가*/
V_DAMBO_START_DT_CHAR        varchar2(20);/*LJM 20151218 추가*/
V_DAMBO_START_DT_CACEL       varchar2(20);/*LJM 20151218 추가*/
V_ENDRO_TOTAL_CNT            number;/*LJM 20151218 추가*/
V_ENDRO_CURR_CNT             number  := 1;/*LJM 20151218 추가*/
V_ENDRO_NO_MINUS             number;/*LJM 20151218 추가*/
V_DATA_INFO             varchar2(3000);/*LJM 20151218 추가*/

s_appy_prem                  number:=0;
s_basic_prem                 number:=0;
s_appy_prem1                 number:=0;
s_basic_prem1                number:=0;

f_fn_rent_short_rate         number;

f_bunhal_bohum               varchar2(4000);
f_idx1                       number;
f_idx2                       number;

s_bunhal_bohum               varchar2(200);
s_bunhal_nabib_cnt           number;
s_bunhal_nabib_from_date     date;
s_bunhal_nabib_to_date       date;
s_bunhal_nabib_amt1          number;
s_bunhal_nabib_amt2          number;
s_bunhal_amt1                number;
s_bunhal_amt2                number;

s_0013_c_appy_from_appy_prem                  number:=0;
s_0013_c_appy_from_basic_prem                 number:=0;
s_basis_from_appy_prem                        number:=0;
s_basis_from_basic_prem                       number:=0;
s_0013_c_appy_to_appy_prem                    number:=0;
s_0013_c_appy_to_basic_prem                   number:=0;
s_basis_from_b_appy_prem                      number:=0;
s_basis_from_b_basic_prem                     number:=0;
s_all_cliam_date_b_appy_prem                  number:=0;
s_all_cliam_date_b_basic_prem                 number:=0;

r_return                            varchar2(100);
r_return_ok                         varchar2(50);

/******************/
/*** lOG 변수 *****/
/******************/
l_log_level                  number        := 1;                                  /* 로그레벨[0~1]: 0->l_log_step에 정의된 항목과 찍는다..  1->모두찍는다.)*/
l_log_sp_name                varchar2(50)  := 'PR_RENT_C_AMT[ENDOR_BUNAP_RATE_PLAN]' ;        /* 로그 Stored Procedure Name*/
l_log_data                   varchar2(4000);
l_log_date                   varchar2(16)  := to_char(sysdate,'yyyymmddhh24miss');
l_log_step                   varchar2(100) :='';   /* 담보코드: '01 02 03 13 04 05 06 07 21 22 23 99'*/
l_log_no                     varchar2(20)  := i_pol_no ||'-'|| i_endor_no;

BEGIN
    o_result :=null ;
    l_log_data := l_log_data || '*00[' || i_pol_no           ||']=증권번호'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_endor_no         ||']=배서번호'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_endor_no_bef_max ||']=이전배서번호(Max)'   ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_dmbo_cd          ||']=담보코드'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_na_mth           ||']=납입방법'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_spcl_agre_gb     ||']=i_spcl_agre_gb'      ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_dmbo_basic_prem  ||']=기본보험료'          ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_dmbo_appy_prem   ||']=적용보험료'          ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_bnp_cnt          ||']=분납회수'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_istar_cont_date  ||']=보험시기'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_seq_no           ||']=분납Seq'             ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_i_kind_cd        ||']=보험종목'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_iend_cont_date   ||']=보험종기'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_basis_from       ||']=기준일'              ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_basis_to         ||']=적용종료일'          ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_user_id          ||']=User Id'             ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_end_nab_no       ||']=최종납입회차'        ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_bef_15_seq_no    ||']=분납Max Seq'         ||chr(13)||chr(10);

    /***********************************************************************/
    /*                                                                     */
    /* TBID0013 TABLE Insert 및 Update                                     */
    /*                                                                     */
    /***********************************************************************/

    /*배서구분: 배서코드 첫자리*/
    V_ENDOR_GB := substr(i_endor_cd, 1, 1);


    /**담보 가입시기 구하기**/
    /**ljm 20150923 추가  **/
    /* 해지시작일자 구하기*/
    BEGIN
        SELECT
            nvl(to_char(MAX(DMBO_START_DATE),'yy/mm/dd'),'0000')
            into V_DAMBO_START_DT_CACEL
        FROM TBID0013
        where POL_NO    =  i_pol_no
        and   DMBO_CD   =  i_dmbo_cd
        and ENDOR_NO  =  i_endor_no
        and   CANCEL_CALC_GB = '2'
        ;
        exception when others then raise_application_error(-20001, '담보 해지시작일자  Select [TBID0013] Error[00]: '|| sqlerrm);
    end;

   /* 담보추가시작일자 구하기*/


   if V_DAMBO_START_DT_CACEL = '0000' then
        BEGIN
            SELECT
                MIN(DMBO_START_DATE)
                into V_DAMBO_START_DT
            FROM TBID0013
            where POL_NO    =  i_pol_no
            and   DMBO_CD   =  i_dmbo_cd
            ;
            exception when others then raise_application_error(-20001, '담보 가입시작일자  Select [TBID0013] Error[00]: '|| sqlerrm);
        end;
    else
        BEGIN
            SELECT
                MAX(DMBO_START_DATE)
                into V_DAMBO_START_DT
            FROM TBID0013
            where POL_NO    =  i_pol_no
            and   DMBO_CD   =  i_dmbo_cd
            and ENDOR_NO  =  i_endor_no
            and   CANCEL_CALC_GB = '2'
            ;
            exception when others then raise_application_error(-20001, '담보 추가 가입일자  Select [TBID0013] Error[00]: '|| sqlerrm);
        end;


        BEGIN
            SELECT
                COUNT(*)
                INTO V_ENDRO_TOTAL_CNT
            FROM TBID0013
            where POL_NO    =  i_pol_no
            and   DMBO_CD   =  i_dmbo_cd
            and ENDOR_NO  =  i_endor_no -1
            ;
            exception when others then raise_application_error(-20001, '담보 추가 가입일자  Select [TBID0013] Error[00]: '|| sqlerrm);
        end;

        LOOP
            BEGIN
                SELECT
                    WM_CONCAT(DMBO_START_DATE || '|' || DMBO_END_DATE  || '|' || CANCEL_CALC_GB)
                    INTO V_DATA_INFO
                FROM TBID0013
                where POL_NO    =  i_pol_no
                and   DMBO_CD   =  i_dmbo_cd
                and ENDOR_NO  =  i_endor_no
                ;
                exception when others then raise_application_error(-20001, '담보 추가 가입일자  Select [TBID0013] Error[00]: '|| sqlerrm);
             END;

             BEGIN
                SELECT DMBO_START_DATE
                       INTO V_DAMBO_START_DT_TEMP
                FROM TBID0013
                WHERE POL_NO    =  i_pol_no
                and   DMBO_CD   =  i_dmbo_cd
                and ENDOR_NO    =  i_endor_no -1
                AND DMBO_END_DATE = V_DAMBO_START_DT;
                exception when NO_DATA_FOUND THEN V_DAMBO_START_DT_TEMP := NULL;
                WHEN others then raise_application_error(-20001, '담보 추가 해지일자  Select [TBID0013] Error[00]: ' || 'DATA INFO' || V_DATA_INFO  || '        '  || TO_CHAR(V_DAMBO_START_DT,'YYYYMMDDHH24MISS' ) || '         ' || sqlerrm);
             END;

             IF V_DAMBO_START_DT_TEMP IS NOT NULL THEN
                V_DAMBO_START_DT := V_DAMBO_START_DT_TEMP;
             END IF;
             V_ENDRO_CURR_CNT := V_ENDRO_CURR_CNT +1;


             EXIT WHEN V_DAMBO_START_DT_TEMP IS NULL OR V_ENDRO_CURR_CNT > V_ENDRO_TOTAL_CNT;


        END LOOP;




    end if;

    V_DAMBO_START_DT := to_char(V_DAMBO_START_DT,'yy/mm/dd');


    /*********************************************************/
    /* 해당담보 사고여부 확인 (Y:사고, N:사고아님)           */
    /* 진행중인 건수가 있으면 무조건 사고                    */
    /* 진행중인 건수가 없고 공제금 지급이 0보다 크면 사고    */
    /*********************************************************/
    if i_dmbo_cd  not in ('21','22','23') then
        begin
            select case when sum(decode(STAT, '3', 1, 0)) > 0                                                                              then 'Y'
                        when sum(decode(STAT, '3', 1, 0)) = 0 and sum(DC_AMT) > 0 and i_dmbo_cd <> '02'                                    then 'Y'
                        when sum(decode(STAT, '3', 1, 0)) = 0 and sum(DC_AMT) > 0 and sum(DC_AMT) <> sum(COM_DC_AMT) and i_dmbo_cd = '02'  then 'Y'
                        else 'N' end
              into V_ACCI_CHECK
              from ( select CA02.POL_NO
                          , CF01.ACCIDENT_NO
                          , CF01.HND_COVER
                          , nvl(( select sum(DC_AMT)
                                    from TBCE0001
                                   where ACCIDENT_NO = CF01.ACCIDENT_NO
                                     and HND_COVER   = CF01.HND_COVER
                                     and DMGE_NO     = CF01.DMGE_NO
                                     and DECIDE_DATE is not null ),0 ) DC_AMT
                          , nvl(( select sum(COM_DC_AMT)
                                    from TBCE0001
                                   where ACCIDENT_NO = CF01.ACCIDENT_NO
                                     and HND_COVER   = CF01.HND_COVER
                                     and DMGE_NO     = CF01.DMGE_NO
                                     and DECIDE_DATE is not null ),0 ) COM_DC_AMT
                          , case when CF01.DECIDE_DATE is not null then '1'
                                 when CF01.DC_END_DATE is not null then '2'
                                 else '3' end STAT
                       from TBCA0002 CA02
                          , TBCF0001 CF01
                      where CA02.ACCIDENT_NO = CF01.ACCIDENT_NO
                        and CA02.POL_NO      = i_pol_no
                        and CF01.LAST='Y'
                        and (CF01.HND_COVER = decode(i_dmbo_cd, '01', '21', '02', '21', '03', '33', '04', '44','08','45', '05', '55', '06', '66', '13', '33')
                            or CF01.HND_COVER = decode(i_dmbo_cd, '01', '11', '02', '11', '03', '33', '04', '44','08','45', '05', '55', '06', '66', '13', '33'))
                        );
            exception when no_data_found then
                V_ACCI_CHECK := 'N';
        end;
    else
        if i_dmbo_cd = '21' then
            begin
                select decode(nvl(count(*), 0), 0, 'N', 'Y')
                  into V_ACCI_CHECK
                  from TBCH0001
                 where H_GBN='ME400'
                   and POL_NO    = i_pol_no
                   and DELETE_YN = 'N'
                   and LAST='Y'
                   and ACT_SVC_CODE NOT IN ('51','53','54','55');
                exception when no_data_found then
                    V_ACCI_CHECK := 'N';
            end;
        else
            V_ACCI_CHECK := 'N';
        end if;
    end if;
                                                    l_log_data := l_log_data || '1*00[' || V_ACCI_CHECK           ||']=사고여부 확인정보'  ||chr(13)||chr(10);

    /*********************************************************/
    /* 전손처리 됐는지 확인(Y:전손처리, N:전손처리아님)      */
    /* CD01.DMGE_DEGREE 가 '1' 이 아닌경우는 전손처리함      */
    /* CD01.DMGE_DEGREE                                      */
    /* 1    피해구분    대물    분손                         */
    /* 2    피해구분    대물    추정전손                     */
    /* 3    피해구분    대물    절대전손                     */
    /* 4    피해구분    대물    전손(폐차)                   */
    /* 5    피해구분    대물    전손(재활용)                 */
    /* 6    피해구분    대물    도난                         */
    /*********************************************************/
    if i_dmbo_cd = '06' then
        if V_ACCI_CHECK = 'Y' then
            begin
                select decode(count(CD01.DMGE_DEGREE), 0, 'N', 'Y')    /*TEST 시 decode(count(NVL(CD01.DMGE_DEGREE, 'X')), 0, 'N', 'Y')*/
                  into V_ALL_CLAIM
                  from TBCA0002 CA02
                     , TBCD0001 CD01
                 where CA02.ACCIDENT_NO = CD01.ACCIDENT_NO
                   and CD01.LAST        = 'Y'
                   and CD01.HND_COVER   = '66'
                   and CA02.POL_NO      = i_pol_no
                   and CD01.DMGE_DEGREE IS NOT NULL                    /*TEST 시 주석처리*/
                   and CD01.DMGE_DEGREE <> '1';                        /*TEST 시 NVL(CD01.DMGE_DEGREE , 'X')<> '1'*/
                exception when others then
                    V_ACCI_CHECK := 'N';
            end;
        else
            V_ALL_CLAIM := 'N';
        end if;
    else
        V_ALL_CLAIM := 'N';
    end if;
                                                    l_log_data := l_log_data || '1*000[' || V_ALL_CLAIM           ||']=전손처리 확인정보'  ||chr(13)||chr(10);

    /*********************************************************/
    /* 현재 배서,기준일 이전 배서(TBID0013) 정보 Select      */
    /* 같은날 배서서 2번 이상 일어날 경우는 이전배서가 아니라*/
    /* 기준일 이전의 배서중 가장 큰 배서 번호정보 Select     */
    /*********************************************************/
    begin
        select WM_CONCAT(ENDOR_NO ||'|'|| APPY_FROM ||'|'|| APPY_TO ||'|'||  APPY_PREM ||'|'||  BASIC_PREM ||'|'|| APPY_YEAR_PREM ||'|'|| BASIC_YEAR_PREM ||'|'|| CANCEL_CALC_GB)
          into V_0013_INFO
          from (select ENDOR_NO                   /*배서번호*/
                     , APPY_FROM                  /*적용시작일*/
                     , APPY_TO                    /*적용종료일*/
                     , APPY_PREM                  /*적용보험료*/
                     , BASIC_PREM                 /*기본보험료*/
                     , APPY_YEAR_PREM             /*적용연간보험료*/
                     , BASIC_YEAR_PREM            /*기본연간보험료*/
                     , CANCEL_CALC_GB             /*일할/단기구분*/
                  from TBID0013T
                 where POL_NO     = i_pol_no
                   and ENDOR_NO   = i_endor_no_bef_max
                   and WORK_DATE  = to_date(i_work_date, 'YYYYMMDD')
                   and DMBO_CD    = i_dmbo_cd
                   and APPY_FROM <= case when i_endor_cd = '111' or i_endor_cd = '211' then APPY_FROM
                                         else to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS') end
                   and APPY_TO   >= case when i_endor_cd = '111' or i_endor_cd = '211' then APPY_FROM
                                         else to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS') end
                   /*and APPY_TO >= to_date(to_char(i_iend_cont_date, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')*/
                   /*and APPY_TO <= to_date(to_char(i_iend_cont_date, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')*/
                union all
                select ENDOR_NO                   /*배서번호*/
                     , APPY_FROM                  /*적용시작일*/
                     , APPY_TO                    /*적용종료일*/
                     , APPY_PREM                  /*적용보험료*/
                     , BASIC_PREM                 /*기본보험료*/
                     , APPY_YEAR_PREM             /*적용연간보험료*/
                     , BASIC_YEAR_PREM            /*기본연간보험료*/
                     , CANCEL_CALC_GB             /*일할/단기구분*/
                  from TBID0013T
                 where POL_NO    =  i_pol_no
                   and ENDOR_NO  =  i_endor_no
                   and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                   and DMBO_CD   =  i_dmbo_cd
                 order by ENDOR_NO
               );

        exception when others then raise_application_error(-20001, '현재,이전 배서 Select [TBID0013] Error[00]: '|| sqlerrm);
    end;
                                                    l_log_data := l_log_data || '1*01['|| '현재,이전 배서 Select [TBID0013]  OK...0' ||chr(13)||chr(10);

    s_0013_b_info   := regexp_substr(V_0013_INFO,'[^,]+',1,1);
    if  i_endor_no_bef_max = to_number(regexp_substr(s_0013_b_info,'[^|]+',1,1)) then
        s_0013_b_appy_from       := to_date  (regexp_substr(s_0013_b_info,'[^|]+',1,2));     /* 이전배서 TBID0013 시작일자*/
        s_0013_b_appy_to         := to_date  (regexp_substr(s_0013_b_info,'[^|]+',1,3));     /* 이전배서 TBID0013 종료일자*/
        s_0013_b_appy_prem       := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,4));     /* 이전배서 TBID0013 적용보험료*/
        s_0013_b_basic_prem      := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,5));     /* 이전배서 TBID0013 기본보험료*/
        s_0013_b_appy_year_prem  := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,6));     /* 이전배서 TBID0013 적용연간보험료*/
        s_0013_b_basic_year_prem := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,7));     /* 이전배서 TBID0013 기본연간보험료*/
        s_0013_b_cancel_calc_gb  := regexp_substr(s_0013_b_info,'[^|]+',1,8);                /* 이전배서 TBID0013 일할/단기 구분*/

        s_0013_c_info            := regexp_substr(V_0013_INFO,'[^,]+',1,2);
        s_0013_c_appy_from       := to_date  (regexp_substr(s_0013_c_info,'[^|]+',1,2));     /* 현재 TBID0013 시작일자*/
        s_0013_c_appy_to         := to_date  (regexp_substr(s_0013_c_info,'[^|]+',1,3));     /* 현재 TBID0013 종료일자*/
        s_0013_c_appy_prem       := to_number(regexp_substr(s_0013_c_info,'[^|]+',1,4));     /* 현재 TBID0013 적용보험료*/
        s_0013_c_basic_prem      := to_number(regexp_substr(s_0013_c_info,'[^|]+',1,5));     /* 현재 TBID0013 기본보험료*/
        s_0013_c_appy_year_prem  := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,6));     /* 현재 TBID0013 적용연간보험료*/
        s_0013_c_basic_year_prem := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,7));     /* 현재 TBID0013 기본연간보험료*/
        s_0013_c_cancel_calc_gb  := regexp_substr(s_0013_c_info,'[^|]+',1,8);                /* 현재 TBID0013 일할/단기 구분*/
    else
        s_0013_c_info            := regexp_substr(V_0013_INFO,'[^,]+',1,1);
        s_0013_c_appy_from       := to_date  (regexp_substr(s_0013_c_info,'[^|]+',1,2));     /* 현재 TBID0013 시작일자*/
        s_0013_c_appy_to         := to_date  (regexp_substr(s_0013_c_info,'[^|]+',1,3));     /* 현재 TBID0013 종료일자*/
        s_0013_c_appy_prem       := to_number(regexp_substr(s_0013_c_info,'[^|]+',1,4));     /* 현재 TBID0013 적용보험료*/
        s_0013_c_basic_prem      := to_number(regexp_substr(s_0013_c_info,'[^|]+',1,5));     /* 현재 TBID0013 기본보험료*/
        s_0013_c_appy_year_prem  := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,6));     /* 현재 TBID0013 적용보험료*/
        s_0013_c_basic_year_prem := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,7));     /* 현재 TBID0013 기본연간보험료*/
        s_0013_c_cancel_calc_gb  := regexp_substr(s_0013_c_info,'[^|]+',1,8);                /* 현재 TBID0013 일할/단기 구분*/
    end if;

                                                    l_log_data := l_log_data || '1*02[' || s_0013_c_info           ||']=현재배서TBID0013정보'  ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*03[' || s_0013_c_appy_from      ||']=현재배서 적용시작일'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*04[' || s_0013_c_appy_to        ||']=현재배서 적용종료일'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*05[' || s_0013_c_appy_prem      ||']=현재배서 적용보험료'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*06[' || s_0013_c_basic_prem     ||']=현재배서 기본보험료'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*07[' || s_0013_c_cancel_calc_gb ||']=현재배서 일할단기구분' ||chr(13)||chr(10);

                                                    l_log_data := l_log_data || '1*08[' || s_0013_b_info           ||']=이전배서TBID0013정보'  ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*09[' || s_0013_b_appy_from      ||']=이전배서 적용시작일'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*10[' || s_0013_b_appy_to        ||']=이전배서 적용종료일'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*11[' || s_0013_b_appy_prem      ||']=이전배서 적용보험료'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*12[' || s_0013_b_basic_prem     ||']=이전배서 기본보험료'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*13[' || s_0013_b_cancel_calc_gb ||']=이전배서 일할단기구분' ||chr(13)||chr(10);

    /*최초 일할 계산용 분담금 가져오기 ljm 20151005 s_0013_c_appy_from ==> i_istar_cont_date*/
    if '20160331' BETWEEN TO_CHAR(i_istar_cont_date,'YYYYMMDD') AND TO_CHAR(i_iend_cont_date,'YYYYMMDD') then
                 l_log_data := l_log_data || '1*14 일할용 계산용 분담금 가져오기 들어옴' ||chr(13)||chr(10);
        PR_RENT_C_ENDOR_BUNAP_AMT(i_pol_no              ,i_endor_no            ,i_dmbo_cd                ,i_dmbo_basic_prem        ,i_dmbo_appy_prem
                                    ,i_istar_cont_date     ,i_i_kind_cd           ,i_iend_cont_date         ,s_0013_c_appy_from       ,i_iend_cont_date
                                    ,i_user_id             ,i_car_kind_cd         ,i_car_type_cd            ,i_ient_carr_r            ,i_dsc_tot_r
                                    ,i_special_rate        ,i_treat_rate          ,i_fn_rent_mul_acci_rate  ,i_grpcont_dsc_r          ,i_indgrp_gb
                                    ,i_dvdadd_rate         ,'(2)'                 ,i_work_date              ,i_endor_cd               ,i_endor_no_bef_max ,r_return
                                     );

         r_return_ok       := regexp_substr(r_return,'[^|]+',1,1);
         if    r_return_ok = 'OK' then
                s_0013_c_appy_from_appy_prem := to_number(regexp_substr(r_return,'[^|]+',1,2));
                s_0013_c_appy_from_basic_prem  := to_number(regexp_substr(r_return,'[^|]+',1,3));
         end if;
          l_log_data := l_log_data || '1*14(2)[' || r_return_ok        ||']=구간 일할용 r_return_ok' ||chr(13)||chr(10);
         l_log_data := l_log_data || '1*14(2)[' || s_0013_c_appy_from_appy_prem        ||']=구간 일할용 s_0013_c_appy_from_appy_prem' ||chr(13)||chr(10);
         l_log_data := l_log_data || '1*14(2)[' || s_0013_c_appy_from_basic_prem        ||']=구간 일할용 s_0013_c_appy_from_basic_prem' ||chr(13)||chr(10);

         r_return         := '';
         r_return_ok      := '';

         PR_RENT_C_ENDOR_BUNAP_AMT(i_pol_no              ,i_endor_no            ,i_dmbo_cd                ,i_dmbo_basic_prem        ,i_dmbo_appy_prem
                                    ,i_istar_cont_date     ,i_i_kind_cd           ,i_iend_cont_date         ,i_basis_from             ,i_iend_cont_date
                                    ,i_user_id             ,i_car_kind_cd         ,i_car_type_cd            ,i_ient_carr_r            ,i_dsc_tot_r
                                    ,i_special_rate        ,i_treat_rate          ,i_fn_rent_mul_acci_rate  ,i_grpcont_dsc_r          ,i_indgrp_gb
                                    ,i_dvdadd_rate         ,'(3)'                 ,i_work_date              ,i_endor_cd               ,i_endor_no_bef_max ,r_return
                                     );

         r_return_ok       := regexp_substr(r_return,'[^|]+',1,1);
         if    r_return_ok = 'OK' then
                s_basis_from_appy_prem := to_number(regexp_substr(r_return,'[^|]+',1,2));
                s_basis_from_basic_prem  := to_number(regexp_substr(r_return,'[^|]+',1,3));
         end if;
         l_log_data := l_log_data || '1*14(3)[' || s_basis_from_appy_prem        ||']=구간 일할용 s_basis_from_appy_prem' ||chr(13)||chr(10);
         l_log_data := l_log_data || '1*14(3)[' || s_basis_from_basic_prem        ||']=구간 일할용 s_basis_from_basic_prem' ||chr(13)||chr(10);

         r_return         := '';
         r_return_ok      := '';

         PR_RENT_C_ENDOR_BUNAP_AMT(i_pol_no              ,i_endor_no            ,i_dmbo_cd                ,i_dmbo_basic_prem        ,i_dmbo_appy_prem
                                    ,i_istar_cont_date     ,i_i_kind_cd           ,i_iend_cont_date         ,s_0013_c_appy_from       ,s_0013_c_appy_to
                                    ,i_user_id             ,i_car_kind_cd         ,i_car_type_cd            ,i_ient_carr_r            ,i_dsc_tot_r
                                    ,i_special_rate        ,i_treat_rate          ,i_fn_rent_mul_acci_rate  ,i_grpcont_dsc_r          ,i_indgrp_gb
                                    ,i_dvdadd_rate         ,'(4)'                 ,i_work_date              ,i_endor_cd               ,i_endor_no_bef_max ,r_return
                                     );

         r_return_ok       := regexp_substr(r_return,'[^|]+',1,1);
         if    r_return_ok = 'OK' then
                s_0013_c_appy_to_appy_prem := to_number(regexp_substr(r_return,'[^|]+',1,2));
                s_0013_c_appy_to_basic_prem  := to_number(regexp_substr(r_return,'[^|]+',1,3));
         end if;
         l_log_data := l_log_data || '1*14(4)[' || s_0013_c_appy_to_appy_prem        ||']=구간 일할용 s_0013_c_appy_to_appy_prem' ||chr(13)||chr(10);
         l_log_data := l_log_data || '1*14(4)[' || s_0013_c_appy_to_basic_prem        ||']=구간 일할용 s_0013_c_appy_to_basic_prem' ||chr(13)||chr(10);

         r_return         := '';
         r_return_ok      := '';

         PR_RENT_C_ENDOR_BUNAP_AMT(i_pol_no              ,i_endor_no   ,i_dmbo_cd                ,i_dmbo_basic_prem        ,i_dmbo_appy_prem
                                    ,s_0013_b_appy_from    ,i_i_kind_cd           ,s_0013_b_appy_to         ,s_0013_b_appy_from       ,i_basis_from
                                    ,i_user_id             ,i_car_kind_cd         ,i_car_type_cd            ,i_ient_carr_r            ,i_dsc_tot_r
                                    ,i_special_rate        ,i_treat_rate          ,i_fn_rent_mul_acci_rate  ,i_grpcont_dsc_r          ,i_indgrp_gb
                                    ,i_dvdadd_rate         ,'(5)'                 ,i_work_date              ,i_endor_cd               ,i_endor_no_bef_max ,r_return
                                     );

         r_return_ok       := regexp_substr(r_return,'[^|]+',1,1);
         if    r_return_ok = 'OK' then
                s_basis_from_b_appy_prem := to_number(regexp_substr(r_return,'[^|]+',1,2));
                s_basis_from_b_basic_prem  := to_number(regexp_substr(r_return,'[^|]+',1,3));
         end if;
         l_log_data := l_log_data || '1*14(5)[' || s_basis_from_b_appy_prem        ||']=구간 일할용 s_basis_from_b_appy_prem' ||chr(13)||chr(10);
         l_log_data := l_log_data || '1*14(5)[' || s_basis_from_b_basic_prem        ||']=구간 일할용 s_basis_from_b_basic_prem' ||chr(13)||chr(10);

         r_return         := '';
         r_return_ok      := '';

         if V_ENDOR_GB = '6' then
             PR_RENT_C_ENDOR_BUNAP_AMT(i_pol_no              ,i_endor_no   ,i_dmbo_cd                ,i_dmbo_basic_prem        ,i_dmbo_appy_prem
                                        ,s_0013_b_appy_from    ,i_i_kind_cd           ,s_0013_b_appy_to         ,s_0013_b_appy_from       ,i_all_cliam_date
                                        ,i_user_id             ,i_car_kind_cd         ,i_car_type_cd            ,i_ient_carr_r            ,i_dsc_tot_r
                                        ,i_special_rate        ,i_treat_rate          ,i_fn_rent_mul_acci_rate  ,i_grpcont_dsc_r          ,i_indgrp_gb
                                        ,i_dvdadd_rate         ,'(6)'                 ,i_work_date              ,i_endor_cd               ,i_endor_no_bef_max ,r_return
                                         );

             r_return_ok       := regexp_substr(r_return,'[^|]+',1,1);
             if    r_return_ok = 'OK' then
                    s_all_cliam_date_b_appy_prem := to_number(regexp_substr(r_return,'[^|]+',1,2));
                    s_all_cliam_date_b_basic_prem  := to_number(regexp_substr(r_return,'[^|]+',1,3));
             end if;
             l_log_data := l_log_data || '1*14(6)[' || s_all_cliam_date_b_appy_prem        ||']=구간 일할용 s_all_cliam_date_b_appy_prem' ||chr(13)||chr(10);
             l_log_data := l_log_data || '1*14(6)[' || s_all_cliam_date_b_basic_prem        ||']=구간 일할용 s_all_cliam_date_b_basic_prem' ||chr(13)||chr(10);

             r_return         := '';
             r_return_ok      := '';

        END IF;

         END IF;

    /*일할 계약 계산*/
    if  i_short_day_gb = '1' then
        /*단기자차의 경우 단기요율로 계산해야한다. 20130514_최재혁*/
        if s_0013_c_cancel_calc_gb <> '1' then
            /* 단기요율 계산 = 적용종료일 - 적용시작일 */
            f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_c_appy_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
            f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

            /* 보험료 단기 계산 = 년간 총 적용보험료 * 단기적용율   */
            s_0013_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);
            s_0013_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);
                           l_log_data := l_log_data || '1*14(2)[' || f_fn_rent_short_rate        ||']=f_fn_rent_short_rate 배서일기준(단기) 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*14(2)[' || s_0013_appy_prem        ||']=배서일기준(단기) 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*15(2)[' || s_0013_basic_prem       ||']=배서일기준(단기) 기본보험료' ||chr(13)||chr(10);

        else
            /* 년간 총 적용보험료 * (보험종기 - 현재배서 적용시작일) / (보험종기 - 보험시기) --> 보험적용일 부터 보험 종기 까지 보험료 산출 */
            s_0013_appy_prem  := s_0013_c_appy_from_appy_prem;/*round(i_dmbo_appy_prem  * ((i_iend_cont_date - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1);*/
            s_0013_basic_prem := s_0013_c_appy_from_basic_prem;/*round(i_dmbo_basic_prem * ((i_iend_cont_date - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1);*/

                                                    l_log_data := l_log_data || '1*14[' || s_0013_appy_prem        ||']=배서일기준 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*15[' || s_0013_basic_prem       ||']=배서일기준 기본보험료' ||chr(13)||chr(10);

        end if;
    /*단기 계약 계산*/
    else
        /* 단기요율 계산 = 보험종기 - 보험시기 */
        /* i_istar_cont_date == >  V_DAMBO_START_DT     i_iend_cont_date  == > s_0013_c_appy_to 변경*/
        /*f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,i_istar_cont_date  ,i_iend_cont_date  ,i_istar_cont_date  ,i_iend_cont_date);*/
        f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,V_DAMBO_START_DT  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
        f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

        /* 보험료 단기 계산 = 년간 총 적용보험료 * 단기적용율   */
        s_0013_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);
        s_0013_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);
        s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);
        s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);

                                                    l_log_data := l_log_data || '1*14(2)[' || s_0013_appy_prem        ||']=배서일기준(단기계약) 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*15(2)[' || s_0013_basic_prem       ||']=배서일기준(단기계약) 기본보험료' ||chr(13)||chr(10);
    end if;

    /********************************************/
    /** 기준일 이전 Data[TBID0013] Insert       */
    /* 2017.02.08 담보별 단체특성율 추가 */
    /********************************************/
    begin
        insert into TBID0013T(POL_NO,               ENDOR_NO,                   BASIC_SCONT_GB,      DMBO_CD,
                             APPY_FROM,            ACDNT_RESP_WANT,            MAN_RESP_WANT,       INSUR_AMT,
                             INSUR_AMT_GB,         DUCT_AMT_GB,                BASIC_PREM,          DMBO_START_DATE,
                             DMBO_END_DATE,        APPY_PREM,                  BASIC_RANGE_R,       CANCEL_CALC_GB,
                             APPY_TO,              BASIS_FROM,                 BASIS_TO,
                             USER_ID,              BASIC_YEAR_PREM,            APPY_YEAR_PREM,      WORK_DATE, GRP_DMBO_RATE
                               )
                      select POL_NO,               i_endor_no,                 BASIC_SCONT_GB,      DMBO_CD,
                             APPY_FROM,            ACDNT_RESP_WANT,            MAN_RESP_WANT,       INSUR_AMT,
                             INSUR_AMT_GB,         DUCT_AMT_GB,                BASIC_PREM,          DMBO_START_DATE,
                             DMBO_END_DATE,        APPY_PREM,                  BASIC_RANGE_R,       CANCEL_CALC_GB,
                             APPY_TO,              BASIS_FROM,                 BASIS_TO,
                             USER_ID,              BASIC_YEAR_PREM,            APPY_YEAR_PREM,      to_date(i_work_date, 'YYYYMMDD') , GRP_DMBO_RATE
                        from TBID0013T
                       where POL_NO    = i_pol_no
                         and ENDOR_NO  = i_endor_no_bef_max
                         and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                         and DMBO_CD   = i_dmbo_cd
                         and APPY_TO   < to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS');   /*20130422 TO_DATE 처리 최재혁*/
        exception when others then o_result := null;
    end;
                                                    l_log_data := l_log_data || '1*16[' || '기준일 이전 정보 Insert[TBID0013T] OK...1'  ||chr(13)||chr(10);

    /************************/
    /* Log 남기기         ***/
    /************************/
  /*  if    l_log_level = 1 or nvl(regexp_substr(l_log_step,i_dmbo_cd),' ') = i_dmbo_cd then*/
  /*        PR_INSERT_LOG(l_log_date,l_log_sp_name,l_log_no,'배서[분납]_1',i_dmbo_cd,l_log_data);*/
  /*  end if;*/
  /*  l_log_data := '';*/

    /***************************************************/
    /** 담보해지:현재배서 적용종료일이 기준일과 같으면**/
    /***************************************************/
    IF  i_basis_from = s_0013_c_appy_to then
                                                    l_log_data := l_log_data || '1*17[**** 담보 해지_TBID0013T ********]' ||chr(13)||chr(10);
        /* 사고여부 처리*/
        /* 사고 아닌경우*/
        if  V_ACCI_CHECK = 'N' then
            /*일할 계약건*/
            if i_short_day_gb = '1' then
                /* 단기, 단기자차 계산 ( 2: 단기, 3:단기자차) */
                if  s_0013_c_cancel_calc_gb <> '1' AND i_dmbo_cd <> '13' then
                    /*단기자차는 해지시 환급금 없다*/
                    /*단기 계산*/
                    if s_0013_c_cancel_calc_gb = '2' then
                        /*공백기간 환급이 아니면 */
                        if V_ENDOR_GB <> '6' THEN
                            /* 단기요율 계산 = 적용종료일 - 적용시작일 */
                            f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_c_appy_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                            f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                            /* 보험료 단기 계산 = 년간 총 적용보험료 * 단기적용율   */
                            s_appy_prem   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate,-1);
                            s_basic_prem  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate,-1);
                            l_log_data := l_log_data || '1*19(1)[' || f_fn_rent_short_rate        ||']=f_fn_rent_short_rate배서일기준(단기) 적용보험료' ||chr(13)||chr(10);
                                                                    l_log_data := l_log_data || '1*19(1)[' || s_appy_prem        ||']=담보해지(단기) 적용보험료' ||chr(13)||chr(10);
                                                                    l_log_data := l_log_data || '1*19(1)[' || s_basic_prem       ||']=담보해지(단기) 기본보험료' ||chr(13)||chr(10);
                            /****************************/
                            /* TBID0013 Table Update   **/
                            /****************************/
                            begin
                                update TBID0013T
                                   set BASIC_PREM  = s_basic_prem
                                     , APPY_PREM   = s_appy_prem
                                 where POL_NO      = i_pol_no
                                   and ENDOR_NO    = i_endor_no
                                   and WORK_DATE   = to_date(i_work_date, 'YYYYMMDD')
                                   and DMBO_CD     = i_dmbo_cd
                                   and APPY_TO >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                                   and APPY_TO <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      /*20130422 TO_DATE 처리 최재혁*/


                                exception  when others then o_result := 'Error';
                                                  raise_application_error(-20001, '해지담보 보험료 Update [TBID0013T] Error Error[10]: '|| sqlerrm);
                            end;
                                                                      l_log_data := l_log_data || '1*20[' ||  '해지담보 Update [TBID0013] OK...2'   ||chr(13)||chr(10);
                            /*f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,i_istar_cont_date  ,i_basis_from  ,i_istar_cont_date  ,i_iend_cont_date);*/
                            /*f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);*/
                            /****************************/
                            /* TBID0013 Table Update   **/
                            /****************************/
                            /*
                            begin
                                update TBID0013T
                                   set BASIC_PREM  = round(BASIC_YEAR_PREM *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (i_basis_from -i_istar_cont_date) ,-1)
                                     , APPY_PREM   = round(APPY_YEAR_PREM  *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (i_basis_from -i_istar_cont_date) ,-1)
                                 where POL_NO      = i_pol_no
                                   and ENDOR_NO    = i_endor_no
                                   and WORK_DATE   = to_date(i_work_date, 'YYYYMMDD')
                                   and DMBO_CD     = i_dmbo_cd
                                   and APPY_TO >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                                   and APPY_TO <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      --20130422 TO_DATE 처리 최재혁


                                exception  when others then o_result := 'Error';
                                                  raise_application_error(-20001, '해지담보 보험료 Update [TBID0013T] Error Error[10]: '|| sqlerrm);
                            end;
                            */
                        /*공백기간 환급(실제 발생하진 않지만 추가함)*/
                        else
                            f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,i_istar_cont_date  ,i_all_cliam_date  ,i_istar_cont_date  ,i_iend_cont_date);
                            f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);
                            /****************************/
                            /* TBID0013 Table Update   **/
                            /****************************/
                            begin
                                update TBID0013T
                                   set BASIC_PREM    = round(BASIC_YEAR_PREM *  f_fn_rent_short_rate * (to_date(i_all_cliam_date) - to_date(APPY_FROM)) / (i_all_cliam_date -i_istar_cont_date) ,-1)
                                     , APPY_PREM     = round(APPY_YEAR_PREM  *  f_fn_rent_short_rate * (to_date(i_all_cliam_date) - to_date(APPY_FROM)) / (i_all_cliam_date -i_istar_cont_date) ,-1)
                                     , DMBO_END_DATE = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                                     , APPY_TO       = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                                     , BASIS_TO      = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                                 where POL_NO        = i_pol_no
                                   and ENDOR_NO      = i_endor_no
                                   and WORK_DATE     = to_date(i_work_date, 'YYYYMMDD')
                                   and DMBO_CD       = i_dmbo_cd
                                   and APPY_TO      >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                                   and APPY_TO      <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      /*20130422 TO_DATE 처리 최재혁*/


                                exception  when others then o_result := 'Error';
                                                  raise_application_error(-20001, '해지담보 보험료 Update [TBID0013T] Error Error[10]: '|| sqlerrm);
                            end;
                        end if;
                                                            l_log_data := l_log_data || '1*18[' || f_fn_rent_short_rate    ||']=단기요율'  ||chr(13)||chr(10);
                                                            l_log_data := l_log_data || '1*19[' || s_appy_prem    ||']=담보해지 단기 적용보험료'  ||chr(13)||chr(10);
                    end if;
                /* 일할 계산 */
                else
                    /*공백기간 환급이 아니면 */
                    if V_ENDOR_GB <> '6' then
                        /*이전보험료를 일할계산함 = 이전 배서의 기간보험료 * (기준일-이전배서 대상시작일) / (이전배서 대상종료일 - 이전배서 대상시작일)*/
                        s_appy_prem  := s_basis_from_b_appy_prem;/*round(s_0013_b_appy_prem  * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;*/
                        s_basic_prem := s_basis_from_b_basic_prem;/*round(s_0013_b_basic_prem * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;*/
                                                            l_log_data := l_log_data || '1*19[' || s_appy_prem    ||']=담보해지 일할 적용보험료'  ||chr(13)||chr(10);

                        /****************************/
                        /* TBID0013 Table Update   **/
                        /****************************/
                        begin
                            update TBID0013T
                               set BASIC_PREM      = s_basic_prem
                                 , APPY_PREM       = s_appy_prem
                              /*  , BASIC_YEAR_PREM = i_basic_year_prem*/
                              /*   , APPY_YEAR_PREM  = i_appy_year_prem*/
                             where POL_NO      = i_pol_no
                               and ENDOR_NO    = i_endor_no
                               and WORK_DATE   = to_date(i_work_date, 'YYYYMMDD')
                               and DMBO_CD     = i_dmbo_cd
                               and APPY_TO >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                               and APPY_TO <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      /*20130422 TO_DATE 처리 최재혁*/

                            exception  when others then o_result := 'Error';
                                                           raise_application_error(-20001, '해지담보 보험료 Update [TBID0013T] Error Error[11]: '|| sqlerrm);
                        end;
                                                            l_log_data := l_log_data || '1*20[' ||  '해지담보 Update [TBID0013T] OK...2'   ||chr(13)||chr(10);
                    /*공백기간 환급이면 */
                    else
                        /*이전보험료를 일할계산함 = 이전 배서의 기간보험료 * (전차량 사용종료일-이전배서 대상시작일) / (이전배서 대상종료일 - 이전배서 대상시작일)*/
                        s_appy_prem  := s_all_cliam_date_b_appy_prem;/*round(s_0013_b_appy_prem  * ((i_all_cliam_date - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;*/
                        s_basic_prem := s_all_cliam_date_b_basic_prem;/*round(s_0013_b_basic_prem * ((i_all_cliam_date - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;*/
                                                            l_log_data := l_log_data || '1*19[' || s_appy_prem    ||']=담보해지 일할 적용보험료'  ||chr(13)||chr(10);

                        /****************************/
                        /* TBID0013 Table Update   **/
                        /****************************/
                        begin
                            update TBID0013T
                               set BASIC_PREM      = s_basic_prem
                                 , APPY_PREM       = s_appy_prem
                              /*   , BASIC_YEAR_PREM = i_basic_year_prem*/
                              /*   , APPY_YEAR_PREM  = i_appy_year_prem*/
                                 , DMBO_END_DATE = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                                 , APPY_TO       = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                                 , BASIS_TO      = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                             where POL_NO      = i_pol_no
                               and ENDOR_NO    = i_endor_no
                               and WORK_DATE   = to_date(i_work_date, 'YYYYMMDD')
                               and DMBO_CD     = i_dmbo_cd
                               and APPY_TO >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                               and APPY_TO <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      /*20130422 TO_DATE 처리 최재혁*/

                            exception  when others then o_result := 'Error';
                                                           raise_application_error(-20001, '해지담보 보험료 Update [TBID0013T] Error Error[11]: '|| sqlerrm);
                        end;
                                                            l_log_data := l_log_data || '1*20[' ||  '해지담보(공백기간) Update [TBID0013T] OK...2'   ||chr(13)||chr(10);
                    end if;
                end if;
            /*단기계약건*/
            else
                /*ljm 20151006 i_istar_cont_date => V_DAMBO_START_DT*/
                f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,V_DAMBO_START_DT  ,i_basis_from  ,i_istar_cont_date  ,i_iend_cont_date);
                f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);
                /****************************/
                /* TBID0013 Table Update   **/
                /****************************/
                begin
                    update TBID0013T
                       set BASIC_PREM  = round(i_dmbo_basic_prem *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (i_basis_from -i_istar_cont_date) ,-1)
                         , APPY_PREM   = round(i_dmbo_appy_prem  *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (i_basis_from -i_istar_cont_date) ,-1)
                         , SHORT_R     = f_fn_rent_short_rate /* ljm 20150904 단기율 추가*/
                     where POL_NO      = i_pol_no
                       and ENDOR_NO    = i_endor_no
                       and WORK_DATE   = to_date(i_work_date, 'YYYYMMDD')
                       and DMBO_CD     = i_dmbo_cd
                       and APPY_TO >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                       and APPY_TO <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      /*20130422 TO_DATE 처리 최재혁*/


                    exception  when others then o_result := 'Error';
                                                  raise_application_error(-20001, '해지담보(단기계약) 보험료 Update [TBID0013T] Error[10]: '|| sqlerrm);
                end;

                /* LJM 20151019 해지시 전기간 적용보험료 다시 계산*/
                begin
                    update TBID0013T
                       set
                           BASIC_PREM  = CASE WHEN (i_basis_from -V_DAMBO_START_DT) = 0 THEN 0 ELSE round(BASIC_YEAR_PREM *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (i_basis_from -V_DAMBO_START_DT) ,-1) END
                         , APPY_PREM   = CASE WHEN (i_basis_from -V_DAMBO_START_DT) = 0 THEN 0 ELSE round(APPY_YEAR_PREM  *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (i_basis_from -V_DAMBO_START_DT) ,-1) END
                        /* ljm 20150914 적용보험료 와 기본보험료 구하는 공식 위에내용을 아래 내용으로 수정.  i_dmbo_appy_prem ==> s_0013_b_appy_year_prem*/
                        /*    BASIC_PREM  = CASE WHEN (i_basis_from -i_istar_cont_date) = 0 THEN 0 ELSE round(i_dmbo_basic_prem *  f_fn_rent_short_rate  ,-1) END*/
                        /* , APPY_PREM   = CASE WHEN (i_basis_from -i_istar_cont_date) = 0 THEN 0 ELSE round(s_0013_b_appy_year_prem  *  f_fn_rent_short_rate  ,-1) END*/
                         , SHORT_R     = f_fn_rent_short_rate /* ljm 20150904 단기율 추가*/
                     where POL_NO      = i_pol_no
                       and ENDOR_NO    = i_endor_no
                       and WORK_DATE   = to_date(i_work_date, 'YYYYMMDD')
                       and DMBO_CD     = i_dmbo_cd
                       and APPY_FROM >= to_date(to_char(V_DAMBO_START_DT, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS');

                    exception  when others then o_result := 'Error';
                                                  raise_application_error(-20001, '해지담보(단기계약) 보험료 Update [TBID0013T] Error[10]: '|| sqlerrm);
                end;

            end if;
        else
            /*해지시 사고가 있으면 분납금을 모두 받는다. */
            /****************************/
            /* TBID0013 Table Update   **/
            /****************************/
            /*공백기간 환급이 아니면 */
            if V_ENDOR_GB <> '6' then
                /* 후에 받아야할 돈을 다 처리해야함으로 보험료 계산이 필요없다. */
                begin
                    update TBID0013T
                       set DMBO_END_DATE = to_date(to_char(i_basis_from,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                         , APPY_TO       = to_date(to_char(i_basis_from,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                         , BASIS_TO      = to_date(to_char(i_basis_from,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                     where POL_NO        = i_pol_no
                       and ENDOR_NO      = i_endor_no
                       and WORK_DATE     = to_date(i_work_date, 'YYYYMMDD')
                       and DMBO_CD       = i_dmbo_cd
                       and APPY_TO      >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                       and APPY_TO      <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      /*20130422 TO_DATE 처리 최재혁*/

                    exception  when others then o_result := 'Error';
                                       raise_application_error(-20001, '해지담보(전손처리) 보험료 Update [TBID0013T] Error Error[11]: '|| sqlerrm);
                end;
                                                            l_log_data := l_log_data || '1*20[' ||  '자차 전손처리 담보 Update [TBID0013] OK'   ||chr(13)||chr(10);
            else
                begin
                    update TBID0013T
                       set DMBO_END_DATE = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                         , APPY_TO       = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                         , BASIS_TO      = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                     where POL_NO        = i_pol_no
                       and ENDOR_NO      = i_endor_no
                       and WORK_DATE     = to_date(i_work_date, 'YYYYMMDD')
                       and DMBO_CD       = i_dmbo_cd
                       and APPY_TO      >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                       and APPY_TO      <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      /*20130422 TO_DATE 처리 최재혁*/

                    exception  when others then o_result := 'Error';
                                       raise_application_error(-20001, '해지담보(전손처리) 보험료 Update [TBID0013T] Error Error[11]: '|| sqlerrm);
                end;
            end if;
        end if;
    /**********************************************************/
    /** 담보추가:기준일 과 현재배서의 적용시작일이 같으면     */
    /**********************************************************/
    ELSIF  i_basis_from = s_0013_c_appy_from  then
        s_appy_prem  :=0;
        s_basic_prem :=0;
        f_fn_rent_short_rate := 0;

        /*단기 자차*/
        if  i_endor_cd = '801' then
            /* 보험료 계산 - 일할, 단기 구분한다. */
            if  s_0013_c_cancel_calc_gb <> '1' then
                /* 단기요율 계산 = 적용종료일 - 적용시작일 */
                f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_c_appy_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                /* 보험료 단기 계산 = 년간 총 적용보험료 * 단기적용율   */
                s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);
                s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);
                                                    l_log_data := l_log_data || '1*21[**** 담보 추가_TBID0013T ********]'               ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*22[' || s_appy_prem   ||']=담보추가 단기 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*23[' || s_basic_prem  ||']=담보추가 단기 기본보험료' ||chr(13)||chr(10);
            else
                /* 보험료 일할 계산 = 년간 총 적용보험료 * (적용종료일 - 적용시작일) / (보험종기 - 보험시기)   */
                s_appy_prem  := s_0013_c_appy_to_appy_prem;/*round(i_dmbo_appy_prem   * ((s_0013_c_appy_to - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;*/
                s_basic_prem := s_0013_c_appy_to_basic_prem;/*round(i_dmbo_basic_prem  * ((s_0013_c_appy_to - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;*/
                                                    l_log_data := l_log_data || '1*21[**** 담보 추가_TBID0013T ********]'               ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*22[' || s_appy_prem   ||']=담보추가 일할 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*23[' || s_basic_prem  ||']=담보추가 일할 기본보험료' ||chr(13)||chr(10);

            end if;
        /*단기 아닌경우*/
        else
            /*일할계약*/
            if i_short_day_gb = '1' then
                /* 보험료 계산 - 일할, 단기 구분한다. */
                if  s_0013_c_cancel_calc_gb <> '1' then
                    /* 단기요율 계산 = 적용종료일 - 적용시작일 */
                    f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_c_appy_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                    f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                    /* 보험료 단기 계산 = 년간 총 적용보험료 * 단기적용율   */
                    s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);
                    s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);
                                                    l_log_data := l_log_data || '1*21[**** 담보 추가_TBID0013T ********]'               ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*22[' || s_appy_prem   ||']=담보추가 단기 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*23[' || s_basic_prem  ||']=담보추가 단기 기본보험료' ||chr(13)||chr(10);
                else
                    /* 보험료 일할 계산 = 년간 총 적용보험료 * (적용종료일 - 적용시작일) / (보험종기 - 보험시기)   */
                    s_appy_prem  := s_0013_c_appy_to_appy_prem;/*round(i_dmbo_appy_prem   * ((s_0013_c_appy_to - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;*/
                    s_basic_prem := s_0013_c_appy_to_basic_prem;/*round(i_dmbo_basic_prem  * ((s_0013_c_appy_to - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;*/
                                                    l_log_data := l_log_data || '1*21[**** 담보 추가_TBID0013T ********]'               ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*22[' || s_appy_prem   ||']=담보추가 일할 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*23[' || s_basic_prem  ||']=담보추가 일할 기본보험료' ||chr(13)||chr(10);

                end if;
            /*단기계약*/
            else
                /*분납부활*/
                if V_ENDOR_GB = '7' then
                    /*이전 데이터  적용시작일 찾기 */
                    select max(trunc(APPY_FROM)), sum(APPY_PREM), sum(BASIC_PREM)
                      into V_DANGI_APPY_FROM, V_DANGI_APPY_PREM, V_DANGI_BASIC_PREM
                      from TBID0013T
                     where POL_NO    = i_pol_no
                       and ENDOR_NO  = i_endor_no_bef_max
                       and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                       and DMBO_CD   = i_dmbo_cd
                       and APPY_TO   =(select MAX(APPY_TO)
                                         from TBID0013T
                                        where POL_NO    = i_pol_no
                                          and ENDOR_NO  = i_endor_no_bef_max
                                          and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                                          and DMBO_CD   = i_dmbo_cd);

                    /* 보험료 쪼개기. 기존 단기 보험료를 기간별로 쪼갠다.  */
                    /* 보험료 쪼개기. 전 데이터 적용보험료 * ((현재담보종기 - 기준일자)/(현재담보종기-전 데이터 적용시작일))  */
                    s_appy_prem   := round(V_DANGI_APPY_PREM   * ((s_0013_c_appy_to - i_basis_from)/( s_0013_c_appy_to - V_DANGI_APPY_FROM )),-1);
                    s_basic_prem  := round(V_DANGI_BASIC_PREM  * ((s_0013_c_appy_to - i_basis_from)/( s_0013_c_appy_to - V_DANGI_APPY_FROM )),-1);
                                                    l_log_data := l_log_data || '1*21[**** 담보 추가(단기계약-분납부활))_TBID0013T ********]'              ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*22[' || s_appy_prem   ||']=담보추가(단기계약-분납부활) 단기 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*23[' || s_basic_prem  ||']=담보추가(단기계약-분납부활) 단기 기본보험료' ||chr(13)||chr(10);
                /*분납부활 아님*/
                else
                    /* 단기요율 계산 = 적용종료일 - 적용시작일 */
                    f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_c_appy_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                    f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                    /* 보험료 단기 계산 = 년간 총 적용보험료 * 단기적용율   */
                    s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);
                    s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);
                                                    l_log_data := l_log_data || '1*21[**** 담보 추가(단기계약)_TBID0013T ********]'               ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*22[' || s_appy_prem   ||']=담보추가(단기계약) 단기 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*23[' || s_basic_prem  ||']=담보추가(단기계약) 단기 기본보험료' ||chr(13)||chr(10);
                end if;
            end if;
        end if;

        /*****************************/
        /* TBID0013 Table Update    **/
        /*****************************/
        begin
            /*20130422 TO_DATE 처리 최재혁*/
            update TBID0013T
               set BASIC_PREM        = s_basic_prem
                 , APPY_PREM         = s_appy_prem
                 , DMBO_START_DATE   = to_date(to_char(i_basis_from,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                 , DMBO_END_DATE     = APPY_TO
                 , BASIC_YEAR_PREM   = i_basic_year_prem
                 , APPY_YEAR_PREM    = i_appy_year_prem
             where POL_NO     = i_pol_no
               and ENDOR_NO   = i_endor_no
               and WORK_DATE  = to_date(i_work_date, 'YYYYMMDD')
               and DMBO_CD    = i_dmbo_cd
               and APPY_FROM >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
               and APPY_FROM <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');

            exception  when others then o_result := 'Error';
                                           raise_application_error(-20001, '추가담보 보험료 Update [TBID0013T] Error Error[20]: '|| sqlerrm);
        end;
                                                     l_log_data := l_log_data || '1*24[' ||  '추가담보 Update[TBID0013T] OK...4' ||chr(13)||chr(10);

        /*분납 부활이면 이전 데이터*/
        if V_ENDOR_GB = '7' then
            /*일할계약, 단기계약 동일*/
            begin
                update TBID0013T
                   set basic_prem = round(basic_year_prem * ((i_basis_from - trunc(basis_from)) / (i_iend_cont_date - i_istar_cont_date)),-1)
                     , appy_prem  = round(appy_year_prem * ((i_basis_from - trunc(basis_from)) / (i_iend_cont_date - i_istar_cont_date)),-1)
                     , basis_to   = to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                 where POL_NO     = i_pol_no
                   and ENDOR_NO   = i_endor_no
                   and WORK_DATE  = to_date(i_work_date, 'YYYYMMDD')
                   and DMBO_CD    = i_dmbo_cd
                   and APPY_TO    = ( select MAX(APPY_TO)
                                        from TBID0013T
                                       where POL_NO    = i_pol_no
                                         and ENDOR_NO  = i_endor_no_bef_max
                                         and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                                         and DMBO_CD   = i_dmbo_cd );
                exception when others then o_result := null;
            end;
                                                     l_log_data := l_log_data || '1*24-1[' ||  '분납부활(이전데이터) Update[TBID0013T] OK...4' ||chr(13)||chr(10);
        end if;

        if i_day_endor_cnt > 0 then
            /********************************************/
            /** 기준일 이전 Data[TBID0013] Insert       */
            /* 당일배서일 경우에만                      */
     /* 2017.02.08 담보별 단체특성율 추가 */
            /********************************************/
            begin
                insert into TBID0013T(POL_NO,               ENDOR_NO,                   BASIC_SCONT_GB,      DMBO_CD,
                                      APPY_FROM,            ACDNT_RESP_WANT,            MAN_RESP_WANT,       INSUR_AMT,
                                      INSUR_AMT_GB,         DUCT_AMT_GB,                BASIC_PREM,          DMBO_START_DATE,
                                      DMBO_END_DATE,        APPY_PREM,                  BASIC_RANGE_R,       CANCEL_CALC_GB,
                                      APPY_TO,              BASIS_FROM,                 BASIS_TO,
                                      USER_ID,              BASIC_YEAR_PREM,            APPY_YEAR_PREM,      WORK_DATE, GRP_DMBO_RATE
                                      )
                               select POL_NO,               i_endor_no,                 BASIC_SCONT_GB,      DMBO_CD,
                                      APPY_FROM,            ACDNT_RESP_WANT,            MAN_RESP_WANT,       INSUR_AMT,
                                      INSUR_AMT_GB,         DUCT_AMT_GB,                BASIC_PREM,          DMBO_START_DATE,
                                      DMBO_END_DATE,        APPY_PREM,                  BASIC_RANGE_R,       CANCEL_CALC_GB,
                                      APPY_TO,              BASIS_FROM,                 BASIS_TO,
                                      USER_ID,              BASIC_YEAR_PREM,            APPY_YEAR_PREM,      to_date(i_work_date, 'YYYYMMDD') , GRP_DMBO_RATE
                                 from TBID0013T
                                where POL_NO    = i_pol_no
                                  and ENDOR_NO  = i_endor_no_bef_max
                                  and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                                  and DMBO_CD   = i_dmbo_cd
                                  and APPY_TO   = to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');
                exception when others then o_result := null;
            end;
                                                     l_log_data := l_log_data || '1*24-1[' ||  '추가담보(당일배서) Update[TBID0013T] OK...4' ||chr(13)||chr(10);
        end if;


    /************************************************************************/
    /** 보험료 변동                                                        **/
    /** 2013.05.30일 추가                                                  **/
    /** 보험료변동이 없어도 공백기간환급이면 적용받도록 수정함             **/
    /** 2013.05.30일 추가                                                  **/
    /** 보험료변동이 없어도 공백기간환급이면 적용받도록 수정함             **/
    /************************************************************************/
    ELSIF (s_0013_appy_prem <> s_0013_b_appy_prem) or (s_0013_appy_prem = s_0013_b_appy_prem and V_ENDOR_GB = '6')  then
                                                     l_log_data := l_log_data || '1*25[**** 보험료변동_TBID0013 ********]'  ||chr(13)||chr(10);
        /* 기준일 이전 사용기간에 대한 보험료 계산 */
        /* 공백기간환급 구분을 먼저 처리한다.*/
        /* 공백기간 환급이 아니면 */
        if V_ENDOR_GB <> '6' then
            /*일할계약*/
            if i_short_day_gb = '1' then
                /* 단기 계산 ( 2: 단기, 3:단기자차)*/
                if    s_0013_c_cancel_calc_gb <> '1' then
                    /*단기요율 계산 : 기준일자 - 적용시작일 로 단기요율 계산   */
                    /*f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_b_appy_from  ,i_basis_from  ,i_istar_cont_date  ,i_iend_cont_date);*/
                    /*f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);*/

                    /*s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate,-1);*/
                    /*s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate,-1);*/

                    if    s_0013_c_cancel_calc_gb = '3' then
                        f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_b_appy_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                        f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                        s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate  * ((i_basis_from - s_0013_b_appy_from) / (s_0013_c_appy_to - s_0013_b_appy_from))     ,-1 );
                        s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate  * ((i_basis_from - s_0013_b_appy_from) / (s_0013_c_appy_to - s_0013_b_appy_from))     ,-1);
                    else
                        f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_b_appy_from  ,i_basis_from  ,i_istar_cont_date  ,i_iend_cont_date);
                        f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                        s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate,-1);
                        s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate,-1);

                    end if;


                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1      ||']=보험료변동 단기 적용보험료(변경전)'  ||chr(13)||chr(10);
                else
                    /* = 이전 배서의 기간보험료 * (기준일자-이전배서 대상시작일) / (이전배서 대상종료일 - 이전배서 대상시작일)*/
                    s_appy_prem1  := s_basis_from_b_appy_prem;/*round(s_0013_b_appy_prem  * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;*/
                    s_basic_prem1 := s_basis_from_b_basic_prem;/*round(s_0013_b_basic_prem * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;*/
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1    ||']=보험료변동 일할 적용보험료'  ||chr(13)||chr(10);
                end if;
            /*단기계약*/
            else
                /*단기요율 계산 : 기준일자 - 적용시작일 로 단기요율 계산   */
                /*f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,i_istar_cont_date  ,i_iend_cont_date  ,i_istar_cont_date  ,i_iend_cont_date);*/
                /*f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);*/

                /*s_appy_prem1   := round((s_0013_b_appy_year_prem  * f_fn_rent_short_rate)  * ((i_basis_from - s_0013_b_appy_from) / (i_iend_cont_date  - i_istar_cont_date)),-1);*/
                /*s_basic_prem1  := round((s_0013_b_basic_year_prem * f_fn_rent_short_rate)  * ((i_basis_from - s_0013_b_appy_from) / (i_iend_cont_date  - i_istar_cont_date)),-1);*/

                /* ljm 20150914 단기계약시 단기율 산출로직 수정 기준종료일 - 공제시기 분담금 로직 아래로 변경*/
                f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,V_DAMBO_START_DT  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                /* ljm 20151012 분모가 되는 기간 s_0013_b_appy_from = > V_DAMBO_START_DT 담보시기로 변경*/
                s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate   * ((i_basis_from - s_0013_b_appy_from) / (s_0013_c_appy_to - V_DAMBO_START_DT))     ,-1);
                s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate   * ((i_basis_from - s_0013_b_appy_from) / (s_0013_c_appy_to - V_DAMBO_START_DT))     ,-1);



                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율(단기계약)'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1      ||']=보험료변동 단기(단기계약) 적용보험료(변경전)'  ||chr(13)||chr(10);

            end if;

        /* 공백기간 환급 */
        else
            /* 사고 아닌경우*/
            if  V_ACCI_CHECK = 'N' then
                /*일할 계약*/
                if i_short_day_gb = '1' then
                    /* 단기 계산 ( 2: 단기, 3:단기자차)*/
                    if    s_0013_c_cancel_calc_gb <> '1' then
                        /*단기요율 계산 : 전차량 사용종료일 - 적용시작일 로 단기요율 계산   */
                        f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_b_appy_from  ,i_all_cliam_date  ,i_istar_cont_date  ,i_iend_cont_date);
                        f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                        s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate,-1);
                        s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate,-1);
                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율(공백기간)'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1      ||']=보험료변동 단기(공백기간) 적용보험료(변경전)'  ||chr(13)||chr(10);
                    /* 일할 계산 */
                    else
                        /* = 이전 배서의 기간보험료 * (전차량 사용종료일-이전배서 대상시작일) / (이전배서 대상종료일 - 이전배서 대상시작일)*/
                        s_appy_prem1  := s_all_cliam_date_b_appy_prem;/*round(s_0013_b_appy_prem  * ((i_all_cliam_date - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;*/
                        s_basic_prem1 := s_all_cliam_date_b_basic_prem;/*round(s_0013_b_basic_prem * ((i_all_cliam_date - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;*/
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1    ||']=보험료변동(공백기간) 일할 적용보험료'  ||chr(13)||chr(10);
                    end if;
                /*단기 계약*/
                else
                    /*단기요율 계산 : 전차량 사용종료일 - 적용시작일 로 단기요율 계산   */
                    /*f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_b_appy_from  ,i_all_cliam_date  ,i_istar_cont_date  ,i_iend_cont_date);*/
                    /*f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);*/

                    /*s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate,-1);*/
                    /*s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate,-1);*/

                     /* ljm 20150916 단기율 및 분담금 구하는 방법 변경   단기율 기준종료일 ？ 공제시기
                        분담금 분담금 = 변경전 연간분담금 * 단기요율 * (전차량종료일 ？ 전 기준시작일 )  / ( 기준종료일 ？ 공제시기 )
                    */
                    f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,V_DAMBO_START_DT  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                    f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                    /* ljm 20151013 s_0013_b_appy_from => V_DAMBO_START_DT 변경*/
                    s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate  * ((i_all_cliam_date - s_0013_b_appy_from) / (s_0013_c_appy_to - V_DAMBO_START_DT))           ,-1);
                    s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate  * ((i_all_cliam_date - s_0013_b_appy_from) / (s_0013_c_appy_to - V_DAMBO_START_DT)),-1);
                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율(단기계약-공백기간)'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1      ||']=보험료변동 단기(단기계약-공백기간) 적용보험료(변경전)'  ||chr(13)||chr(10);
                end if;
            /* 사고인 경우*/
            else
                /*전손처리 아닌경우*/
                if V_ALL_CLAIM = 'N' then
                    /*일할 계약 */
                    if i_short_day_gb = '1' then
                        /* 단기 계산 ( 2: 단기, 3:단기자차)*/
                        if    s_0013_c_cancel_calc_gb <> '1' then
                            /*단기요율 계산 : 전차량 사용종료일 - 적용시작일 로 단기요율 계산   */
                            f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_b_appy_from  ,i_basis_from  ,i_istar_cont_date  ,i_iend_cont_date);
                            f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                            s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate,-1);
                            s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate,-1);
                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율(공백기간-사고있음)'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1      ||']=보험료변동 단기(공백기간-사고있음) 적용보험료(변경전)'  ||chr(13)||chr(10);
                        /* 일할 계산 */
                        else
                            /* = 이전 배서의 기간보험료 * (전차량 사용종료일-이전배서 대상시작일) / (이전배서 대상종료일 - 이전배서 대상시작일)*/
                            s_appy_prem1  := s_basis_from_b_appy_prem;/*round(s_0013_b_appy_prem  * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;*/
                            s_basic_prem1 := s_basis_from_b_basic_prem;/*round(s_0013_b_basic_prem * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;*/
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1    ||']=보험료변동(공백기간-사고있음) 일할 적용보험료'  ||chr(13)||chr(10);
                        end if;
                    /*단기 계약*/
                    else
                        /*단기요율 계산 : 전차량 사용종료일 - 적용시작일 로 단기요율 계산   */
                        f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_b_appy_from  ,i_basis_from  ,i_istar_cont_date  ,i_iend_cont_date);
                        f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                        s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate,-1);
                        s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate,-1);
                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율(공백기간-사고있음)'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1      ||']=보험료변동 단기(공백기간-사고있음) 적용보험료(변경전)'  ||chr(13)||chr(10);
                    end if;
                /*전손처리*/
                else
                    /*기존 보험료 그대로 받는다 */
                    s_appy_prem1  := s_0013_b_appy_prem;
                    s_basic_prem1 := s_0013_b_basic_prem;
                end if;
            end if;
        end if;

        /* 기준일 이전 데이터 날짜 update 하기 위해 날짜 계산 */
        if V_ENDOR_GB = '6' then
            V_DMBO_END_DATE := i_all_cliam_date;
            if V_ACCI_CHECK = 'N' then
                V_BASIS_TO_DATE := i_all_cliam_date;
            else
                V_BASIS_TO_DATE := i_basis_from;
            end if;
        else
            V_DMBO_END_DATE := i_basis_from;
            V_BASIS_TO_DATE := i_basis_from;
        end if;

        /* 기준일 이후 사용기간에 대한 보험료 계산 */
        /* 분납부활이 여부에 따라서 처리가 달라짐 */
        /* 일할 단기 계산 */
        /*일할 계약*/
        if i_short_day_gb = '1' then
            if    s_0013_c_cancel_calc_gb <> '1' then
                /*단기요율 계산 : 적용종료일 - 기준일자 로 단기요율 계산   */
                f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,i_basis_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);
                s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);
                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem    ||']=보험료변동 단기 적용보험료(변경후)'  ||chr(13)||chr(10);
            else
                /* 기준일 이후 기간 동안 = 년보험료 * (보험종기 - 기준일) / (보험종기 - 보험시기)*/
                s_appy_prem   := s_basis_from_appy_prem;/*round(i_dmbo_appy_prem  *   ((i_iend_cont_date  - i_basis_from) / (i_iend_cont_date  - i_istar_cont_date)) ,-1);*/
                s_basic_prem  := s_basis_from_basic_prem;/*round(i_dmbo_basic_prem *   ((i_iend_cont_date  - i_basis_from) / (i_iend_cont_date  - i_istar_cont_date)) ,-1);*/
                                                     l_log_data := l_log_data || '1*28[' || s_appy_prem    ||']=년적용보험료*(보험종기-기준일)/(보험종기-보험시기)'  ||chr(13)||chr(10);
            end if;
        /*단기 계약*/
        ELSE
               /*단기요율 계산 : 적용종료일 - 기준일자 로 단기요율 계산   */
            /*f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,i_istar_cont_date  ,i_iend_cont_date  ,i_istar_cont_date  ,i_iend_cont_date);*/
            /*f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);*/

            /*s_appy_prem   := round((i_dmbo_appy_prem  * f_fn_rent_short_rate) *   ((s_0013_c_appy_to  - i_basis_from) / (i_iend_cont_date  - i_istar_cont_date)) ,-1);*/
            /*s_basic_prem  := round((i_dmbo_basic_prem  * f_fn_rent_short_rate) *   ((s_0013_c_appy_to  - i_basis_from) / (i_iend_cont_date  - i_istar_cont_date)) ,-1);*/
              /* ljm 20150914 단기계약시 단기율 산출로직 수정 기준종료일 - 공제시기 분담금 로직 아래로 변경*/
              f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,V_DAMBO_START_DT  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
              f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);
              s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate  * ((s_0013_c_appy_to - i_basis_from) / (s_0013_c_appy_to - V_DAMBO_START_DT))      ,-1);
              s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate  * ((s_0013_c_appy_to - i_basis_from) / (s_0013_c_appy_to - V_DAMBO_START_DT))      ,-1);



                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem    ||']=보험료변동 단기 적용보험료(변경후)'  ||chr(13)||chr(10);

        end if;

        /***********************************************************/
        /* 기준일 이후 보험료을 TBID0013에 Insert 시킴             */
 /* 2017.02.08 담보별 단체특성율      */
        /***********************************************************/
        begin
            /*20130422 TO_DATE 처리 최재혁, BASIS_FROM 잘못들어가는거 수정.*/
            insert into TBID0013T(POL_NO,               ENDOR_NO,                   BASIC_SCONT_GB,        DMBO_CD,
                                  ACDNT_RESP_WANT,      MAN_RESP_WANT,              INSUR_AMT,             INSUR_AMT_GB,
                                  DUCT_AMT_GB,          BASIC_PREM,                 APPY_PREM,             BASIC_RANGE_R,
                                  CANCEL_CALC_GB,       APPY_TO,                    BASIS_TO,              USER_ID,
                                  BASIC_YEAR_PREM,      APPY_YEAR_PREM,
                                  APPY_FROM,
                                  DMBO_START_DATE,
                                  DMBO_END_DATE,
                                  BASIS_FROM,
                                  WORK_DATE ,
      GRP_DMBO_RATE
                                  )
                           select POL_NO,               ENDOR_NO,                   BASIC_SCONT_GB,        DMBO_CD,
                                  ACDNT_RESP_WANT,      MAN_RESP_WANT,              INSUR_AMT,             INSUR_AMT_GB,
                                  DUCT_AMT_GB,          s_basic_prem,               s_appy_prem,           BASIC_RANGE_R,
                                  CANCEL_CALC_GB,       APPY_TO,                    BASIS_TO,              USER_ID,
                                  i_basic_year_prem,    i_appy_year_prem,
                                  to_date(to_char(i_basis_from    ,'yyyymmdd')||'235959', 'yyyymmddhh24miss'),
                                  to_date(to_char(i_basis_from    ,'yyyymmdd')||'235959', 'yyyymmddhh24miss'),
                                  to_date(to_char(i_iend_cont_date,'yyyymmdd')||'235959', 'yyyymmddhh24miss'),
                                  to_date(to_char(i_basis_from    ,'yyyymmdd')||'235959', 'yyyymmddhh24miss'),
                                  to_date(i_work_date, 'YYYYMMDD') ,
      GRP_DMBO_RATE
                             from TBID0013T
                            where POL_NO     = i_pol_no
                              and ENDOR_NO   = i_endor_no
                              and WORK_DATE  = to_date(i_work_date, 'YYYYMMDD')
                              and DMBO_CD    = i_dmbo_cd
                              and APPY_FROM <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                              and APPY_TO   >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');
                             /*and APPY_TO >= to_date(to_char(i_iend_cont_date, 'yyyymmdd')||'000000', 'yyyymmddhh24miss')*/
                             /*and APPY_TO <= to_date(to_char(i_iend_cont_date, 'yyyymmdd')||'235959', 'yyyymmddhh24miss');*/

            exception when others then o_result := 'Error';
                                             raise_application_error(-20001, '기준일 이후 일할 보험료 Insert[TBID0013T] Error[30]: '|| sqlerrm);

        end;
                                                      l_log_data := l_log_data ||  '1*29[' || '기준일이후 일할보험료 Insert[TBID0013T] OK...5' ||chr(13)||chr(10);

        /***********************************************************/
        /* 기준일 이전 보험료을 TBID0013에 Update 시킴             */
        /***********************************************************/
        begin
            /*20130422 TO_DATE 처리 최재혁*/
            Merge  into TBID0013T A
                   using (select *
                           from TBID0013T B1
                          where B1.POL_NO    = i_pol_no
                            and B1.ENDOR_NO  = i_endor_no_bef_max
                            and B1.WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                            and B1.DMBO_CD   = i_dmbo_cd
                            and B1.APPY_FROM >= to_date(to_char(s_0013_c_appy_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                            and B1.APPY_FROM <= to_date(to_char(s_0013_c_appy_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                         ) B
                      on (    A.POL_NO = B.POL_NO
                          and A.ENDOR_NO       = i_endor_no
                          and A.WORK_DATE      = to_date(i_work_date, 'YYYYMMDD')
                          and B.ENDOR_NO       = i_endor_no_bef_max
                          and B.WORK_DATE      = to_date(i_work_date, 'YYYYMMDD')
                          and A.BASIC_SCONT_GB = B.BASIC_SCONT_GB
                          and A.DMBO_CD        = B.DMBO_CD
                          and A.APPY_FROM      = B.APPY_FROM
                         )
            when matched then
            update set A.ACDNT_RESP_WANT  = B.ACDNT_RESP_WANT
                     , A.MAN_RESP_WANT    = B.MAN_RESP_WANT
                     , A.INSUR_AMT        = B.INSUR_AMT
                     , A.INSUR_AMT_GB     = B.INSUR_AMT_GB
                     , A.DUCT_AMT_GB      = B.DUCT_AMT_GB
                     , A.BASIC_PREM       = s_basic_prem1
                     , A.DMBO_START_DATE  = to_date(to_char(s_0013_c_appy_from,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                     , A.DMBO_END_DATE    = to_date(to_char(V_DMBO_END_DATE,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                     , A.APPY_PREM        = s_appy_prem1
                     , A.BASIC_RANGE_R    = B.BASIC_RANGE_R
                     , A.CANCEL_CALC_GB   = B.CANCEL_CALC_GB
                     , A.APPY_TO          = to_date(to_char(V_DMBO_END_DATE,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                     , A.BASIS_FROM       = to_date(to_char(s_0013_c_appy_from,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                     , A.BASIS_TO         = to_date(to_char(V_BASIS_TO_DATE,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                     , A.USER_ID          = B.USER_ID
                     , A.BASIC_YEAR_PREM  = B.BASIC_YEAR_PREM
                     , A.APPY_YEAR_PREM   = B.APPY_YEAR_PREM;

            exception when others then o_result := 'Error';
                                          raise_application_error(-20001, '기준일 이전 일할(단기)보험료 Update[TBID0013T] Error[40]: '|| sqlerrm);
        end;
                                                      l_log_data := l_log_data ||  '1*30[' || '기준일이전 일할(단기)보험료 Update[TBID0013T] OK...6'  ||chr(13)||chr(10);

    END IF;

    /********************************************************************/
    /*                                                                  */
    /* TBID0014 TABLE 생성하기                                          */
    /*                                                                  */
    /********************************************************************/
    begin
        Insert into TBID0014T(POL_NO            ,DMBO_CD               ,CALC_FYMD                     ,CALC_EYMD
                             ,BASIC_PREM        ,APPY_PREM             ,ENDOR_NO                      ,APPY_FROM
                             ,APPY_TO           ,BASIS_FROM            ,BASIS_TO                      ,USER_ID
                             ,WORK_DATE
                             )
                      select POL_NO            ,DMBO_CD               ,APPY_FROM                     ,APPY_TO
                            ,BASIC_PREM        ,APPY_PREM             ,i_endor_no                    ,APPY_FROM
                            ,APPY_TO           ,BASIS_FROM            ,BASIS_TO                      ,i_user_id
                            ,to_date(i_work_date, 'YYYYMMDD')
                        from TBID0013T
                       where POL_NO    = i_pol_no
                         and ENDOR_NO  = i_endor_no
                         and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                         and DMBO_CD   = i_dmbo_cd;
        exception  when others then o_result := 'Error';
                                           raise_application_error(-20001, ' Insert [TBID0014T] Error[50]: '|| sqlerrm);

    end;
                                                      l_log_data := l_log_data || '1*31[' ||  ' Insert [TBID0014T] OK1...'  ||chr(13)||chr(10);

    /************************/
    /* Log 남기기         ***/
    /************************/
    /*IF    l_log_level = 1 or nvl(regexp_substr(l_log_step,i_dmbo_cd),' ') = i_dmbo_cd then*/
    /*      PR_INSERT_LOG(l_log_date,l_log_sp_name,l_log_no,'배서[분납]_2',i_dmbo_cd,l_log_data);*/
    /*END IF;*/
    /*l_log_data := '';*/

    /********************************************************************/
    /*                                                                  */
    /* TBID0015 TABLE 생성하기                                          */
    /*                                                                  */
    /********************************************************************/

    /********************************************************************************/
    /* 이전 배서[TBID0015T]에서 납입회차까지의 보험료를 Sum 한다-기납입 보험료 산출*/
    /*  기준이 되는 seq_no 를 가져와야 한다.20130423 최재혁추가                     */
    /********************************************************************************/
    begin
        select nvl(sum(BASIC_PREM),0)
             , nvl(sum(DMBO_PREM) ,0)
             , nvl(max(seq_no), 0)
          into V_BEF_15_BASIC_PREM
             , V_BEF_15_DMBO_PREM
             , V_MAX_SEQ_NO
          from TBID0015T
         where POL_NO     = i_pol_no
           and ENDOR_NO   = i_endor_no_bef_max
           and WORK_DATE  = to_date(i_work_date, 'YYYYMMDD')
           and DMBO_CD    = i_dmbo_cd
           and BNP_NO    <= i_end_nab_no;

        exception when no_data_found then V_BEF_15_BASIC_PREM :=0;
                                          V_BEF_15_DMBO_PREM :=0;
                  when others        then o_result := 'Error';
                                            raise_application_error(-20001, 'PR_RENT_C_ENDOR_BUNAP_RATE Insert Error[130] :'|| sqlerrm);
    end;

                                                      l_log_data := l_log_data || '2*01[' || '납입회차까지 보험료Sum[TBID0015T] OK...1'   ||chr(13)||chr(10);

    /********************************************************************************/
    /* 이전 배서[TBID0013T]에서 담보별 적용보험료를 Sum 한다-기납입 보험료 산출     */
    /********************************************************************************/
    begin
        select nvl(sum(BASIC_PREM),0)
             , nvl(sum(APPY_PREM) ,0)
          into V_BASIC_PREM_BEF
             , V_APPY_PREM_BEF
          from TBID0013T
         where POL_NO    = i_pol_no
           and ENDOR_NO  = i_endor_no_bef_max
           and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
           and DMBO_CD   = i_dmbo_cd;
        exception when others then V_BASIC_PREM := 0;
                                   V_APPY_PREM  := 0;
    end;
                                                      l_log_data := l_log_data || '2*01-1[' || '담보별 적용보험료Sum[TBID0013T] OK...1'   ||chr(13)||chr(10);

    /***************************************************/
    /** 담보해지:현재배서 적용종료일이 기준일과 같으면 */
    /***************************************************/
    IF    i_basis_from = s_0013_c_appy_to then
                                                      l_log_data := l_log_data || '2*02[**** 담보 해지_TBID0015T ********]'  ||chr(13)||chr(10);
        /**************************************************************************/
        /* 이전 회차 보험료(기 납입 보험료)는 무조건 신규 배서에 Insert 시킴      */
        /**************************************************************************/
        begin
            insert into TBID0015T( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                    DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                    IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                    BASIS_FROM,               BASIS_TO,               USER_ID,                    WORK_DATE )
                            select  POL_NO,                   i_endor_no,             BNP_NO,                     SEQ_NO,
                                    DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                    IEND_VALID_DATE,          i_endor_no_bef_max,     APPY_FROM,                  APPY_TO,
                                    BASIS_FROM,               BASIS_TO,               i_user_id,                  to_date(i_work_date, 'YYYYMMDD')
                              from  TBID0015T
                             where  POL_NO     = i_pol_no
                               and  ENDOR_NO   = i_endor_no_bef_max
                               and  WORK_DATE  = to_date(i_work_date, 'YYYYMMDD')
                               and  DMBO_CD    = i_dmbo_cd
                               and  BNP_NO    <= i_end_nab_no;
            exception when others then o_result := 'Error';
                                           raise_application_error(-20001, '담보해지 Insert [TBID0015T] Error[131]: '|| sqlerrm);
        end;
                                                      l_log_data := l_log_data || '2*03[' || '담보해지 Insert [TBID0015T] OK...2' ||chr(13)||chr(10);

        /************************************/
        /* 기간별 보험료[TBID0013T] Sum      */
        /************************************/
        begin
            select nvl(sum(BASIC_PREM),0)
                 , nvl(sum(APPY_PREM) ,0)
              into V_BASIC_PREM
                 , V_APPY_PREM
              from TBID0013T
             where POL_NO    = i_pol_no
               and ENDOR_NO  = i_endor_no
               and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
               and DMBO_CD   = i_dmbo_cd;

            exception when others then V_BASIC_PREM := 0;
                                       V_APPY_PREM  := 0;
        end;

        /* 기 납입 보험료에서 기간별 사용한 총 보험료를 빼준다 */
        s_appy_prem  := V_APPY_PREM  - V_BEF_15_DMBO_PREM;
        s_basic_prem := V_BASIC_PREM - V_BEF_15_BASIC_PREM;

                                                    l_log_data := l_log_data || '2*05[' || V_APPY_PREM          ||']=기간보험료'                 ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '2*06[' || V_BEF_15_DMBO_PREM   ||']=기납입 보험료'              ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '2*07[' || s_appy_prem          ||']=기간보험료 - 기납입보험료'  ||chr(13)||chr(10);
        /***************************/
        /** TBID0015 Table Insert **/
        /***************************/
        begin
            insert into TBID0015T( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                    DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                    IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                    BASIS_FROM,               BASIS_TO,               USER_ID,                    WORK_DATE )
                             select POL_NO,                   i_endor_no,             BNP_NO,                     i_bef_15_seq_no,
                                    i_dmbo_cd,                s_basic_prem,           s_appy_prem,                ISTAR_VALID_DATE,
                                    IEND_VALID_DATE,          i_endor_no_bef_max,     APPY_FROM,                  APPY_TO,
                                    BASIS_FROM,               BASIS_TO,               i_user_id,                  to_date(i_work_date, 'YYYYMMDD')
                               from TBID0015T
                              where POL_NO    = i_pol_no
                                and ENDOR_NO  = i_endor_no_bef_max
                                and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                                and BNP_NO    = i_end_nab_no
                                and rownum    = 1;

            exception when others then o_result := 'Error';
                                         raise_application_error(-20001, '담보해지 Insert [TBID0015T] Error[132]: '|| sqlerrm);
        end;
                                                   l_log_data := l_log_data || '2*08[' || '담보해지 Insert [TBID0015T] OK..3' ||chr(13)||chr(10);

    /********************************************************************************/
    /** 담보추가:기준일 과 현재배서 적용일이 같으면서 이전배서의적용시작일이 없으면 */
    /********************************************************************************/
    ELSIF i_basis_from = s_0013_c_appy_from and s_0013_b_appy_from is null then
        /**************************************************************************/
        /* 이전 회차 보험료(기 납입 보험료)는 무조건 신규 배서에 Insert 시킴      */
        /**************************************************************************/
        begin
            insert into TBID0015T( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                    DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                    IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                    BASIS_FROM,               BASIS_TO,               USER_ID,                    WORK_DATE )
                            select  POL_NO,                   i_endor_no,             BNP_NO,                     SEQ_NO,
                                    DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                    IEND_VALID_DATE,          i_endor_no_bef_max,     APPY_FROM,                  APPY_TO,
                                    BASIS_FROM,               BASIS_TO,               i_user_id,                  to_date(i_work_date, 'YYYYMMDD')
                              from  TBID0015T
                             where  POL_NO     = i_pol_no
                               and  ENDOR_NO   = i_endor_no_bef_max
                               and  WORK_DATE  = to_date(i_work_date, 'YYYYMMDD')
                               and  DMBO_CD    = i_dmbo_cd
                               and  BNP_NO    <= i_end_nab_no;
            exception when others then o_result := 'Error';
                                           raise_application_error(-20001, '담보추가 Insert [TBID0015T] Error[131]: '|| sqlerrm);
        end;
                                                      l_log_data := l_log_data || '2*03[' || '담보추가 Insert [TBID0015T] OK...2' ||chr(13)||chr(10);
                                                      l_log_data := l_log_data || '2*09[**** 담보 추가_TBID0015T ********]'  ||chr(13)||chr(10);

        /*분납부활이 아닌경우*/
        if V_ENDOR_GB <> '7' then
            /***********************************************************/
            /* 기준일 이후 보험료 산정(일할계산)                       */
            /***********************************************************/
            if  i_endor_cd <> '801' then             /*단기자차가 아니면 (기존대로)*/
                  /* 보험료 일할 계산 = 년간 총 적용보험료 * (보험종기 -기준일) / (보험종기 - 보험시기)   */
                s_appy_prem  :=round(i_dmbo_appy_prem   * ((i_iend_cont_date - i_basis_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;
                s_basic_prem :=round(i_dmbo_basic_prem  * ((i_iend_cont_date - i_basis_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;
                                                        l_log_data := l_log_data || '2*10[' || s_appy_prem   ||']=일할 적용보험료' ||chr(13)||chr(10);
                                                        l_log_data := l_log_data || '2*11[' || s_basic_prem  ||']=일할 기본보험료' ||chr(13)||chr(10);
            else
                /* 보험료 계산 - 일할, 단기 구분한다. */
                if  s_0013_c_cancel_calc_gb <> '1' then
                    /* 단기요율 계산 = 적용종료일 - 적용시작일 */
                    f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_c_appy_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                    f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                    /* 보험료 단기 계산 = 년간 총 적용보험료 * 단기적용율   */
                    s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);
                    s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);
                                                        l_log_data := l_log_data || '2*10[' || s_appy_prem   ||']=단기 적용보험료' ||chr(13)||chr(10);
                                                        l_log_data := l_log_data || '2*11[' || s_basic_prem  ||']=단기 기본보험료' ||chr(13)||chr(10);
                else
                    /* 보험료 일할 계산 = 년간 총 적용보험료 * (적용종료일 - 적용시작일) / (보험종기 - 보험시기)   */
                    s_appy_prem  :=round(i_dmbo_appy_prem   * ((s_0013_c_appy_to - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;
                    s_basic_prem :=round(i_dmbo_basic_prem  * ((s_0013_c_appy_to - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;
                                                        l_log_data := l_log_data || '2*10[' || s_appy_prem   ||']=일할 적용보험료' ||chr(13)||chr(10);
               if  V_ISTAR_CONT_DATE is not null and V_IEND_CONT_DATE is not null and V_ISTAR_CONT_DATE <= V_IEND_CONT_DATE then
                    s_cont_mm            := trunc(months_between(V_IEND_CONT_DATE, V_ISTAR_CONT_DATE), 0);
                    s_cont_dd            := ceil(V_IEND_CONT_DATE - V_ISTAR_CONT_DATE ) ;
                                             l_log_data := l_log_data || '024* [' || s_cont_mm         ||']=보험가입개월수' ||chr(13)||chr(10);
                                             l_log_data := l_log_data || '025* [' || s_cont_dd         ||']=보험가입일수'   ||chr(13)||chr(10);

                   s_basic_year_prem := s_dmbo_basic_prem * s_cont_dd; --년간 기본보험료
                   s_dmbo_basic_prem := s_dmbo_basic_prem * s_cont_dd; --계약기간 기본보험료
                                             l_log_data := l_log_data || '026* [' || s_dmbo_basic_prem ||']=기본보험료 * 보험일수' ||chr(13)||chr(10);
                   s_appy_year_prem := s_dmbo_appy_prem * s_cont_dd;   --년간 적용보험료
                   s_dmbo_appy_prem := s_dmbo_appy_prem * s_cont_dd;   --계약기간 적용보험료

               end if;

               s_dmbo_appy_prem := round(s_dmbo_appy_prem/10, 0) * 10 ;  --적용보험료
               s_appy_year_prem := round(s_appy_year_prem/10, 0) * 10 ;  --년간 적용보험료

                               l_log_data  := l_log_data || '037* [' || s_dmbo_appy_prem ||']=적용보험료 * 10'         ||chr(13)||chr(10);
                                              l_log_data  := l_log_data || '038* [' || s_appy_year_prem ||']=연간적용보험료 * 10'         ||chr(13)||chr(10);

               /*
               s_dmbo_appy_prem := round(s_dmbo_appy_prem/10, 0) ;
                                             l_log_data  := l_log_data || '031* [' || s_dmbo_appy_prem ||']=round(적용보험료/10, 0)' ||chr(13)||chr(10);
               s_dmbo_appy_prem := s_dmbo_appy_prem * 10;
                                             l_log_data  := l_log_data || '032* [' || s_dmbo_appy_prem ||']=적용보험료 * 10'         ||chr(13)||chr(10);
        */
               /*********************************************/
               /* 110. Log Table Insert 하기   **************/
               /* l_log_step에 담보코드 있으면 로그남김******/
               /*********************************************/

               if  l_log_level = 1 or nvl(regexp_substr(l_log_step,s_0203_dmbo_cd),' ') = s_0203_dmbo_cd then
                    PR_INSERT_LOG(l_log_date,l_log_sp_name,l_log_no,l_log_gubun,s_0203_dmbo_cd,l_log_data);
               end if;

               l_log_data  :='';

               if  i_job_gubun = '1' then
                    /***************************************************/
                    /* 120 .- 담보기간별분담금(TBIB0014)               */
                    /*      - 담보별분납계획  (TBIB0015) Insert        */
                    /***************************************************/
                    PR_RENT_D_BUNAP_RATE(s_enter_no          ,s_0203_dmbo_cd      ,V_NA_MTH                        ,'0'
                                        ,s_dmbo_basic_prem   ,s_dmbo_appy_prem    ,1                               ,V_ISTAR_CONT_DATE
                                        ,0                   ,V_I_KIND_CD         ,V_IEND_CONT_DATE                ,s_basic_year_prem
                                        ,s_appy_year_prem  );

                    s_tot_appy_prem  := s_tot_appy_prem + s_dmbo_appy_prem;
               else
                    /***************************************************/
                    /* 120 .- 담보기간별분담금(TBID0014)               */
                    /*      - 담보별분납계획  (TBID0015) Insert        */
                    /***************************************************/
                    IF V_ENDOR_CD = '801D' then

                        PR_RENT_D_L_ENDOR_BUNAP_RATE(s_enter_no         ,s_endor_no            ,V_ENDOR_NO_BEF_MAX              ,s_0203_dmbo_cd             ,V_NA_MTH
                                                  ,'0'                ,s_dmbo_basic_prem     ,s_dmbo_appy_prem                ,V_BNP_CNT                  ,V_ISTAR_CONT_DATE
                                                  ,0                  ,V_I_KIND_CD           ,V_IEND_CONT_DATE                ,V_BASIS_FROM               ,V_BASIS_TO
                                                  ,V_USER_ID          ,V_END_NAB_NO          ,V_BEF_15_SEQ_NO                 ,s_basic_year_prem          ,s_appy_year_prem
                                                  ,r_return );
                    else
                        PR_RENT_D_ENDOR_BUNAP_RATE(s_enter_no         ,s_endor_no            ,V_ENDOR_NO_BEF_MAX              ,s_0203_dmbo_cd             ,V_NA_MTH
                                              ,'0'                ,s_dmbo_basic_prem     ,s_dmbo_appy_prem                ,V_BNP_CNT                  ,V_ISTAR_CONT_DATE
                                              ,0                  ,V_I_KIND_CD           ,V_IEND_CONT_DATE                ,V_BASIS_FROM               ,V_BASIS_TO
                                              ,V_USER_ID          ,V_END_NAB_NO          ,V_BEF_15_SEQ_NO                 ,s_basic_year_prem          ,s_appy_year_prem
                                              ,r_return );

                    END IF;

                    r_return_ok       := regexp_substr(r_return,'[^|]+',1,1);
                    if  r_return_ok = 'OK' then
                         s_dmbo_basic_prem := s_dmbo_basic_prem + to_number(regexp_substr(r_return_ok,'[^|]+',1,2));
                         s_dmbo_appy_prem  := s_dmbo_appy_prem  + to_number(regexp_substr(r_return_ok,'[^|]+',1,3));
                    end if;

                    s_tot_appy_prem  := s_tot_appy_prem + s_dmbo_appy_prem;

               end if;

          /********************************************************************************/
          /* Loop End    ******************************************************************/
          /********************************************************************************/
          end loop;

          if  i_job_gubun = '1' then
               /******************************************************************************/
               /* 92. 분납계획(TBIB0016) Table Insert 하기     *******************************/
               /******************************************************************************/
               PR_RENT_D_BUNAP_TOT_RATE( s_enter_no ,   V_I_KIND_CD ,  V_NA_MTH ,   '0' ,  V_BNP_CNT ,  s_tot_appy_prem ,  V_ISTAR_CONT_DATE , 0 );

               /******************************************************************************/
               /* 93. Master(TBIB0001) Table Insert 하기       *******************************/
               /******************************************************************************/
               begin
                    update TBIB0001 A
                       set APPY_SUM_PREM = ( select sum(APPY_PREM) from TBIB0014 where ENT_DGN_NO = s_enter_no and DMBO_CD not in ( '21', '22', '23') ) ,
                           RIDER_PREM    = ( select sum(APPY_PREM) from TBIB0014 where ENT_DGN_NO = s_enter_no and DMBO_CD     in ( '21', '22', '23') ) ,
                           SUM_PREM      = ( select sum(APPY_PREM) from TBIB0014 where ENT_DGN_NO = s_enter_no ) ,
                           CONT_MM       = s_cont_mm,
                           CONT_DD       = s_cont_dd
                     where ENT_DGN_NO    = s_enter_no;

                    exception when others then
                         s_err_msg := 'TBIB0001 UPDATE ERROR: '||sqlerrm ;
                         raise e_err;
               end;

               o_return := 'OK';

          elsif  i_job_gubun = '2' then
               PR_RENT_D_ENDOR_BUNAP_TOT_RATE(s_enter_no      ,s_endor_no        ,V_I_KIND_CD      ,'0'          ,V_BNP_CNT
                                             ,V_USER_ID       ,V_TREATY_HQ_CD    ,V_TREATY_BRH_CD  ,V_TREATY_CD  ,V_END_NAB_NO
                                             ,V_BEF_15_SEQ_NO);
               begin
                    select sum(decode(ENDOR_NO, s_endor_no   ,APPY_PREM, 0))   as APPY_PREM_AFT
                         , sum(decode(ENDOR_NO, s_endor_no-1 ,APPY_PREM, 0))   as APPY_PREM_BEF
                         , sum(decode(ENDOR_NO, s_endor_no   ,APPY_PREM, 0)) - sum(decode(ENDOR_NO, s_endor_no-1, APPY_PREM, 0)) as DIFF_AMT
                      into V_APPY_PREM_AFT, V_APPY_PREM_BEF, V_DIFF_AMT
                      from TBID0013
                     where POL_NO = s_enter_no
                       and ENDOR_NO between s_endor_no - 1 and s_endor_no;

                    update TBIC0202
                       set ENDOR_BEFORE_PREM = nvl(V_APPY_PREM_BEF, 0)
                         , ENDOR_AFTER_PREM  = nvl(V_APPY_PREM_AFT, 0)
                         , PREM_DIFF_AMT     = nvl(V_DIFF_AMT,0)
                         , GET_GB            = decode(sign(V_DIFF_AMT), -1, '4', 0, '9', '3')
                     where POL_NO   = s_enter_no
                       and ENDOR_NO = s_endor_no;

                    exception when others then
                         s_err_msg := 'TBIC0202 UPDATE ERROR: '||sqlerrm ;
                         raise e_err;
               end;

               begin
                    update TBID0001 A
                       set APPY_SUM_PREM = ( select sum(APPY_PREM) from TBID0014 where POL_NO = s_enter_no and ENDOR_NO = s_endor_no and DMBO_CD not in ( '21', '22', '23') )
                         , RIDER_PREM    = ( select sum(APPY_PREM) from TBID0014 where POL_NO = s_enter_no and ENDOR_NO = s_endor_no and DMBO_CD     in ( '21', '22', '23') )
                         , SUM_PREM      = ( select sum(APPY_PREM) from TBID0014 where POL_NO = s_enter_no and ENDOR_NO = s_endor_no )
                     where POL_NO        = s_enter_no
                       and ENDOR_NO      = s_endor_no;

                    exception when others then
                         s_err_msg := 'TBID0001 UPDATE ERROR: '||sqlerrm ;
                         raise e_err;
               end;

               begin
                    select 'OK'
                      into V_CHANGE_OK
                      from TBID0016
                     where POL_NO   = s_enter_no
                       and ENDOR_NO = s_endor_no
                       and SEQ_NO   = V_BEF_15_SEQ_NO
                       and rownum   = 1;

                    exception when no_data_found then
                                   V_CHANGE_OK :='NoChange';
                              when others        then
                                   s_err_msg := 'TBID0016 SELECT ERROR: '||sqlerrm ;
                                   raise e_err;
               end;

               if  V_CHANGE_OK <> 'OK' then
                    V_CHANGE_OK := 'NoChange';
               end if;

               o_return := V_CHANGE_OK;

          end if;

          /***************************************************************************************/
          /**99. Last Log Table                     **********************************************/
          /***************************************************************************************/
          if  l_log_level = 1 or nvl(regexp_substr(l_log_step,'99'),' ') = '99' then
               PR_INSERT_LOG(l_log_date,l_log_sp_name ,l_log_no ,l_log_gubun,'End','Good By ~~~~~~~~' );
          end if;

     end loop;

     exception when e_err then
                    o_return := s_err_msg;
                    raise_application_error(-20010, 'pr_rent_daily_amt Main Error: '||sqlerrm);
               when others then
                    o_return := sqlerrm;
                    raise_application_error(-20010, 'pr_rent_daily_amt Main Error: '||sqlerrm);
END;
CREATE -- added during DDL generation.
PROCEDURE          PR_RENT_D_AMT( i_job_gubun in varchar2, i_enter_no in varchar2 ,i_endor_no in varchar2, o_return out varchar2) as

/***************************************************************************************************/
/* Procedure Name :  PR_RENT_D_AMT                                                             */
/* Function       :  일일 자차 가입설계 및 배서 보험료 계산                                        */
/* Parameter      :  i_job_gubun       [ IN] 작업구분(1: 가입설계 2: 배서)                         */
/*                   i_enter_no        [ IN] 설계번호 또는 증권번호(증권번호 수만큼 붙여서 온다.)  */
/*                   i_endor_no        [ IN] 배서번호(증권번호 수만큼 붙여서 온다.                 */
/* Create Date    : 2013/05/06                                                                     */
/* Creator        : J.H. CHOI                                                                      */
/***************************************************************************************************/
     /******************************************************************************************/
     /**** TBIB0001[설계 Maseter-계약조건(TBID0001)*********************************************/
     /******************************************************************************************/
     V_I_KIND_CD                         TBIB0001.I_KIND_CD%TYPE;                 --[IN] 보험종목
     V_ISTAR_CONT_DATE                   TBIB0001.ISTAR_CONT_DATE%TYPE;           --[IN] 보험시기     (보험료 계산 기준 일자)
     V_IEND_CONT_DATE                    TBIB0001.IEND_CONT_DATE%TYPE;            --[IN] 보험종기     (보험료 계산 종료 일자 )
     V_NA_MTH                            TBIB0001.NA_MTH%TYPE;                    --[IN] 납입방법
     V_BNP_CNT                           TBIB0001.BNP_CNT%TYPE;                   --[IN] 납입횟차
     V_CAR_KIND_CD                       TBIB0001.CAR_KIND_CD%TYPE;               --[IN] 차종코드
     V_CAR_TYPE_CD                       TBIB0001.CAR_TYPE_CD%TYPE;               --[IN] 차형태코드-차종세분코드

     V_APPY_FROM                         TBID0001.APPY_FROM%TYPE;                 --[IN] 적용시작일자
     V_APPY_TO                           TBID0001.APPY_TO%TYPE;                   --[IN] 적용종료일자
     V_BASIS_FROM                        TBID0001.BASIS_FROM%TYPE;                --[IN] 기준시작일자
     V_BASIS_TO                          TBID0001.BASIS_TO%TYPE;                  --[IN] 기준종료일자
     V_ENDOR_NO_BEF_MAX                  TBID0001.ENDOR_NO%TYPE;                  --[IN] 기준일 이전의  배서중 배서기준일 중 가장 가장큰 ENDOR_NO

     V_USER_ID                           TBID0001.USER_ID%TYPE;                   --[IN] USER_ID
     V_TREATY_HQ_CD                      TBID0001.TREATY_HQ_CD%TYPE;              --[IN] 취급자본부코드
     V_TREATY_BRH_CD                     TBID0001.TREATY_BRH_CD%TYPE;             --[IN] 취급자대리점코드
     V_TREATY_CD                         TBID0001.TREATY_CD%TYPE;                 --[IN] 취큽자
     V_END_NAB_NO                        TBID0001.END_NAB_NO%TYPE;                --[IN] 최종납입회차
     V_ENDOR_CD                          TBIC0203.ENDOR_CD%TYPE;                  --배서코드

     /******************************************************************************************/
     /*** TBIC0202 [계약 변경이력]**************************************************************/
     /******************************************************************************************/
     V_APPY_PREM_AFT                     number;                                  --[IN] 배서 변경후 적용분담금
     V_APPY_PREM_BEF                     number;                                  --[IN] 배서 변경전 적용분담금
     V_DIFF_AMT                          number;                                  --[IN] 차액분담금
     /******************************************************************************************/
     /*** TBIB0205 [가입설계-분납율기준]********************************************************/
     /******************************************************************************************/
     V_0012_INFO                         varchar2(300);                           --[IN] 특약 정보
     V_CHANGE_OK                         varchar2(20);                            --[IN,OUT] 배서 금액변동 여부 확인
     V_BEF_15_SEQ_NO                     number;                                  --[IN] 분납 SUB SEQ
     V_DAILY_CAR_DSC_R                   number(5,2);                             --[IN] 일일자차 할인율

     /******************************************************************************************/
     /*** 계산 변수 (보험료 계산 관련 내부 처리 Logic 변수 ) ***********************************/
     /******************************************************************************************/
     s_basic_year_prem                   number(13);                              --[OUT] 년간 기본분담금
     s_appy_year_prem                    number(13);                              --[OUT] 년간 적용분담금
     s_dmbo_appy_prem                    number := 0 ;                            --[OUT] 적용분담금
     s_dmbo_basic_prem                   number := 0 ;                            --[OUT] 기본분담금
     s_dmbo_new_rt                       number := 0 ;                            --[OUT] [기본분담금] 자동차요율
     s_tot_appy_prem                     number := 0;                             --[OUT] 총분담금

     s_special_rate                      number := 100;                           --[OUT] 특별요율
     s_treat_rate                        number := 1.0;                           --[OUT] 연령한정특약요율

     s_cont_yy                           number;                                  --[OUT] 계약년수
     s_cont_mm                           number;                                  --[OUT] 계약월수
     s_cont_dd                           number;                                  --[OUT] 계약일수
     s_istar_cont_date                   date;                                    --[IN] 공제시기(시분초 제거)
     s_iend_cont_date                    date;                                    --[IN] 공제시기(시분초 제거)

     s_gijun_from                        date;                                    --[IN] 특약/특별요율 기준시작일
     r_return                            varchar2(100);                           --[OUT] 분납 프로시저 결과
     r_return_ok                         varchar2(50);                            --[OUT] 분납 프로시저 결과확인

     /***************************************************************/
     /*** Cursor를 사용하지 않고 Loop를 하기 위해 추가 변수 정의 ****/
     /***************************************************************/
     V_0203_INFO                         varchar2(1000);                          --담보정보
     s_0203_sub                          varchar2(100);                           --처리할 담보코드 정보(컬럼|컬럼|컬럼,컬럼|컬럼|컬럼,...)

     s_0203_basic_prem                   number;                                  --담보 기본분담금
     s_0203_new_rt                       number;                                  --담보 신차특성율
     s_0203_dmbo_cd                      varchar2(100);                           --담보코드

     s_idx1                              number;                                  --로우인덱스수
     s_idx2                              number;                                  --컬럼인덱스수

     /**************************************************************************************************************************/
     /*** 일일자차 운전자가 2명인 경우 계약이 2건이 되어야 하기에 파라미터 넘길때 붙여서 넘기는 값을 구분하여 저장하는 변수 ****/
     /**************************************************************************************************************************/
     s_enter_no                          varchar2(14);                            --for loop 실행값(가입설계번호 또는 증권번호)
     s_enter_no1                         varchar2(14);
     s_enter_no2                         varchar2(14);
     s_endor_no                          varchar2(5);                             --for loop 실행값(배서번호)
     s_loop_idx                          number := 0;                             --loop 횟수

     /***************************************************************/
     /*** lOG 변수 *************************************************/
     /***************************************************************/
     l_log_level                         number := 0;                             --로그레벨[0~1]: 0->l_log_step에 정의된 항목과 찍는다..  1->모두찍는다.)
     l_log_sp_name                       varchar2(50)  := 'PR_RENT_DAILY_AMT' ;   --로그 Stored Procedure Name
     l_log_no                            varchar2(20);                            --로그 번호(증권번호, 가입설계번호)
     l_log_gubun                         varchar2(20);                            --로그 구부자
     l_log_data                          varchar2(4000);                          --로그 DATA
     l_log_date                          varchar2(16)  := to_char(sysdate,'yyyymmddhh24miss');
     l_log_step                          varchar2(100) :='07 22 99';               /*'07 22 99'*/

     /************************************************/
     /*** 에러처리                                ****/
     /************************************************/
     e_err                               exception;
     s_err_msg                           varchar2(4000);

BEGIN

     o_return := 'NOT_OK';

     --가입설계번호 또는 증권번호 가 없을 경우 에러처리
     if i_enter_no is null or i_enter_no = '' then
          s_err_msg := 'i_enter_no NOT FOUND' ;
          raise e_err;
     end if;

     --배서이면서 배서번호가 없을 경우 에러처리
     if i_job_gubun = '2' and (i_endor_no is null or i_endor_no = '') then
          s_err_msg := 'i_endor_no NOT FOUND' ;
          raise e_err;
     end if;

     --가입설계번호 또는 증권번호 수 만큼 루프 돌리기 위해서
     s_loop_idx := length(i_enter_no) - length(replace(i_enter_no,',','')) + 1;


     --가입설계는 처음부터 지우고 시작한다. 예를들어 처음에 2개 던졌다가 추후에 한개만 던지는 경우가 있을 수 있으므로
     if  i_job_gubun = '1' and s_loop_idx > 0 then
          s_enter_no  := regexp_substr(i_enter_no, '[^,]+', 1, 1) ;
          s_enter_no1 := substr(s_enter_no, 0, length(s_enter_no)-1)||'0';
          s_enter_no2 := substr(s_enter_no, 0, length(s_enter_no)-1)||'1';

          delete from TBIB0014 where ENT_DGN_NO IN (s_enter_no1, s_enter_no2);
          delete from TBIB0015 where ENT_DGN_NO IN (s_enter_no1, s_enter_no2);
          delete from TBIB0016 where ENT_DGN_NO IN (s_enter_no1, s_enter_no2);

     end if;

     for  rec_idx in 1..s_loop_idx loop
          s_enter_no := regexp_substr(i_enter_no, '[^,]+', 1, rec_idx) ;
          s_endor_no := i_endor_no;

          --loop 돌면서 변수 초기화가 필요한 것은 기술한다.
          l_log_no        := '';
          s_idx1          := 0;
          s_idx2          := 0;
          s_tot_appy_prem := 0;

          if  i_job_gubun = '1' then
              l_log_sp_name := l_log_sp_name || '[가입]' ;
              l_log_no      := s_enter_no ;
              l_log_gubun   := '가입설계';
          else
              l_log_sp_name := l_log_sp_name || '[배서]' ;
              l_log_gubun   := '배서설계';
              l_log_no      := s_endor_no;
          end if;

          /******************************************************************/
          /**Log Start                        *******************************/
          /******************************************************************/
          if  l_log_level = 1 or nvl(regexp_substr(l_log_step,'99'),' ') = '99' then
               PR_INSERT_LOG(l_log_date,l_log_sp_name ,l_log_no ,l_log_gubun, l_log_gubun, '시작합니다....' );
          end if;

          /***************************************************************/
          /*                                                             */
          /**** 가입설계 보험료 계산을 위한 Data Select                  */
          /*                                                             */
          /***************************************************************/
          if  i_job_gubun = '1' and s_enter_no is not null then

               /*****************************************************************/
               /*** 특별약관 코드 및 특별요율 코드 조회 *************************/
               /*****************************************************************/
               begin
                    select to_char(replace(WM_CONCAT(RATE_CD),',','|'))
                      into V_0012_INFO
                      from TBIB0012
                     where ENT_DGN_NO = s_enter_no;

                    exception when others then
                         s_err_msg := 'TBIB0012 SELECT ERROR: '||sqlerrm ;
                         raise e_err;
               end;

               /*****************************************************************/
               /*** 보험(공제) 설계 기본 정보 조회      *************************/
               /*****************************************************************/
               begin
                    select I_KIND_CD          , CAR_KIND_CD          , CAR_TYPE_CD          , ISTAR_CONT_DATE
                         , IEND_CONT_DATE     , NA_MTH               , BNP_CNT
                      into V_I_KIND_CD                         /* [IN] 보험종목    **************/
                         , V_CAR_KIND_CD                       /* [IN] 차종코드    **************/
                         , V_CAR_TYPE_CD                       /* [IN] 차형태코드-차종세분코드 **/
                         , V_ISTAR_CONT_DATE                   /* [IN] 보험시기 *****************/
                         , V_IEND_CONT_DATE                    /* [IN] 보험종기 *****************/
                         , V_NA_MTH                            /* [IN] 납입방법 *****************/
                         , V_BNP_CNT                           /* [IN] 분납횟수 *****************/
                      from TBIB0001
                     where ENT_DGN_NO = s_enter_no;

                    exception when others then
                         s_err_msg := 'TBIB0001 SELECT ERROR: '||sqlerrm ;
                         raise e_err;
               end;

               begin
                    select wm_concat(B.BASIC_PREM ||'|' ||
                                     B.NEW_RT     ||'|' ||
                                     B.DMBO_CD)
                      into V_0203_INFO
                      from TBIB0013 A
                         , TBIB0203 B
                     where A.ENT_DGN_NO      = s_enter_no
                       and A.INSUR_AMT_GB    = B.DMBO_ENT_AMT_GB
                       and A.DMBO_CD         = B.DMBO_CD
                       and B.I_KIND_CD       = V_I_KIND_CD
                       and B.CO_GB           = '0'
                       and B.CAR_KIND        = V_CAR_KIND_CD
                       and B.CAR_KIND2       = V_CAR_TYPE_CD
                       and B.APLY_FYMD      <= to_date(V_ISTAR_CONT_DATE)
                       and B.APLY_EYMD      >= to_date(V_ISTAR_CONT_DATE);

                    exception when others then
                         s_err_msg := 'TBIB0013 SELECT ERROR: '||sqlerrm ;
                         raise e_err;
               end;

               /*****************************************************************/
               /*** 일일자차 할인율                     *************************/
               /*****************************************************************/
               begin
                    select DECODE(s_loop_idx, 1, CONT_ONE_DEC_R, CONT_TWO_DEC_R)
                      into V_DAILY_CAR_DSC_R
                      from TBIB0001 A, TBAA0001 B
                     where A.ENT_DGN_NO = s_enter_no
                       and A.CUST_NO    = B.CUST_NO;
                  exception when no_data_found then
                       V_DAILY_CAR_DSC_R := 0;
               end;

               s_idx1 := length(V_0203_INFO) - length(replace(V_0203_INFO,',','')) + 1;
               s_idx2 :=0;

               /***************************************************************/
               /*                                                             */
               /**** 배서설계 보험료 계산을 위한 Data Select                  */
               /*                                                             */
               /***************************************************************/
          elsif i_job_gubun = '2' and s_enter_no is not null then

               delete from TBID0014 where POL_NO =  s_enter_no and ENDOR_NO = s_endor_no ;
               delete from TBID0015 where POL_NO =  s_enter_no and ENDOR_NO = s_endor_no ;
               delete from TBID0016 where POL_NO =  s_enter_no and ENDOR_NO = s_endor_no ;

               /*****************************************************************/
               /*** 특별약관 코드 및 특별요율 코드 조회 *************************/
               /*****************************************************************/
               begin
                    select to_char(replace(WM_CONCAT(RATE_CD),',','|'))
                      into V_0012_INFO
                      from TBID0012
                     where POL_NO   = s_enter_no
                       and ENDOR_NO = s_endor_no;

                    exception when others then
                         s_err_msg := 'TBID0012 SELECT ERROR: '||sqlerrm ;
                         raise e_err;
               end;

               /*****************************************************************/
               /*** 보험(공제) 설계 기본 정보 조회      *************************/
               /*****************************************************************/
               begin
                    select I_KIND_CD          , CAR_KIND_CD          , CAR_TYPE_CD          , ISTAR_CONT_DATE
                         , IEND_CONT_DATE     , BASIS_FROM           , BASIS_TO             , APPY_FROM
                         , APPY_TO            , USER_ID              , TREATY_HQ_CD         , TREATY_BRH_CD
                         , TREATY_CD          , END_NAB_NO           , NA_MTH               , BNP_CNT
                      into V_I_KIND_CD                         /* [IN] 보험종목                  */
                         , V_CAR_KIND_CD                       /* [IN] 차종코드                  */
                         , V_CAR_TYPE_CD                       /* [IN] 차형태코드-차종세분코드   */
                         , V_ISTAR_CONT_DATE                   /* [IN] 보험시기                  */
                         , V_IEND_CONT_DATE                    /* [IN] 보험종기                  */
                         , V_BASIS_FROM                        /* [IN] 배서기준 시작일자         */
                         , V_BASIS_TO                          /* [IN] 배서기준 종료일자         */
                         , V_APPY_FROM                         /* [IN] 적용기준 시작일자         */
                         , V_APPY_TO                           /* [IN] 적용기준 종료일자         */
                         , V_USER_ID                           /* [IN] USER_ID                   */
                         , V_TREATY_HQ_CD                      /* [IN] 취급자 본부코드           */
                         , V_TREATY_BRH_CD                     /* [IN] 취급자 관리점코드         */
                         , V_TREATY_CD                         /* [IN] 취급자 코드               */
                         , V_END_NAB_NO                        /* [IN] 최종납입회차              */
                         , V_NA_MTH                            /* [IN] 납입방법                  */
                         , V_BNP_CNT                           /* [IN] 분납횟수                  */
                     from  TBID0001
                    where  POL_NO   = s_enter_no
                      and  ENDOR_NO = s_endor_no;

                    exception when others then
                         s_err_msg := 'TBID0001 SELECT ERROR: '||sqlerrm ;
                         raise e_err;
               end;

               begin
                    /****************************/
                    /* 분납회차 Max Seq         */
                    /****************************/
                    select  nvl(max(SEQ_NO),0) + 1
                      into  V_BEF_15_SEQ_NO
                      from  TBID0015
                     where  POL_NO   = s_enter_no
                       and  ENDOR_NO = s_endor_no -1;

                    /****************************/
                    /* 기준일 제외 Max Endor_no */
                    /****************************/
                    select  nvl(max(ENDOR_NO),0)
                      into  V_ENDOR_NO_BEF_MAX
                      from  TBID0001
                     where  POL_NO         = s_enter_no
                       and  ENDOR_NO       < s_endor_no
                       and  ((BASIS_FROM   < V_BASIS_FROM)  or (BASIS_FROM  = V_BASIS_FROM and ENDOR_NO = 0))
                       and  ENDOR_STATUS   = '3';

                    exception when others then
                         s_err_msg := 'TBID0001 SELECT ERROR(ENDOR_NO): '||sqlerrm ;
                         raise e_err;

               end;

               /*****************************************************************/
               /*** 일일자차 할인율                     *************************/
               /*****************************************************************/
               begin
                    select DECODE(s_loop_idx, 1, CONT_ONE_DEC_R, CONT_TWO_DEC_R)
                      into V_DAILY_CAR_DSC_R
                      from TBID0001 A, TBAA0001 B
                     where A.POL_NO   = s_enter_no
                       and A.ENDOR_NO = s_endor_no
                       and A.CUST_NO  = B.CUST_NO;
                  exception when no_data_found then
                       V_DAILY_CAR_DSC_R := 0;
               end;

               begin
                     /****************************/
                     /* 배서코드를 검색한다.     */
                     /****************************/
                     select ENDOR_CD
                       into V_ENDOR_CD
                       from TBIC0203
                      where POL_NO   = i_enter_no
                        and ENDOR_NO = i_endor_no
                      group by ENDOR_CD;

                   exception when no_data_found then
                          V_ENDOR_CD := '000';
               end;

               begin
                    select wm_concat(B.BASIC_PREM ||'|' ||
                                     B.NEW_RT     ||'|' ||
                                     B.DMBO_CD)
                      into V_0203_INFO
                      from TBID0013 A
                         , TBIB0203 B
                     where A.POL_NO          = s_enter_no
                       and  ENDOR_NO         = s_endor_no
                       and A.INSUR_AMT_GB    = B.DMBO_ENT_AMT_GB
                       and A.DMBO_CD         = B.DMBO_CD
                       and B.I_KIND_CD       = V_I_KIND_CD
                       and B.CO_GB           = '0'
                       and B.CAR_KIND        = V_CAR_KIND_CD
                       and B.CAR_KIND2       = V_CAR_TYPE_CD
                       and B.APLY_FYMD      <= to_date(V_ISTAR_CONT_DATE)
                       and B.APLY_EYMD      >= to_date(V_ISTAR_CONT_DATE);

                    exception when others then
                         s_err_msg := 'TBID0013 AND TBIB0203 SELECT ERROR: '||sqlerrm ;
                         raise e_err;
               end;

               s_idx1 := length(V_0203_INFO) - length(replace(V_0203_INFO,',','')) + 1;
               s_idx2 :=0;
          else
               s_idx1 :=0;
               s_idx2 :=0;
          end if;

          /******************************************************************/
          /**담보별 Loop Start                          ****************************/
          /******************************************************************/
          loop
               s_idx2 := s_idx2 +1;
               If  s_idx2 > s_idx1 then
                    exit;
               end if;

               s_0203_sub          :=           regexp_substr(V_0203_INFO  ,'[^,]+',1,s_idx2 );

               s_0203_basic_prem   := to_number(regexp_substr(s_0203_sub   ,'[^|]+',1,1 ));
               s_0203_new_rt       := to_number(regexp_substr(s_0203_sub   ,'[^|]+',1,2 ));
               s_0203_dmbo_cd      :=           regexp_substr(s_0203_sub   ,'[^|]+',1,3 );

               /********************************/
               /* 00.기본보험료 세팅 **/
               /********************************/
               s_dmbo_basic_prem  :=   s_0203_basic_prem;
                                             l_log_data :='000* [' || s_0203_basic_prem ||']=기본보험료' ||chr(13)||chr(10);
       /*20140218 휴업 손해 특약일 경우도 차대차 한정에 대한 율을 적용해야함(외제차 할증은 제거)*/
              /*
               if  s_0203_dmbo_cd  not in ('22') then


                    -- 10. 특약/특별요율 (일일자차는 외제차 할증만)

                    if  i_job_gubun = '1' then
                         s_gijun_from := to_date(V_ISTAR_CONT_DATE);
                    else
                         s_gijun_from := to_date(V_BASIS_FROM);
                    end if;

                    PR_RENT_D_SPECIAL_RATE(i_job_gubun          ,s_enter_no        ,s_endor_no           ,V_I_KIND_CD      ,V_CAR_KIND_CD
                                          ,V_CAR_TYPE_CD         ,s_gijun_from     ,s_0203_dmbo_cd       ,V_0012_INFO      ,s_special_rate
                                          ,s_treat_rate);

                                                        l_log_data := l_log_data || '011* [' || s_special_rate    ||']=특별요율' ||chr(13)||chr(10);
                                                        l_log_data := l_log_data || '012* [' || V_DAILY_CAR_DSC_R ||']=할인율' ||chr(13)||chr(10);

                    s_dmbo_appy_prem := s_dmbo_basic_prem * trunc(s_special_rate/100, 3) * trunc(V_DAILY_CAR_DSC_R/100, 3) * trunc(s_treat_rate, 3);
                                                        l_log_data := l_log_data || '021* [' || s_dmbo_appy_prem ||']=적용보험료 * 특별요율 * 할인율' ||chr(13)||chr(10);
               else
                    s_dmbo_appy_prem  := s_dmbo_basic_prem * trunc(V_DAILY_CAR_DSC_R/100, 3);
                                                        l_log_data := l_log_data || '022* [' || s_dmbo_appy_prem ||']=적용보험료 * 할인율' ||chr(13)||chr(10);
               end if;
              */

              /************************************************/
              /* 10. 특약/특별요율 (일일자차는 외제차 할증만) */
              /************************************************/
              if  i_job_gubun = '1' then
                   s_gijun_from := to_date(V_ISTAR_CONT_DATE);
              else
                   s_gijun_from := to_date(V_BASIS_FROM);
              end if;

              PR_RENT_D_SPECIAL_RATE(i_job_gubun          ,s_enter_no        ,s_endor_no           ,V_I_KIND_CD      ,V_CAR_KIND_CD
                                    ,V_CAR_TYPE_CD         ,s_gijun_from     ,s_0203_dmbo_cd       ,V_0012_INFO      ,s_special_rate
                                    ,s_treat_rate);

                                                  l_log_data := l_log_data || '011* [' || s_special_rate    ||']=특별요율' ||chr(13)||chr(10);
                                                  l_log_data := l_log_data || '012* [' || s_treat_rate    ||']=차대차한정' ||chr(13)||chr(10);
                                                  l_log_data := l_log_data || '013* [' || V_DAILY_CAR_DSC_R ||']=할인율' ||chr(13)||chr(10);

              if  s_0203_dmbo_cd  in ('22') THEN

               s_dmbo_appy_prem := s_dmbo_basic_prem * trunc(s_treat_rate, 3);
                                                   l_log_data := l_log_data || '021* [' || s_dmbo_appy_prem ||']=적용보험료 * 특별요율 * 할인율' ||chr(13)||chr(10);
              else

               s_dmbo_appy_prem := s_dmbo_basic_prem * trunc(s_special_rate/100, 3) * trunc(s_treat_rate, 3);
                                                   l_log_data := l_log_data || '021* [' || s_dmbo_appy_prem ||']=적용보험료 * 특별요율 * 할인율' ||chr(13)||chr(10);
              end if;
                                           l_log_data  := l_log_data || '022* [' || s_dmbo_appy_prem ||']=적용보험료'         ||chr(13)||chr(10);
                 s_dmbo_appy_prem := TRUNC(s_dmbo_appy_prem,-1);
                                           l_log_data  := l_log_data || '023* [' || s_dmbo_appy_prem ||']=적용보험료(1자리 버림)'         ||chr(13)||chr(10);

               /* 날짜 계산시 무조건 올림처리한다. 단 1초라도 넘어가면 하루치 보험료로 계산한다.*/

            elsif  i_endor_cd <> '801'  then             /*단기자차가 아니면 (기존대로)*/
                /***********************************************************/
                /* 회차별 보험료 Looping 갯수 산정                         */
                /***********************************************************/
                f_idx1  := length(f_bunhal_bohum) - length(replace(f_bunhal_bohum,',','')) + 1;
                f_idx2  := 0;
                                                           l_log_data := l_log_data || '2*12 [' || f_idx1  ||']=f_idx1' ||chr(13)||chr(10);
                                                           l_log_data := l_log_data || '2*13 [' || f_idx2  ||']=f_idx2' ||chr(13)||chr(10);
                Loop
                    f_idx2 := f_idx2 + 1;
                    if  f_idx2 > f_idx1 then
                        exit;
                    end if;

                    /***********************************************************/
                    /* 회차별 보험료 정보를 구분자로 Substring 함              */
                    /***********************************************************/
                    s_bunhal_bohum           := regexp_substr(f_bunhal_bohum,'[^,]+',1,f_idx2);

                    s_bunhal_nabib_cnt       := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,1));
                    s_bunhal_nabib_from_date := to_date  (regexp_substr(s_bunhal_bohum,'[^|]+',1,2));
                    s_bunhal_nabib_to_date   := to_date  (regexp_substr(s_bunhal_bohum,'[^|]+',1,3));
                    s_bunhal_nabib_amt1      := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,4));   /* 기준보험료 */
                    s_bunhal_nabib_amt2      := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,5));   /* 적용보험료 */

                                                           l_log_data := l_log_data || '2*'|| f_idx2 || '-02[' || s_bunhal_nabib_cnt         ||']=납입회차'       ||chr(13)||chr(10);
                                                           l_log_data := l_log_data || '2*'|| f_idx2 || '-03[' || s_bunhal_nabib_from_date   ||']=납입일자'       ||chr(13)||chr(10);
                                                           l_log_data := l_log_data || '2*'|| f_idx2 || '-04[' || s_bunhal_nabib_to_date     ||']=납입유효일자'   ||chr(13)||chr(10);
                                                           l_log_data := l_log_data || '2*'|| f_idx2 || '-06[' || s_bunhal_nabib_amt2        ||']=적용보험료'     ||chr(13)||chr(10);

                    s_bunhal_amt1  := s_basic_prem;
                    s_bunhal_amt2  := s_appy_prem;
                    /***********************************************************/
                    /* 회차별 보험료 정보를 구분자로 Substring 함              */
                    /***********************************************************/
                    s_basic_prem   := s_basic_prem - s_bunhal_nabib_amt1;
                    s_appy_prem    := s_appy_prem  - s_bunhal_nabib_amt2;
                                                           l_log_data := l_log_data || '2*'|| f_idx2 || '-08[' || s_appy_prem    ||']=일할적용보험료-회차적용보험료' ||chr(13)||chr(10);
                                                           l_log_data := l_log_data || '2*'|| f_idx2 || '-09[' || i_end_nab_no   ||']=종납회차 '                     ||chr(13)||chr(10);

                    /***********************************************************/
                    /* 현재 납입 회차와 분납회차가 같으면                      */
                    /* 납입순번을 i_bef_15_seq_no 하여 계산된 보험료에서       */
                    /* 회차별로 차감 하고 남은 금액을 모두 Insert.. Loop Exit  */
                    /***********************************************************/
                    if  i_end_nab_no = s_bunhal_nabib_cnt then
                        begin
                            insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                                  DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                                  IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                                  BASIS_FROM,               BASIS_TO,               USER_ID )
                                           select i_pol_no,                 i_endor_no,             s_bunhal_nabib_cnt,         i_bef_15_seq_no,
                                                  i_dmbo_cd,                s_bunhal_amt1,          s_bunhal_amt2,              i_basis_from,
                                                  i_iend_cont_date,         i_endor_no-1,           i_basis_from,               i_iend_cont_date,
                                                  i_basis_from,             i_iend_cont_date,       i_user_id
                                             from DUAL;
                                    exception when others then o_result := 'Error';
                                                               raise_application_error(-20001, '납입회차=분납회차 Insert[TBID0015] Error[150]: '|| sqlerrm);
                        end;
                                                         l_log_data := l_log_data || '2*'|| f_idx2 || '-10[' || '종납회차=분납회차 Insert OK...1' ||chr(13)||chr(10);
                        exit;

                    /***********************************************************/
                    /* 일할계산된 보험료에서 회차별 분할 보험료를 마이너스 한  */
                    /* 금액이 0 보다 크면 아직 남은 회차가 있음으로            */
                    /* Looping 계속                                            */
                    /***********************************************************/
                    elsif s_appy_prem > 0 then

                        begin
                            insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                                  DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                                  IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                                  BASIS_FROM,               BASIS_TO,               USER_ID )
                                           select i_pol_no,                 i_endor_no,             s_bunhal_nabib_cnt,         0,
                                                  i_dmbo_cd,                s_bunhal_nabib_amt1,    s_bunhal_nabib_amt2,        s_bunhal_nabib_from_date,
                                                  s_bunhal_nabib_to_date,   i_endor_no-1,           s_bunhal_nabib_from_date,   s_bunhal_nabib_to_date,
                                                  s_bunhal_nabib_from_date, s_bunhal_nabib_to_date, i_user_id
                                             from DUAL;
                            exception when others then o_result := 'Error';
                                                               raise_application_error(-20001, '분납회차있음 Insert[TBID0015] Error[160]: '|| sqlerrm);
                        end;
                                                          l_log_data := l_log_data || '2*'|| f_idx2 || '-10[' || '분납회차있음 Insert OK...2'  ||chr(13)||chr(10);
                    /***********************************************************/
                    /* 일할계산된 보험료에서 회차별 분할 보험료를 마이너스 한  */
                    /* 금액이 0 보다 작으면 남은 회차 없음..                   */
                    /* 남은 금액 Inser 하고 Loop  Exit                         */
                    /***********************************************************/
                    else
                        begin
                            insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                                  DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                                  IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                                  BASIS_FROM,               BASIS_TO,               USER_ID )
                                           select i_pol_no,                 i_endor_no,             s_bunhal_nabib_cnt,         0,
                                                  i_dmbo_cd,                s_bunhal_amt1,          s_bunhal_amt2,              s_bunhal_nabib_from_date,
                                                  s_bunhal_nabib_to_date,   i_endor_no-1,           s_bunhal_nabib_from_date,   s_bunhal_nabib_to_date,
                                                  s_bunhal_nabib_from_date, s_bunhal_nabib_to_date, i_user_id
                                             from DUAL;
                                    exception when others then o_result := 'Error';
                                                        raise_application_error(-20001, '분납회차 남아있지 않음.. Insert[TBID0015] Error[170]: '|| sqlerrm);
                        end;
                                                          l_log_data := l_log_data || '2*'|| f_idx2 || '-10[' || '분납회차 끝 Insert OK...3'  ||chr(13)||chr(10);
                        exit;
                    end if;

                    /************************/
                    /* Log 남기기         ***/
                    /************************/
                    --  if    l_log_level = 1  then /**Log 남기기 ****/
                    /*        PR_INSERT_LOG(l_log_date,l_log_sp_name,l_log_no,'배서[분납]_' || f_idx2 ,i_dmbo_cd,l_log_data);*/
                    /*  end if;*/

                    /*  l_log_data := '';*/

                End Loop;
            else
                /***********************************************************/
                /* 단기자차 추가의 경우 최종납입회차에 넣고 끝낸다.        */
                /***********************************************************/
                begin
                    insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                          DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                          IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                          BASIS_FROM,               BASIS_TO,               USER_ID )
                                   select i_pol_no,                 i_endor_no,             i_end_nab_no,               i_bef_15_seq_no,
                                          i_dmbo_cd,                s_basic_prem,           s_appy_prem,                s_0013_c_appy_from,
                                          s_0013_c_appy_to,         i_endor_no-1,           s_0013_c_appy_from,         s_0013_c_appy_to,
                                          s_0013_c_appy_from,       s_0013_c_appy_to,       i_user_id
                                     from DUAL;
                    exception when others then o_result := 'Error';
                                                       raise_application_error(-20001, '단기자차 분납  Insert[TBID0015] Error[160]: '|| sqlerrm);
                end;
                                                  l_log_data := l_log_data || '2*'|| f_idx2 || '-10[' || '단기자차 분납 Insert OK...2'  ||chr(13)||chr(10);
            end if;
        /*분납부활일 경우*/
        else
            begin
                insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                      DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                      IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                      BASIS_FROM,               BASIS_TO,               USER_ID )
                               select POL_NO,                   i_endor_no,             BNP_NO,                     SEQ_NO,
                                      DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                      IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                      BASIS_FROM,               BASIS_TO,               i_user_id
                                 from TBID0015
                                where POL_NO   = i_pol_no
                                  and ENDOR_NO = i_endor_no -1
                                  and DMBO_CD  = i_dmbo_cd
                                  and BNP_NO   > i_end_nab_no;
                   exception when others then o_result := 'Error';
                                               raise_application_error(-20001, '이전배서 보험료동일 Insert[TBID0015] Error[180]: ' || sqlerrm);
            end;
                                                  l_log_data := l_log_data || '2*14[**** 이전배서 보험료 동일_TBID0015 ********]'  ||chr(13)||chr(10);
                                                  l_log_data := l_log_data || '2*15[' || '이전배서 보험료동일 Insert OK..4'    ||chr(13)||chr(10);
        end if;

    /*****************************************************************************************/
    /* 보험료 변동없음:이전 배서의 보험료와 현재 계산된 보험료가 같으면 이전 Data Insert시킴 */
    /* TBID0015 Table은 이미 Insert 되어 있음                                                */
    /*****************************************************************************************/
    ELSIF  s_0013_appy_prem  =  s_0013_b_appy_prem  and i_endor_no_bef_max = i_endor_no -1 and V_ENDOR_GB <> '6' then
        begin
            insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                  DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                  IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                  BASIS_FROM,               BASIS_TO,               USER_ID )
                           select POL_NO,                   i_endor_no,             BNP_NO,                     SEQ_NO,
                                  DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                  IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                  BASIS_FROM,               BASIS_TO,               i_user_id
                             from TBID0015
                            where POL_NO   = i_pol_no
                              and ENDOR_NO = i_endor_no -1
                              and DMBO_CD  = i_dmbo_cd;
               exception when others then o_result := 'Error';
                                           raise_application_error(-20001, '이전배서 보험료동일 Insert[TBID0015] Error[180]: ' || sqlerrm);
        end;
                                                  l_log_data := l_log_data || '2*14[**** 이전배서 보험료 동일_TBID0015 ********]'  ||chr(13)||chr(10);
                                                  l_log_data := l_log_data || '2*15[' || '이전배서 보험료동일 Insert OK..4'    ||chr(13)||chr(10);

    ELSE
        /*****************************************************************************************/
        /* 이전 회차 보험료(기 납입 보험료)는 무조건 신규 배서에 Insert 시킴                    */
        /*****************************************************************************************/
        begin
            insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                  DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                  IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                  BASIS_FROM,               BASIS_TO,               USER_ID )
                           select POL_NO,                   i_endor_no,             BNP_NO,                     SEQ_NO,
                                  DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                  IEND_VALID_DATE,          i_endor_no -1,          APPY_FROM,                  APPY_TO,
                                  BASIS_FROM,               BASIS_TO,               i_user_id
                             from TBID0015
                            where POL_NO   = i_pol_no
                              and ENDOR_NO = i_endor_no -1
                              and DMBO_CD  = i_dmbo_cd
                              and BNP_NO   <= i_end_nab_no;
            exception when others then o_result := 'Error';
                                       raise_application_error(-20001, '이전배서 보험료 Insert [TBID0015] Error[190]: '|| sqlerrm);
        end;
                                              l_log_data := l_log_data || '2*16[**** 이전배서 보험료 다름_TBID0015 ********]'    ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*17[' || '이전배서 보험료 Insert [TBID0015] OK...5' ||chr(13)||chr(10);

        /*****************************************************************/
        /* 회차별 보험료를 산정 한다                                     */
        /* FN_RENT_BUNAP_AMT:                                            */
        /*    [ In] 납입방법/상품종류/'0'/분납회수/적용보험료/           */
        /*          기본보험료/보험종기/Sort_Gubun                       */
        /*    [Out] f_bunhal_bohum                                       */
        /*          납입회수,분납일자,분납 유효일자,기준보험료,적용보험료*/
        /*                                                               */
        /* Description : 납입회차 순으로 자료 나옴                       */
        /*****************************************************************/

        f_bunhal_bohum := FN_RENT_BUNAP_AMT(i_na_mth,i_i_kind_cd,i_spcl_agre_gb,i_bnp_cnt,i_dmbo_appy_prem,i_dmbo_basic_prem,i_istar_cont_date,'ASC');

        s_basic_prem  :=0 ;
        s_appy_prem   :=0 ;

        /***********************************************************/
        /* 회차별 보험료 Looping 갯수 산정                         */
        /***********************************************************/
        f_idx1  := length(f_bunhal_bohum) - length(replace(f_bunhal_bohum,',','')) + 1;
        f_idx2  := 0;
                                              l_log_data := l_log_data || '2*18[' || f_idx1  ||']=f_idx1' ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*19[' || f_idx2  ||']=f_idx2' ||chr(13)||chr(10);
        Loop
            f_idx2 := f_idx2 + 1;

            if  f_idx2 > f_idx1 then
                exit;
            end if;

            /***********************************************************/
            /* 회차별 보험료 정보를 구분자로 Substring 함              */
            /***********************************************************/

            s_bunhal_bohum  := regexp_substr(f_bunhal_bohum,'[^,]+',1,f_idx2);

            s_bunhal_nabib_cnt         := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,1));
            s_bunhal_nabib_from_date   := to_date  (regexp_substr(s_bunhal_bohum,'[^|]+',1,2));
            s_bunhal_nabib_to_date     := to_date  (regexp_substr(s_bunhal_bohum,'[^|]+',1,3));
            s_bunhal_nabib_amt1        := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,4));   /* 기준보험료 */
            s_bunhal_nabib_amt2        := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,5));   /* 적용보험료 */
                                              l_log_data := l_log_data || '2*'|| f_idx2 || '-02[' || s_bunhal_nabib_cnt         ||']=납입회차'       ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*'|| f_idx2 || '-03[' || s_bunhal_nabib_from_date   ||']=납입일자'       ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*'|| f_idx2 || '-04[' || s_bunhal_nabib_to_date     ||']=납입유효일자'   ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*'|| f_idx2 || '-06[' || s_bunhal_nabib_amt2        ||']=적용보험료'     ||chr(13)||chr(10);

            /***********************************************************/
            /* 분납회차가 종납 회차보다 크면                           */
            /* 분납률에 따라 계산 되어진 보험료 Insert 시킴            */
            /***********************************************************/
            if  s_bunhal_nabib_cnt > i_end_nab_no  and  i_dmbo_cd not in ('21','22','23')  then
                /*자차이고 계산방법이 단기가 아니면(단기자차가 아니면)*/
                if i_dmbo_cd||s_0013_c_cancel_calc_gb <> '063' then
                    begin
                        insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                              DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                              IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                              BASIS_FROM,               BASIS_TO,               USER_ID )
                                       select i_pol_no,                 i_endor_no,             s_bunhal_nabib_cnt,         0 ,
                                              i_dmbo_cd,                s_bunhal_nabib_amt1,    s_bunhal_nabib_amt2,        s_bunhal_nabib_from_date,
                                              s_bunhal_nabib_to_date,   i_endor_no-1,           s_bunhal_nabib_from_date,   s_bunhal_nabib_to_date,
                                              s_bunhal_nabib_from_date, s_bunhal_nabib_to_date, i_user_id
                                         from DUAL;
                        exception when others then o_result := 'Error';
                                                       raise_application_error(-20001, '분납률에 따라 Insert[TBID0015] Error[210]: '|| sqlerrm);
                    end;


                    s_basic_prem   := s_basic_prem  + s_bunhal_nabib_amt1;
                    s_appy_prem    := s_appy_prem   + s_bunhal_nabib_amt2;
                                              l_log_data := l_log_data || '2*'|| f_idx2 || '-07[' || s_appy_prem     ||']=회차누적 적용보험료'    ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*'|| f_idx2 || '-08[' || '분납률에 따라 Insert OK...6'  ||chr(13)||chr(10);
                end if;
            end if;

            /************************/
            /* Log 남기기         ***/
            /************************/
            --if    l_log_level = 1  then  /**Log 남기기 ****/
            /*      PR_INSERT_LOG(l_log_date,l_log_sp_name,l_log_no,'배서[분납]',i_dmbo_cd,l_log_data);*/
            /*end if;*/

            /*l_log_data := '';*/

        End Loop;

        /**********************************************************************/
        /**TBID0014 SUM  Return 해 준다                                       */
        /**********************************************************************/
        begin
              select nvl(sum(BASIC_PREM),0)
                   , nvl(sum(APPY_PREM) ,0)
                into V_RETURN_AMT1
                   , V_RETURN_AMT2
                from TBID0014
               where POL_NO   = i_pol_no
                 and ENDOR_NO = i_endor_no
                 and DMBO_CD  = i_dmbo_cd;

            exception when no_data_found then V_RETURN_AMT1 :=0;
                                              V_RETURN_AMT2 :=0;
                      when others        then o_result := 'Error';
                                              raise_application_error(-20001, 'TBID0014 Sum[TBID0015] Error[220]: '|| sqlerrm);
        end;
                                              l_log_data := l_log_data || '2*20 [' || 'TBID0014 Sum[TBID0015] OK...7' ||chr(13)||chr(10);

        /***********************************************************/
        /* 이전 배서의 종납회차 정보를 구분자로 Substring 함       */
        /***********************************************************/
        s_bunhal_bohum  := regexp_substr(f_bunhal_bohum,'[^,]+',1,i_end_nab_no);

        s_bunhal_nabib_cnt         := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,1));
        s_bunhal_nabib_from_date   := to_date  (regexp_substr(s_bunhal_bohum,'[^|]+',1,2));
        s_bunhal_nabib_to_date     := to_date  (regexp_substr(s_bunhal_bohum,'[^|]+',1,3));
        s_bunhal_nabib_amt1        := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,4));   /* 기준보험료 */
        s_bunhal_nabib_amt2        := to_number(regexp_substr(s_bunhal_bohum,'[^|]+',1,5));   /* 적용보험료 */

                                              l_log_data := l_log_data || '2*21[' || s_bunhal_nabib_cnt        ||']=납입회차'       ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*22[' || s_bunhal_nabib_from_date  ||']=납입일자'       ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*23[' || s_bunhal_nabib_to_date    ||']=납입유효일자'   ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*24[' || s_bunhal_nabib_amt2       ||']=적용보험료'     ||chr(13)||chr(10);

                                              l_log_data := l_log_data || '2*25[' || V_RETURN_AMT2             ||']=①적용보험료'            ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*26[' || s_appy_prem               ||']=②회차누적적용보험료'    ||chr(13)||chr(10);
                                              l_log_data := l_log_data || '2*27[' || V_BEF_15_DMBO_PREM        ||']=③이전배서납입보험료'    ||chr(13)||chr(10);

        /* 현재배서의[TBID0014] 의 SUM 보험료 - 종납회차이후의 분납보험료 -  종납회차 이전의 SUM 보험료*/
        s_basic_prem  := V_RETURN_AMT1  -  s_basic_prem - V_BEF_15_BASIC_PREM ;
        s_appy_prem   := V_RETURN_AMT2  -  s_appy_prem  - V_BEF_15_DMBO_PREM;
                                              l_log_data := l_log_data || '2*28[' || s_appy_prem               ||']=①-②-③'    ||chr(13)||chr(10);
        if  s_appy_prem <> 0 then
            begin
                insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                      DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                      IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                      BASIS_FROM,               BASIS_TO,               USER_ID )
                               select i_pol_no,                 i_endor_no,             s_bunhal_nabib_cnt,         i_bef_15_seq_no,
                                      i_dmbo_cd,                s_basic_prem,           s_appy_prem,                s_bunhal_nabib_from_date,
                                      s_bunhal_nabib_to_date,   i_endor_no-1,           s_bunhal_nabib_from_date,   s_bunhal_nabib_to_date,
                                      s_bunhal_nabib_from_date, s_bunhal_nabib_to_date, i_user_id
                                 from DUAL;
                exception when others then o_result := 'Error';
                                           raise_application_error(-20001, '추징/환수 TBID0015 Insert [TBID0015] Error[200]: '|| sqlerrm);
            end;
        end if;
                                              l_log_data := l_log_data || '2*29[' || '추징/환수 Insert [TBID0015] OK..3'  ||chr(13)||chr(10);
    END IF;


    IF  o_result is null then
        o_result  := 'OK' || '|' || V_RETURN_AMT1 || '|' || V_RETURN_AMT2;
    END IF;

    l_log_data := l_log_data ||'3*01 [' || o_result    ||']=o_result'    ||chr(13)||chr(10);
    l_log_data := l_log_data ||'3*02 Good Bye......Endors'               ||chr(13)||chr(10);

    /************************/
    /* Log 남기기         ***/
    /************************/
    IF    l_log_level = 1 or nvl(regexp_substr(l_log_step,i_dmbo_cd),' ') = i_dmbo_cd then
        PR_INSERT_LOG(l_log_date,l_log_sp_name,l_log_no,'배서[분납]',i_dmbo_cd,l_log_data);
    END IF;
    l_log_data := '';

    exception when others then dbms_output.put_line('PR_RENT_ENDOR_BUNAP_RATE_TEST Main Error[999]: '||sqlerrm);
                               raise_application_error(-20001, 'PR_RENT_ENDOR_BUNAP_RATE_TEST Main Error[999]: '||sqlerrm);
END;
CREATE or replace
PROCEDURE          KRMA_APP.PR_RENT_ENDOR_BUNAP_RATE_TERM (i_pol_no              in  varchar2
                                                     ,i_endor_no            in  number
                                                     ,i_endor_no_bef_max    in  number
                                                     ,i_dmbo_cd             in  varchar2
                                                     ,i_na_mth              in  varchar2
                                                     ,i_spcl_agre_gb        in  varchar2
                                                     ,i_dmbo_basic_prem     in  number
                                                     ,i_dmbo_appy_prem      in  number
                                                     ,i_bnp_cnt             in  number
                                                     ,i_istar_cont_date     in  date
                                                     ,i_seq_no              in  number
                                                     ,i_i_kind_cd           in  varchar2
                                                     ,i_iend_cont_date      in  date
                                                     ,i_basis_from          in  date
                                                     ,i_basis_to            in  date
                                                     ,i_user_id             in  tbid0014.user_id%type
                                                     ,i_end_nab_no          in  number
                                                     ,i_bef_15_seq_no       in  number
                                                     ,i_endor_cd            in  varchar2
                                                     ,i_all_cliam_date      in  date
                                                     ,i_day_endor_cnt       in  number
                                                     ,i_short_day_gb        in  varchar2
                                                     ,i_basic_year_prem     in  number
                                                     ,i_appy_year_prem      in  NUMBER
                                                     ,i_car_kind_cd         in  TBID0001.CAR_KIND_CD%TYPE
                                                     ,i_car_type_cd         in  TBID0001.CAR_TYPE_CD%TYPE
                                                     ,i_ient_carr_r         in  TBID0001.IENT_CARR_R%TYPE
                                                     ,i_dsc_tot_r           in  TBIB0001.SPCIAL_INC_R%TYPE
                                                     ,i_special_rate        in  NUMBER
                                                     ,i_treat_rate          in  NUMBER
                                                     ,i_fn_rent_mul_acci_rate     in  NUMBER
                                                     ,i_grpcont_dsc_r      in  TBIB0001.GRPCONT_DSC_R%TYPE
                                                     ,i_indgrp_gb      in TBID0001.INDGRP_GB%TYPE
                                                     ,i_dvdadd_rate    in  TBIB0205.DVDADD_RATE%TYPE
                                                     ,o_result              out varchar2) as
/**************************************************************************************************************************/
/* Procedure Name :  PR_RENT_ENDOR_BUNAP_RATE_TERM                                                                        */
/* Function       :  배서 담보별, 기간별 분납 회차별 보험료 산정(구간보험)                                                */
/* Parameter  i_pol_no             [ IN] 증권번호                                                                         */
/*            i_endor_no           [ IN] 배서번호                                                                         */
/*            i_endor_no_bef_max   [ IN] 이전배서번호(당일 배서가 2회 이상 발생시 처리 하기 위함                          */
/*            i_dmbo_cd            [ IN] 담보코드                                                                         */
/*            i_na_mth             [ IN] 납입방법-(1.일시납2.비연속분납3.연속분납(A0005)                                  */
/*            i_spcl_agre_gb       [ IN] '0'                                                                              */
/*            i_dmbo_basic_prem    [ IN] 담보 기본보험료                                                                  */
/*            i_dmbo_appy_prem     [ IN] 담보 적용보험료                                                                  */
/*            i_bnp_cnt            [ IN] 분납회수-1:일시납,2:2분납,3:3분납,4:4분납,5: 5분납,6:6분납,7:7분납,8:8분납(A0007)*/
/*            i_istar_cont_date    [ IN] 보험시기                                                                         */
/*            i_seq_no             [ IN] '0'                                                                              */
/*            i_i_kind_cd          [ IN] 보험종목                                                                         */
/*            i_iend_cont_date     [ IN] 보험종기                                                                         */
/*            i_basis_from         [ IN] 적용시작일                                                                       */
/*            i_basis_to           [ IN] 적용종료일                                                                       */
/*            i_user_id            [ IN] 사용자번호                                                                       */
/*            i_end_nab_no         [ IN] 최종납입회차                                                                     */
/*            i_bef_15_seq_no      [ IN] Max Seq                                                                          */
/*            i_endor_cd           [ IN] 배서코드                                                                         */
/*            i_all_cliam_date     [ IN] 차량대체일자                                                                     */
/*            i_day_endor_cnt      [ IN] 당일배서건수                                                                     */
/*            i_basic_year_prem    [ IN] 년간기본보험료                                                                   */
/*            i_appy_year_prem     [ IN] 년간적용보험료                                                                   */
/*            i_car_kind_cd        [ IN] 차종                                                                             */
/*            i_car_type_cd        [ IN] 차종세분                                                                         */
/*            o_result             [Out] sp 결과(보험료)                                                                  */
/*Description : TBID0013 담보별 분담금 TABLE은 화면에서 생성시                                                            */
/*            - 이전배서(기준일 이전의 적용일자를 가진 배서)의 내용을 그대로 옮겨 놓는다                                  */
/*              (단 화면에서 바뀐 담보 내용으로 Update 함)                                                                */
/*            - 추가된 담보는 기준일을 적용시작일로 보험종기를 적용종료일로 세팅 한다.                                    */
/*            - 삭제된 담보는 이전배서의 적용시작일을 현배서의 적용시작일로 기준일을 적용종료일로 세팅한다.               */
/**************************************************************************************************************************/
V_0013_INFO                  varchar2(300);
s_0013_c_info                varchar2(150);
s_0013_c_endor_no            number;
s_0013_c_appy_from           date;
s_0013_c_appy_to             date;
s_0013_c_appy_prem           number;
s_0013_c_basic_prem          number;
s_0013_c_appy_year_prem      number;
s_0013_c_basic_year_prem     number;
s_0013_c_cancel_calc_gb      varchar2(3);


s_0013_b_info                varchar2(150);
s_0013_b_endor_no            number;
s_0013_b_appy_from           date;
s_0013_b_appy_to             date;
s_0013_b_appy_prem           number;
s_0013_b_basic_prem          number;
s_0013_b_appy_year_prem      number;
s_0013_b_basic_year_prem     number;
s_0013_b_cancel_calc_gb      varchar2(3);

s_0013_appy_prem             number;
s_0013_basic_prem            number;

V_BEF_15_BASIC_PREM          number;
V_BEF_15_DMBO_PREM           number;
V_RETURN_AMT1                number;
V_RETURN_AMT2                number;
V_APPY_PREM                  number;
V_BASIC_PREM                 number;
V_MAX_SEQ_NO                 number;
V_ENDOR_CD                   varchar2(4);
V_ENDOR_GB                   varchar2(2);
V_ACCI_CHECK                 varchar2(1);
V_SUM_APPY_PREM              number;
V_SUM_DMBO_PREM              number;
V_ALL_CLAIM                  varchar2(1);
V_DMBO_END_DATE              date;
V_BASIS_TO_DATE              date;
V_DANGI_APPY_FROM            date;
V_DANGI_APPY_PREM            number;
V_DANGI_BASIC_PREM           number;
V_DAMBO_START_DT             date;/*LJM 20150923 추가*/
V_DAMBO_START_DT_TEMP        date;/*LJM 20151218 추가*/
V_DAMBO_START_DT_CHAR        varchar2(20);/*LJM 20151218 추가*/
V_DAMBO_START_DT_CACEL       varchar2(20);/*LJM 20151218 추가*/
V_ENDRO_TOTAL_CNT            number;/*LJM 20151218 추가*/
V_ENDRO_CURR_CNT             number  := 1;/*LJM 20151218 추가*/
V_ENDRO_NO_MINUS             number;/*LJM 20151218 추가*/
V_DATA_INFO             varchar2(3000);/*LJM 20151218 추가*/

s_appy_prem                  number:=0;
s_basic_prem                 number:=0;
s_appy_prem1                 number:=0;
s_basic_prem1                number:=0;

f_fn_rent_short_rate         number;

f_bunhal_bohum               varchar2(4000);
f_idx1                       number;
f_idx2                       number;

s_bunhal_bohum               varchar2(200);
s_bunhal_nabib_cnt           number;
s_bunhal_nabib_from_date     date;
s_bunhal_nabib_to_date       date;
s_bunhal_nabib_amt1          number;
s_bunhal_nabib_amt2          number;
s_bunhal_amt1                number;
s_bunhal_amt2                number;

s_0013_c_appy_from_appy_prem                  number:=0;
s_0013_c_appy_from_basic_prem                 number:=0;
s_basis_from_appy_prem                        number:=0;
s_basis_from_basic_prem                       number:=0;
s_0013_c_appy_to_appy_prem                    number:=0;
s_0013_c_appy_to_basic_prem                   number:=0;
s_basis_from_b_appy_prem                      number:=0;
s_basis_from_b_basic_prem                     number:=0;
s_all_cliam_date_b_appy_prem                  number:=0;
s_all_cliam_date_b_basic_prem                 number:=0;

r_return                            varchar2(100);
r_return_ok                         varchar2(50);

/******************/
/*** lOG 변수 *****/
/******************/
l_log_level                  number        := 1;                                  /* 로그레벨[0~1]: 0->l_log_step에 정의된 항목과 찍는다..  1->모두찍는다.)*/
l_log_sp_name                varchar2(50)  := 'PR_RENT_AMT[ENDOR_BUNAP_RATE_PLAN]' ;        /* 로그 Stored Procedure Name*/
l_log_data                   varchar2(4000);
l_log_date                   varchar2(16)  := to_char(sysdate,'yyyymmddhh24miss');
l_log_step                   varchar2(100) :='';   /* 담보코드: '01 02 03 13 04 05 06 07 21 22 23 99'*/
l_log_no                     varchar2(20)  := i_pol_no ||'-'|| i_endor_no;

BEGIN
    o_result :=null ;
    l_log_data := l_log_data || '*00[' || i_pol_no           ||']=증권번호'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_endor_no         ||']=배서번호'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_endor_no_bef_max ||']=이전배서번호(Max)'   ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_dmbo_cd          ||']=담보코드'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_na_mth           ||']=납입방법'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_spcl_agre_gb     ||']=i_spcl_agre_gb'      ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_dmbo_basic_prem  ||']=기본보험료'          ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_dmbo_appy_prem   ||']=적용보험료'          ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_bnp_cnt          ||']=분납회수'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_istar_cont_date  ||']=보험시기'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_seq_no           ||']=분납Seq'             ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_i_kind_cd        ||']=보험종목'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_iend_cont_date   ||']=보험종기'            ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_basis_from       ||']=기준일'              ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_basis_to         ||']=적용종료일'          ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_user_id          ||']=User Id'             ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_end_nab_no       ||']=최종납입회차'        ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_bef_15_seq_no    ||']=분납Max Seq'         ||chr(13)||chr(10);
    l_log_data := l_log_data || '*00[' || i_short_day_gb    ||']=일할단기구분'         ||chr(13)||chr(10);

    /***********************************************************************/
    /*                                                                     */
    /* TBID0013 TABLE Insert 및 Update                                     */
    /*                                                                     */
    /***********************************************************************/

    /*배서구분: 배서코드 첫자리*/
    V_ENDOR_GB := substr(i_endor_cd, 1, 1);

    /**담보 가입시기 구하기**/
    /**ljm 20150923 추가  **/
    /* 해지시작일자 구하기*/
    BEGIN
        SELECT
            nvl(to_char(MAX(DMBO_START_DATE),'yy/mm/dd'),'0000')
            into V_DAMBO_START_DT_CACEL
        FROM TBID0013
        where POL_NO    =  i_pol_no
        and   DMBO_CD   =  i_dmbo_cd
        and ENDOR_NO  =  i_endor_no
        and   CANCEL_CALC_GB = '2'
        ;
        exception when others then raise_application_error(-20001, '담보 해지시작일자  Select [TBID0013] Error[00]: '|| sqlerrm);
    end;

   /* 담보추가시작일자 구하기*/


   if V_DAMBO_START_DT_CACEL = '0000' then
        BEGIN
            SELECT
                MIN(DMBO_START_DATE)
                into V_DAMBO_START_DT
            FROM TBID0013
            where POL_NO    =  i_pol_no
            and   DMBO_CD   =  i_dmbo_cd
            ;
            exception when others then raise_application_error(-20001, '담보 가입시작일자  Select [TBID0013] Error[00]: '|| sqlerrm);
        end;
    else
        BEGIN
            SELECT
                MAX(DMBO_START_DATE)
                into V_DAMBO_START_DT
            FROM TBID0013
            where POL_NO    =  i_pol_no
            and   DMBO_CD   =  i_dmbo_cd
            and ENDOR_NO  =  i_endor_no
            and   CANCEL_CALC_GB = '2'
            ;
            exception when others then raise_application_error(-20001, '담보 추가 가입일자  Select [TBID0013] Error[00]: '|| sqlerrm);
        end;


        BEGIN
            SELECT
                COUNT(*)
                INTO V_ENDRO_TOTAL_CNT
            FROM TBID0013
            where POL_NO    =  i_pol_no
            and   DMBO_CD   =  i_dmbo_cd
            and ENDOR_NO  =  i_endor_no -1
            ;
            exception when others then raise_application_error(-20001, '담보 추가 가입일자  Select [TBID0013] Error[00]: '|| sqlerrm);
        end;

        LOOP
            BEGIN
                SELECT
                    WM_CONCAT(DMBO_START_DATE || '|' || DMBO_END_DATE  || '|' || CANCEL_CALC_GB)
                    INTO V_DATA_INFO
                FROM TBID0013
                where POL_NO    =  i_pol_no
                and   DMBO_CD   =  i_dmbo_cd
                and ENDOR_NO  =  i_endor_no
                ;
                exception when others then raise_application_error(-20001, '담보 추가 가입일자  Select [TBID0013] Error[00]: '|| sqlerrm);
             END;

             BEGIN
                SELECT DMBO_START_DATE
                       INTO V_DAMBO_START_DT_TEMP
                FROM TBID0013
                WHERE POL_NO    =  i_pol_no
                and   DMBO_CD   =  i_dmbo_cd
                and ENDOR_NO    =  i_endor_no -1
                AND DMBO_END_DATE = V_DAMBO_START_DT;
                exception when NO_DATA_FOUND THEN V_DAMBO_START_DT_TEMP := NULL;
                WHEN others then raise_application_error(-20001, '담보 추가 해지일자  Select [TBID0013] Error[00]: ' || 'DATA INFO' || V_DATA_INFO  || '        '  || TO_CHAR(V_DAMBO_START_DT,'YYYYMMDDHH24MISS' ) || '         ' || sqlerrm);
             END;

             IF V_DAMBO_START_DT_TEMP IS NOT NULL THEN
                V_DAMBO_START_DT := V_DAMBO_START_DT_TEMP;
             END IF;
             V_ENDRO_CURR_CNT := V_ENDRO_CURR_CNT +1;


             EXIT WHEN V_DAMBO_START_DT_TEMP IS NULL OR V_ENDRO_CURR_CNT > V_ENDRO_TOTAL_CNT;


        END LOOP;




    end if;

    V_DAMBO_START_DT := to_char(V_DAMBO_START_DT,'yy/mm/dd');


    /*********************************************************/
    /* 해당담보 사고여부 확인 (Y:사고, N:사고아님)           */
    /* 진행중인 건수가 있으면 무조건 사고                    */
    /* 진행중인 건수가 없고 공제금 지급이 0보다 크면 사고    */
    /*********************************************************/
    if i_dmbo_cd  not in ('21','22','23') then
        begin
            select case when sum(decode(STAT, '3', 1, 0)) > 0                                                                              then 'Y'
                        when sum(decode(STAT, '3', 1, 0)) = 0 and sum(DC_AMT) > 0 and i_dmbo_cd <> '02'                                    then 'Y'
                        when sum(decode(STAT, '3', 1, 0)) = 0 and sum(DC_AMT) > 0 and sum(DC_AMT) <> sum(COM_DC_AMT) and i_dmbo_cd = '02'  then 'Y'
                        else 'N' end
              into V_ACCI_CHECK
              from ( select CA02.POL_NO
                          , CF01.ACCIDENT_NO
                          , CF01.HND_COVER
                          , nvl(( select sum(DC_AMT)
                                    from TBCE0001
                                   where ACCIDENT_NO = CF01.ACCIDENT_NO
                                     and HND_COVER   = CF01.HND_COVER
                                     and DMGE_NO     = CF01.DMGE_NO
                                     and DECIDE_DATE is not null ),0 ) DC_AMT
                          , nvl(( select sum(COM_DC_AMT)
                                    from TBCE0001
                                   where ACCIDENT_NO = CF01.ACCIDENT_NO
                                     and HND_COVER   = CF01.HND_COVER
                                     and DMGE_NO     = CF01.DMGE_NO
                                     and DECIDE_DATE is not null ),0 ) COM_DC_AMT
                          , case when CF01.DECIDE_DATE is not null then '1'
                                 when CF01.DC_END_DATE is not null then '2'
                                 else '3' end STAT
                       from TBCA0002 CA02
                          , TBCF0001 CF01
                      where CA02.ACCIDENT_NO = CF01.ACCIDENT_NO
                        and CA02.POL_NO      = i_pol_no
                        and CF01.LAST='Y'
                        and (CF01.HND_COVER = decode(i_dmbo_cd, '01', '21', '02', '21', '03', '33', '04', '44','08','45', '05', '55', '06', '66', '13', '33')
                            or CF01.HND_COVER = decode(i_dmbo_cd, '01', '11', '02', '11', '03', '33', '04', '44','08','45', '05', '55', '06', '66', '13', '33'))
                        );
            exception when no_data_found then
                V_ACCI_CHECK := 'N';
        end;
    else
        if i_dmbo_cd = '21' then
            begin
                select decode(nvl(count(*), 0), 0, 'N', 'Y')
                  into V_ACCI_CHECK
                  from TBCH0001
                 where H_GBN='ME400'
                   and POL_NO    = i_pol_no
                   and DELETE_YN = 'N'
                   and LAST='Y'
                   and ACT_SVC_CODE NOT IN ('51','53','54','55');
                exception when no_data_found then
                    V_ACCI_CHECK := 'N';
            end;
        else
            V_ACCI_CHECK := 'N';
        end if;
    end if;
                                                    l_log_data := l_log_data || '1*00[' || V_ACCI_CHECK           ||']=사고여부 확인정보'  ||chr(13)||chr(10);

    /*********************************************************/
    /* 전손처리 됐는지 확인(Y:전손처리, N:전손처리아님)      */
    /* CD01.DMGE_DEGREE 가 '1' 이 아닌경우는 전손처리함      */
    /* CD01.DMGE_DEGREE                                      */
    /* 1    피해구분    대물    분손                         */
    /* 2    피해구분    대물    추정전손                     */
    /* 3    피해구분    대물    절대전손                     */
    /* 4    피해구분    대물    전손(폐차)                   */
    /* 5    피해구분    대물    전손(재활용)                 */
    /* 6    피해구분    대물    도난                         */
    /*********************************************************/
    if i_dmbo_cd = '06' then
        if V_ACCI_CHECK = 'Y' then
            begin
                select decode(count(CD01.DMGE_DEGREE), 0, 'N', 'Y')    /*TEST 시 decode(count(NVL(CD01.DMGE_DEGREE, 'X')), 0, 'N', 'Y')*/
                  into V_ALL_CLAIM
                  from TBCA0002 CA02
                     , TBCD0001 CD01
                 where CA02.ACCIDENT_NO = CD01.ACCIDENT_NO
                   and CD01.LAST        = 'Y'
                   and CD01.HND_COVER   = '66'
                   and CA02.POL_NO      = i_pol_no
                   and CD01.DMGE_DEGREE IS NOT NULL                    /*TEST 시 주석처리*/
                   and CD01.DMGE_DEGREE <> '1';                        /*TEST 시 NVL(CD01.DMGE_DEGREE , 'X')<> '1'*/
                exception when others then
                    V_ACCI_CHECK := 'N';
            end;
        else
            V_ALL_CLAIM := 'N';
        end if;
    else
        V_ALL_CLAIM := 'N';
    end if;
                                                    l_log_data := l_log_data || '1*000[' || V_ALL_CLAIM           ||']=전손처리 확인정보'  ||chr(13)||chr(10);

    /*********************************************************/
    /* 현재 배서,기준일 이전 배서(TBID0013) 정보 Select      */
    /* 같은날 배서서 2번 이상 일어날 경우는 이전배서가 아니라*/
    /* 기준일 이전의 배서중 가장 큰 배서 번호정보 Select     */
    /*********************************************************/
    BEGIN
        if i_endor_cd = '801' THEN
          select WM_CONCAT(ENDOR_NO ||'|'|| APPY_FROM ||'|'|| APPY_TO ||'|'||  APPY_PREM ||'|'||  BASIC_PREM ||'|'|| APPY_YEAR_PREM ||'|'|| BASIC_YEAR_PREM ||'|'|| CANCEL_CALC_GB)
            into V_0013_INFO
            from (select ENDOR_NO                   /*배서번호*/
                       , APPY_FROM                  /*적용시작일*/
                       , APPY_TO                    /*적용종료일*/
                       , APPY_PREM                  /*적용보험료*/
                       , BASIC_PREM                 /*기본보험료*/
                       , APPY_YEAR_PREM             /*적용연간보험료*/
                       , BASIC_YEAR_PREM            /*기본연간보험료*/
                       , CANCEL_CALC_GB             /*일할/단기구분*/
                    from TBID0013
                   where POL_NO     = i_pol_no
                     and ENDOR_NO   = i_endor_no_bef_max
                     and DMBO_CD    = i_dmbo_cd
                     and APPY_FROM < case when i_endor_cd = '111' or i_endor_cd = '211' then APPY_FROM
                                           else to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS') end
                     and APPY_TO   > case when i_endor_cd = '111' or i_endor_cd = '211' then APPY_FROM
                                           else to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS') end
                     /*and APPY_TO >= to_date(to_char(i_iend_cont_date, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')*/
                     /*and APPY_TO <= to_date(to_char(i_iend_cont_date, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')*/
                  union all
                  select ENDOR_NO                   /*배서번호*/
                       , APPY_FROM                  /*적용시작일*/
                       , APPY_TO                    /*적용종료일*/
                       , APPY_PREM                  /*적용보험료*/
                       , BASIC_PREM                 /*기본보험료*/
                       , APPY_YEAR_PREM             /*적용연간보험료*/
                       , BASIC_YEAR_PREM            /*기본연간보험료*/
                       , CANCEL_CALC_GB             /*일할/단기구분*/
                    from TBID0013
                   where POL_NO    =  i_pol_no
                     and ENDOR_NO  =  i_endor_no
                     and DMBO_CD   =  i_dmbo_cd
                   order by ENDOR_NO
                 );
        else
          select WM_CONCAT(ENDOR_NO ||'|'|| APPY_FROM ||'|'|| APPY_TO ||'|'||  APPY_PREM ||'|'||  BASIC_PREM ||'|'|| APPY_YEAR_PREM ||'|'|| BASIC_YEAR_PREM ||'|'|| CANCEL_CALC_GB)
            into V_0013_INFO
            from (select ENDOR_NO                   /*배서번호*/
                       , APPY_FROM                  /*적용시작일*/
                       , APPY_TO                    /*적용종료일*/
                       , APPY_PREM                  /*적용보험료*/
                       , BASIC_PREM                 /*기본보험료*/
                       , APPY_YEAR_PREM             /*적용연간보험료*/
                       , BASIC_YEAR_PREM            /*기본연간보험료*/
                       , CANCEL_CALC_GB             /*일할/단기구분*/
                    from TBID0013
                   where POL_NO     = i_pol_no
                     and ENDOR_NO   = i_endor_no_bef_max
                     and DMBO_CD    = i_dmbo_cd
                     and APPY_FROM <= case when i_endor_cd = '111' or i_endor_cd = '211' then APPY_FROM
                                           else to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS') end
                     and APPY_TO   >= case when i_endor_cd = '111' or i_endor_cd = '211' then APPY_FROM
                                           else to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS') end
                     /*and APPY_TO >= to_date(to_char(i_iend_cont_date, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')*/
                     /*and APPY_TO <= to_date(to_char(i_iend_cont_date, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')*/
                  union all
                  select ENDOR_NO                   /*배서번호*/
                       , APPY_FROM                  /*적용시작일*/
                       , APPY_TO                    /*적용종료일*/
                       , APPY_PREM                  /*적용보험료*/
                       , BASIC_PREM                 /*기본보험료*/
                       , APPY_YEAR_PREM             /*적용연간보험료*/
                       , BASIC_YEAR_PREM            /*기본연간보험료*/
                       , CANCEL_CALC_GB             /*일할/단기구분*/
                    from TBID0013
                   where POL_NO    =  i_pol_no
                     and ENDOR_NO  =  i_endor_no
                     and DMBO_CD   =  i_dmbo_cd
                   order by ENDOR_NO
                 );
          END IF;

        exception when others then raise_application_error(-20001, '현재,이전 배서 Select [TBID0013] Error[00]: '|| sqlerrm);
    end;
                                                    l_log_data := l_log_data || '1*01['|| '현재,이전 배서 Select [TBID0013]  OK...0' ||chr(13)||chr(10);

    s_0013_b_info   := regexp_substr(V_0013_INFO,'[^,]+',1,1);
    if  i_endor_no_bef_max = to_number(regexp_substr(s_0013_b_info,'[^|]+',1,1)) then
        s_0013_b_appy_from       := to_date  (regexp_substr(s_0013_b_info,'[^|]+',1,2));     /* 이전배서 TBID0013 시작일자*/
        s_0013_b_appy_to         := to_date  (regexp_substr(s_0013_b_info,'[^|]+',1,3));     /* 이전배서 TBID0013 종료일자*/
        s_0013_b_appy_prem       := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,4));     /* 이전배서 TBID0013 적용보험료*/
        s_0013_b_basic_prem      := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,5));     /* 이전배서 TBID0013 기본보험료*/
        s_0013_b_appy_year_prem  := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,6));     /* 이전배서 TBID0013 적용연간보험료*/
        s_0013_b_basic_year_prem := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,7));     /* 이전배서 TBID0013 기본연간보험료*/
        s_0013_b_cancel_calc_gb  := regexp_substr(s_0013_b_info,'[^|]+',1,8);                /* 이전배서 TBID0013 일할/단기 구분*/

        s_0013_c_info            := regexp_substr(V_0013_INFO,'[^,]+',1,2);
        s_0013_c_appy_from       := to_date  (regexp_substr(s_0013_c_info,'[^|]+',1,2));     /* 현재 TBID0013 시작일자*/
        s_0013_c_appy_to         := to_date  (regexp_substr(s_0013_c_info,'[^|]+',1,3));     /* 현재 TBID0013 종료일자*/
        s_0013_c_appy_prem       := to_number(regexp_substr(s_0013_c_info,'[^|]+',1,4));     /* 현재 TBID0013 적용보험료*/
        s_0013_c_basic_prem      := to_number(regexp_substr(s_0013_c_info,'[^|]+',1,5));     /* 현재 TBID0013 기본보험료*/
        s_0013_c_appy_year_prem  := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,6));     /* 현재 TBID0013 적용연간보험료*/
        s_0013_c_basic_year_prem := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,7));     /* 현재 TBID0013 기본연간보험료*/
        s_0013_c_cancel_calc_gb  := regexp_substr(s_0013_c_info,'[^|]+',1,8);                /* 현재 TBID0013 일할/단기 구분*/
    else
        s_0013_c_info            := regexp_substr(V_0013_INFO,'[^,]+',1,1);
        s_0013_c_appy_from       := to_date  (regexp_substr(s_0013_c_info,'[^|]+',1,2));     /* 현재 TBID0013 시작일자*/
        s_0013_c_appy_to         := to_date  (regexp_substr(s_0013_c_info,'[^|]+',1,3));     /* 현재 TBID0013 종료일자*/
        s_0013_c_appy_prem       := to_number(regexp_substr(s_0013_c_info,'[^|]+',1,4));     /* 현재 TBID0013 적용보험료*/
        s_0013_c_basic_prem      := to_number(regexp_substr(s_0013_c_info,'[^|]+',1,5));     /* 현재 TBID0013 기본보험료*/
        s_0013_c_appy_year_prem  := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,6));     /* 현재 TBID0013 적용보험료*/
        s_0013_c_basic_year_prem := to_number(regexp_substr(s_0013_b_info,'[^|]+',1,7));     /* 현재 TBID0013 기본연간보험료*/
        s_0013_c_cancel_calc_gb  := regexp_substr(s_0013_c_info,'[^|]+',1,8);                /* 현재 TBID0013 일할/단기 구분*/
    end if;

                                                    l_log_data := l_log_data || '1*02[' || s_0013_c_info           ||']=현재배서TBID0013정보'  ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*03[' || s_0013_c_appy_from      ||']=현재배서 적용시작일'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*04[' || s_0013_c_appy_to        ||']=현재배서 적용종료일'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*05[' || s_0013_c_appy_prem      ||']=현재배서 적용보험료'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*06[' || s_0013_c_basic_prem     ||']=현재배서 기본보험료'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*07[' || s_0013_c_cancel_calc_gb ||']=현재배서 일할단기구분' ||chr(13)||chr(10);

                                                    l_log_data := l_log_data || '1*08[' || s_0013_b_info           ||']=이전배서TBID0013정보'  ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*09[' || s_0013_b_appy_from      ||']=이전배서 적용시작일'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*10[' || s_0013_b_appy_to        ||']=이전배서 적용종료일'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*11[' || s_0013_b_appy_prem      ||']=이전배서 적용보험료'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*12[' || s_0013_b_basic_prem     ||']=이전배서 기본보험료'   ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*13[' || s_0013_b_cancel_calc_gb ||']=이전배서 일할단기구분' ||chr(13)||chr(10);

        /*최초 일할 계산용 분담금 가져오기 ljm 20151005 s_0013_c_appy_from ==> i_istar_cont_date*/
        /* 20160328 4월1일 일반로직으로 변경( 로직오류에 따른 수정)*/
    if '20160331' BETWEEN TO_CHAR(i_istar_cont_date,'YYYYMMDD') AND TO_CHAR(i_iend_cont_date,'YYYYMMDD') then
    /*if '20160401' BETWEEN TO_CHAR(i_istar_cont_date,'YYYYMMDD') AND TO_CHAR(i_iend_cont_date,'YYYYMMDD') then*/
                 l_log_data := l_log_data || '1*14 일할용 계산용 분담금 가져오기 들어옴' ||chr(13)||chr(10);
        PR_RENT_ENDOR_BUNAP_AMT(i_pol_no              ,i_endor_no            ,i_dmbo_cd                ,i_dmbo_basic_prem        ,i_dmbo_appy_prem
                                    ,i_istar_cont_date     ,i_i_kind_cd           ,i_iend_cont_date         ,s_0013_c_appy_from       ,i_iend_cont_date
                                    ,i_user_id             ,i_car_kind_cd         ,i_car_type_cd            ,i_ient_carr_r            ,i_dsc_tot_r
                                    ,i_special_rate        ,i_treat_rate          ,i_fn_rent_mul_acci_rate  ,i_grpcont_dsc_r          ,i_indgrp_gb
                                    ,i_dvdadd_rate         ,'(2)'                 ,i_endor_cd               ,r_return
                                     );

         r_return_ok       := regexp_substr(r_return,'[^|]+',1,1);
         if    r_return_ok = 'OK' then
                s_0013_c_appy_from_appy_prem := to_number(regexp_substr(r_return,'[^|]+',1,2));
                s_0013_c_appy_from_basic_prem  := to_number(regexp_substr(r_return,'[^|]+',1,3));
         end if;
          l_log_data := l_log_data || '1*14(2)[' || r_return_ok        ||']=구간 일할용 r_return_ok' ||chr(13)||chr(10);
         l_log_data := l_log_data || '1*14(2)[' || s_0013_c_appy_from_appy_prem        ||']=구간 일할용 s_0013_c_appy_from_appy_prem' ||chr(13)||chr(10);
         l_log_data := l_log_data || '1*14(2)[' || s_0013_c_appy_from_basic_prem        ||']=구간 일할용 s_0013_c_appy_from_basic_prem' ||chr(13)||chr(10);

         r_return         := '';
         r_return_ok      := '';

         PR_RENT_ENDOR_BUNAP_AMT(i_pol_no              ,i_endor_no            ,i_dmbo_cd                ,i_dmbo_basic_prem        ,i_dmbo_appy_prem
                                    ,i_istar_cont_date     ,i_i_kind_cd           ,i_iend_cont_date         ,i_basis_from             ,i_iend_cont_date
                                    ,i_user_id             ,i_car_kind_cd         ,i_car_type_cd            ,i_ient_carr_r            ,i_dsc_tot_r
                                    ,i_special_rate        ,i_treat_rate          ,i_fn_rent_mul_acci_rate  ,i_grpcont_dsc_r          ,i_indgrp_gb
                                    ,i_dvdadd_rate         ,'(3)'                 ,i_endor_cd               ,r_return
                                     );

         r_return_ok       := regexp_substr(r_return,'[^|]+',1,1);
         if    r_return_ok = 'OK' then
                s_basis_from_appy_prem := to_number(regexp_substr(r_return,'[^|]+',1,2));
                s_basis_from_basic_prem  := to_number(regexp_substr(r_return,'[^|]+',1,3));
         end if;
         l_log_data := l_log_data || '1*14(3)[' || s_basis_from_appy_prem        ||']=구간 일할용 s_basis_from_appy_prem' ||chr(13)||chr(10);
         l_log_data := l_log_data || '1*14(3)[' || s_basis_from_basic_prem        ||']=구간 일할용 s_basis_from_basic_prem' ||chr(13)||chr(10);

         r_return         := '';
         r_return_ok      := '';

         PR_RENT_ENDOR_BUNAP_AMT(i_pol_no              ,i_endor_no            ,i_dmbo_cd                ,i_dmbo_basic_prem        ,i_dmbo_appy_prem
                                    ,i_istar_cont_date     ,i_i_kind_cd           ,i_iend_cont_date         ,s_0013_c_appy_from       ,s_0013_c_appy_to
                                    ,i_user_id             ,i_car_kind_cd         ,i_car_type_cd            ,i_ient_carr_r            ,i_dsc_tot_r
                                    ,i_special_rate        ,i_treat_rate          ,i_fn_rent_mul_acci_rate  ,i_grpcont_dsc_r          ,i_indgrp_gb
                                    ,i_dvdadd_rate         ,'(4)'                 ,i_endor_cd               ,r_return
                                     );

         r_return_ok       := regexp_substr(r_return,'[^|]+',1,1);
         if    r_return_ok = 'OK' then
                s_0013_c_appy_to_appy_prem := to_number(regexp_substr(r_return,'[^|]+',1,2));
                s_0013_c_appy_to_basic_prem  := to_number(regexp_substr(r_return,'[^|]+',1,3));
         end if;
         l_log_data := l_log_data || '1*14(4)[' || s_0013_c_appy_to_appy_prem        ||']=구간 일할용 s_0013_c_appy_to_appy_prem' ||chr(13)||chr(10);
         l_log_data := l_log_data || '1*14(4)[' || s_0013_c_appy_to_basic_prem        ||']=구간 일할용 s_0013_c_appy_to_basic_prem' ||chr(13)||chr(10);

         r_return         := '';
         r_return_ok      := '';

         PR_RENT_ENDOR_BUNAP_AMT(i_pol_no              ,i_endor_no   ,i_dmbo_cd                ,i_dmbo_basic_prem        ,i_dmbo_appy_prem
                                    ,s_0013_b_appy_from    ,i_i_kind_cd           ,s_0013_b_appy_to         ,s_0013_b_appy_from       ,i_basis_from
                                    ,i_user_id             ,i_car_kind_cd         ,i_car_type_cd            ,i_ient_carr_r            ,i_dsc_tot_r
                                    ,i_special_rate        ,i_treat_rate          ,i_fn_rent_mul_acci_rate  ,i_grpcont_dsc_r          ,i_indgrp_gb
                                    ,i_dvdadd_rate         ,'(5)'                 ,i_endor_cd               ,r_return
                                     );

         r_return_ok       := regexp_substr(r_return,'[^|]+',1,1);
         if    r_return_ok = 'OK' then
                s_basis_from_b_appy_prem := to_number(regexp_substr(r_return,'[^|]+',1,2));
                s_basis_from_b_basic_prem  := to_number(regexp_substr(r_return,'[^|]+',1,3));
         end if;
         l_log_data := l_log_data || '1*14(5)[' || s_basis_from_b_appy_prem        ||']=구간 일할용 s_basis_from_b_appy_prem' ||chr(13)||chr(10);
         l_log_data := l_log_data || '1*14(5)[' || s_basis_from_b_basic_prem        ||']=구간 일할용 s_basis_from_b_basic_prem' ||chr(13)||chr(10);

         r_return         := '';
         r_return_ok      := '';

         if V_ENDOR_GB = '6' then
             PR_RENT_ENDOR_BUNAP_AMT(i_pol_no              ,i_endor_no   ,i_dmbo_cd                ,i_dmbo_basic_prem        ,i_dmbo_appy_prem
                                        ,s_0013_b_appy_from    ,i_i_kind_cd           ,s_0013_b_appy_to         ,s_0013_b_appy_from       ,i_all_cliam_date
                                        ,i_user_id             ,i_car_kind_cd         ,i_car_type_cd            ,i_ient_carr_r            ,i_dsc_tot_r
                                        ,i_special_rate        ,i_treat_rate          ,i_fn_rent_mul_acci_rate  ,i_grpcont_dsc_r          ,i_indgrp_gb
                                        ,i_dvdadd_rate         ,'(6)'                 ,i_endor_cd               ,r_return
                                         );

             r_return_ok       := regexp_substr(r_return,'[^|]+',1,1);
             if    r_return_ok = 'OK' then
                    s_all_cliam_date_b_appy_prem := to_number(regexp_substr(r_return,'[^|]+',1,2));
                    s_all_cliam_date_b_basic_prem  := to_number(regexp_substr(r_return,'[^|]+',1,3));
             end if;
             l_log_data := l_log_data || '1*14(6)[' || s_all_cliam_date_b_appy_prem        ||']=구간 일할용 s_all_cliam_date_b_appy_prem' ||chr(13)||chr(10);
             l_log_data := l_log_data || '1*14(6)[' || s_all_cliam_date_b_basic_prem        ||']=구간 일할용 s_all_cliam_date_b_basic_prem' ||chr(13)||chr(10);

             r_return         := '';
             r_return_ok      := '';

        END IF;

         END IF;

    /*사용하는 부분에 대해서 금액으로만 변경*/

    /*일할 계약 계산*/
    if  i_short_day_gb = '1' then
        /*단기자차의 경우 단기요율로 계산해야한다. 20130514_최재혁*/
        if s_0013_c_cancel_calc_gb <> '1' then
            /* 단기요율 계산 = 적용종료일 - 적용시작일 */
            f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_c_appy_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
            f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

            /* 보험료 단기 계산 = 년간 총 적용보험료 * 단기적용율   */
            s_0013_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);
            s_0013_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);
l_log_data := l_log_data || '1*14(2)[' || f_fn_rent_short_rate        ||']=배f_fn_rent_short_rate서일기준(단기) 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*14(2)[' || s_0013_appy_prem        ||']=배서일기준(단기) 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*15(2)[' || s_0013_basic_prem       ||']=배서일기준(단기) 기본보험료' ||chr(13)||chr(10);

        else
            /* 년간 총 적용보험료 * (보험종기 - 현재배서 적용시작일) / (보험종기 - 보험시기) --> 보험적용일 부터 보험 종기 까지 보험료 산출 */
            s_0013_appy_prem  := s_0013_c_appy_from_appy_prem;/*round(i_dmbo_appy_prem  * ((i_iend_cont_date - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1);*/
            s_0013_basic_prem := s_0013_c_appy_from_basic_prem;/*round(i_dmbo_basic_prem * ((i_iend_cont_date - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1);*/

                                                    l_log_data := l_log_data || '1*14[' || s_0013_appy_prem        ||']=배서일기준 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*15[' || s_0013_basic_prem       ||']=배서일기준 기본보험료' ||chr(13)||chr(10);

        end if;
    /*단기 계약 계산*/
    else
        /* 단기요율 계산 = 보험종기 - 보험시기 */
        /* i_istar_cont_date == >  V_DAMBO_START_DT     i_iend_cont_date  == > s_0013_c_appy_to 변경*/
        /*f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,i_istar_cont_date  ,i_iend_cont_date  ,i_istar_cont_date  ,i_iend_cont_date);*/
        f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,V_DAMBO_START_DT  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
        f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

        /* 보험료 단기 계산 = 년간 총 적용보험료 * 단기적용율   */
        s_0013_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);
        s_0013_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);
        s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);
        s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);
                                                    l_log_data := l_log_data || '1*14(2)[' || f_fn_rent_short_rate    ||']=(단기계약) 단기율' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*14(2)[' || s_0013_appy_prem        ||']=배서일기준(단기계약) 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*15(2)[' || s_0013_basic_prem       ||']=배서일기준(단기계약) 기본보험료' ||chr(13)||chr(10);
    end if;

    /********************************************/
    /** 기준일 이전 Data[TBID0013] Insert       */
    /** 2017.02.08 담보별 단체특성율 추가       */
    /********************************************/
    begin
        insert into TBID0013(POL_NO,               ENDOR_NO,                   BASIC_SCONT_GB,      DMBO_CD,
                             APPY_FROM,            ACDNT_RESP_WANT,            MAN_RESP_WANT,       INSUR_AMT,
                             INSUR_AMT_GB,         DUCT_AMT_GB,                BASIC_PREM,          DMBO_START_DATE,
                             DMBO_END_DATE,        APPY_PREM,                  BASIC_RANGE_R,       CANCEL_CALC_GB,
                             APPY_TO,              BASIS_FROM,                 BASIS_TO,
                             USER_ID,              BASIC_YEAR_PREM,            APPY_YEAR_PREM , GRP_DMBO_RATE
                               )
                      select POL_NO,               i_endor_no,                 BASIC_SCONT_GB,      DMBO_CD,
                             APPY_FROM,            ACDNT_RESP_WANT,            MAN_RESP_WANT,       INSUR_AMT,
                             INSUR_AMT_GB,         DUCT_AMT_GB,                BASIC_PREM,          DMBO_START_DATE,
                             DMBO_END_DATE,        APPY_PREM,                  BASIC_RANGE_R,       CANCEL_CALC_GB,
                             APPY_TO,              BASIS_FROM,                 BASIS_TO,
                             USER_ID,              BASIC_YEAR_PREM,            APPY_YEAR_PREM, GRP_DMBO_RATE
                        from TBID0013
                       where POL_NO   = i_pol_no
                         and ENDOR_NO = i_endor_no_bef_max
                         and DMBO_CD  = i_dmbo_cd
                         /*and APPY_TO < to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS');   --20130422 TO_DATE 처리 최재혁*/
                         and APPY_TO < case when i_dmbo_cd = '06' then to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS') + 1   /*20140521 담보코드가 자차일 경우 이전배서의 종기와 신규배서의 시기가 일치할 경우 조건문이 일치하여 복사가 안되는 현상을 방지하기 위해 + 1을 적용하여 구분함*/
                                            else to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')                             /*20130422 TO_DATE 처리 최재혁*/
                                            END ;
        exception when others then o_result := null;
    end;
                                                    l_log_data := l_log_data || '1*16[' || '기준일 이전 정보 Insert[TBID0013] OK...1'  ||chr(13)||chr(10);

    /************************/
    /* Log 남기기         ***/
    /************************/
  /*  if    l_log_level = 1 or nvl(regexp_substr(l_log_step,i_dmbo_cd),' ') = i_dmbo_cd then*/
  /*        PR_INSERT_LOG(l_log_date,l_log_sp_name,l_log_no,'배서[분납]_1',i_dmbo_cd,l_log_data);*/
  /*  end if;*/
  /*  l_log_data := '';*/

    /***************************************************/
    /** 담보해지:현재배서 적용종료일이 기준일과 같으면**/
    /********************************************w*******/
    IF  i_basis_from = s_0013_c_appy_to then
                                                    l_log_data := l_log_data || '1*17[**** 담보 해지_TBID0013 ********]' ||chr(13)||chr(10);
        /* 사고여부 처리*/
        /* 사고 아닌경우*/
        if  V_ACCI_CHECK = 'N' then
            /*일할 계약건*/
            if i_short_day_gb = '1' THEN
                /* 단기, 단기자차 계산 ( 2: 단기, 3:단기자차) */
                if  s_0013_c_cancel_calc_gb <> '1' AND i_dmbo_cd <> '13' AND V_ENDOR_GB in ('1','2') then
                    /*단기자차는 해지시 환급금 없다*/
                    /*단기 계산*/
                    if s_0013_c_cancel_calc_gb = '2' then
                        /*공백기간 환급이 아니면 */
                        if V_ENDOR_GB <> '6' THEN
                                    /* 단기요율 계산 = 적용종료일 - 적용시작일 */
                                f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_c_appy_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                                f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                                /* 보험료 단기 계산 = 년간 총 적용보험료 * 단기적용율   */
                                s_appy_prem   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate,-1);
                                s_basic_prem  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate,-1);
                                            l_log_data := l_log_data || '1*19(1)[' || f_fn_rent_short_rate        ||']=f_fn_rent_short_rate배서일기준(단기) 적용보험료' ||chr(13)||chr(10);
                                                                        l_log_data := l_log_data || '1*19(1)[' || s_appy_prem        ||']=담보해지(단기) 적용보험료' ||chr(13)||chr(10);
                                                                        l_log_data := l_log_data || '1*19(1)[' || s_basic_prem       ||']=담보해지(단기) 기본보험료' ||chr(13)||chr(10);
                              /****************************/
                        /* TBID0013 Table Update   **/
                        /****************************/
                        begin
                            update TBID0013
                               set BASIC_PREM      = s_basic_prem
                                 , APPY_PREM       = s_appy_prem
                              /*  , BASIC_YEAR_PREM = i_basic_year_prem*/
                              /*   , APPY_YEAR_PREM  = i_appy_year_prem*/
                             where POL_NO      = i_pol_no
                               and ENDOR_NO    = i_endor_no
                               and DMBO_CD     = i_dmbo_cd
                               and APPY_TO >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                               and APPY_TO <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      /*20130422 TO_DATE 처리 최재혁*/

                            exception  when others then o_result := 'Error';
                                                           raise_application_error(-20001, '해지담보 보험료 Update [TBID0013] Error Error[11]: '|| sqlerrm);
                        end;
                                                            l_log_data := l_log_data || '1*20[' ||  '해지담보 Update [TBID0013] OK...2'   ||chr(13)||chr(10);
                            /*f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,i_istar_cont_date  ,i_basis_from  ,i_istar_cont_date  ,i_iend_cont_date);*/
                            /*f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);*/
                            /****************************/
                            /* TBID0013 Table Update   **/
                            /****************************/
                            /*
                            begin
                                update TBID0013
                                   set BASIC_PREM  = CASE WHEN (i_basis_from -i_istar_cont_date) = 0 THEN 0 ELSE round(BASIC_YEAR_PREM *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (i_basis_from -i_istar_cont_date) ,-1) END
                                     , APPY_PREM   = CASE WHEN (i_basis_from -i_istar_cont_date) = 0 THEN 0 ELSE round(APPY_YEAR_PREM  *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (i_basis_from -i_istar_cont_date) ,-1) END
                                 where POL_NO      = i_pol_no
                                   and ENDOR_NO    = i_endor_no
                                   and DMBO_CD     = i_dmbo_cd
                                   and APPY_TO >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                                   and APPY_TO <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      --20130422 TO_DATE 처리 최재혁


                                exception  when others then o_result := 'Error';
                                                  raise_application_error(-20001, '해지담보 보험료 Update [TBID0013] Error Error[10]: '|| sqlerrm);
                            end;
                            */
                        /*공백기간 환급(실제 발생하진 않지만 추가함)*/
                        else
                            f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,i_istar_cont_date  ,i_all_cliam_date  ,i_istar_cont_date  ,i_iend_cont_date);
                            f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);
                            /****************************/
                            /* TBID0013 Table Update   **/
                            /****************************/
                            begin
                                update TBID0013
                                   set BASIC_PREM    = CASE WHEN (i_all_cliam_date -i_istar_cont_date) = 0 THEN 0 ELSE round(BASIC_YEAR_PREM *  f_fn_rent_short_rate * (to_date(i_all_cliam_date) - to_date(APPY_FROM)) / (i_all_cliam_date -i_istar_cont_date) ,-1) END
                                     , APPY_PREM     = CASE WHEN (i_all_cliam_date -i_istar_cont_date) = 0 THEN 0 ELSE round(APPY_YEAR_PREM  *  f_fn_rent_short_rate * (to_date(i_all_cliam_date) - to_date(APPY_FROM)) / (i_all_cliam_date -i_istar_cont_date) ,-1) END
                                     , DMBO_END_DATE = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                                     , APPY_TO       = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                                     , BASIS_TO      = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                                 where POL_NO        = i_pol_no
                                   and ENDOR_NO      = i_endor_no
                                   and DMBO_CD       = i_dmbo_cd
                                   and APPY_TO      >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                                   and APPY_TO      <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      /*20130422 TO_DATE 처리 최재혁*/


                                exception  when others then o_result := 'Error';
                                                  raise_application_error(-20001, '해지담보 보험료 Update [TBID0013] Error Error[10]: '|| sqlerrm);
                            end;
                        end if;
                                                            l_log_data := l_log_data || '1*18[' || f_fn_rent_short_rate    ||']=단기요율'  ||chr(13)||chr(10);
                                                            l_log_data := l_log_data || '1*19[' || s_appy_prem    ||']=담보해지 단기 적용보험료'  ||chr(13)||chr(10);
                    end if;
                /* 일할 계산 */
                else
                    /*공백기간 환급이 아니면 */
                    if V_ENDOR_GB <> '6' THEN

                             if s_0013_c_cancel_calc_gb <> '1' THEN

                                 /* 단기요율 계산 = 적용종료일 - 적용시작일 */
                                    f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_c_appy_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                                    f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                                 IF i_dmbo_cd <> '13' then

                                    /* 보험료 단기 계산 = 년간 총 적용보험료 * 단기적용율   */
                                    s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);
                                    s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);
                                                l_log_data := l_log_data || '1*19(2)[' || f_fn_rent_short_rate        ||']=배f_fn_rent_short_rate서일기준(단기) 적용보험료' ||chr(13)||chr(10);
                                                                            l_log_data := l_log_data || '1*19(2)[' || s_appy_prem        ||']=담보해지(단기) 적용보험료' ||chr(13)||chr(10);
                                                                            l_log_data := l_log_data || '1*19(2)[' || s_basic_prem       ||']=담보해지(단기) 기본보험료' ||chr(13)||chr(10);
                                 ELSE

                                        /* 보험료 단기 계산 = 년간 총 적용보험료 * 단기적용율   */
                                        /*
                                    s_appy_prem   := round(s_0013_b_appy_prem  * f_fn_rent_short_rate,-1);
                                    s_basic_prem  := round(s_0013_b_basic_prem * f_fn_rent_short_rate,-1);
                                                l_log_data := l_log_data || '1*19(2)[' || f_fn_rent_short_rate        ||']=배f_fn_rent_short_rate서일기준(단기) 적용보험료' ||chr(13)||chr(10);
                                                                            l_log_data := l_log_data || '1*19(2)[' || s_appy_prem        ||']=담보해지(단기) 적용보험료' ||chr(13)||chr(10);
                                                                            l_log_data := l_log_data || '1*19(2)[' || s_basic_prem       ||']=담보해지(단기) 기본보험료' ||chr(13)||chr(10);
                                       */
                                       /*이전보험료를 일할계산함 = 이전 배서의 기간보험료 * (기준일-이전배서 대상시작일) / (이전배서 대상종료일 - 이전배서 대상시작일)*/
                                        s_appy_prem  := s_basis_from_b_appy_prem;/*round(s_0013_b_appy_prem  * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;*/
                                        s_basic_prem := s_basis_from_b_basic_prem;/*round(s_0013_b_basic_prem * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;*/
                                                                  l_log_data := l_log_data || '1*19[' || s_appy_prem    ||']=담보(대물임의)해지 일할 적용보험료'  ||chr(13)||chr(10);


                                 END IF;

                              ELSE

                                  /*이전보험료를 일할계산함 = 이전 배서의 기간보험료 * (기준일-이전배서 대상시작일) / (이전배서 대상종료일 - 이전배서 대상시작일)*/
                                  s_appy_prem  := s_basis_from_b_appy_prem;/*round(s_0013_b_appy_prem  * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;*/
                                  s_basic_prem := s_basis_from_b_basic_prem;/*round(s_0013_b_basic_prem * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;*/
                                                                      l_log_data := l_log_data || '1*19[' || s_appy_prem    ||']=담보해지 일할 적용보험료'  ||chr(13)||chr(10);

                              END IF;

                        /****************************/
                        /* TBID0013 Table Update   **/
                        /****************************/
                        begin
                            update TBID0013
                               set BASIC_PREM      = s_basic_prem
                                 , APPY_PREM       = s_appy_prem
                              /*  , BASIC_YEAR_PREM = i_basic_year_prem*/
                              /*   , APPY_YEAR_PREM  = i_appy_year_prem*/
                             where POL_NO      = i_pol_no
                               and ENDOR_NO    = i_endor_no
                               and DMBO_CD     = i_dmbo_cd
                               and APPY_TO >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                               and APPY_TO <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      /*20130422 TO_DATE 처리 최재혁*/

                            exception  when others then o_result := 'Error';
                                                           raise_application_error(-20001, '해지담보 보험료 Update [TBID0013] Error Error[11]: '|| sqlerrm);
                        end;
                                                            l_log_data := l_log_data || '1*20[' ||  '해지담보 Update [TBID0013] OK...2'   ||chr(13)||chr(10);
                    /*공백기간 환급이면 */
                    else
                        /*이전보험료를 일할계산함 = 이전 배서의 기간보험료 * (전차량 사용종료일-이전배서 대상시작일) / (이전배서 대상종료일 - 이전배서 대상시작일)*/
                        s_appy_prem  := s_all_cliam_date_b_appy_prem;/*round(s_0013_b_appy_prem  * ((i_all_cliam_date - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;*/
                        s_basic_prem := s_all_cliam_date_b_basic_prem;/*round(s_0013_b_basic_prem * ((i_all_cliam_date - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;*/
                                                            l_log_data := l_log_data || '1*19[' || s_appy_prem    ||']=담보해지 일할 적용보험료'  ||chr(13)||chr(10);

                        /****************************/
                        /* TBID0013 Table Update   **/
                        /****************************/
                        begin
                            update TBID0013
                               set BASIC_PREM      = s_basic_prem
                                 , APPY_PREM       = s_appy_prem
                              /*   , BASIC_YEAR_PREM = i_basic_year_prem*/
                              /*   , APPY_YEAR_PREM  = i_appy_year_prem*/
                                 , DMBO_END_DATE = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                                 , APPY_TO       = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                                 , BASIS_TO      = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                             where POL_NO      = i_pol_no
                               and ENDOR_NO    = i_endor_no
                               and DMBO_CD     = i_dmbo_cd
                               and APPY_TO >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                               and APPY_TO <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      /*20130422 TO_DATE 처리 최재혁*/

                            exception  when others then o_result := 'Error';
                                                           raise_application_error(-20001, '해지담보 보험료 Update [TBID0013] Error Error[11]: '|| sqlerrm);
                        end;
                                                            l_log_data := l_log_data || '1*20[' ||  '해지담보(공백기간) Update [TBID0013] OK...2'   ||chr(13)||chr(10);
                    end if;
                end if;
            /*단기계약건*/
            else
                 /*ljm 20151006 i_istar_cont_date => V_DAMBO_START_DT*/
                f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,V_DAMBO_START_DT  ,i_basis_from  ,i_istar_cont_date  ,i_iend_cont_date);
                f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);
                /****************************/
                /* TBID0013 Table Update   **/
                /****************************/
                begin
                    update TBID0013
                       set
                         BASIC_PREM  = CASE WHEN (i_basis_from -V_DAMBO_START_DT) = 0 THEN 0 ELSE round(i_dmbo_basic_prem *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (i_basis_from -V_DAMBO_START_DT) ,-1) END
                         , APPY_PREM   = CASE WHEN (i_basis_from -V_DAMBO_START_DT) = 0 THEN 0 ELSE round(i_dmbo_appy_prem  *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (i_basis_from -V_DAMBO_START_DT) ,-1) END
                         /* ljm 20150914 적용보험료 와 기본보험료 구하는 공식 위에내용을 아래 내용으로 수정.  i_dmbo_appy_prem ==> s_0013_b_appy_year_prem*/
                         /*  BASIC_PREM  = CASE WHEN (i_basis_from -i_istar_cont_date) = 0 THEN 0 ELSE round(i_dmbo_basic_prem *  f_fn_rent_short_rate  ,-1) END*/
                         /*, APPY_PREM   = CASE WHEN (i_basis_from -i_istar_cont_date) = 0 THEN 0 ELSE round(s_0013_b_appy_year_prem  *  f_fn_rent_short_rate  ,-1) END*/
                         , SHORT_R     = f_fn_rent_short_rate /* ljm 20150904 단기율 추가*/
                     where POL_NO      = i_pol_no
                       and ENDOR_NO    = i_endor_no
                       and DMBO_CD     = i_dmbo_cd
                       and APPY_TO >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                       and APPY_TO <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      /*20130422 TO_DATE 처리 최재혁*/


                    exception  when others then o_result := 'Error';
                                                  raise_application_error(-20001, '해지담보(단기계약) 보험료 Update [TBID0013] Error[10]: '|| sqlerrm);
                end;
                l_log_data := l_log_data || '1*99[' || round(i_dmbo_basic_prem)  ||']=연간보험료' ||chr(13)||chr(10);
                l_log_data := l_log_data || '1*99[' || round(i_dmbo_appy_prem  *  f_fn_rent_short_rate  ,-1)  ||']=적용보험료' ||chr(13)||chr(10);
                l_log_data := l_log_data || '1*99[' || i_dmbo_appy_prem  ||']=보험료' ||chr(13)||chr(10);
                l_log_data := l_log_data || '1*99[' || f_fn_rent_short_rate  ||']=단기율' ||chr(13)||chr(10);

                /* LJM 20151019 해지시 전기간 적용보험료 다시 계산*/
                begin
                    update TBID0013
                       set
                           BASIC_PREM  = CASE WHEN (i_basis_from -V_DAMBO_START_DT) = 0 THEN 0 ELSE round(BASIC_YEAR_PREM *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (i_basis_from -V_DAMBO_START_DT) ,-1) END
                         , APPY_PREM   = CASE WHEN (i_basis_from -V_DAMBO_START_DT) = 0 THEN 0 ELSE round(APPY_YEAR_PREM  *  f_fn_rent_short_rate * (to_date(APPY_TO) - to_date(APPY_FROM)) / (i_basis_from -V_DAMBO_START_DT) ,-1) END
                        /* ljm 20150914 적용보험료 와 기본보험료 구하는 공식 위에내용을 아래 내용으로 수정.  i_dmbo_appy_prem ==> s_0013_b_appy_year_prem*/
                        /*    BASIC_PREM  = CASE WHEN (i_basis_from -i_istar_cont_date) = 0 THEN 0 ELSE round(i_dmbo_basic_prem *  f_fn_rent_short_rate  ,-1) END*/
                        /* , APPY_PREM   = CASE WHEN (i_basis_from -i_istar_cont_date) = 0 THEN 0 ELSE round(s_0013_b_appy_year_prem  *  f_fn_rent_short_rate  ,-1) END*/
                         , SHORT_R     = f_fn_rent_short_rate /* ljm 20150904 단기율 추가*/
                     where POL_NO      = i_pol_no
                       and ENDOR_NO    = i_endor_no
                       and DMBO_CD     = i_dmbo_cd
                       and APPY_FROM >= to_date(to_char(V_DAMBO_START_DT, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS');

                    exception  when others then o_result := 'Error';
                                                  raise_application_error(-20001, '해지담보(단기계약) 보험료 Update [TBID0013] Error[10]: '|| sqlerrm);
                end;


            end if;
        else
            /*해지시 사고가 있으면 분납금을 모두 받는다. */
            /****************************/
            /* TBID0013 Table Update   **/
            /****************************/
            /*공백기간 환급이 아니면 */
            if V_ENDOR_GB <> '6' then
                /* 후에 받아야할 돈을 다 처리해야함으로 보험료 계산이 필요없다. */
                begin
                    update TBID0013
                       set DMBO_END_DATE = to_date(to_char(i_basis_from,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                         , APPY_TO       = to_date(to_char(i_basis_from,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                         , BASIS_TO      = to_date(to_char(i_basis_from,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                     where POL_NO        = i_pol_no
                       and ENDOR_NO      = i_endor_no
                       and DMBO_CD       = i_dmbo_cd
                       and APPY_TO      >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                       and APPY_TO      <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      /*20130422 TO_DATE 처리 최재혁*/

                    exception  when others then o_result := 'Error';
                                       raise_application_error(-20001, '해지담보(전손처리) 보험료 Update [TBID0013] Error Error[11]: '|| sqlerrm);
                end;
                                                            l_log_data := l_log_data || '1*20[' ||  '자차 전손처리 담보 Update [TBID0013] OK'   ||chr(13)||chr(10);
            else
                begin
                    update TBID0013
                       set DMBO_END_DATE = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                         , APPY_TO       = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                         , BASIS_TO      = to_date(to_char(i_all_cliam_date,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                     where POL_NO        = i_pol_no
                       and ENDOR_NO      = i_endor_no
                       and DMBO_CD       = i_dmbo_cd
                       and APPY_TO      >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                       and APPY_TO      <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');      /*20130422 TO_DATE 처리 최재혁*/

                    exception  when others then o_result := 'Error';
                                       raise_application_error(-20001, '해지담보(전손처리) 보험료 Update [TBID0013] Error Error[11]: '|| sqlerrm);
                end;
            end if;
        end if;
    /**********************************************************/
    /** 담보추가:기준일 과 현재배서의 적용시작일이 같으면     */
    /**********************************************************/
    ELSIF  i_basis_from = s_0013_c_appy_from  then
        s_appy_prem  :=0;
        s_basic_prem :=0;
        f_fn_rent_short_rate := 0;

        /*단기 자차*/
        if  i_endor_cd = '801' then
            /* 보험료 계산 - 일할, 단기 구분한다. */
            if  s_0013_c_cancel_calc_gb <> '1' then
                /* 단기요율 계산 = 적용종료일 - 적용시작일 */
                f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_c_appy_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                /* 보험료 단기 계산 = 년간 총 적용보험료 * 단기적용율   */
                s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);
                s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);
                                                    l_log_data := l_log_data || '1*21[**** 담보 추가_TBID0013 ********]'                ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*22[' || s_appy_prem   ||']=담보추가 단기 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*23[' || s_basic_prem  ||']=담보추가 단기 기본보험료' ||chr(13)||chr(10);
            else
                /* 보험료 일할 계산 = 년간 총 적용보험료 * (적용종료일 - 적용시작일) / (보험종기 - 보험시기)   */
                s_appy_prem  :=s_0013_c_appy_to_appy_prem;/*round(i_dmbo_appy_prem   * ((s_0013_c_appy_to - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;*/
                s_basic_prem :=s_0013_c_appy_to_basic_prem;/*round(i_dmbo_basic_prem  * ((s_0013_c_appy_to - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;*/
                                                    l_log_data := l_log_data || '1*21[**** 담보 추가_TBID0013 ********]'                ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*22[' || s_appy_prem   ||']=담보추가 일할 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*23[' || s_basic_prem  ||']=담보추가 일할 기본보험료' ||chr(13)||chr(10);

            end if;
        /*단기 아닌경우*/
        else
            /*일할계약*/
            if i_short_day_gb = '1' then
                /* 보험료 계산 - 일할, 단기 구분한다. */
                if  s_0013_c_cancel_calc_gb <> '1' then
                    /* 단기요율 계산 = 적용종료일 - 적용시작일 */
                    f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_c_appy_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                    f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                    /* 보험료 단기 계산 = 년간 총 적용보험료 * 단기적용율   */
                    s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);
                    s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);
                                                    l_log_data := l_log_data || '1*21[**** 담보 추가_TBID0013 ********]'                ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*22[' || s_appy_prem   ||']=담보추가 단기 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*23[' || s_basic_prem  ||']=담보추가 단기 기본보험료' ||chr(13)||chr(10);
                else
                    /* 보험료 일할 계산 = 년간 총 적용보험료 * (적용종료일 - 적용시작일) / (보험종기 - 보험시기)   */
                    s_appy_prem  :=s_0013_c_appy_to_appy_prem;/*round(i_dmbo_appy_prem   * ((s_0013_c_appy_to - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;*/
                    s_basic_prem :=s_0013_c_appy_to_basic_prem;/*round(i_dmbo_basic_prem  * ((s_0013_c_appy_to - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;*/
                                                    l_log_data := l_log_data || '1*21[**** 담보 추가_TBID0013 ********]'                ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*22[' || s_appy_prem   ||']=담보추가 일할 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*23[' || s_basic_prem  ||']=담보추가 일할 기본보험료' ||chr(13)||chr(10);

                end if;
            /*단기계약*/
            else
                /*분납부활*/
                if V_ENDOR_GB = '7' then
                    /*이전 데이터  적용시작일 찾기 */
                    select max(trunc(APPY_FROM)), sum(APPY_PREM), sum(BASIC_PREM)
                      into V_DANGI_APPY_FROM, V_DANGI_APPY_PREM, V_DANGI_BASIC_PREM
                      from TBID0013
                     where POL_NO   = i_pol_no
                       and ENDOR_NO = i_endor_no - 1
                       and DMBO_CD  = i_dmbo_cd
                       and APPY_TO  =(select MAX(APPY_TO)
                                        from TBID0013
                                       where POL_NO   = i_pol_no
                                         and ENDOR_NO = i_endor_no - 1
                                         and DMBO_CD  = i_dmbo_cd);

                    /* 보험료 쪼개기. 기존 단기 보험료를 기간별로 쪼갠다.  */
                    /* 보험료 쪼개기. 전 데이터 적용보험료 * ((현재담보종기 - 기준일자)/(현재담보종기-전 데이터 적용시작일))  */
                    s_appy_prem   := round(V_DANGI_APPY_PREM   * ((s_0013_c_appy_to - i_basis_from)/( s_0013_c_appy_to - V_DANGI_APPY_FROM )),-1);
                    s_basic_prem  := round(V_DANGI_BASIC_PREM  * ((s_0013_c_appy_to - i_basis_from)/( s_0013_c_appy_to - V_DANGI_APPY_FROM )),-1);
                                                    l_log_data := l_log_data || '1*21[**** 담보 추가(단기계약-분납부활))_TBID0013 ********]'                ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*22[' || s_appy_prem   ||']=담보추가(단기계약-분납부활) 단기 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*23[' || s_basic_prem  ||']=담보추가(단기계약-분납부활) 단기 기본보험료' ||chr(13)||chr(10);
                /*분납부활 아님*/
                else
                    /* 단기요율 계산 = 적용종료일 - 적용시작일 */
                    f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_c_appy_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                    f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                    /* 보험료 단기 계산 = 년간 총 적용보험료 * 단기적용율   */
                    s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);
                    s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);
                                                    l_log_data := l_log_data || '1*21[**** 담보 추가(단기계약)_TBID0013 ********]'                ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*22[' || s_appy_prem   ||']=담보추가(단기계약) 단기 적용보험료' ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '1*23[' || s_basic_prem  ||']=담보추가(단기계약) 단기 기본보험료' ||chr(13)||chr(10);
                end if;
            end if;
        end if;

        /*****************************/
        /* TBID0013 Table Update    **/
        /*****************************/
        begin
            /*20130422 TO_DATE 처리 최재혁*/
            update TBID0013
               set BASIC_PREM        = s_basic_prem
                 , APPY_PREM         = s_appy_prem
                 , DMBO_START_DATE   = to_date(to_char(i_basis_from,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                 , DMBO_END_DATE     = APPY_TO
                 , BASIC_YEAR_PREM   = i_basic_year_prem
                 , APPY_YEAR_PREM    = i_appy_year_prem
             where POL_NO    = i_pol_no
               and ENDOR_NO  = i_endor_no
               and DMBO_CD   = i_dmbo_cd
               and APPY_FROM  >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
               and APPY_FROM  <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');

            exception  when others then o_result := 'Error';
                                           raise_application_error(-20001, '추가담보 보험료 Update [TBID0013] Error Error[20]: '|| sqlerrm);
        end;
                                                     l_log_data := l_log_data || '1*24[' ||  '추가담보 Update[TBID0013] OK...4' ||chr(13)||chr(10);

        /*분납 부활이면 이전 데이터*/
        if V_ENDOR_GB = '7' then
            /*일할계약, 단기계약 동일*/
            begin
                update TBID0013
                   set basic_prem = round(basic_year_prem * ((i_basis_from - trunc(basis_from)) / (i_iend_cont_date - i_istar_cont_date)),-1)
                     , appy_prem  = round(appy_year_prem * ((i_basis_from - trunc(basis_from)) / (i_iend_cont_date - i_istar_cont_date)),-1)
                     , basis_to   = to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                 where POL_NO     = i_pol_no
                   and ENDOR_NO   = i_endor_no
                   and DMBO_CD    = i_dmbo_cd
                   and APPY_TO    = ( select MAX(APPY_TO)
                                        from TBID0013
                                       where POL_NO   = i_pol_no
                                         and ENDOR_NO = i_endor_no - 1
                                         and DMBO_CD  = i_dmbo_cd );
                exception when others then o_result := null;
            end;
                                                     l_log_data := l_log_data || '1*24-1[' ||  '분납부활(이전데이터) Update[TBID0013] OK...4' ||chr(13)||chr(10);
        end if;

        if i_day_endor_cnt > 0 then
            /********************************************/
            /** 기준일 이전 Data[TBID0013] Insert       */
            /* 당일배서일 경우에만                      */
     /* 2017.02.08 담보별 단체특성율 추가 */
            /********************************************/
            begin
                insert into TBID0013(POL_NO,               ENDOR_NO,                   BASIC_SCONT_GB,      DMBO_CD,
                                     APPY_FROM,            ACDNT_RESP_WANT,            MAN_RESP_WANT,       INSUR_AMT,
                                     INSUR_AMT_GB,         DUCT_AMT_GB,                BASIC_PREM,          DMBO_START_DATE,
                                     DMBO_END_DATE,        APPY_PREM,                  BASIC_RANGE_R,       CANCEL_CALC_GB,
                                     APPY_TO,              BASIS_FROM,                 BASIS_TO,
                                     USER_ID,              BASIC_YEAR_PREM,            APPY_YEAR_PREM , GRP_DMBO_RATE
                                       )
                              select POL_NO,               i_endor_no,                 BASIC_SCONT_GB,      DMBO_CD,
                                     APPY_FROM,            ACDNT_RESP_WANT,            MAN_RESP_WANT,       INSUR_AMT,
                                     INSUR_AMT_GB,         DUCT_AMT_GB,                BASIC_PREM,          DMBO_START_DATE,
                                     DMBO_END_DATE,        APPY_PREM,                  BASIC_RANGE_R,       CANCEL_CALC_GB,
                                     APPY_TO,              BASIS_FROM,                 BASIS_TO,
                                     USER_ID,              BASIC_YEAR_PREM,            APPY_YEAR_PREM , GRP_DMBO_RATE
                                from TBID0013
                               where POL_NO   = i_pol_no
                                 and ENDOR_NO = i_endor_no_bef_max
                                 and DMBO_CD  = i_dmbo_cd
                                 and APPY_TO  = to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');
                exception when others then o_result := null;
            end;
                                                     l_log_data := l_log_data || '1*24-1[' ||  '추가담보(당일배서) Update[TBID0013] OK...4' ||chr(13)||chr(10);
        end if;


    /************************************************************************/
    /** 보험료 변동                                                        **/
    /** 2013.05.30일 추가                                                  **/
    /** 보험료변동이 없어도 공백기간환급이면 적용받도록 수정함             **/
    /** 2013.05.30일 추가                                                  **/
    /** 보험료변동이 없어도 공백기간환급이면 적용받도록 수정함             **/
    /************************************************************************/
    ELSIF (s_0013_appy_prem <> s_0013_b_appy_prem) or (s_0013_appy_prem = s_0013_b_appy_prem and V_ENDOR_GB = '6')  then
                                                     l_log_data := l_log_data || '1*25[**** 보험료변동_TBID0013 ********]'  ||chr(13)||chr(10);
        /* 기준일 이전 사용기간에 대한 보험료 계산 */
        /* 공백기간환급 구분을 먼저 처리한다.*/
        /* 공백기간 환급이 아니면 */
        if V_ENDOR_GB <> '6' then
            /*일할계약*/
            if i_short_day_gb = '1' then
                /* 단기 계산 ( 2: 단기, 3:단기자차)*/
                if    s_0013_c_cancel_calc_gb <> '1' then
                    /*단기요율 계산 : 기준일자 - 적용시작일 로 단기요율 계산   */
                    /*f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_b_appy_from  ,i_basis_from  ,i_istar_cont_date  ,i_iend_cont_date);*/
                    /*f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);*/

                    /*s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate,-1);*/
                    /*s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate,-1);*/
                     /* ljm 20150914 단기자차 관련 단기율 구하는 부분 if로 분리하여 추가 처리*/
                    if    s_0013_c_cancel_calc_gb = '3' then
                        f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_b_appy_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                        f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                        s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate  * ((i_basis_from - s_0013_b_appy_from) / (s_0013_c_appy_to - s_0013_b_appy_from))     ,-1 );
                        s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate  * ((i_basis_from - s_0013_b_appy_from) / (s_0013_c_appy_to - s_0013_b_appy_from))     ,-1);
                    else
                        f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_b_appy_from  ,i_basis_from  ,i_istar_cont_date  ,i_iend_cont_date);
                        f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                        s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate,-1);
                        s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate,-1);

                    end if;
                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1      ||']=보험료변동 단기 적용보험료(변경전)'  ||chr(13)||chr(10);
                else
                    /* = 이전 배서의 기간보험료 * (기준일자-이전배서 대상시작일) / (이전배서 대상종료일 - 이전배서 대상시작일)*/
                    s_appy_prem1  := s_basis_from_b_appy_prem;/*round(s_0013_b_appy_prem  * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;*/
                    s_basic_prem1 := s_basis_from_b_basic_prem;/*round(s_0013_b_basic_prem * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;*/
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1    ||']=보험료변동 일할 적용보험료'  ||chr(13)||chr(10);
                end if;
            /*단기계약*/
            else
                /*단기요율 계산 : 기준일자 - 적용시작일 로 단기요율 계산   */
                /*f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_b_appy_from  ,i_basis_from  ,i_istar_cont_date  ,i_iend_cont_date);*/
                /*f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);*/

                /*s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate,-1);*/
                /*s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate,-1);*/
                /* ljm 20150914 단기계약시 단기율 산출로직 수정 기준종료일 - 공제시기 분담금 로직 아래로 변경*/
                f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,V_DAMBO_START_DT  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                /* ljm 20151012 분모가 되는 기간 s_0013_b_appy_from = > V_DAMBO_START_DT 담보시기로 변경*/
                s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate   * ((i_basis_from - s_0013_b_appy_from) / (s_0013_c_appy_to - V_DAMBO_START_DT))     ,-1);
                s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate   * ((i_basis_from - s_0013_b_appy_from) / (s_0013_c_appy_to - V_DAMBO_START_DT))     ,-1);
                /*s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate   * ((i_basis_from - s_0013_b_appy_from) / (s_0013_c_appy_to - s_0013_b_appy_from))     ,-1);*/
                /*s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate   * ((i_basis_from - s_0013_b_appy_from) / (s_0013_c_appy_to - s_0013_b_appy_from))     ,-1);*/

                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율(단기계약)'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1      ||']=보험료변동 단기(단기계약) 적용보험료(변경전)'  ||chr(13)||chr(10);
            end if;

        /* 공백기간 환급 */
        else
            /* 사고 아닌경우*/
            if  V_ACCI_CHECK = 'N' then
                /*일할 계약*/
                if i_short_day_gb = '1' then
                    /* 단기 계산 ( 2: 단기, 3:단기자차)*/
                    if    s_0013_c_cancel_calc_gb <> '1' then
                        /*단기요율 계산 : 전차량 사용종료일 - 적용시작일 로 단기요율 계산   */
                        f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_b_appy_from  ,i_all_cliam_date  ,i_istar_cont_date  ,i_iend_cont_date);
                        f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                        s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate,-1);
                        s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate,-1);
                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율(공백기간)'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1      ||']=보험료변동 단기(공백기간) 적용보험료(변경전)'  ||chr(13)||chr(10);
                    /* 일할 계산 */
                    else
                        /* = 이전 배서의 기간보험료 * (전차량 사용종료일-이전배서 대상시작일) / (이전배서 대상종료일 - 이전배서 대상시작일)*/
                        s_appy_prem1  := s_all_cliam_date_b_appy_prem;/*round(s_0013_b_appy_prem  * ((i_all_cliam_date - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;*/
                        s_basic_prem1 := s_all_cliam_date_b_basic_prem;/*round(s_0013_b_basic_prem * ((i_all_cliam_date - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;*/
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1    ||']=보험료변동(공백기간) 일할 적용보험료'  ||chr(13)||chr(10);
                    end if;
                /*단기 계약*/
                else
                    /*단기요율 계산 : 전차량 사용종료일 - 적용시작일 로 단기요율 계산   */
                    /*f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_b_appy_from  ,i_all_cliam_date  ,i_istar_cont_date  ,i_iend_cont_date);*/
                    /*f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);*/

                    /*s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate,-1);*/
                    /*s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate,-1);*/
                     /* ljm 20150916 단기율 및 분담금 구하는 방법 변경   단기율 기준종료일 ？ 공제시기
                        분담금 분담금 = 변경전 연간분담금 * 단기요율 * (전차량종료일 ？ 전 기준시작일 )  / ( 기준종료일 ？ 공제시기 )
                    */
                    f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,V_DAMBO_START_DT  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                    f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);
                    /*s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate  * ((i_all_cliam_date - s_0013_b_appy_from) / (s_0013_c_appy_to - s_0013_b_appy_from))           ,-1);*/
                    /*s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate  * ((i_all_cliam_date - s_0013_b_appy_from) / (s_0013_c_appy_to - s_0013_b_appy_from)),-1);*/
                    /* ljm 20151013 s_0013_b_appy_from => V_DAMBO_START_DT 변경*/
                    s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate  * ((i_all_cliam_date - s_0013_b_appy_from) / (s_0013_c_appy_to - V_DAMBO_START_DT))           ,-1);
                    s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate  * ((i_all_cliam_date - s_0013_b_appy_from) / (s_0013_c_appy_to - V_DAMBO_START_DT)),-1);
                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율(단기계약-공백기간)'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1      ||']=보험료변동 단기(단기계약-공백기간) 적용보험료(변경전)'  ||chr(13)||chr(10);
                end if;
            /* 사고인 경우*/
            else
                /*전손처리 아닌경우*/
                if V_ALL_CLAIM = 'N' then
                    /*일할 계약 */
                    if i_short_day_gb = '1' then
                        /* 단기 계산 ( 2: 단기, 3:단기자차)*/
                        if    s_0013_c_cancel_calc_gb <> '1' then
                            /*단기요율 계산 : 전차량 사용종료일 - 적용시작일 로 단기요율 계산   */
                            f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_b_appy_from  ,i_basis_from  ,i_istar_cont_date  ,i_iend_cont_date);
                            f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                            s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate,-1);
                            s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate,-1);
                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율(공백기간-사고있음)'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1      ||']=보험료변동 단기(공백기간-사고있음) 적용보험료(변경전)'  ||chr(13)||chr(10);
                        /* 일할 계산 */
                        else
                            /* = 이전 배서의 기간보험료 * (전차량 사용종료일-이전배서 대상시작일) / (이전배서 대상종료일 - 이전배서 대상시작일)*/
                            s_appy_prem1  := s_basis_from_b_appy_prem;/*round(s_0013_b_appy_prem  * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;*/
                            s_basic_prem1 := s_basis_from_b_basic_prem;/*round(s_0013_b_basic_prem * ((i_basis_from - s_0013_b_appy_from) / (s_0013_b_appy_to - s_0013_b_appy_from)),-1) ;*/
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1    ||']=보험료변동(공백기간-사고있음) 일할 적용보험료'  ||chr(13)||chr(10);
                        end if;
                    /*단기 계약*/
                    else
                        /*단기요율 계산 : 전차량 사용종료일 - 적용시작일 로 단기요율 계산   */
                        f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_b_appy_from  ,i_basis_from  ,i_istar_cont_date  ,i_iend_cont_date);
                        f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                        s_appy_prem1   := round(s_0013_b_appy_year_prem  * f_fn_rent_short_rate,-1);
                        s_basic_prem1  := round(s_0013_b_basic_year_prem * f_fn_rent_short_rate,-1);
                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율(공백기간-사고있음)'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem1      ||']=보험료변동 단기(공백기간-사고있음) 적용보험료(변경전)'  ||chr(13)||chr(10);
                    end if;
                /*전손처리*/
                else
                    /*기존 보험료 그대로 받는다 */
                    s_appy_prem1  := s_0013_b_appy_prem;
                    s_basic_prem1 := s_0013_b_basic_prem;
                end if;
            end if;
        end if;

        /* 기준일 이전 데이터 날짜 update 하기 위해 날짜 계산 */
        if V_ENDOR_GB = '6' then
            V_DMBO_END_DATE := i_all_cliam_date;
            if V_ACCI_CHECK = 'N' then
                V_BASIS_TO_DATE := i_all_cliam_date;
            else
                V_BASIS_TO_DATE := i_basis_from;
            end if;
        else
            V_DMBO_END_DATE := i_basis_from;
            V_BASIS_TO_DATE := i_basis_from;
        end if;

        /* 기준일 이후 사용기간에 대한 보험료 계산 */
        /* 분납부활이 여부에 따라서 처리가 달라짐 */
        /* 일할 단기 계산 */
        /*일할 계약*/
        if i_short_day_gb = '1' then
            if    s_0013_c_cancel_calc_gb <> '1' then
                /*단기요율 계산 : 적용종료일 - 기준일자 로 단기요율 계산   */
                f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,i_basis_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);
                s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);
                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem    ||']=보험료변동 단기 적용보험료(변경후)'  ||chr(13)||chr(10);
            else
                /* 기준일 이후 기간 동안 = 년보험료 * (보험종기 - 기준일) / (보험종기 - 보험시기)*/
                s_appy_prem   := s_basis_from_appy_prem;/*round(i_dmbo_appy_prem  *   ((i_iend_cont_date  - i_basis_from) / (i_iend_cont_date  - i_istar_cont_date)) ,-1);*/
                s_basic_prem  := s_basis_from_basic_prem;/*round(i_dmbo_basic_prem *   ((i_iend_cont_date  - i_basis_from) / (i_iend_cont_date  - i_istar_cont_date)) ,-1);*/
                                                     l_log_data := l_log_data || '1*28[' || s_appy_prem    ||']=년적용보험료*(보험종기-기준일)/(보험종기-보험시기)'  ||chr(13)||chr(10);
            end if;
        /*단기 계약*/
        else
            /*단기요율 계산 : 적용종료일 - 기준일자 로 단기요율 계산   */
            /*f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,i_basis_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);*/
            /*f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);*/

            /*s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);*/
            /*s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);*/
               /* ljm 20150914 단기계약시 단기율 산출로직 수정 기준종료일 - 공제시기 분담금 로직 아래로 변경*/
              f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,V_DAMBO_START_DT  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
              f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);
              s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate  * ((s_0013_c_appy_to - i_basis_from) / (s_0013_c_appy_to - V_DAMBO_START_DT))      ,-1);
              s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate  * ((s_0013_c_appy_to - i_basis_from) / (s_0013_c_appy_to - V_DAMBO_START_DT))      ,-1);

                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*26[' || s_0013_b_appy_from  ||']=전기준시작일'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*26[' || s_0013_c_appy_to  ||']=기준종료일'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*26[' || i_basis_from  ||']=배서기준일'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*26[' || f_fn_rent_short_rate  ||']=단기요율'  ||chr(13)||chr(10);
                                                     l_log_data := l_log_data || '1*27[' || s_appy_prem    ||']=보험료변동 단기 적용보험료(변경후)'  ||chr(13)||chr(10);
        end if;

        /***********************************************************/
        /* 기준일 이후 보험료을 TBID0013에 Insert 시킴             */
 /* 2017.02.08 담보별 단체특성율 추가    */
        /***********************************************************/
        begin
            /*20130422 TO_DATE 처리 최재혁, BASIS_FROM 잘못들어가는거 수정.*/
            insert into TBID0013(POL_NO,               ENDOR_NO,                   BASIC_SCONT_GB,        DMBO_CD,
                                 ACDNT_RESP_WANT,      MAN_RESP_WANT,              INSUR_AMT,             INSUR_AMT_GB,
                                 DUCT_AMT_GB,          BASIC_PREM,                 APPY_PREM,             BASIC_RANGE_R,
                                 CANCEL_CALC_GB,       APPY_TO,                    BASIS_TO,              USER_ID,
                                 BASIC_YEAR_PREM,      APPY_YEAR_PREM,
                                 APPY_FROM,
                                 DMBO_START_DATE,
                                 DMBO_END_DATE,
                                 BASIS_FROM,
     GRP_DMBO_RATE
                                 )
                          select POL_NO,               ENDOR_NO,                   BASIC_SCONT_GB,        DMBO_CD,
                                 ACDNT_RESP_WANT,      MAN_RESP_WANT,              INSUR_AMT,             INSUR_AMT_GB,
                                 DUCT_AMT_GB,          s_basic_prem,               s_appy_prem,           BASIC_RANGE_R,
                                 CANCEL_CALC_GB,       APPY_TO,                    BASIS_TO,              USER_ID,
                                 i_basic_year_prem,    i_appy_year_prem,
                                 to_date(to_char(i_basis_from    ,'yyyymmdd')||'235959', 'yyyymmddhh24miss'),
                                 to_date(to_char(i_basis_from    ,'yyyymmdd')||'235959', 'yyyymmddhh24miss'),
                                 to_date(to_char(i_iend_cont_date,'yyyymmdd')||'235959', 'yyyymmddhh24miss'),
                                 to_date(to_char(i_basis_from    ,'yyyymmdd')||'235959', 'yyyymmddhh24miss') ,
     GRP_DMBO_RATE
                            from TBID0013
                           where POL_NO   = i_pol_no
                             and ENDOR_NO = i_endor_no
                             and DMBO_CD  = i_dmbo_cd
                             and APPY_FROM <= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                             and APPY_TO   >= to_date(to_char(i_basis_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');
                             /*and APPY_TO >= to_date(to_char(i_iend_cont_date, 'yyyymmdd')||'000000', 'yyyymmddhh24miss')*/
                             /*and APPY_TO <= to_date(to_char(i_iend_cont_date, 'yyyymmdd')||'235959', 'yyyymmddhh24miss');*/

            exception when others then o_result := 'Error';
                                             raise_application_error(-20001, '기준일 이후 일할 보험료 Insert[TBID0013] Error[30]: '|| sqlerrm);

        end;
                                                      l_log_data := l_log_data ||  '1*29[' || '기준일이후 일할보험료 Insert[TBID0013] OK...5' ||chr(13)||chr(10);

        /***********************************************************/
        /* 기준일 이전 보험료을 TBID0013에 Update 시킴             */
        /***********************************************************/
        begin
            /*20130422 TO_DATE 처리 최재혁*/
            Merge  into TBID0013 A
                   using (select *
                           from TBID0013 B1
                          where B1.POL_NO    = i_pol_no
                            and B1.ENDOR_NO  = i_endor_no_bef_max
                            and B1.DMBO_CD   = i_dmbo_cd
                            and B1.APPY_FROM >= to_date(to_char(s_0013_c_appy_from, 'YYYYMMDD')||'000000', 'YYYYMMDDHH24MISS')
                            and B1.APPY_FROM <= to_date(to_char(s_0013_c_appy_from, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                         ) B
                      on (    A.POL_NO = B.POL_NO
                          and A.ENDOR_NO       = i_endor_no
                          and B.ENDOR_NO       = i_endor_no_bef_max
                          and A.BASIC_SCONT_GB = B.BASIC_SCONT_GB
                          and A.DMBO_CD        = B.DMBO_CD
                          and A.APPY_FROM      = B.APPY_FROM
                         )
            when matched then
            update set A.ACDNT_RESP_WANT  = B.ACDNT_RESP_WANT
                     , A.MAN_RESP_WANT    = B.MAN_RESP_WANT
                     , A.INSUR_AMT        = B.INSUR_AMT
                     , A.INSUR_AMT_GB     = B.INSUR_AMT_GB
                     , A.DUCT_AMT_GB      = B.DUCT_AMT_GB
                     , A.BASIC_PREM       = s_basic_prem1
                     , A.DMBO_START_DATE  = to_date(to_char(s_0013_c_appy_from,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                     , A.DMBO_END_DATE    = to_date(to_char(V_DMBO_END_DATE,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                     , A.APPY_PREM        = s_appy_prem1
                     , A.BASIC_RANGE_R    = B.BASIC_RANGE_R
                     , A.CANCEL_CALC_GB   = B.CANCEL_CALC_GB
                     , A.APPY_TO          = to_date(to_char(V_DMBO_END_DATE,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                     , A.BASIS_FROM       = to_date(to_char(s_0013_c_appy_from,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                     , A.BASIS_TO         = to_date(to_char(V_BASIS_TO_DATE,'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS')
                     , A.USER_ID          = B.USER_ID
                     , A.BASIC_YEAR_PREM  = B.BASIC_YEAR_PREM
                     , A.APPY_YEAR_PREM   = B.APPY_YEAR_PREM;

            exception when others then o_result := 'Error';
                                          raise_application_error(-20001, '기준일 이전 일할(단기)보험료 Update[TBID0013] Error[40]: '|| sqlerrm);
        end;
                                                      l_log_data := l_log_data ||  '1*30[' || '기준일이전 일할(단기)보험료 Update[TBID0013] OK...6'  ||chr(13)||chr(10);

    END IF;

    /********************************************************************/
    /*                                                                  */
    /* TBID0014 TABLE 생성하기                                          */
    /*                                                                  */
    /********************************************************************/
    begin
        Insert into TBID0014(POL_NO            ,DMBO_CD               ,CALC_FYMD                     ,CALC_EYMD
                            ,BASIC_PREM        ,APPY_PREM             ,ENDOR_NO                      ,APPY_FROM
                            ,APPY_TO           ,BASIS_FROM            ,BASIS_TO                      ,USER_ID
                            )
                      select POL_NO            ,DMBO_CD               ,APPY_FROM                     ,APPY_TO
                            ,BASIC_PREM        ,APPY_PREM             ,i_endor_no                    ,APPY_FROM
                            ,APPY_TO           ,BASIS_FROM            ,BASIS_TO                      ,i_user_id
                        from TBID0013
                       where POL_NO   = i_pol_no
                         and ENDOR_NO = i_endor_no
                         and DMBO_CD  = i_dmbo_cd;
        exception  when others then o_result := 'Error';
                                           raise_application_error(-20001, ' Insert [TBID0014] Error[50]: '|| sqlerrm);

    end;
                                                      l_log_data := l_log_data || '1*31[' ||  ' Insert [TBID0014] OK1...'  ||chr(13)||chr(10);

    /************************/
    /* Log 남기기         ***/
    /************************/
    /*IF    l_log_level = 1 or nvl(regexp_substr(l_log_step,i_dmbo_cd),' ') = i_dmbo_cd then*/
    /*      PR_INSERT_LOG(l_log_date,l_log_sp_name,l_log_no,'배서[분납]_2',i_dmbo_cd,l_log_data);*/
    /*END IF;*/
    /*l_log_data := '';*/

    /********************************************************************/
    /*                                                                  */
    /* TBID0015 TABLE 생성하기                                          */
    /*                                                                  */
    /********************************************************************/

    /******************************************************************************/
    /* 이전 배서[TBID0015]에서 납입회차까지의 보험료를 Sum 한다-기납입 보험료 산출*/
    /*  기준이 되는 seq_no 를 가져와야 한다.20130423 최재혁추가                   */
    /******************************************************************************/
    begin
        select nvl(sum(BASIC_PREM),0)
             , nvl(sum(DMBO_PREM) ,0)
             , nvl(max(seq_no), 0)
          into V_BEF_15_BASIC_PREM
             , V_BEF_15_DMBO_PREM
             , V_MAX_SEQ_NO
          from TBID0015
         where POL_NO   = i_pol_no
           and ENDOR_NO = i_endor_no -1
           and DMBO_CD  = i_dmbo_cd
           and BNP_NO  <= i_end_nab_no;

        exception when no_data_found then V_BEF_15_BASIC_PREM :=0;
                                          V_BEF_15_DMBO_PREM :=0;
                  when others        then o_result := 'Error';
                                            raise_application_error(-20001, 'PR_RENT_ENDOR_BUNAP_RATE_TEST Insert Error[130] :'|| sqlerrm);
    end;

                                                      l_log_data := l_log_data || '2*01[' || '납입회차까지 보험료Sum[TBID0015] OK...1'   ||chr(13)||chr(10);

    /***************************************************/
    /** 담보해지:현재배서 적용종료일이 기준일과 같으면 */
    /***************************************************/
    IF    i_basis_from = s_0013_c_appy_to then
                                                      l_log_data := l_log_data || '2*02[**** 담보 해지_TBID0015 ********]'  ||chr(13)||chr(10);
        /**************************************************************************/
        /* 이전 회차 보험료(기 납입 보험료)는 무조건 신규 배서에 Insert 시킴      */
        /**************************************************************************/
        begin
            insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                  DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                  IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                  BASIS_FROM,               BASIS_TO,               USER_ID )
                          select  POL_NO,                   i_endor_no,             BNP_NO,                     SEQ_NO,
                                  DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                  IEND_VALID_DATE,          i_endor_no -1,          APPY_FROM,                  APPY_TO,
                                  BASIS_FROM,               BASIS_TO,               i_user_id
                            from  TBID0015
                           where  POL_NO   = i_pol_no
                             and  ENDOR_NO = i_endor_no -1
                             and  DMBO_CD  = i_dmbo_cd
                             and  BNP_NO   <= i_end_nab_no;
            exception when others then o_result := 'Error';
                                           raise_application_error(-20001, '담보해지 Insert [TBID0015] Error[131]: '|| sqlerrm);
        end;
                                                      l_log_data := l_log_data || '2*03[' || '담보해지 Insert [TBID0015] OK...2' ||chr(13)||chr(10);

        /************************************/
        /* 기간별 보험료[TBID0013] Sum      */
        /************************************/
        begin
            select nvl(sum(BASIC_PREM),0)
                 , nvl(sum(APPY_PREM) ,0)
              into V_BASIC_PREM
                 , V_APPY_PREM
              from TBID0013
             where POL_NO   =  i_pol_no
               and ENDOR_NO =  i_endor_no
               and DMBO_CD  =  i_dmbo_cd;

            exception when others then V_BASIC_PREM := 0;
                                       V_APPY_PREM  := 0;
        end;

        /* 기 납입 보험료에서 기간별 사용한 총 보험료를 빼준다 */
        s_appy_prem  := V_APPY_PREM  - V_BEF_15_DMBO_PREM;
        s_basic_prem := V_BASIC_PREM - V_BEF_15_BASIC_PREM;

                                                    l_log_data := l_log_data || '2*05[' || V_APPY_PREM          ||']=기간보험료'                 ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '2*06[' || V_BEF_15_DMBO_PREM   ||']=기납입 보험료'              ||chr(13)||chr(10);
                                                    l_log_data := l_log_data || '2*07[' || s_appy_prem          ||']=기간보험료 - 기납입보험료'  ||chr(13)||chr(10);
        /***************************/
        /** TBID0015 Table Insert **/
        /***************************/
        begin
            insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                  DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                  IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                  BASIS_FROM,               BASIS_TO,               USER_ID )
                           select POL_NO,                   i_endor_no,             BNP_NO,                     i_bef_15_seq_no,
                                  i_dmbo_cd,                s_basic_prem,           s_appy_prem,                ISTAR_VALID_DATE,
                                  IEND_VALID_DATE,          i_endor_no-1,           APPY_FROM,                  APPY_TO,
                                  BASIS_FROM,               BASIS_TO,               i_user_id
                             from TBID0015
                            where POL_NO   = i_pol_no
                              and ENDOR_NO = i_endor_no -1
                              and BNP_NO   = i_end_nab_no
                              and rownum   = 1;

            exception when others then o_result := 'Error';
                                         raise_application_error(-20001, '담보해지 Insert [TBID0015] Error[132]: '|| sqlerrm);
        end;
                                                   l_log_data := l_log_data || '2*08[' || '담보해지 Insert [TBID0015] OK..3' ||chr(13)||chr(10);

    /********************************************************************************/
    /** 담보추가:기준일 과 현재배서 적용일이 같으면서 이전배서의적용시작일이 없으면 */
    /********************************************************************************/
    ELSIF i_basis_from = s_0013_c_appy_from and s_0013_b_appy_from is null then
        /**************************************************************************/
        /* 이전 회차 보험료(기 납입 보험료)는 무조건 신규 배서에 Insert 시킴      */
        /**************************************************************************/
        begin
            insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                  DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                  IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                  BASIS_FROM,               BASIS_TO,               USER_ID )
                          select  POL_NO,                   i_endor_no,             BNP_NO,                     SEQ_NO,
                                  DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                  IEND_VALID_DATE,          i_endor_no -1,          APPY_FROM,                  APPY_TO,
                                  BASIS_FROM,               BASIS_TO,               i_user_id
                            from  TBID0015
                           where  POL_NO   = i_pol_no
                             and  ENDOR_NO = i_endor_no -1
                             and  DMBO_CD  = i_dmbo_cd
                             and  BNP_NO   <= i_end_nab_no;
            exception when others then o_result := 'Error';
                                           raise_application_error(-20001, '담보추가 Insert [TBID0015] Error[131]: '|| sqlerrm);
        end;
                                                      l_log_data := l_log_data || '2*03[' || '담보추가 Insert [TBID0015] OK...2' ||chr(13)||chr(10);

        /*분납부활이 아닌경우*/
        if V_ENDOR_GB <> '7' then
            /*****************************************************************/
            /* 회차별 보험료를 산정 한다                                     */
            /* FN_RENT_BUNAP_AMT:                                            */
            /*    [ In] 납입방법/상품종류/'0'/분납회수/적용보험료/           */
            /*          기본보험료/보험종기/Sort_Gubun                       */
            /*    [Out] f_bunhal_bohum                                       */
            /*          납입회수,분납일자,분납 유효일자,기준보험료,적용보험료*/
            /*                                                               */
            /* Description : 납입회차 역순으로 자료 나옴                     */
            /*****************************************************************/
                                                       l_log_data := l_log_data || '2*09[**** 담보 추가_TBID0015 ********]'  ||chr(13)||chr(10);
            f_bunhal_bohum := FN_RENT_BUNAP_AMT(i_na_mth,i_i_kind_cd,i_spcl_agre_gb,i_bnp_cnt,i_dmbo_appy_prem,i_dmbo_basic_prem,i_istar_cont_date,'DESC');

            /***********************************************************/
            /* 기준일 이후 보험료 산정(일할계산)                       */
            /***********************************************************/
            if  i_endor_cd <> '801' then             /*단기자차가 아니면 (기존대로)*/
                  /* 보험료 일할 계산 = 년간 총 적용보험료 * (보험종기 -기준일) / (보험종기 - 보험시기)   */
                s_appy_prem  :=s_basis_from_appy_prem;/*round(i_dmbo_appy_prem   * ((i_iend_cont_date - i_basis_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;*/
                s_basic_prem :=s_basis_from_basic_prem;/*round(i_dmbo_basic_prem  * ((i_iend_cont_date - i_basis_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;*/
                                                        l_log_data := l_log_data || '2*10[' || s_appy_prem   ||']=일할 적용보험료' ||chr(13)||chr(10);
                                                        l_log_data := l_log_data || '2*11[' || s_basic_prem  ||']=일할 기본보험료' ||chr(13)||chr(10);
            else
                /* 보험료 계산 - 일할, 단기 구분한다. */
                if  s_0013_c_cancel_calc_gb <> '1' then
                    /* 단기요율 계산 = 적용종료일 - 적용시작일 */
                    f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(i_i_kind_cd  ,s_0013_c_appy_from  ,s_0013_c_appy_to  ,i_istar_cont_date  ,i_iend_cont_date);
                    f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                    /* 보험료 단기 계산 = 년간 총 적용보험료 * 단기적용율   */
                    s_appy_prem   := round(i_dmbo_appy_prem  * f_fn_rent_short_rate,-1);
                    s_basic_prem  := round(i_dmbo_basic_prem * f_fn_rent_short_rate,-1);
                                                        l_log_data := l_log_data || '2*10[' || s_appy_prem   ||']=단기 적용보험료' ||chr(13)||chr(10);
                                                        l_log_data := l_log_data || '2*11[' || s_basic_prem  ||']=단기 기본보험료' ||chr(13)||chr(10);
                else
                    /* 보험료 일할 계산 = 년간 총 적용보험료 * (적용종료일 - 적용시작일) / (보험종기 - 보험시기)   */
                    s_appy_prem  :=s_0013_c_appy_to_appy_prem;/*round(i_dmbo_appy_prem   * ((s_0013_c_appy_to - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;*/
                    s_basic_prem :=s_0013_c_appy_to_basic_prem;/*round(i_dmbo_basic_prem  * ((s_0013_c_appy_to - s_0013_c_appy_from) / (i_iend_cont_date - i_istar_cont_date)),-1) ;*/
                                                        l_log_data := l_log_data || '2*10[' || s_appy_prem   ||']=일할 적용보험료' ||chr(13)||chr(10);
                                                        l_log_data := l_log_data || '2*11[' || s_basic_prem  ||']=일할 기본보험료' ||chr(13)||chr(10);
                end if;
            end if;

            if  i_dmbo_cd in ('21','22','23') THEN
                     /***********************************************************/
                /* 위 담보일 경우 최종납입회차에 넣고 끝낸다.        */
                /***********************************************************/
                    begin
                    insert into TBID0015( POL_NO,                   ENDOR_NO,               BNP_NO,                     SEQ_NO,
                                          DMBO_CD ,                 BASIC_PREM,             DMBO_PREM,                  ISTAR_VALID_DATE,
                                          IEND_VALID_DATE,          OLD_ENDOR_NO,           APPY_FROM,                  APPY_TO,
                                          BASIS_FROM,               BASIS_TO,               USER_ID )
                                   select i_pol_no,                 i_endor_no,             i_end_nab_no,               i_bef_15_seq_no,
                                          i_dmbo_cd,                s_basic_prem,           s_appy_prem,                s_0013_c_appy_from,
                                          s_0013_c_appy_to,         i_endor_no-1,           s_0013_c_appy_from,         s_0013_c_appy_to,
                                          s_0013_c_appy_from,       s_0013_c_appy_to,       i_user_id
                                     from DUAL;
                    exception when others then o_result := 'Error';
                                                       raise_application_error(-20001, '긴출관련 분납  Insert[TBID0015] Error[160]: '|| sqlerrm);
                end;
                                                  l_log_data := l_log_data || '2*'|| f_idx2 || '-11[' || '긴출관련 분납 Insert OK...2'  ||chr(13)||chr(10);
                RAISE e_err;
        end;

        if V_MAX_ENDOR_NO <> P_PARAM_2 then
            V_ERRMESSAGE := '마지막 배서 데이터가 아닙니다.';
            raise e_err;
        end if;

        --배서번호 확인. 설계 또는 수납전 확정 데이터가 있는지 확인한다.
        begin
            select max(ENDOR_NO)
              into V_LAST_ENDOR_NO
              from TBID0001
             where POL_NO       = P_PARAM_1;
        exception
            when others then
                V_ERRMESSAGE := '마지막 배서번호 검색 오류';
                RAISE e_err;
        end;

        if V_LAST_ENDOR_NO <> P_PARAM_2 then
            V_ERRMESSAGE := '설계 또는 수납전 확정된 배서 데이터가 존재합니다.';
            raise e_err;
        end if;

        --배서로 인해 차액이 발생됐는지 확인한다.
        begin
            select NVL(PREM_DIFF_AMT, 0)
              into V_PREM_DIFF_AMT
              from TBIC0202
             where POL_NO   = P_PARAM_1
               and ENDOR_NO = P_PARAM_2;
        exception
            when no_data_found then
                V_PREM_DIFF_AMT := -1;
            when others then
                V_ERRMESSAGE := '재보험-계약정보(TBRI0001) 등록 오류';
                RAISE e_err;
        end;

        if V_PREM_DIFF_AMT <> 0 then
            V_ERRMESSAGE := '이전 배서와 차액이 발생한 배서입니다. 삭제할 수 없습니다.';
            raise e_err;
        end if;

        --수납건수가 있는지 확인한다.
        begin
            select count(*)
              into V_PAYMENT_CNT
              from TBFA0001
             where POL_NO   = P_PARAM_1
               and ENDOR_NO = P_PARAM_2;
        exception
            when no_data_found then
                V_PAYMENT_CNT := 0;
            when others then
                V_ERRMESSAGE := '수납건수 검색 오류';
                RAISE e_err;
        end;

        if V_PAYMENT_CNT <> 0 then
            V_ERRMESSAGE := '수납한 내역이 있습니다. 삭제할 수 없습니다.';
            raise e_err;
        end if;

        --배서 데이터 삭제 전 상태 UPDATE. 프로시저 돌리기 위해 UPDATE 처리함.
        begin
            update TBID0001
               set ENDOR_STATUS = '2'
             where POL_NO       = P_PARAM_1
               and ENDOR_NO     = P_PARAM_2;
        exception
            when others then
                V_ERRMESSAGE := '배서 상태 수정 오류';
                RAISE e_err;
        end;

        --배서 데이터 삭제 프로시저 실행
        PR_ENDOR_DATA_DEL(P_PARAM_1, P_PARAM_2);

        --배서 데이터 삭제하고 삭제이전 배서데이터로 TBIC 테이블 쪽으로 데이터 이관
        PR_ENDOR_TO_POL_INSERT(P_PARAM_1, to_number(P_PARAM_2)-1, r_return);

        P_RESULT_MSG := 'OK';

        COMMIT;

    /* 신차 배서시 공제시기 update - 증권번호, 배서번호, 공제시기(yyyymmddhh24miss) */
    elsif P_WORK_GB = '2' then
        --배서번호 확인
        begin
            select max(ENDOR_NO)
              into V_LAST_ENDOR_NO
              from TBID0001
             where POL_NO       = P_PARAM_1;
        exception
            when others then
                V_ERRMESSAGE := '마지막 배서번호 검색 오류';
                RAISE e_err;
        end;

        if V_LAST_ENDOR_NO <> 0 then
            V_ERRMESSAGE := '처리할 수 없습니다.';
            raise e_err;
        end if;

        if P_PARAM_2 <> '0' then
            V_ERRMESSAGE := '처리할 수 없습니다.';
            raise e_err;
        end if;

        if LENGTH(P_PARAM_3) <> 14 then
            V_ERRMESSAGE := '공제시기를 정확하게 입력하시기 바랍니다.';
            raise e_err;
        else
            begin
                select to_number(P_PARAM_3)
                  into V_START_CONT_DATE
                  from DUAL;
            exception
                when others then
                    V_ERRMESSAGE := '공제시기를 정확하게 입력하시기 바랍니다.';
                    RAISE e_err;
            end;
        end if;

        begin
            update TBID0001
               set ISTAR_CONT_DATE = to_date(P_PARAM_3, 'YYYYMMDDHH24MISS')
                 , APPY_FROM       = to_date(P_PARAM_3, 'YYYYMMDDHH24MISS')
                 , BASIS_FROM      = to_date(P_PARAM_3, 'YYYYMMDDHH24MISS')
             where POL_NO          = P_PARAM_1
               and ENDOR_NO        = P_PARAM_2;
        exception
            when others then
                V_ERRMESSAGE := '배서-계약정보(TBID0001) 수정 오류';
                RAISE e_err;
        end;

        begin
            update TBID0011
               set APPY_FROM       = to_date(P_PARAM_3, 'YYYYMMDDHH24MISS')
                 , BASIS_FROM      = to_date(P_PARAM_3, 'YYYYMMDDHH24MISS')
             where POL_NO          = P_PARAM_1
               and ENDOR_NO        = P_PARAM_2;
        exception
            when others then
                V_ERRMESSAGE := '배서-자동차정보(TBID0011) 수정 오류';
                RAISE e_err;
        end;

        begin
            update TBID0012
               set APPY_FROM       = to_date(P_PARAM_3, 'YYYYMMDDHH24MISS')
                 , BASIS_FROM      = to_date(P_PARAM_3, 'YYYYMMDDHH24MISS')
             where POL_NO          = P_PARAM_1
               and ENDOR_NO        = P_PARAM_2;
        exception
            when others then
                V_ERRMESSAGE := '배서-특약특별요율(TBID0012) 수정 오류';
                RAISE e_err;
        end;

        begin
            update TBID0013
               set DMBO_START_DATE = to_date(P_PARAM_3, 'YYYYMMDDHH24MISS')
                 , APPY_FROM       = to_date(P_PARAM_3, 'YYYYMMDDHH24MISS')
                 , BASIS_FROM      = to_date(P_PARAM_3, 'YYYYMMDDHH24MISS')
             where POL_NO          = P_PARAM_1
               and ENDOR_NO        = P_PARAM_2;
        exception
            when others then
                V_ERRMESSAGE := '배서-담보별보험료(TBID0013) 수정 오류';
                RAISE e_err;
        end;

        begin
            update TBID0014
               set CALC_FYMD  = to_date(P_PARAM_3, 'YYYYMMDDHH24MISS')
                 , APPY_FROM  = to_date(P_PARAM_3, 'YYYYMMDDHH24MISS')
                 , BASIS_FROM = to_date(P_PARAM_3, 'YYYYMMDDHH24MISS')
             where POL_NO     = P_PARAM_1
               and ENDOR_NO   = P_PARAM_2;
        exception
            when others then
                V_ERRMESSAGE := '배서-담보기간별보험료(TBID0014) 수정 오류';
                RAISE e_err;
        end;

        --배서데이터로 TBIC 테이블 쪽으로 데이터 이관
        PR_ENDOR_TO_POL_INSERT(P_PARAM_1, to_number(P_PARAM_2), r_return);

        P_RESULT_MSG := 'OK';

        COMMIT;

    end if;

EXCEPTION
    WHEN e_err THEN
        ROLLBACK;
        P_RESULT_MSG := V_ERRTITLE    || ' : ' ||    V_ERRMESSAGE;
    WHEN OTHERS THEN
        ROLLBACK;
        P_RESULT_MSG := V_ERRTITLE || '    : '    || SUBSTR(SQLERRM, 1, 250);
END;

CREATE -- added during DDL generation.
procedure pr_endor_data_control_admin( P_WORK_GB     in varchar2
                                                       , P_PARAM_1     in varchar2
                                                       , P_PARAM_2     in varchar2
                                                       , P_PARAM_3     in varchar2
                                                       , P_RESULT_MSG out varchar2 ) as

    /*****************************************************************/
    /* 생성일자 : 2013.07.23                                         */
    /* 생성자   : 최재혁                                             */
    /* 업무내용 : 배서 데이터를 강제로 수정한다.(관리자용)           */
    /* Parameters: P_WORK_GB = 작업구분                              */
    /*             P_PARAM_1 = 파라미터1                             */
    /*             P_PARAM_2 = 파라미터2                             */
    /*             P_PARAM_3 = 파라미터3                             */
    /*             P_ERR_MSG = 실행결과                              */
    /* 업무구분 : P_WORK_GB = 1  - 배서데이터 강제 삭제              */
    /*            P_WORK_GB = 2  - 신차 배서시 공제시기 UPDATE       */
    /* 파라미터 : P_WORK_GB = 1 일때                                 */
    /*            P_PARAM_1 = 증권번호                               */
    /*            P_PARAM_2 = 배서번호                               */
    /*            P_WORK_GB = 2 일때                                 */
    /*            P_PARAM_1 = 증권번호                               */
    /*            P_PARAM_2 = 배서번호                               */
    /*            P_PARAM_3 = 공제시기(변경할 값)                    */
    /*****************************************************************/

    V_ERRTITLE                          VARCHAR2(50);                           --에러 TITLE
    V_ERRMESSAGE                        VARCHAR2(300);                          --에러 메세지
    e_err                               exception;
    r_return                            VARCHAR2(300);                          --다른 프로시저 실행 리턴값

    V_MAX_ENDOR_NO                      TBID0001.ENDOR_NO%type;                 --정상인 마지막 배서번호
    V_LAST_ENDOR_NO                     TBID0001.ENDOR_NO%type;                 --마지막 배서번호
    V_PREM_DIFF_AMT                     TBIC0202.PREM_DIFF_AMT%type;            --분담금 차액
    V_PAYMENT_CNT                       number;                                 --수납건수
    V_START_CONT_DATE                   number;


BEGIN

    V_ERRTITLE   := '배서 데이터 강제 수정(PR_ENDOR_DATA_CONTROL_ADMIN)';
    V_ERRMESSAGE := 'START';
    P_RESULT_MSG := 'NOT_OK';

    /* 배서데이터 강제 삭제 - 증권번호, 배서번호 필수임 */
    if P_WORK_GB = '1' then
        V_ERRTITLE   := '배서 데이터 강제 삭제';

        --0번 배서는 삭제할 수 없도록!!!
        if P_PARAM_2 = '0' then
            V_ERRMESSAGE := '그러지 맙시다!!!';
            raise e_err;
        end if;

        --배서번호 확인. 가장 마지막 배서인지 확인한다.
        begin
            select max(ENDOR_NO)
              into V_MAX_ENDOR_NO
              from TBID0001
             where POL_NO       = P_PARAM_1
               and ENDOR_STATUS = '3';
        exception
            when others then
                V_ERRMESSAGE := '정상인 마지막 배서번호 검색 오류';
                        o_result := o_result || '배서-질권정보 [TBID0103 INSERT ERROR]  ';
                        --dbms_output.put_line('배서-질권정보 [TBID0103 INSERT ERROR]  '||sqlerrm);
          end;

          /*********************************************/
          /* 배서-배서운전자정보(TBID0104)   INSERT    */
          /*********************************************/
          begin
              insert  into TBID0104(
                      POL_NO,                  ENDOR_NO,
                      DRV_SEQ,                 DRV_CARRER,              CONT_AGE,                 LICENSE_GB,               LICENSE_NO,
                      LICENSE_DATE,            SEX_FM,                  DRV_GB,                   DRV_NAME,                 DRV_ID,
                      ISD_P_REL,               DRV_HP_NO,               DRV_E_MAIL,               DRV_ZIP_CD_GB,            DRV_ZIP_CD,
                      DRV_ADDR_1,              DRV_ADDR_2,
                      APPY_FROM,               APPY_TO,                 BASIS_FROM,               BASIS_TO,                 USER_ID
                      )
              select
                      v_pol_no,                0,
                      DRV_SEQ,                 DRV_CARRER,              CONT_AGE,                 LICENSE_GB,               LICENSE_NO,
                      LICENSE_DATE,            SEX_FM,                  DRV_GB,                   DRV_NAME,                 DRV_ID,
                      ISD_P_REL,               DRV_HP_NO,               DRV_E_MAIL,               DRV_ZIP_CD_GB,            DRV_ZIP_CD,
                      DRV_ADDR_1,              DRV_ADDR_2,
                      v_istar_cont_date,       v_iend_cont_date,        v_istar_cont_date,        v_iend_cont_date,         v_treaty_cd
                from  TBIB0104
               where  ENT_DGN_NO   =  s_ent_dgn_no;

              exception when others then
                        o_result := o_result || '배서-배서운전자정보 [TBID0104 INSERT ERROR]  ';
                       --dbms_output.put_line('배서-배서운전자정보 [TBID0104 INSERT ERROR] '||sqlerrm);
          end;

          /** log 찍기 **/

          PR_INSERT_LOG(l_log_date,l_log_sp_name,s_ent_dgn_no,'','',o_result);

          /*********************************************/
          /* 계약 Table Insert StoredProcedure 호출    */
          /*********************************************/
          if    o_result is null then
                PR_ENDOR_TO_POL_INSERT(v_pol_no,0,r_return);  /*증권번호,배서번호,Out Parameter */
                if    r_return <>  'OK' then
                      o_result := o_result || ' * PR_ENDOR_TO_POL_INSERT Stored Prodecure Error :: ' ||  r_return;
                end if;
          end   if;

          idx1  := idx1 + 1;

    End loop;

    if    o_result is null then
          o_result := 'OK';
    end if;

-- commit;
exception when others then
    dbms_output.put_line('PR_ENT_TO_ENDOR_POL_INSERT Main Error: '||sqlerrm);
    raise_application_error(-20010, 'PR_ENT_TO_ENDOR_POL_INSERT Main Error: '||sqlerrm);
    o_result := o_result || 'Insert Eorror' ;

end ;
CREATE OR REPLACE -- added during DDL generation.
procedure          KRMA_APP.PR_ENT_TO_ENDOR_POL_INSERT
(i_ent_dgn_no    in varchar2
,o_result       out varchar2) as
/*****************************************************************/
/* 생성일자  : 2013.02.27                                        */
/* 생성자    : 강신규                                            */
/* 업무내용  : 배서 및 계약 TABLE INSERT .                       */
/* Parameter : [ In] i_ent_dgn_no --가입설계 번호                */
/*             [Out] o_result     --처리결과                     */
/*****************************************************************/
v_pol_no              varchar2(14);              -- 증권번호 채번
v_cont_no             varchar2(14);              -- 계약번호 채번
v_istar_cont_date     date;                      -- 공제시기
v_iend_cont_date      date;                      -- 공제종기
v_treaty_hq_cd        varchar2(10);              -- 취급자본부코드
v_treaty_brh_cd       varchar2(10);              -- 취급자관리점코드
v_treaty_cd           varchar2(10);              -- 취급자코드
v_cont_state          varchar2(10);
r_return              varchar2(4000);            -- PR_ENDOR_TO_POL_INSERT Stored Procedure Retrun 값

s_ent_dgn_no          varchar2(100);


s_pol_no1             varchar2(14);
s_pol_no2             varchar2(14);

s_pol_no              varchar2(14);
s_cont_no             varchar2(14);

idx1                  number;
idx2                  number;
/******************/
/*** lOG 변수 *****/
/******************/
l_log_sp_name         varchar2(50)  := 'PR_ENT_TO_ENDOR_POL_INSERT' ;        -- 로그 Stored Procedure Name
l_log_date            varchar2(16)  := to_char(sysdate,'yyyymmddhh24miss');

BEGIN

    o_result :=null ;

    idx1 := 1;

    /* 일일 자차인 경우 가입설계 번호 2개를 파라메터로 보냄 */
    idx2 := length(i_ent_dgn_no) - length(replace(i_ent_dgn_no,',','')) + 1;

    Loop  /*가입설계번호 갯수 만큼 looping */
          if    idx1 > idx2 then
                exit;
          end if;

          s_ent_dgn_no      :=  regexp_substr(i_ent_dgn_no   ,'[^,]+',1,idx1);

          if   idx1 = 1 then
               begin
                     /*********************************************/
                     /* 가입설계 읽기                             */
                     /*********************************************/
                     select nvl(POL_NO ,'0'),
                            nvl(CONT_NO,'0'),
                            nvl(ISTAR_CONT_DATE,sysdate),
                            nvl(IEND_CONT_DATE,sysdate),
                            TREATY_HQ_CD,
                            TREATY_BRH_CD,
                            TREATY_CD
                       into v_pol_no,
                            v_cont_no,
                            v_istar_cont_date,
                            v_iend_cont_date,
                            v_treaty_hq_cd,
                            v_treaty_brh_cd,
                            v_treaty_cd
                       from TBIB0001
                      where ENT_DGN_NO   =  s_ent_dgn_no;

                      exception when no_data_found then o_result := o_result || '[가입설계번호 오류:' || s_ent_dgn_no || ']';
               end;

               if    o_result is not null then
                     exit;
               end if;

               if    v_pol_no > '0'  then
                     begin
                          select CONT_STATE
                            into v_cont_state
                            from TBID0001 A
                           where pol_no = v_pol_no
                             and endor_no = (select nvl(max(endor_no),0) from TBID0001 WHERE POL_NO = A.POL_NO);

                         exception when others then
                                   o_result := o_result || '[배서 Table Delete Error1]  ';
                                   --dbms_output.put_line('배서 Table Delete Error1 : '||sqlerrm);

                     end;

                     s_pol_no   := v_pol_no;
                     s_cont_no  := v_cont_no;

                     if   nvl(v_cont_state,'01') = '01' then  /* 청약상태가 수납전인 경우만 삭제후 Insert 가능 */
                          begin
                               /*********************************************/
                               /* 배서 table 삭제                           */
                               /*********************************************/
                               if substr(v_pol_no,2,2) = '21' then
                                  s_pol_no1 := substr(v_pol_no,1,13) || '0';
                                  s_pol_no2 := substr(v_pol_no,1,13) || '9';

                               else
                                  s_pol_no1 :=v_pol_no;
                                  s_pol_no2 :=v_pol_no;
                               end if;

                               delete from TBID0001 where POL_NO >=s_pol_no1 and POL_NO <=s_pol_no2 and ENDOR_NO=0;
                               delete from TBID0011 where POL_NO >=s_pol_no1 and POL_NO <=s_pol_no2 and ENDOR_NO=0;
                               delete from TBID0012 where POL_NO >=s_pol_no1 and POL_NO <=s_pol_no2 and ENDOR_NO=0;
                               delete from TBID0013 where POL_NO >=s_pol_no1 and POL_NO <=s_pol_no2 and ENDOR_NO=0;
                               delete from TBID0014 where POL_NO >=s_pol_no1 and POL_NO <=s_pol_no2 and ENDOR_NO=0;
                               delete from TBID0015 where POL_NO >=s_pol_no1 and POL_NO <=s_pol_no2 and ENDOR_NO=0;
                               delete from TBID0016 where POL_NO >=s_pol_no1 and POL_NO <=s_pol_no2 and ENDOR_NO=0;
                               delete from TBID0103 where POL_NO >=s_pol_no1 and POL_NO <=s_pol_no2 and ENDOR_NO=0;
                               delete from TBID0104 where POL_NO >=s_pol_no1 and POL_NO <=s_pol_no2 and ENDOR_NO=0;

                               exception when others then
                                         o_result := o_result || '[배서 Table Delete Error1]  ';
                                         --dbms_output.put_line('배서 Table Delete Error2 : '||sqlerrm);
                           end;
                     end if;
               else
                     begin
                     /*********************************************/
                     /* 계약(증권)번호-배서번호 채번 하기         */
                     /*********************************************/
                           select fn_get_seq('P' ||substr(s_ent_dgn_no,2,3))
                                 ,fn_get_seq('C' ||substr(s_ent_dgn_no,2,3))
                               --  ,case when v_cont_no > '0' then v_cont_no else fn_get_seq('C' ||substr(s_ent_dgn_no,2,3)) end
                             into v_pol_no
                                 ,v_cont_no
                             from dual;

                           s_pol_no   := v_pol_no;
                           s_cont_no  := v_cont_no;

                           /*가입설계에 증권,계약번호,배서번호  Update */
                           update TBIB0001
                              set POL_NO  = v_pol_no ,
                                  CONT_NO = v_cont_no
                            where ENT_DGN_NO = s_ent_dgn_no;

                     end;

               end if ;
          else
               v_pol_no   := substr(s_pol_no ,1,13) || substr(s_ent_dgn_no ,14,1) ;
               v_cont_no  := substr(s_cont_no,1,13) || substr(s_ent_dgn_no ,14,1) ;
               /*가입설계에 증권,계약번호,배서번호  Update */

               update TBIB0001
                  set POL_NO  = v_pol_no ,
                      CONT_NO = v_cont_no
                where ENT_DGN_NO = s_ent_dgn_no;

          end if;

          /*********************************************/
          /* 배서-배서정보(TBID0001) INSERT            */
          /*********************************************/
          begin
              insert into TBID0001(
                     POL_NO,                  ENDOR_NO,                ENDOR_STATUS,
                     ENT_DGN_NO,              CUST_NO,                 CO_NO,                   BCO_NO,                  OWN_CD,
                     INDGRP_GB,               CONT_KIND,               CONT_TYPE,               B_ENT_AMT,               BASIC_PREM,
                     NA_MTH,                  ISTAR_CONT_DATE,         IEND_CONT_DATE,          I_KIND_CD,               BNP_CNT,
                     BNP_CNT_R,               CASH_MTH,                CASH_ENT_TYPE,           TOT_INSUR_AMT,           APPY_SUM_PREM,
                     TOT_NAB_PREM,            RIDER_INSUR_AMT,         RIDER_PREM,              SUM_PREM,                HOME_GB,
                     CONT_YY,                 CONT_MM,                 CONT_DD,                 TOT_NAB_CNT,             CONT_STATE,
                     UNION_KIND,
                     SHORT_DAY_GB,            SHORT_R,                 GRPCONT_DSC_R,           GRPCONT_DSC_CAR_R,       IENT_CARR_CD,            IENT_CARR_R,
                     DSC_INC_CD,              DSC_INC_R,               SPCIAL_INC_R,            SPCIAL_INC_APPY,         ALL_DMBO_R,
                     MUL_ACCI_RATE_CD,        ISD_P_CDGB,              ISD_CD,                  ISD_NAME,                ISD_CONT_RELATION_CD,
                     ISD_ZIP_CD_GB,           ISD_ZIP_CD_DM_GB,        ISD_ZIP_CD,              ISD_ADDR_1,              ISD_ADDR_2,
                     ISD_CALL_SITE_GB,        ISD_OFF_TEL_DDD,         ISD_OFF_TEL,             ISD_TEL_DDD,             ISD_TEL_NO,
                     ISD_HP_NO,               ISD_E_MAIL,              ISD_FAX,                 ISD_ENRNER_RELATION_CD,  ISD_ENRNER_NAME,
                     ISD_ENRNER_PSN_NO,       CONT_CD_GB,              CONT_CD,                 CONT_NAME,               CONT_RELATION_CD,
                     CONT_ZIP_CD_GB,          CONT_ZIP_CD_DM_GB,       CONT_ZIP_CD,             CONT_ADDR_1,             CONT_ADDR_2,
                     CONT_CALL_SITE_GB,       CONT_OFF_TEL_DDD,        CONT_OFF_TEL,            CONT_TEL_DDD,            CONT_TEL_NO,
                     CONT_HP_NO,              CONT_E_MAIL,             CONT_FAX,                CAR_HAN_NO,              CAR_ID_GB,
                     CAR_ID,                  CAR_APPR_NUM_TON,        CAR_OLD_R,               CAR_GAEK,                CAR_AMT,
                     CAR_REG_DATE,            CAR_NO,                  CAR_OUT_NO,              CAR_NO_GB,               CAR_NO_L,
                     CAR_NO_S1,               CAR_NO_S2,               CAR_NO_CITY,             CAR_USE,                 CAR_NM_CD,
                     CAR_KIND_CD,             CAR_TYPE_CD,             CAR_UNIT_GAEK,           CAR_UNIT_AMT,            CAR_Y_TYPE,
                     CAR_PASS_YEAR,           CAR_CC,                  CAR_ACC_GAEK,            CAR_ACC_AMT,             CAR_USE_USE,
                     CAR_AIRBAG,              CAR_NM,                  CAR_COUNTRY,             CAR_GRADE,               CAR_RATE,
                     CAR_ETC_GB,              CAR_ENG_TYPE,            PRE_CONT_CD,             CONT_NO,                 APP_DATE,
                     ENT_DGN_DATE,            CONT_DATE,               APP_PRINT_DATE,          ENT_PRINT_DATE,          ENT_PATH,
                     TREATY_HQ_CD,            TREATY_BRH_CD,           TREATY_CD,               CAR_SEQ,
                     APPY_FROM,               APPY_TO,                 BASIS_FROM,              BASIS_TO,
                     USER_ID,                 CAR_NEW_GB,              ISD_CUST_NO,             CONT_CUST_NO,            FILEKEY_FRONT,
                     FILEKEY_BACK,            FILEKEY_LEFT,            FILEKEY_RIGHT,           FILEKEY_CONTRACT,        CUST_CAR_NM
                     )
              select
                     v_pol_no,                0,                       '2',
                     ENT_DGN_NO,              CUST_NO,                 CO_NO,                   BCO_NO,                  OWN_CD,
                     INDGRP_GB,               CONT_KIND,               CONT_TYPE,               B_ENT_AMT,               BASIC_PREM,
                     NA_MTH,                  ISTAR_CONT_DATE,         IEND_CONT_DATE,          I_KIND_CD,               BNP_CNT,
                     BNP_CNT_R,               CASH_MTH,                CASH_ENT_TYPE,           TOT_INSUR_AMT,           APPY_SUM_PREM,
                     TOT_NAB_PREM,            RIDER_INSUR_AMT,         RIDER_PREM,              SUM_PREM,                HOME_GB,
                     CONT_YY,                 CONT_MM,                 CONT_DD,                 TOT_NAB_CNT,             '01',
                     UNION_KIND,
                     SHORT_DAY_GB,            SHORT_R,                 GRPCONT_DSC_R,           GRPCONT_DSC_CAR_R,       IENT_CARR_CD,            IENT_CARR_R,
                     DSC_INC_CD,              DSC_INC_R,               SPCIAL_INC_R,            SPCIAL_INC_APPY,         ALL_DMBO_R,
                     MUL_ACCI_RATE_CD,        ISD_P_CDGB,              ISD_CD,                  ISD_NAME,                ISD_CONT_RELATION_CD,
                     ISD_ZIP_CD_GB,           ISD_ZIP_CD_DM_GB,        ISD_ZIP_CD,              ISD_ADDR_1,              ISD_ADDR_2,
                     ISD_CALL_SITE_GB,        ISD_OFF_TEL_DDD,         ISD_OFF_TEL,             ISD_TEL_DDD,             ISD_TEL_NO,
                     ISD_HP_NO,               ISD_E_MAIL,              ISD_FAX,                 ISD_ENRNER_RELATION_CD,  ISD_ENRNER_NAME,
                     ISD_ENRNER_PSN_NO,       CONT_CD_GB,              CONT_CD,                 CONT_NAME,               CONT_RELATION_CD,
                     CONT_ZIP_CD_GB,          CONT_ZIP_CD_DM_GB,       CONT_ZIP_CD,             CONT_ADDR_1,             CONT_ADDR_2,
                     CONT_CALL_SITE_GB,       CONT_OFF_TEL_DDD,        CONT_OFF_TEL,            CONT_TEL_DDD,            CONT_TEL_NO,
                     CONT_HP_NO,              CONT_E_MAIL,             CONT_FAX,                CAR_HAN_NO,              CAR_ID_GB,
                     CAR_ID,                  CAR_APPR_NUM_TON,        CAR_OLD_R,               CAR_GAEK,                CAR_AMT,
                     CAR_REG_DATE,            CAR_NO,                  CAR_OUT_NO,              CAR_NO_GB,               CAR_NO_L,
                     CAR_NO_S1,               CAR_NO_S2,               CAR_NO_CITY,             CAR_USE,                 CAR_NM_CD,
                     CAR_KIND_CD,             CAR_TYPE_CD,             CAR_UNIT_GAEK,           CAR_UNIT_AMT,            CAR_Y_TYPE,
                     CAR_PASS_YEAR,           CAR_CC,                  CAR_ACC_GAEK,            CAR_ACC_AMT,             CAR_USE_USE,
                     CAR_AIRBAG,              CAR_NM,                  CAR_COUNTRY,             CAR_GRADE,               CAR_RATE,
                     CAR_ETC_GB,              CAR_ENG_TYPE,            PRE_CONT_CD,             v_cont_no,               APP_DATE,
                     ENT_DGN_DATE,            CONT_DATE,               APP_PRINT_DATE,          ENT_PRINT_DATE,          ENT_PATH,
                     TREATY_HQ_CD,            TREATY_BRH_CD,           TREATY_CD,               CAR_SEQ,
                     v_istar_cont_date,       v_iend_cont_date,        v_istar_cont_date,       v_iend_cont_date,
                     USER_ID,                 CAR_NEW_GB,              ISD_CUST_NO,             CONT_CUST_NO,            FILEKEY_FRONT,
                     FILEKEY_BACK,            FILEKEY_LEFT,            FILEKEY_RIGHT,           FILEKEY_CONTRACT,        CUST_CAR_NM
                from TBIB0001
               where ENT_DGN_NO   =  s_ent_dgn_no;

               exception when others then
                         o_result := o_result || '배서-배서정보 [TBID0001 INSERT ERROR]  ';
                         --dbms_output.put_line('배서-배서정보 [TBID0001 INSERT ERROR]  '||sqlerrm);
          end;


          /*********************************************/
          /* 배서-자동차추가정보(TBID0011) INSERT      */
          /*********************************************/
          begin
              insert  into TBID0011(
                      POL_NO,                  ENDOR_NO,
                      INS_AIM_GB,              MLGUN_SEQ_NO,            MLGUN_CD,                MLGUN_NAME,              MADE_CO,
                      ITEM_SPEC,               QTY,                     PRICE,                   MLGUN_AMT,               MLGUN_ENT_AMT,
                      BUY_YM,                  REMARK,
                      APPY_FROM,               APPY_TO,                 BASIS_FROM,              BASIS_TO,                USER_ID
                      )
              select
                      v_pol_no,                0,
                      INS_AIM_GB,              MLGUN_SEQ_NO,            MLGUN_CD,                MLGUN_NAME,              MADE_CO,
                      ITEM_SPEC,               QTY,                     PRICE,                   MLGUN_AMT,               MLGUN_ENT_AMT,
                      BUY_YM,                  REMARK,
                      v_istar_cont_date,       v_iend_cont_date,        v_istar_cont_date,       v_iend_cont_date ,       v_treaty_cd
                from  TBIB0011
               where  ENT_DGN_NO   =  s_ent_dgn_no;

              exception when others then
                        o_result := o_result || '배서-자동차추가정보[TBID0011 INSERT ERROR]  ';
                        --dbms_output.put_line('배서-자동차추가정보[TBID0011 INSERT ERROR] '||sqlerrm);
          end;

          /*********************************************/
          /* 배서-특약특별요율(TBID0012) INSERT      */
          /*********************************************/
          begin
              insert  into TBID0012(
                      POL_NO,                  ENDOR_NO,
                      RIDER_ESP_GB,            RATE_CD,                 APPY_R,                  PREM,                    APPY_INS_AMT,
                      APPY_DUCT_AMT,
                      APPY_FROM,               APPY_TO,                 BASIS_FROM,              BASIS_TO,                USER_ID
                      )
              select
                      v_pol_no,                0,
                      RIDER_ESP_GB,            RATE_CD,                 APPY_R,                  PREM,                    APPY_INS_AMT,
                      APPY_DUCT_AMT,
                      v_istar_cont_date,       v_iend_cont_date,        v_istar_cont_date,       v_iend_cont_date,        v_treaty_cd
                from  TBIB0012
               where  ENT_DGN_NO   =  s_ent_dgn_no;

              exception when others then
                        o_result := o_result || '배서-특약특별요율 [TBID0012 INSERT ERROR]  ';
                        --dbms_output.put_line('배서-특약특별요율 [TBID0012 INSERT ERROR]'||sqlerrm);
          end;


          /*********************************************/
          /* 배서-담보별분담금(TBID0013) INSERT      */
          /* 2017.02.01 담보별요율추가(GRP_DMBO_RATE) */
          /*********************************************/
          begin
              insert  into TBID0013(
                      POL_NO,                  ENDOR_NO,
                      BASIC_SCONT_GB,          DMBO_CD,                 ACDNT_RESP_WANT,         MAN_RESP_WANT,            INSUR_AMT,
                      INSUR_AMT_GB,            DUCT_AMT_GB,             BASIC_PREM,              DMBO_START_DATE,          DMBO_END_DATE,
                      APPY_PREM,               BASIC_RANGE_R,
                      APPY_FROM,               APPY_TO,                 BASIS_FROM,              BASIS_TO,                 USER_ID,
                      BASIC_YEAR_PREM,         APPY_YEAR_PREM, GRP_DMBO_RATE
                      )
              select
                      v_pol_no,                0,
                      BASIC_SCONT_GB,          DMBO_CD,                 ACDNT_RESP_WANT,         MAN_RESP_WANT,            INSUR_AMT,
                      INSUR_AMT_GB,            DUCT_AMT_GB,             BASIC_PREM,              DMBO_START_DATE,          DMBO_END_DATE,
                      APPY_PREM,               BASIC_RANGE_R,
                      DMBO_START_DATE,         DMBO_END_DATE,           DMBO_START_DATE,         DMBO_END_DATE,            v_treaty_cd,
                      BASIC_YEAR_PREM,         APPY_YEAR_PREM, GRP_DMBO_RATE
                from  TBIB0013
               where  ENT_DGN_NO   =  s_ent_dgn_no;

              exception when others then
                        o_result := o_result || '배서-담보별분담금 [TBID0013 INSERT ERROR]  ';
                        --dbms_output.put_line('배서-담보별분담금(TBID0013) INSERT  : '||sqlerrm);
          end;

          /*********************************************/
          /* 배서-담보기간별분담금(TBID0014) INSERT    */
          /*********************************************/
          begin
              insert  into TBID0014(
                      POL_NO,                  ENDOR_NO,
                      DMBO_CD,                 CALC_FYMD,               CALC_EYMD,               BASIC_PREM,               APPY_PREM,
                      APPY_FROM,               APPY_TO,                 BASIS_FROM,              BASIS_TO,                 USER_ID,
                      BASIC_YEAR_PREM,         APPY_YEAR_PREM
                      )
              select
                      v_pol_no,                0,
                      DMBO_CD,                 CALC_FYMD,               CALC_EYMD,               BASIC_PREM,               APPY_PREM,
                      CALC_FYMD,               CALC_EYMD,               CALC_FYMD,               CALC_EYMD,                v_treaty_cd,
                      BASIC_PREM,              APPY_PREM
                from  TBIB0014
               where  ENT_DGN_NO   =  s_ent_dgn_no;

              exception when others then
                        o_result := o_result || '배서-담보기간별분담금 [TBID0014 INSERT ERROR]  ';
                       --dbms_output.put_line('배서-담보기간별분담금 [TBID0014 INSERT ERROR] '||sqlerrm);
          end;

          /*********************************************/
          /* 배서-담보별분납계획(TBID0015) INSERT    */
          /*********************************************/
          begin
              insert  into TBID0015(
                      POL_NO,                  ENDOR_NO,
                      BNP_NO,                  SEQ_NO,                  DMBO_CD,                  BASIC_PREM,              DMBO_PREM,
                      ISTAR_VALID_DATE,        IEND_VALID_DATE,
                      APPY_FROM,               APPY_TO,                 BASIS_FROM,               BASIS_TO,                USER_ID
                      )
              select
                      v_pol_no,                0,
                      BNP_NO,                  SEQ_NO,                  DMBO_CD,                  BASIC_PREM,              DMBO_PREM,
                      ISTAR_VALID_DATE,        IEND_VALID_DATE,
                      ISTAR_VALID_DATE,        IEND_VALID_DATE,         ISTAR_VALID_DATE,        IEND_VALID_DATE,          v_treaty_cd
                from  TBIB0015
               where  ENT_DGN_NO   =  s_ent_dgn_no;

              exception when others then
                        o_result := o_result || '[배서-담보별분납계획 TBID0015 INSERT ERROR]  ';
                        --dbms_output.put_line('[배서-담보별분납계획 TBID0015 INSERT ERROR]  '||sqlerrm);
          end;


          /*********************************************/
          /* 배서-분납계획(TBID0016)         INSERT    */
          /*********************************************/
          begin
              insert  into TBID0016(
                      POL_NO,                  ENDOR_NO,
                      BNP_NO,                  SEQ_NO,                  I_KIND_CD,                RCPT_CD,                 NA_DATE,
                      ACCOUNT_MTH,             ACCOUNT_ID,
                      MANG_NO,                 BNP_GUIDE_DATE,          BNP_RATION,               BNP_DATE,                BNP_PREM,
                      BNP_DEDUCT_AMT,          PROC_STATUS,             RCPT_GB,                  RCPT_NO,
                      TREATY_HQ_CD,            TREATY_BRH_CD,           TREATY_CD,
                      APPY_FROM,
                      APPY_TO,
                      BASIS_FROM,
                      BASIS_TO,
                      USER_ID
                      )
              select
                      v_pol_no,                0,
                      BNP_NO,                  SEQ_NO,                  I_KIND_CD,                RCPT_CD,                 NA_DATE,
                      ACCOUNT_MTH,             ACCOUNT_ID,
                      MANG_NO,                 BNP_GUIDE_DATE,          BNP_RATION,               BNP_DATE,                BNP_PREM,
                      BNP_DEDUCT_AMT,          PROC_STATUS,             RCPT_GB,                  RCPT_NO,
                      v_treaty_hq_cd,          v_treaty_brh_cd,         v_treaty_cd,
                      BNP_DATE,
                      (SELECT  MIN(IEND_VALID_DATE) FROM TBIB0015 WHERE ENT_DGN_NO = A.ENT_DGN_NO AND BNP_NO = A.BNP_NO AND SEQ_NO = A.SEQ_NO GROUP BY BNP_NO),
                      BNP_DATE,
                      (SELECT  MIN(IEND_VALID_DATE) FROM TBIB0015 WHERE ENT_DGN_NO = A.ENT_DGN_NO AND BNP_NO = A.BNP_NO AND SEQ_NO = A.SEQ_NO GROUP BY BNP_NO),
                      v_treaty_cd
                from  TBIB0016 A
               where  ENT_DGN_NO   =  s_ent_dgn_no;

              exception when others then
                        o_result := o_result || '배서-분납계획 [TBID0016 INSERT ERROR]  ';
                      --dbms_output.put_line('배서-분납계획 [TBID0016 INSERT ERROR] '||sqlerrm);
          end;

          /*********************************************/
          /* 배서-질권정보(TBID0103)         INSERT    */
          /*********************************************/
          begin
              insert into TBID0103(
                      POL_NO,                  ENDOR_NO,                PLG_GB,
                      PLG_SEQ,                 BCO_ENT_NO,              PLG_AMT,                  PLG_SPEC,                PLG_SETUP_DATE,
                      PLG_CD,                  PLG_NAME,                ZIP_CD,                   ADDR_1,                  ADDR_2,
                      APPY_FROM,               APPY_TO,                 BASIS_FROM,               BASIS_TO,                USER_ID
                      )
              select
                      v_pol_no,                0,                       '1',
                      PLG_SEQ,                 BCO_ENT_NO,              PLG_AMT,                  PLG_SPEC,                PLG_SETUP_DATE,
                      PLG_CD,                  PLG_NAME,                ZIP_CD,                   ADDR_1,                  ADDR_2,
                      v_istar_cont_date,       v_iend_cont_date,        v_istar_cont_date,        v_iend_cont_date,        v_treaty_cd
                from  TBIB0103
               where  ENT_DGN_NO   =  s_ent_dgn_no;

              exception when others then
                                     TBIB0203 B
                               WHERE  A.POL_NO          = I_ENTER_NO
                                   AND  ENDOR_NO         = I_ENDOR_NO
                                     AND A.INSUR_AMT_GB = B.DMBO_ENT_AMT_GB
                                     AND A.DMBO_CD = B.DMBO_CD
                                     AND B.I_KIND_CD = V_I_KIND_CD
                                     AND B.CO_GB = '0'
                                     AND B.CAR_KIND = V_CAR_KIND_CD
                                     AND B.CAR_KIND2 = V_CAR_TYPE_CD
                                     AND B.APLY_FYMD <= TO_DATE(V_ISTAR_CONT_DATE) /* 20130422 TO_DATE 처리 최재혁 */
                                     AND B.APLY_EYMD >= TO_DATE(V_ISTAR_CONT_DATE) /* 20130422 TO_DATE 처리 최재혁 */
                            ;
                              EXCEPTION
                              WHEN NO_DATA_FOUND THEN
                                  S_ERR_MSG := 'TBID0013 SELECT ERROR: '||SQLERRM ;
                                  RAISE E_ERR;
                              WHEN OTHERS THEN
                                  S_ERR_MSG := 'TBID0013 AND TBIB0203 SELECT ERROR: '||SQLERRM ;
                                  RAISE E_ERR;
                      END;

                  ELSE

                       BEGIN
   --2017.02.08 담보별단체특성율추가
                          SELECT
                                WM_CONCAT(
                                  CASE WHEN B.DMBO_CD IN ('01','02','03','13') THEN
                                      ROUND(B.BASIC_PREM*(TO_DATE('20160331', 'YYYYMMDD') - TO_DATE(V_ISTAR_CONT_DATE))/365 +
                                           (SELECT C.BASIC_PREM*(365-(TO_DATE('20160331', 'YYYYMMDD') - TO_DATE(V_ISTAR_CONT_DATE)))/365
                                              FROM TBIB0203 C
                                             WHERE B.DMBO_ENT_AMT_GB = C.DMBO_ENT_AMT_GB
                                               AND B.DMBO_CD = C.DMBO_CD
                                               AND C.I_KIND_CD = V_I_KIND_CD
                                               AND B.CAR_KIND = C.CAR_KIND
                                               AND B.CAR_KIND2 = C.CAR_KIND2
                                               AND C.APLY_FYMD >= TO_DATE(V_ISTAR_CONT_DATE)
                                               AND C.APLY_EYMD >= TO_DATE(V_IEND_CONT_DATE))
                                      )
                                  ELSE
                                    B.BASIC_PREM
                                  END   ||'|' || B.NEW_RT ||'|' || B.DMBO_CD ||'|' || NVL(A.CANCEL_CALC_GB, '1')  ||'|' || A.GRP_DMBO_RATE
                                )
                                INTO V_0203_INFO
                                FROM TBID0013 A ,
                                     TBIB0203 B
                               WHERE  A.POL_NO          = I_ENTER_NO
                                   AND  ENDOR_NO         = I_ENDOR_NO
                                     AND A.INSUR_AMT_GB = B.DMBO_ENT_AMT_GB
                                     AND A.DMBO_CD = B.DMBO_CD
                                     AND B.I_KIND_CD = V_I_KIND_CD
                                     AND B.CO_GB = '0'
                                     AND B.CAR_KIND = V_CAR_KIND_CD
                                     AND B.CAR_KIND2 = V_CAR_TYPE_CD
                                     AND B.APLY_FYMD <= TO_DATE(V_ISTAR_CONT_DATE) /* 20130422 TO_DATE 처리 최재혁 */
                                     AND B.APLY_EYMD >= TO_DATE(V_ISTAR_CONT_DATE) /* 20130422 TO_DATE 처리 최재혁 */
                            ;
                              EXCEPTION
                              WHEN NO_DATA_FOUND THEN
                                  S_ERR_MSG := 'TBID0013 SELECT ERROR: '||SQLERRM ;
                                  RAISE E_ERR;
                              WHEN OTHERS THEN
                                  S_ERR_MSG := 'TBID0013 AND TBIB0203 SELECT ERROR: '||SQLERRM ;
                                  RAISE E_ERR;
                      END;

                  END IF;

       ELSE

               PR_INSERT_LOG(L_LOG_DATE,L_LOG_SP_NAME ,L_LOG_NO ,L_LOG_GUBUN,'배서설계','일할 구간' );

                IF '20160229' BETWEEN TO_CHAR(V_ISTAR_CONT_DATE,'YYYYMMDD') AND TO_CHAR(V_IEND_CONT_DATE,'YYYYMMDD') THEN

                      BEGIN
   --2017.02.08 담보별단체특성율추가
                          SELECT
                                WM_CONCAT(
                                  CASE WHEN B.DMBO_CD IN ('01','02','03','13') THEN
                                      ROUND(B.BASIC_PREM*(TO_DATE('20160331', 'YYYYMMDD') - TO_DATE(V_ISTAR_CONT_DATE))/366 +
                                           (SELECT C.BASIC_PREM*(TO_DATE(V_IEND_CONT_DATE) - TO_DATE('20160331', 'YYYYMMDD'))/366
                                              FROM TBIB0203 C
                                             WHERE B.DMBO_ENT_AMT_GB = C.DMBO_ENT_AMT_GB
                                               AND B.DMBO_CD = C.DMBO_CD
                                               AND C.I_KIND_CD = V_I_KIND_CD
                                               AND B.CAR_KIND = C.CAR_KIND
                                               AND B.CAR_KIND2 = C.CAR_KIND2
                                               AND C.APLY_FYMD >= TO_DATE(V_ISTAR_CONT_DATE)
                                               AND C.APLY_EYMD >= TO_DATE(V_IEND_CONT_DATE)
      AND C.APLY_FYMD < TO_DATE('20170301'))
                                      )
                                  ELSE
                                    B.BASIC_PREM
                                  END   ||'|' || B.NEW_RT ||'|' || B.DMBO_CD ||'|' || NVL(A.CANCEL_CALC_GB, '1')  ||'|' || A.GRP_DMBO_RATE
                                )
                                INTO V_0203_INFO
                                FROM TBID0013 A ,
                                     TBIB0203 B
                               WHERE  A.POL_NO          = I_ENTER_NO
                                   AND  ENDOR_NO         = I_ENDOR_NO
                                     AND A.INSUR_AMT_GB = B.DMBO_ENT_AMT_GB
                                     AND A.DMBO_CD = B.DMBO_CD
                                     AND B.I_KIND_CD = V_I_KIND_CD
                                     AND B.CO_GB = '0'
                                     AND B.CAR_KIND = V_CAR_KIND_CD
                                     AND B.CAR_KIND2 = V_CAR_TYPE_CD
                                     AND B.APLY_FYMD <= TO_DATE(V_ISTAR_CONT_DATE) /* 20130422 TO_DATE 처리 최재혁 */
                                     AND B.APLY_EYMD >= TO_DATE(V_ISTAR_CONT_DATE) /* 20130422 TO_DATE 처리 최재혁 */
                            ;
                              EXCEPTION
                              WHEN NO_DATA_FOUND THEN
                                  S_ERR_MSG := 'TBID0013 SELECT ERROR: '||SQLERRM ;
                                  RAISE E_ERR;
                              WHEN OTHERS THEN
                                  S_ERR_MSG := 'TBID0013 AND TBIB0203 SELECT ERROR: '||SQLERRM ;
                                  RAISE E_ERR;
                      END;

                  ELSE

                       BEGIN
   --2017.02.08 담보별단체특성율추가
                          SELECT
                                WM_CONCAT(
                                  CASE WHEN B.DMBO_CD IN ('01','02','03','13') THEN
                                      ROUND(B.BASIC_PREM*(TO_DATE('20160331', 'YYYYMMDD') - TO_DATE(V_ISTAR_CONT_DATE))/365 +
                                           (SELECT C.BASIC_PREM*(TO_DATE(V_IEND_CONT_DATE) - TO_DATE('20160331', 'YYYYMMDD'))/365
                                              FROM TBIB0203 C
                                             WHERE B.DMBO_ENT_AMT_GB = C.DMBO_ENT_AMT_GB
                                               AND B.DMBO_CD = C.DMBO_CD
                                               AND C.I_KIND_CD = V_I_KIND_CD
                                               AND B.CAR_KIND = C.CAR_KIND
                                               AND B.CAR_KIND2 = C.CAR_KIND2
                                               AND C.APLY_FYMD >= TO_DATE(V_ISTAR_CONT_DATE)
                                               AND C.APLY_EYMD >= TO_DATE(V_IEND_CONT_DATE))
                                      )
                                  ELSE
                                    B.BASIC_PREM
                                  END   ||'|' || B.NEW_RT ||'|' || B.DMBO_CD ||'|' || NVL(A.CANCEL_CALC_GB, '1')  ||'|' || A.GRP_DMBO_RATE
                                )
                                INTO V_0203_INFO
                                FROM TBID0013 A ,
                                     TBIB0203 B
                               WHERE  A.POL_NO          = I_ENTER_NO
                                   AND  ENDOR_NO         = I_ENDOR_NO
                                     AND A.INSUR_AMT_GB = B.DMBO_ENT_AMT_GB
                                     AND A.DMBO_CD = B.DMBO_CD
                                     AND B.I_KIND_CD = V_I_KIND_CD
                                     AND B.CO_GB = '0'
                                     AND B.CAR_KIND = V_CAR_KIND_CD
                                     AND B.CAR_KIND2 = V_CAR_TYPE_CD
                                     AND B.APLY_FYMD <= TO_DATE(V_ISTAR_CONT_DATE) /* 20130422 TO_DATE 처리 최재혁 */
                                     AND B.APLY_EYMD >= TO_DATE(V_ISTAR_CONT_DATE) /* 20130422 TO_DATE 처리 최재혁 */
                            ;
                              EXCEPTION
                              WHEN NO_DATA_FOUND THEN
                                  S_ERR_MSG := 'TBID0013 SELECT ERROR: '||SQLERRM ;
                                  RAISE E_ERR;
                              WHEN OTHERS THEN
                                  S_ERR_MSG := 'TBID0013 AND TBIB0203 SELECT ERROR: '||SQLERRM ;
                                  RAISE E_ERR;
                      END;

                  END IF;

              END IF;

            ELSE

                BEGIN
  --2017.02.08 담보별단체특성율추가
                  SELECT WM_CONCAT(B.BASIC_PREM ||'|' ||
                                   B.NEW_RT     ||'|' ||
                                   B.DMBO_CD    ||'|' ||
                                   NVL(A.CANCEL_CALC_GB, '1')    ||'|' || A.GRP_DMBO_RATE
                                   )
                    INTO V_0203_INFO
                    FROM TBID0013 A
                       , TBIB0203 B
                   WHERE A.POL_NO          = I_ENTER_NO
                     AND  ENDOR_NO         = I_ENDOR_NO
                     AND A.INSUR_AMT_GB    = B.DMBO_ENT_AMT_GB
                     AND A.DMBO_CD         = B.DMBO_CD
                     AND B.I_KIND_CD       = V_I_KIND_CD
                     AND B.CO_GB           = '0'
                     AND B.CAR_KIND        = V_CAR_KIND_CD
                     AND B.CAR_KIND2       = V_CAR_TYPE_CD
                     AND B.APLY_FYMD      <= TO_DATE(V_ISTAR_CONT_DATE)    /* 20130422 TO_DATE 처리 최재혁 */
                     AND B.APLY_EYMD      >= TO_DATE(V_ISTAR_CONT_DATE);   /* 20130422 TO_DATE 처리 최재혁 */

                    EXCEPTION
                        WHEN NO_DATA_FOUND THEN
                            S_ERR_MSG := 'TBID0013 SELECT ERROR: '||SQLERRM ;
                            RAISE E_ERR;
                        WHEN OTHERS THEN
                            S_ERR_MSG := 'TBID0013 AND TBIB0203 SELECT ERROR: '||SQLERRM ;
                            RAISE E_ERR;
                END;

            END IF;

            S_IDX1 := LENGTH(V_0203_INFO) - LENGTH(REPLACE(V_0203_INFO,',','')) + 1;

            IF S_IDX1 IS NULL THEN
                S_ERR_MSG := 'TBID0013 SELECT ERROR ';
                RAISE E_ERR;
            END IF;

            S_IDX2 :=0;

      ELSE
            S_IDX1 :=0;
            S_IDX2 :=0;
      END IF;

      /******************************************************************/
      /**LOOP START                          ****************************/
      /******************************************************************/
      LOOP
             S_IDX2 := S_IDX2 +1;
             IF    S_IDX2 > S_IDX1 THEN
                   EXIT;
             END IF;

             S_0203_SUB          :=           REGEXP_SUBSTR(V_0203_INFO  ,'[^,]+',1,S_IDX2 );

             S_0203_BASIC_PREM   := TO_NUMBER(REGEXP_SUBSTR(S_0203_SUB   ,'[^|]+',1,1 ));
             S_0203_NEW_RT       := TO_NUMBER(REGEXP_SUBSTR(S_0203_SUB   ,'[^|]+',1,2 ));
             S_0203_DMBO_CD      :=           REGEXP_SUBSTR(S_0203_SUB   ,'[^|]+',1,3 );
             S_0203_CALC_GB      :=           REGEXP_SUBSTR(S_0203_SUB   ,'[^|]+',1,4 );
             S_0203_DMBO_RATE      :=           REGEXP_SUBSTR(S_0203_SUB   ,'[^|]+',1,5); /*담보별단체특성율*/

             /********************************/
             /* 00.기본보험료 세팅 **/
             /********************************/
             S_DMBO_BASIC_PREM  :=   S_0203_BASIC_PREM;
                                             L_LOG_DATA :='000* [' || S_0203_BASIC_PREM ||']=기본보험료' ||CHR(13)||CHR(10);


             IF    S_0203_DMBO_CD  NOT IN ('21','22','23') THEN

                   /************************/
                   /* 자차 (자기차량)담보 **/
                   /************************/
                   IF    S_0203_DMBO_CD = '06' THEN
                         S_DMBO_NEW_RT     := S_0203_NEW_RT;
                                                   L_LOG_DATA := L_LOG_DATA || '012* [' || S_0203_NEW_RT         ||']=자동차할증율' ||CHR(13)||CHR(10);
                        /*********************/
                        /*10. 중고차률 산정  */
                        /*********************/
                        F_FN_RENT_OLD_CAR_RATE := FN_RENT_OLD_CAR_RATE( '00' , V_CAR_PASS_YEAR , TO_DATE(V_ISTAR_CONT_DATE) );      -- 우선 적용 용. /* 20130422 TO_DATE 처리 최재혁 */
                                                   L_LOG_DATA := L_LOG_DATA || '013* [' || V_CAR_PASS_YEAR       ||']=차량 경과년수'     ||CHR(13)||CHR(10);
                                                   L_LOG_DATA := L_LOG_DATA || '014* [' || V_ISTAR_CONT_DATE     ||']=보험개시일'        ||CHR(13)||CHR(10);
                                                   L_LOG_DATA := L_LOG_DATA || '015* [' || F_FN_RENT_OLD_CAR_RATE     ||']=중고차률'          ||CHR(13)||CHR(10);

                        IF    F_FN_RENT_OLD_CAR_RATE <= 0 THEN
                              /*RAISE_APPLICATION_ERROR(-20011, '중고차 요율이 없습니다~~');*/
                              S_ERR_MSG := '중고차 요율이 없습니다';
                              RAISE E_ERR;
                        END IF;

                        /***********************/
                        /*20.일부공제요율 산정 */
                        /***********************/
                        F_FN_RENT_PART_CAR_AMT := FN_RENT_PART_CAR_AMT( I_JOB_GUBUN  , I_ENTER_NO , I_ENDOR_NO );
                                                   L_LOG_DATA := L_LOG_DATA || '021* [' || F_FN_RENT_PART_CAR_AMT    ||']=일부공제요율'                  ||CHR(13)||CHR(10);
                                                   L_LOG_DATA := L_LOG_DATA || '022* [' || V_CAR_TOT_AMT        ||']=차량+기계장치+부품 가입금액'   ||CHR(13)||CHR(10);

                        IF    F_FN_RENT_PART_CAR_AMT <= 0 AND NVL(V_CAR_TOT_AMT, 0) <= 0 THEN
                              /*RAISE_APPLICATION_ERROR(-20011, '차량가액 및 가액가입금액 오류~~');*/
                              S_ERR_MSG := '차량가액 및 가액가입금액 오류';
                              RAISE E_ERR;
                        ELSE
                              S_DMBO_BASIC_PREM  := S_DMBO_NEW_RT * V_CAR_TOT_AMT * TRUNC(F_FN_RENT_OLD_CAR_RATE / 100, 2) * F_FN_RENT_PART_CAR_AMT;
                                                   L_LOG_DATA := L_LOG_DATA || '023* [' || S_DMBO_BASIC_PREM  ||']=자동차할증율*차량가입금액*중고차률*일부공제요율' ||CHR(13)||CHR(10);
                        END IF;

                   END IF;



                   /********************************/
                   /* 30.(가입경력+법규율) 곱하기 **/
                   /********************************/
                                                   L_LOG_DATA := L_LOG_DATA || '031* [' || V_IENT_CARR_R    ||']=가입경력'              ||CHR(13)||CHR(10);
                   IF    V_IENT_CARR_R > 0 THEN  /* 가입경력이 0보다 클때*/
                         S_DMBO_APPY_PREM := S_DMBO_BASIC_PREM * TRUNC(V_IENT_CARR_R/100, 5);
                                                   L_LOG_DATA := L_LOG_DATA || '032* [' || S_DMBO_APPY_PREM ||']=기본보험료 * 가입경력' ||CHR(13)||CHR(10);
                   ELSE
                         S_DMBO_APPY_PREM := S_DMBO_BASIC_PREM;
                   END IF;
                                                   L_LOG_DATA := L_LOG_DATA || '033* [' || S_DMBO_APPY_PREM ||']=적용보험료'            ||CHR(13)||CHR(10);

                   /*****************************************/
                   /* 40.적용요율(할인할증+특별할증)곱하기 **/
                   /*****************************************/
                                                   L_LOG_DATA := L_LOG_DATA || '041* [' || V_DSC_TOT_R      ||']=할인할증+특별할증'     ||CHR(13)||CHR(10);

                   IF    V_DSC_TOT_R > 0 THEN    /* 할인할증이 0보다 클때*/
                         S_DMBO_APPY_PREM := S_DMBO_APPY_PREM * TRUNC(V_DSC_TOT_R/100, 3);
                   END IF;
                                                   L_LOG_DATA := L_LOG_DATA || '043* [' || S_DMBO_APPY_PREM ||']=적용보험료 * (할인할증+특별할증)'    ||CHR(13)||CHR(10);
                   /**********************/
                   /* 50. 특약/특별요율 **/
                   /**********************/
                   IF   I_JOB_GUBUN = '1' THEN
                        S_GIJUN_FROM := TO_DATE(V_ISTAR_CONT_DATE);           /* 20130422 TO_DATE 처리 최재혁 */
                   ELSE
                        --S_GIJUN_FROM := TO_DATE(V_BASIS_FROM);              /* 20130422 TO_DATE 처리 최재혁 */
                        S_GIJUN_FROM := TO_DATE(V_ISTAR_CONT_DATE);           /* 20130422 TO_DATE 처리 최재혁 */
                   END IF;

                   PR_RENT_SPECIAL_RATE(I_JOB_GUBUN          ,I_ENTER_NO        ,I_ENDOR_NO           ,V_I_KIND_CD      ,V_CAR_KIND_CD
                                      ,V_CAR_TYPE_CD         ,S_GIJUN_FROM      ,S_0203_DMBO_CD       ,V_0012_INFO      ,S_SPECIAL_RATE
                                      ,S_TREAT_RATE);
 L_LOG_DATA := L_LOG_DATA || '050* [' || V_0012_INFO    ||']=특별요율' ||CHR(13)||CHR(10);
                                                   L_LOG_DATA := L_LOG_DATA || '051* [' || S_SPECIAL_RATE    ||']=특별요율' ||CHR(13)||CHR(10);
                                                   L_LOG_DATA := L_LOG_DATA || '052* [' || S_TREAT_RATE      ||']=연령한정요율'   ||CHR(13)||CHR(10);

                   IF    S_0203_DMBO_CD IN ('03' ,'13','06') THEN

                         IF    S_0203_DMBO_CD = '06' THEN
                               /******************/
                               /*  60. 고과차량 **/
                               /******************/
                               F_FN_RENT_VIP_CAR_RATE := FN_RENT_VIP_CAR_RATE( I_JOB_GUBUN  ,I_ENTER_NO  ,I_ENDOR_NO ) ;
                                                   L_LOG_DATA :=  L_LOG_DATA || '061* [' || F_FN_RENT_VIP_CAR_RATE  || ']=고가차량 특별요율' ||CHR(13)||CHR(10);

                               S_SPECIAL_RATE := S_SPECIAL_RATE + ( F_FN_RENT_VIP_CAR_RATE  - 100 ) ;
                                                   L_LOG_DATA :=  L_LOG_DATA || '062* [' || S_SPECIAL_RATE     || ']=특별요율 + ( 고가차량 특별요율  - 100 )' ||CHR(13)||CHR(10);
                         END IF;



                         /***************/
                         /* 70.물적할증**/
                         /***************/
                         F_FN_RENT_MUL_ACCI_RATE := FN_RENT_MUL_ACCI_RATE(S_0203_DMBO_CD,V_MUL_ACCI_RATE_CD ,TO_DATE(V_ISTAR_CONT_DATE));  /* 20130422 TO_DATE 처리 최재혁 */
                                                   L_LOG_DATA := L_LOG_DATA || '071* [' || F_FN_RENT_MUL_ACCI_RATE   ||']=물적할증요율'  ||CHR(13)||CHR(10);

                         IF      F_FN_RENT_MUL_ACCI_RATE > 0 THEN  /* 특별할증이 0보다 클때*/
                                 S_DMBO_APPY_PREM := S_DMBO_APPY_PREM * TRUNC(F_FN_RENT_MUL_ACCI_RATE/100, 3);
                         END IF;
                                                   L_LOG_DATA := L_LOG_DATA || '073* [' || S_DMBO_APPY_PREM ||']=적용보험료 * 물적할증요율' ||CHR(13)||CHR(10);

                         S_DMBO_APPY_PREM := S_DMBO_APPY_PREM * TRUNC(S_SPECIAL_RATE/100, 3) * TRUNC(S_TREAT_RATE, 3) ;
                                                   L_LOG_DATA := L_LOG_DATA || '076* [' || S_DMBO_APPY_PREM ||']=적용보험료 * 특별요율 * 연령한정요율' ||CHR(13)||CHR(10);
                   ELSE
                         S_DMBO_APPY_PREM := S_DMBO_APPY_PREM * TRUNC(S_SPECIAL_RATE/100, 3) * TRUNC(S_TREAT_RATE, 3) ;
                                                   L_LOG_DATA := L_LOG_DATA || '053* [' || S_DMBO_APPY_PREM  ||']=적용보험료*특별요율*연령한정요율'   ||CHR(13)||CHR(10);
                   END IF;

                   /*****************************/
                   /*  80. 단체업체특성범위요율 */
                   /*****************************/
                                                   L_LOG_DATA := L_LOG_DATA || '081* [' || V_GRPCONT_DSC_R     ||']=단체특성범위율' ||CHR(13)||CHR(10);
                                                   L_LOG_DATA := L_LOG_DATA || '082* [' || V_INDGRP_GB         ||']=개별단체구분'   ||CHR(13)||CHR(10);
                                                   L_LOG_DATA := L_LOG_DATA || '999* [' || S_0203_DMBO_RATE     ||']=담보별단체특성율' ||CHR(13)||CHR(10);

                   /*IF    (V_GRPCONT_DSC_R != 0 AND V_INDGRP_GB = 2 ) THEN -- 2013년5월8일 정무헌이 징징대서 고침...*/

  /*2017.01.31 요율세분화 추가*/
    IF TO_CHAR(V_ISTAR_CONT_DATE,'YYYYMMDD')  < '20170401' THEN
                         IF     V_GRPCONT_DSC_R != 0  THEN
                                 /*20131119 자차담보일 경우 자차전용 단체계약할인율을 곱하고 그외 기존 계약할인율을 곱하도록 수정 LYH*/
                                 IF S_0203_DMBO_CD = '06' THEN
                                  S_DMBO_APPY_PREM := S_DMBO_APPY_PREM * (TRUNC(V_GRPCONT_DSC_CAR_R/100, 4) );
                                 ELSE
                                   S_DMBO_APPY_PREM := S_DMBO_APPY_PREM * (TRUNC(V_GRPCONT_DSC_R/100, 4) );
                                 END IF;
                          END IF;
     ELSE
    S_DMBO_APPY_PREM := S_DMBO_APPY_PREM * (TRUNC(S_0203_DMBO_RATE/100, 4) );
     END IF;
  /*요율세분화 끝.*/
                                                   L_LOG_DATA := L_LOG_DATA || '084* [' || S_DMBO_APPY_PREM    ||']=적용보험료 * 단체특성범위율' ||CHR(13)||CHR(10);
                   /*********************************************************************************************************/
                   /*  81. 분납할증                                                                                         */
                   /* 단기자차(S_0203_CALC_GB='3')는 일시납이므로 계산하지 않는다. 20130513 추가                            */
                   /* 분납할증 안하기로 했다가 다시 해달라 해서 원복처리함...20130514_최재혁                                */
                   /*********************************************************************************************************/
                   S_DMBO_APPY_PREM  := S_DMBO_APPY_PREM * (V_DVDADD_RATE/100);
                                                  L_LOG_DATA := L_LOG_DATA || '085* [' || V_DVDADD_RATE/100     ||']=분납할증율/100' ||CHR(13)||CHR(10);
                   /* --없애진 않는다.... 다시 사용할 수도 있을 것 같아서...20130514_최재혁
                   IF S_0203_CALC_GB <> '3' THEN
                        S_DMBO_APPY_PREM  := S_DMBO_APPY_PREM * (V_DVDADD_RATE/100);
                                                  L_LOG_DATA := L_LOG_DATA || '085* [' || V_DVDADD_RATE/100     ||']=분납할증율/100' ||CHR(13)||CHR(10);
                   END IF;
                   */

             ELSE
                    S_DMBO_APPY_PREM   := S_DMBO_BASIC_PREM;
                    S_BASIC_YEAR_PREM  := S_DMBO_BASIC_PREM;
                    S_APPY_YEAR_PREM   := S_DMBO_BASIC_PREM;

             END IF;


             /****************************/
             /* 90. 일할/단기 적용       */
             /****************************/
                                             L_LOG_DATA := L_LOG_DATA || '091* [' || V_ISTAR_CONT_DATE ||']=보험시기'  ||CHR(13)||CHR(10);
                                             L_LOG_DATA := L_LOG_DATA || '092* [' || V_IEND_CONT_DATE  ||']=보험종기'  ||CHR(13)||CHR(10);

             /* 공제시기, 종기에 시분초 포함되어 변경. TO_DATE 할 항목이 많아서 변수 처리함. 20130422 최재혁 */
             S_ISTAR_CONT_DATE := TO_DATE(V_ISTAR_CONT_DATE);
             S_IEND_CONT_DATE  := TO_DATE(V_IEND_CONT_DATE);

             IF    S_ISTAR_CONT_DATE IS NOT NULL AND S_IEND_CONT_DATE IS NOT NULL AND S_ISTAR_CONT_DATE <= S_IEND_CONT_DATE THEN
                   S_CONT_MM            := TRUNC(MONTHS_BETWEEN(S_IEND_CONT_DATE, S_ISTAR_CONT_DATE), 0);
                   S_CONT_DD            := (S_IEND_CONT_DATE - S_ISTAR_CONT_DATE ) ;
                                             L_LOG_DATA := L_LOG_DATA || '093* [' || S_CONT_MM         ||']=보험가입개월수' ||CHR(13)||CHR(10);
                                             L_LOG_DATA := L_LOG_DATA || '094* [' || S_CONT_DD         ||']=보험가입일수'   ||CHR(13)||CHR(10);
                                             L_LOG_DATA := L_LOG_DATA || '095* [' || V_SHORT_DAY_GB    ||']=일할/단기 구분'       ||CHR(13)||CHR(10);

                   IF    V_SHORT_DAY_GB IS NOT NULL AND V_SHORT_DAY_GB = 1 THEN  /* 일할계산*/

                     IF '20160401' BETWEEN TO_CHAR(V_ISTAR_CONT_DATE,'YYYYMMDD') AND TO_CHAR(ADD_MONTHS(V_ISTAR_CONT_DATE,12), 'YYYYMMDD')  AND S_0203_DMBO_CD IN ('01','02','03','13') THEN

                      /*기본보험료 계산*/
                       S_BASIC_YEAR_PREM := TRUNC(S_DMBO_BASIC_PREM, 2); /*년간기본보험료*/
                                  L_LOG_DATA := L_LOG_DATA || '098* [' || S_DMBO_BASIC_PREM  ||']=기본보험료/보험기간' ||CHR(13)||CHR(10);

                       /*적용보험료 계산*/
                       S_APPY_YEAR_PREM  := TRUNC(S_DMBO_APPY_PREM, 2); /*년간적용보험료*/
                                             L_LOG_DATA := L_LOG_DATA || '103* [' || S_DMBO_APPY_PREM   ||']=적용보험료/보험기간' ||CHR(13)||CHR(10);

                     ELSE

                       /*기본보험료 계산*/
                       S_BASIC_YEAR_PREM := S_DMBO_BASIC_PREM; /*년간기본보험료*/
                       S_DMBO_BASIC_PREM := S_DMBO_BASIC_PREM * S_CONT_DD;
                                             L_LOG_DATA := L_LOG_DATA || '096* [' || S_DMBO_BASIC_PREM ||']=기본보험료 * 보험일수' ||CHR(13)||CHR(10);

                       S_DMBO_BASIC_PREM := TRUNC(S_DMBO_BASIC_PREM/(ADD_MONTHS(S_ISTAR_CONT_DATE, 12) - ( S_ISTAR_CONT_DATE )), 2);
                                             L_LOG_DATA := L_LOG_DATA || '097* [' || TO_CHAR(ADD_MONTHS(S_ISTAR_CONT_DATE, 12) - ( S_ISTAR_CONT_DATE )) ||']=보험기간' ||CHR(13)||CHR(10);
                                             L_LOG_DATA := L_LOG_DATA || '098* [' || S_DMBO_BASIC_PREM  ||']=기본보험료/보험기간' ||CHR(13)||CHR(10);

                       /*적용보험료 계산*/
                       S_APPY_YEAR_PREM  := S_DMBO_APPY_PREM; /*년간적용보험료*/
                                             L_LOG_DATA := L_LOG_DATA || '100* [' || S_DMBO_APPY_PREM      ||']=적용보험료 * 분납할증율' ||CHR(13)||CHR(10);

                       S_DMBO_APPY_PREM := S_DMBO_APPY_PREM * S_CONT_DD;
                                             L_LOG_DATA := L_LOG_DATA || '101* [' || S_DMBO_APPY_PREM   ||']=적용보험료 * 보험가입일수 ' ||CHR(13)||CHR(10);

                       S_DMBO_APPY_PREM := TRUNC(S_DMBO_APPY_PREM/(ADD_MONTHS(S_ISTAR_CONT_DATE, 12) - ( S_ISTAR_CONT_DATE )), 2);
                                             L_LOG_DATA := L_LOG_DATA || '103* [' || S_DMBO_APPY_PREM   ||']=적용보험료/보험기간' ||CHR(13)||CHR(10);

                     END IF;



                   ELSIF V_SHORT_DAY_GB IS NOT NULL AND V_SHORT_DAY_GB = 2 THEN /* 단기계산일때*/
                       /*기본보험료 계산*/
                       S_BASIC_YEAR_PREM := S_DMBO_BASIC_PREM; /*년간기본보험료*/
                       S_DMBO_BASIC_PREM := ROUND(S_DMBO_BASIC_PREM,-1);
                                             L_LOG_DATA := L_LOG_DATA || '099* [' || S_DMBO_BASIC_PREM  ||']=단기요율 기본보험료' ||CHR(13)||CHR(10);

                       F_FN_RENT_SHORT_RATE   := FN_RENT_SHORT_RATE(V_I_KIND_CD  ,S_ISTAR_CONT_DATE  ,S_IEND_CONT_DATE  ,S_ISTAR_CONT_DATE  ,S_IEND_CONT_DATE);
                       F_FN_RENT_SHORT_RATE   := TRUNC(F_FN_RENT_SHORT_RATE / 100,2);

                       /*여기서는 연간보험료만 계산하고 일할, 단기 계산은 은 분납 프로시저에서 처리한다.2013.06.17일 수정*/
                       S_APPY_YEAR_PREM  := S_DMBO_APPY_PREM;    /*년간적용보험료*/
                       S_DMBO_APPY_PREM  := S_DMBO_APPY_PREM;
                                             L_LOG_DATA  := L_LOG_DATA || '104* [' || F_FN_RENT_SHORT_RATE ||']=단기요율'         ||CHR(13)||CHR(10);
                                             L_LOG_DATA  := L_LOG_DATA || '105* [' || S_DMBO_APPY_PREM ||']=단기요율 적용보험료' ||CHR(13)||CHR(10);
                   END IF;

              END IF;

             S_APPY_YEAR_PREM := ROUND(S_APPY_YEAR_PREM/10, 0) * 10 ;  /*년간적용보험료(일할/단기 적용전)*/

             S_DMBO_APPY_PREM := ROUND(S_DMBO_APPY_PREM/10, 0) ;
                                             L_LOG_DATA  := L_LOG_DATA || '111* [' || S_DMBO_APPY_PREM ||']=ROUND(적용보험료/10, 0)' ||CHR(13)||CHR(10);

             S_DMBO_APPY_PREM := S_DMBO_APPY_PREM * 10;
                                             L_LOG_DATA  := L_LOG_DATA || '112* [' || S_DMBO_APPY_PREM ||']=적용보험료 * 10'         ||CHR(13)||CHR(10);

             /*********************************************/
             /* 110. LOG TABLE INSERT 하기   **************/
             /* L_LOG_STEP에 담보코드 있으면 로그남김******/
             /*********************************************/

             IF    L_LOG_LEVEL = 1 OR NVL(REGEXP_SUBSTR(L_LOG_STEP,S_0203_DMBO_CD),' ') = S_0203_DMBO_CD THEN
                   PR_INSERT_LOG(L_LOG_DATE,L_LOG_SP_NAME,L_LOG_NO,L_LOG_GUBUN,S_0203_DMBO_CD,L_LOG_DATA);
             END IF;
             L_LOG_DATA  :='';


             IF    I_JOB_GUBUN = '1' THEN
                   /***************************************************/
                   /* 120 .- 담보기간별분담금(TBIB0014)               */
                   /*      - 담보별분납계획  (TBIB0015) INSERT        */
                   /***************************************************/
                   /*20130422 TO_DATE 처리 최재혁*/
                   PR_RENT_BUNAP_RATE(I_ENTER_NO          ,S_0203_DMBO_CD      ,V_NA_MTH                        ,'0'
                                     ,S_DMBO_BASIC_PREM   ,S_DMBO_APPY_PREM    ,V_BNP_CNT                       ,TO_DATE(V_ISTAR_CONT_DATE)
                                     ,0                   ,V_I_KIND_CD         ,V_SHORT_DAY_GB                  ,TO_DATE(V_IEND_CONT_DATE)
                                     ,S_BASIC_YEAR_PREM   ,S_APPY_YEAR_PREM  );

                   S_TOT_APPY_PREM  := S_TOT_APPY_PREM + S_DMBO_APPY_PREM;
             ELSE
                   /***************************************************/
                   /* 120 .- 담보기간별분담금(TBID0014)               */
                   /*      - 담보별분납계획  (TBID0015) INSERT        */
                   /***************************************************/
                   /*20130422 TO_DATE 처리 최재혁*/
                   /* 20160328 4월1일 일반로직으로 변경( 로직오류에 따른 수정)*/
                   /*IF '20160401' BETWEEN TO_CHAR(V_ISTAR_CONT_DATE,'YYYYMMDD') AND TO_CHAR(ADD_MONTHS(V_ISTAR_CONT_DATE,12), 'YYYYMMDD') AND  S_0203_DMBO_CD IN ('01','02','03','13')  AND V_ENDOR_CD <> '701' THEN*/
                   IF '20160331' BETWEEN TO_CHAR(V_ISTAR_CONT_DATE,'YYYYMMDD') AND TO_CHAR(ADD_MONTHS(V_ISTAR_CONT_DATE,12), 'YYYYMMDD') AND  S_0203_DMBO_CD IN ('01','02','03','13')  AND V_ENDOR_CD <> '701' THEN

                     PR_RENT_ENDOR_BUNAP_RATE_TERM(I_ENTER_NO         ,I_ENDOR_NO            ,V_ENDOR_NO_BEF_MAX              ,S_0203_DMBO_CD             ,V_NA_MTH
                                           ,'0'                ,S_DMBO_BASIC_PREM     ,S_DMBO_APPY_PREM                ,V_BNP_CNT                  ,TO_DATE(V_ISTAR_CONT_DATE)
                                           ,0                  ,V_I_KIND_CD           ,TO_DATE(V_IEND_CONT_DATE)       ,TO_DATE(V_BASIS_FROM)      ,TO_DATE(V_BASIS_TO)
                                           ,V_USER_ID          ,V_END_NAB_NO          ,V_BEF_15_SEQ_NO                 ,V_ENDOR_CD                 ,V_ALL_CLIAM_DATE
                                           ,V_DAY_ENDOR_CNT    ,V_SHORT_DAY_GB        ,S_BASIC_YEAR_PREM               ,S_APPY_YEAR_PREM           ,V_CAR_KIND_CD
                                           ,V_CAR_TYPE_CD      ,V_IENT_CARR_R         ,V_DSC_TOT_R                     ,S_SPECIAL_RATE             ,S_TREAT_RATE
                                           ,F_FN_RENT_MUL_ACCI_RATE, V_GRPCONT_DSC_R  ,V_INDGRP_GB                     ,V_DVDADD_RATE              ,R_RETURN );

                   ELSE
                     PR_RENT_ENDOR_BUNAP_RATE(I_ENTER_NO         ,I_ENDOR_NO            ,V_ENDOR_NO_BEF_MAX              ,S_0203_DMBO_CD             ,V_NA_MTH
                                           ,'0'                ,S_DMBO_BASIC_PREM     ,S_DMBO_APPY_PREM                ,V_BNP_CNT                  ,TO_DATE(V_ISTAR_CONT_DATE)
                                           ,0                  ,V_I_KIND_CD           ,TO_DATE(V_IEND_CONT_DATE)       ,TO_DATE(V_BASIS_FROM)      ,TO_DATE(V_BASIS_TO)
                                           ,V_USER_ID          ,V_END_NAB_NO          ,V_BEF_15_SEQ_NO                 ,V_ENDOR_CD                 ,V_ALL_CLIAM_DATE
                                           ,V_DAY_ENDOR_CNT    ,V_SHORT_DAY_GB        ,S_BASIC_YEAR_PREM               ,S_APPY_YEAR_PREM           ,R_RETURN );

                   END IF;

                    R_RETURN_OK       := REGEXP_SUBSTR(R_RETURN,'[^|]+',1,1);
                    IF    R_RETURN_OK = 'OK' THEN
                          S_DMBO_BASIC_PREM := S_DMBO_BASIC_PREM + TO_NUMBER(REGEXP_SUBSTR(R_RETURN_OK,'[^|]+',1,2));
                          S_DMBO_APPY_PREM  := S_DMBO_APPY_PREM  + TO_NUMBER(REGEXP_SUBSTR(R_RETURN_OK,'[^|]+',1,3));
                    END IF;

                    S_TOT_APPY_PREM  := S_TOT_APPY_PREM + S_DMBO_APPY_PREM;

             END IF;

      /********************************************************************************/
      /* LOOP END    ******************************************************************/
      /********************************************************************************/
      END LOOP;


      IF    I_JOB_GUBUN = '1' THEN
           /******************************************************************************/
           /* 92. 분납계획(TBIB0016) TABLE INSERT 하기     *******************************/
           /******************************************************************************/
           /*20130422 TO_DATE 처리 최재혁*/
           PR_RENT_BUNAP_TOT_RATE( I_ENTER_NO ,   V_I_KIND_CD ,  V_NA_MTH ,   '0' ,  V_BNP_CNT ,  S_TOT_APPY_PREM ,  TO_DATE(V_ISTAR_CONT_DATE) , 0 );

           /******************************************************************************/
           /* 93. MASTER(TBIB0001) TABLE INSERT 하기       *******************************/
           /******************************************************************************/
           BEGIN
                UPDATE TBIB0001 A
                   SET APPY_SUM_PREM = ( SELECT SUM(APPY_PREM) FROM TBIB0014 WHERE ENT_DGN_NO = I_ENTER_NO AND DMBO_CD NOT IN ( '21', '22', '23') ) ,
                       RIDER_PREM    = ( SELECT SUM(APPY_PREM) FROM TBIB0014 WHERE ENT_DGN_NO = I_ENTER_NO AND DMBO_CD     IN ( '21', '22', '23') ) ,
                       SUM_PREM      = ( SELECT SUM(APPY_PREM) FROM TBIB0014 WHERE ENT_DGN_NO = I_ENTER_NO ) ,
                       CONT_MM       = S_CONT_MM,
                       CONT_DD       = S_CONT_DD
                 WHERE ENT_DGN_NO    = I_ENTER_NO;

                EXCEPTION WHEN OTHERS THEN
                        S_ERR_MSG := 'TBIB0001 UPDATE ERROR: '||SQLERRM ;
                        RAISE E_ERR;
           END;

           O_RETURN := 'OK';

      ELSIF I_JOB_GUBUN = '2' THEN
           /***************************************************************************************************************************/
           /* 99. 담보별보험료(TBID0013), 담보기간별보험료(TBID0014), 담보별분납계획(TBID0015) 해지후 배서시 데이터 누락되지 않도록   */
           /***************************************************************************************************************************/
            PR_RENT_ENDOR_BUNAP_TERM(I_ENTER_NO       ,I_ENDOR_NO        ,V_USER_ID       ,V_TREATY_HQ_CD
                                    ,V_TREATY_BRH_CD  ,V_TREATY_CD       ,V_END_NAB_NO    ,V_BEF_15_SEQ_NO);

           /******************************************************************************/
           /* 92. 분납계획(TBIB0016) TABLE INSERT 하기     *******************************/
           /******************************************************************************/
            PR_RENT_ENDOR_BUNAP_TOT_RATE(I_ENTER_NO      ,I_ENDOR_NO        ,V_I_KIND_CD      ,'0'          ,V_BNP_CNT
                                        ,V_USER_ID       ,V_TREATY_HQ_CD    ,V_TREATY_BRH_CD  ,V_TREATY_CD  ,V_ENDOR_CD
                                        ,V_END_NAB_NO    ,V_BEF_15_SEQ_NO);

            BEGIN
                 SELECT SUM(DECODE(ENDOR_NO, I_ENDOR_NO   ,APPY_PREM, 0))   AS APPY_PREM_AFT
                      , SUM(DECODE(ENDOR_NO, I_ENDOR_NO-1 ,APPY_PREM, 0))   AS APPY_PREM_BEF
                      , SUM(DECODE(ENDOR_NO, I_ENDOR_NO   ,APPY_PREM, 0)) - SUM(DECODE(ENDOR_NO, I_ENDOR_NO-1, APPY_PREM, 0)) AS DIFF_AMT
                   INTO V_APPY_PREM_AFT, V_APPY_PREM_BEF, V_DIFF_AMT
                   FROM TBID0013
                  WHERE POL_NO = I_ENTER_NO
                    AND ENDOR_NO BETWEEN I_ENDOR_NO - 1 AND I_ENDOR_NO;

                 UPDATE TBIC0202
                    SET ENDOR_BEFORE_PREM = NVL(V_APPY_PREM_BEF, 0)
                      , ENDOR_AFTER_PREM  = NVL(V_APPY_PREM_AFT, 0)
                      , PREM_DIFF_AMT     = NVL(V_DIFF_AMT,0)
                      , GET_GB            = DECODE(SIGN(V_DIFF_AMT), -1, '4', 0, '9', '3')
                  WHERE POL_NO   = I_ENTER_NO
                    AND ENDOR_NO = I_ENDOR_NO;

                  EXCEPTION WHEN OTHERS THEN
                        S_ERR_MSG := 'TBIC0202 UPDATE ERROR: '||SQLERRM ;
                        RAISE E_ERR;
             END;

             BEGIN
                  UPDATE TBID0001 A
                     SET APPY_SUM_PREM = ( SELECT SUM(APPY_PREM) FROM TBID0014 WHERE POL_NO = I_ENTER_NO AND ENDOR_NO = I_ENDOR_NO AND DMBO_CD NOT IN ( '21', '22', '23') ) ,
                         RIDER_PREM    = ( SELECT SUM(APPY_PREM) FROM TBID0014 WHERE POL_NO = I_ENTER_NO AND ENDOR_NO = I_ENDOR_NO AND DMBO_CD     IN ( '21', '22', '23') ) ,
                         SUM_PREM      = ( SELECT SUM(APPY_PREM) FROM TBID0014 WHERE POL_NO = I_ENTER_NO AND ENDOR_NO = I_ENDOR_NO )
                   WHERE POL_NO        = I_ENTER_NO
                     AND ENDOR_NO      = I_ENDOR_NO;

                    EXCEPTION WHEN OTHERS THEN
                        S_ERR_MSG := 'TBID0001 UPDATE ERROR: '||SQLERRM ;
                        RAISE E_ERR;
              END;

              IF V_ENDOR_CD = '601' THEN

                BEGIN
                  UPDATE TBID0001 A
                     SET APPY_TO    = (SELECT TO_DATE(TO_CHAR(ALL_CLIAM_DATE, 'YYYYMMDD')||'235959','YYYYMMDDHH24MISS') FROM TBID0001 B WHERE POL_NO = I_ENTER_NO AND ENDOR_NO = I_ENDOR_NO)
                   WHERE POL_NO        = I_ENTER_NO
                     AND ENDOR_NO      = I_ENDOR_NO - 1;

                    EXCEPTION WHEN OTHERS THEN
                        S_ERR_MSG := 'TBID0001 UPDATE ERROR: '||SQLERRM ;
                        RAISE E_ERR;
               END;

              END IF;


              BEGIN
                   SELECT  'OK'
                     INTO  V_CHANGE_OK
                     FROM  TBID0016
                    WHERE  POL_NO   = I_ENTER_NO
                      AND  ENDOR_NO = I_ENDOR_NO
                      AND  SEQ_NO   = V_BEF_15_SEQ_NO
                      AND  ROWNUM   = 1;

                   EXCEPTION WHEN NO_DATA_FOUND THEN
                                    V_CHANGE_OK :='NOCHANGE';
                             WHEN OTHERS        THEN
                                    S_ERR_MSG := 'TBID0016 SELECT ERROR: '||SQLERRM ;
                                    RAISE E_ERR;
              END;

              IF    V_CHANGE_OK <> 'OK' THEN
                  IF SUBSTR(V_ENDOR_CD, 1, 1) = '7' THEN
                      V_CHANGE_OK := 'OK';
                  ELSE
                      V_CHANGE_OK := 'NOCHANGE';
                  END IF;
              END IF;

              O_RETURN := V_CHANGE_OK;

       END IF;

      /***************************************************************************************/
      /**99. LAST LOG TABLE                     **********************************************/
      /***************************************************************************************/
      IF    L_LOG_LEVEL = 1 OR NVL(REGEXP_SUBSTR(L_LOG_STEP,'99'),' ') = '99' THEN
            PR_INSERT_LOG(L_LOG_DATE,L_LOG_SP_NAME ,L_LOG_NO ,L_LOG_GUBUN,'END','GOOD BY ~~~~~~~~' );
      END IF;

      EXCEPTION WHEN E_ERR THEN
                     /*DBMS_OUTPUT.PUT_LINE('PR_RENT_AMT MAIN ERROR: '||SQLERRM);*/
                     O_RETURN := S_ERR_MSG;
                     RAISE_APPLICATION_ERROR(-20010, 'PR_RENT_AMT MAIN ERROR: '||SQLERRM);
                WHEN OTHERS THEN
                     DBMS_OUTPUT.PUT_LINE('PR_RENT_AMT MAIN ERROR: '||SQLERRM);
                     RAISE_APPLICATION_ERROR(-20010, 'PR_RENT_AMT MAIN ERROR: '||SQLERRM);
                     O_RETURN := SQLERRM;

END;
-- GENERATED BY QueryOne AT 2017-04-24 14:46:03
-- USING krma_app@10.100.10.54:8629(krmadb)

-- GENERATED BY QueryOne AT 2017-04-07 16:59:44
-- USING krma_app@10.100.10.54:8629(krmadb)

-- GENERATED BY QueryOne AT 2017-04-03 18:10:44
-- USING krma_app@10.100.10.54:8629(krmadb)

CREATE OR REPLACE
PROCEDURE          KRMA_APP.PR_RENT_AMT( I_JOB_GUBUN IN VARCHAR2, I_ENTER_NO IN VARCHAR2 ,I_ENDOR_NO IN NUMBER, O_RETURN OUT VARCHAR2) AS

 /***************************************************************************************************/
 /* PROCEDURE NAME :  PR_RENT_AMT                                                                    */
 /* FUNCTION       :  가입설계 및 배서 보험료 계산                                                       */
 /* PARAMETER      :  I_JOB_GUBUN       [ IN] 작업구분(1: 가입설계 2: 배서)                           */
 /*                   I_ENTER_NO        [ IN] 설계번호 또는 계약번호                                    */
 /*                   I_ENDOR_NO        [ IN] 배서번호                                                  */
 /***************************************************************************************************/
     /******************************************************************************************/
     /**** TBIB0001[설계 MASETER-계약조건*******************************************************/
     /******************************************************************************************/
     V_I_KIND_CD                         TBIB0001.I_KIND_CD%TYPE;                 /*[IN] 보험종목*/
     V_NA_MTH                            TBIB0001.NA_MTH%TYPE;                    /*[IN] 납입방법*/
     V_ISTAR_CONT_DATE                   TBIB0001.ISTAR_CONT_DATE%TYPE;           /*[IN] 보험시기     (보험료 계산 기준 일자)*/
     V_IEND_CONT_DATE                    TBIB0001.IEND_CONT_DATE%TYPE;            /*[IN] 보험종기     (보험료 계산 종료 일자 )*/
     V_SPCIAL_INC_APPY                   TBIB0001.SPCIAL_INC_APPY%TYPE;           /*[IN] 특별할증코드*/
     V_DSC_INC_CD                        TBIB0001.DSC_INC_CD%TYPE;                /*[IN] 할인할증등급*/
     V_IENT_CARR_CD                      TBIB0001.IENT_CARR_CD%TYPE;              /*[IN] 가입경력코드*/
     V_SHORT_DAY_GB                      TBIB0001.SHORT_DAY_GB%TYPE;              /*[IN] 단기일할구분 (보험료계산시 일할 :1,단기 :2 구분으로 사용함)*/
     V_INDGRP_GB                         TBIB0001.INDGRP_GB%TYPE;                 /*[IN] 개별단체구분 (개별 1: 단체 :  2)*/
     V_IENT_CARR_R                       TBIB0001.IENT_CARR_R%TYPE := 0.0;        /*[IN] 가입경력요율*/
     V_GRPCONT_DSC_R                     TBIB0001.GRPCONT_DSC_R%TYPE := 0.0;      /*[IN] 단체특성범위율(기타)*/
     V_GRPCONT_DSC_CAR_R                 TBIB0001.GRPCONT_DSC_CAR_R%TYPE := 0.0;  /*[IN] 단체특성범위율(자차)*/
     V_DSC_INC_R                         TBIB0001.DSC_INC_R%TYPE := 0.0;          /*[IN] 할인할증율*/
     V_SPCIAL_INC_R                      TBIB0001.SPCIAL_INC_R%TYPE := 0.0;       /*[IN] 특별할증요율*/
     V_DSC_TOT_R                         TBIB0001.SPCIAL_INC_R%TYPE := 0.0;       /*[IN] 할인할증율 + 특별할증율*/
     V_SHORT_R                           TBIB0001.SHORT_R%TYPE := 0.0;            /*[OUT]단기요율      (일할 단기 구분에서 단기일때 단기요율 적용한다)*/
     V_BNP_CNT                           TBIB0001.BNP_CNT%TYPE;                   /*[IN] 납입횟차*/
     V_MUL_ACCI_RATE_CD                  TBIB0001.MUL_ACCI_RATE_CD%TYPE;          /*[IN] 물적사고 할증기준금액코드*/
     V_CAR_KIND_CD                       TBIB0001.CAR_KIND_CD%TYPE;               /*[IN] 차종코드*/
     V_CAR_TYPE_CD                       TBIB0001.CAR_TYPE_CD%TYPE;               /*[IN] 차형태코드-차종세분코드*/
     V_CAR_OLD_R                         TBIB0001.CAR_OLD_R%TYPE := 0.0;          /*[IN] 중고차요율*/
     V_CAR_GAEK                          TBIB0001.CAR_GAEK%TYPE := 0;             /*[IN] 차량가액*/
     V_CAR_UNIT_GAEK                     TBIB0001.CAR_UNIT_GAEK%TYPE := 0;        /*[IN] 기계장치총가액*/
     V_CAR_ACC_GAEK                      TBIB0001.CAR_ACC_GAEK%TYPE := 0;         /*[IN] 부속품총가액*/
     V_CAR_Y_TYPE                        TBIB0001.CAR_Y_TYPE%TYPE;       /*[IN] 년식*/
     V_CAR_AMT                           TBIB0001.CAR_AMT%TYPE;                   /*[IN] 차량가입금액*/
     V_CAR_PASS_YEAR                     TBIB0001.CAR_PASS_YEAR%TYPE;             /*[IN] 차량 경과년수*/
     V_CAR_UNIT_AMT                      TBIB0001.CAR_UNIT_AMT%TYPE;              /*[IN] 기계장치 가입금액*/
     V_CAR_ACC_AMT                       TBIB0001.CAR_ACC_AMT%TYPE;               /*[IN] 부속품 가입금액*/
     V_CAR_TOT_AMT                       TBIB0001.CAR_AMT%TYPE;                   /*[IN] 차량총가입 금액*/

     V_APPY_FROM                         TBID0001.APPY_FROM%TYPE;                 /*[IN] 적용기준시작일자*/
     V_APPY_TO                           TBID0001.APPY_TO%TYPE;                   /*[IN] 적용기준종료일자*/
     V_BASIS_FROM                        TBID0001.BASIS_FROM%TYPE;                /*[IN] 배서기준시작일자*/
     V_BASIS_TO                          TBID0001.BASIS_TO%TYPE;                  /*[IN] 배서기준종료일자*/
     V_ENDOR_NO_BEF_MAX                  TBID0001.ENDOR_NO%TYPE;                  /*[IN] 기준일 이전의  배서중 배서기준일 중 가장 가장큰 ENDOR_NO*/
     V_ALL_CLIAM_DATE                    TBID0001.ALL_CLIAM_DATE%TYPE;            /*[IN] 차량대체시 전차량 종료일자*/

     V_USER_ID                           TBID0001.USER_ID%TYPE;
     V_TREATY_HQ_CD                      TBID0001.TREATY_HQ_CD%TYPE;
     V_TREATY_BRH_CD                     TBID0001.TREATY_BRH_CD%TYPE;
     V_TREATY_CD                         TBID0001.TREATY_CD%TYPE;
     V_END_NAB_NO                        TBID0001.END_NAB_NO%TYPE;
     V_ENDOR_CD                          TBIC0203.ENDOR_CD%TYPE;                  /*배서코드*/

     V_APPY_PREM_AFT                     NUMBER;
     V_APPY_PREM_BEF                     NUMBER;
     V_DIFF_AMT                          NUMBER;
     /******************************************************************************************/
     /*** TBIB0205 [가입설계-분납율기준]******************************************************/
     /******************************************************************************************/
     V_DVDADD_RATE                       TBIB0205.DVDADD_RATE%TYPE;               /*[IN] 분납율*/
     V_0012_INFO                         VARCHAR2(300);
     V_CHANGE_OK                         VARCHAR2(20);
     V_BEF_15_SEQ_NO                     NUMBER;
     V_DAY_ENDOR_CNT                     NUMBER;

     /******************************************************************************************/
     /*** 년간보험료  변수******************************************************************/
     /******************************************************************************************/
      S_BASIC_YEAR_PREM                  NUMBER(13);
      S_APPY_YEAR_PREM                   NUMBER(13);
     /******************************************************************************************/
     /*** 적용보험료 계산 변수******************************************************************/
     /******************************************************************************************/
     S_DMBO_APPY_PREM                    NUMBER := 0 ;                            /*[OUT] [적용보험료]*/

     /******************************************************************************************/
     /*** 기본보험료 계산 변수******************************************************************/
     /******************************************************************************************/
     S_DMBO_BASIC_PREM                   NUMBER := 0 ;                            /*[OUT] [기본보험료]*/
     S_DMBO_NEW_RT                       NUMBER := 0 ;                            /*[OUT] [기본보험료] 자동차요율*/

     /******************************************************************************************/
     /*** 보험료 계산 관련 내부 처리 LOGIC 변수*************************************************/
     /******************************************************************************************/
     S_TOT_APPY_PREM                     NUMBER := 0;                             /* 총보험료*/

     /***특별요율 변수 *******/
     S_SPECIAL_RATE                      NUMBER := 100;                           /* [특별요율]*/
     S_TREAT_RATE                        NUMBER := 1.0;

     /***계약년수 계산 *******/
     S_CONT_YY                           NUMBER;                                  /*계약년수*/
     S_CONT_MM                           NUMBER;                                  /*계약월수*/
     S_CONT_DD                           NUMBER;                                  /*계약일수*/

     S_GIJUN_FROM                        DATE;
     S_GIJUN_TO                          DATE;
     R_RETURN                            VARCHAR2(100);
     R_RETURN_OK                         VARCHAR2(50);
     /***FUNCTION 호출 RETURN 값*******/
     F_FN_RENT_MUL_ACCI_RATE             NUMBER;                                  /*FN_RENT_MUL_ACCI_RATE 함수 수행 결과값(*/
     F_FN_RENT_OLD_CAR_RATE              NUMBER;                                  /*FN_RENT_OLD_CAR_RATE  함수 수행 결과값(중고차 요율 )*/
     F_FN_RENT_PART_CAR_AMT              NUMBER;                                  /*FN_RENT_PART_CAR_AMT  함수 수행 결과값(부속품)*/
     F_FN_RENT_VIP_CAR_RATE              NUMBER;                                  /*FN_RENT_VIP_CAR_RATE  함수 수행 결과값(고과차량)*/
     F_FN_RENT_SHORT_RATE                NUMBER;                                  /*FN_RENT_SHORT_RATE    함수 수행 결과값(단기요율)*/
     /***************************************************************/
     /*** LOG 변수 *************************************************/
     /***************************************************************/
     L_LOG_LEVEL                         NUMBER := 0;                             /*로그레벨[0~1]: 0->L_LOG_STEP에 정의된 항목과 찍는다..  1->모두찍는다.)*/
     L_LOG_SP_NAME                       VARCHAR2(50)  := 'PR_RENT_AMT' ;         /*로그 STORED PROCEDURE NAME*/
     L_LOG_NO                            VARCHAR2(20);
     L_LOG_GUBUN                         VARCHAR2(20);
     L_LOG_DATA                          VARCHAR2(4000);
     L_LOG_DATE                          VARCHAR2(16)  := TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS');
     L_LOG_STEP                          VARCHAR2(100) :='01 02 03 13 04 05 06 07 21 22 23 99';   /*'01 02 03 13 04 05 06 07 21 22 23 99'*/

     /***************************************************************/
     /*** CURSOR를 사용하지 않고 LOOP를 하기 위해 추가 변수 정의 ****/
     /***************************************************************/
     V_0203_INFO                         VARCHAR2(1000);
     S_0203_SUB                          VARCHAR2(100);  /*처리할 담보코드 정보(컬럼|컬럼|컬럼,컬럼|컬럼|컬럼,...)*/
     S_0203_BASIC_PREM                   NUMBER;         /*기본보험료*/
     S_0203_NEW_RT                       NUMBER;         /*신차특성율*/
     S_0203_DMBO_CD                      VARCHAR2(100);  /*담보코드*/
     S_0203_DMBO_RATE                      VARCHAR2(100);  /*2017.02.08 담보별단체특성율*/
     S_0203_CALC_GB                      VARCHAR2(2);    /*계산방법(1:일할, 2:단기, 3:단기자차)*/

     S_IDX1                              NUMBER;         /*로우인덱스수*/
     S_IDX2                              NUMBER;         /*컬럼인덱스수*/

     /************************************************/
     /*** 공제시기, 공제종기에 시분초 제거한 변수 ****/
     /************************************************/
     S_ISTAR_CONT_DATE                   DATE;
     S_IEND_CONT_DATE                    DATE;


     E_ERR                               EXCEPTION;
     S_ERR_MSG                           VARCHAR2(5000);


BEGIN

      O_RETURN := 'NOT_OK';


      IF   I_JOB_GUBUN = '1' THEN
           L_LOG_SP_NAME := L_LOG_SP_NAME || '[가입]' ;
           L_LOG_NO      := I_ENTER_NO;
           L_LOG_GUBUN   := '가입설계';
      ELSE
           L_LOG_SP_NAME := L_LOG_SP_NAME || '[배서]' ;
           L_LOG_GUBUN   := '배서설계';
           L_LOG_NO      := I_ENTER_NO    ||'-' || I_ENDOR_NO;
      END IF;


      /***************************************************************/
      /*                                                             */
      /**** 가입설계 보험료 계산을 위한 DATA SELECT                        */
      /*                                                             */
      /***************************************************************/
      IF    I_JOB_GUBUN = '1' AND I_ENTER_NO IS NOT NULL THEN
            /******************************************************************/
            /**LOG START                        *******************************/
            /******************************************************************/
            IF    L_LOG_LEVEL = 1 OR NVL(REGEXP_SUBSTR(L_LOG_STEP,'99'),' ') = '99' THEN
                  PR_INSERT_LOG(L_LOG_DATE,L_LOG_SP_NAME ,L_LOG_NO ,L_LOG_GUBUN,'가입설계','출발 합니다....' );
            END IF;

            DELETE FROM TBIB0014 WHERE ENT_DGN_NO = I_ENTER_NO;
            DELETE FROM TBIB0015 WHERE ENT_DGN_NO = I_ENTER_NO;
            DELETE FROM TBIB0016 WHERE ENT_DGN_NO = I_ENTER_NO;

            /*****************************************************************/
            /*** 특별약관 코드 및 특별요율 코드 조회 *************************/
            /*****************************************************************/
            BEGIN
                 SELECT TO_CHAR(REPLACE(WM_CONCAT(RATE_CD),',','|'))
                   INTO V_0012_INFO
                   FROM TBIB0012
                  WHERE ENT_DGN_NO = I_ENTER_NO;

                  EXCEPTION WHEN OTHERS THEN
                        S_ERR_MSG := 'TBIB0012 SELECT ERROR: '||SQLERRM ;
                        RAISE E_ERR;

            END;

            /*****************************************************************/
            /*** 보험(공제) 설계 기본 정보 조회      *************************/
            /*****************************************************************/
            BEGIN
                 SELECT I_KIND_CD                            , CAR_KIND_CD           , CAR_TYPE_CD           , CAR_OLD_R                   , CAR_GAEK
                      , CAR_UNIT_GAEK                        , CAR_ACC_GAEK          , CAR_Y_TYPE            , NA_MTH                      , ISTAR_CONT_DATE
                      , IEND_CONT_DATE                       , SPCIAL_INC_APPY       , DSC_INC_CD            , IENT_CARR_CD                , NVL(SHORT_DAY_GB, '1')
                      , INDGRP_GB                            , IENT_CARR_R           , GRPCONT_DSC_R         , GRPCONT_DSC_CAR_R           , DSC_INC_R                   , SPCIAL_INC_R
                      , NVL(DSC_INC_R,0)+NVL(SPCIAL_INC_R,0) , SHORT_R               , BNP_CNT               , MUL_ACCI_RATE_CD            , CAR_AMT
                      , CAR_PASS_YEAR                      , CAR_UNIT_AMT            , CAR_ACC_AMT           , NVL(CAR_AMT,0)+NVL(CAR_UNIT_AMT,0)+NVL(CAR_ACC_AMT,0)
                   INTO V_I_KIND_CD                         /* [IN] 보험종목    **************/
                      , V_CAR_KIND_CD                       /* [IN] 차종코드    **************/
                      , V_CAR_TYPE_CD                       /* [IN] 차형태코드-차종세분코드 **/
                      , V_CAR_OLD_R                         /* [IN] 중고차요율  **************/
                      , V_CAR_GAEK                          /* [IN] 차량가액    **************/

                      , V_CAR_UNIT_GAEK                     /* [IN] 기계장치총가액 ***********/
                      , V_CAR_ACC_GAEK                      /* [IN] 부속품총가액   ***********/
                      , V_CAR_Y_TYPE                        /* [IN] 년식     *****************/
                      , V_NA_MTH                            /* [IN] 납입방법 *****************/
                      , V_ISTAR_CONT_DATE                   /* [IN] 보험시기 *****************/

                      , V_IEND_CONT_DATE                    /* [IN] 보험종기 *****************/
                      , V_SPCIAL_INC_APPY                   /* [IN] 특별할증코드 *************/
                      , V_DSC_INC_CD                        /* [IN] 할인할증등급 *************/
                      , V_IENT_CARR_CD                      /* [IN] 가입경력코드 *************/
                      , V_SHORT_DAY_GB                      /* [IN] 단기일할구분 *************/

                      , V_INDGRP_GB                         /* [IN] 개별단체구분 *************/
                      , V_IENT_CARR_R                       /* [IN] 가입경력요율 *************/
                      , V_GRPCONT_DSC_R                     /* [IN] 단체특성범위율(기타)******/
                      , V_GRPCONT_DSC_CAR_R                 /* [IN] 단체특성범위율(자차)******/
                      , V_DSC_INC_R                         /* [IN] 할인할증율   *************/
                      , V_SPCIAL_INC_R                      /* [IN] 특별할증요율 *************/

                      , V_DSC_TOT_R                         /* [IN] 할인할증율+특별할증율 ****/
                      , V_SHORT_R                           /* [IN] 단기요율     *************/
                      , V_BNP_CNT                           /* [IN] 분납횟수     *************/
                      , V_MUL_ACCI_RATE_CD                  /* [IN] 물적사고 할증기준금액코드*/
                      , V_CAR_AMT                           /* [IN] 차량가입금액   ***********/

                      , V_CAR_PASS_YEAR                     /* [IN] 차량 경과년수  ***********/
                      , V_CAR_UNIT_AMT                      /* [IN] 기계장치 가입금액 ********/
                      , V_CAR_ACC_AMT                       /* [IN] 부속품 가입금액   ********/
                      , V_CAR_TOT_AMT                       /* [IN] 차량+기계장치+부품 가입금액 **/
                   FROM TBIB0001
                  WHERE ENT_DGN_NO = I_ENTER_NO;

                  EXCEPTION WHEN OTHERS THEN
                        S_ERR_MSG := 'TBIB0001 SELECT ERROR: '||SQLERRM ;
                        RAISE E_ERR;

            END;

            /*****************************************************************/
            /*** 회차별 분납률 조회                  *************************/
            /*****************************************************************/
            BEGIN
                 SELECT MAX(DVDADD_RATE)
                   INTO V_DVDADD_RATE
                   FROM TBIB0205
                  WHERE I_KIND_CD  = V_I_KIND_CD
                    AND BUNAP_GB   = V_NA_MTH
                    AND DVDPAY_GB  = V_BNP_CNT
                    AND APLY_FYMD <= TO_DATE(V_ISTAR_CONT_DATE)
                    AND APLY_EYMD >= TO_DATE(V_ISTAR_CONT_DATE);

                 EXCEPTION WHEN OTHERS THEN
                        S_ERR_MSG := 'TBIB0205 SELECT ERROR: '||SQLERRM ;
                        RAISE E_ERR;

            END;

           /* 20160328 4월1일 일반로직으로 변경( 로직오류에 따른 수정)*/
           IF '20160331' BETWEEN TO_CHAR(V_ISTAR_CONT_DATE,'YYYYMMDD') AND TO_CHAR(ADD_MONTHS(V_ISTAR_CONT_DATE,12), 'YYYYMMDD') THEN

             PR_INSERT_LOG(L_LOG_DATE,L_LOG_SP_NAME ,L_LOG_NO ,L_LOG_GUBUN,'가입설계','구간설계' );

              IF (TO_DATE(V_IEND_CONT_DATE) - TO_DATE(V_ISTAR_CONT_DATE)) < 365  AND  V_SHORT_DAY_GB = 2 THEN

                IF '20160229' BETWEEN TO_CHAR(V_ISTAR_CONT_DATE,'YYYYMMDD') AND TO_CHAR(V_IEND_CONT_DATE,'YYYYMMDD') THEN

                  PR_INSERT_LOG(L_LOG_DATE,L_LOG_SP_NAME ,L_LOG_NO ,L_LOG_GUBUN,'가입설계_구간1',TO_DATE('20160331', 'YYYYMMDD') - TO_DATE(V_ISTAR_CONT_DATE) );
                  PR_INSERT_LOG(L_LOG_DATE,L_LOG_SP_NAME ,L_LOG_NO ,L_LOG_GUBUN,'가입설계_구간2',366-(TO_DATE('20160331', 'YYYYMMDD') - TO_DATE(V_ISTAR_CONT_DATE)) );

                      BEGIN
   --2017.02.08 담보별단체특성율 GRP_DMBO_RATE 컬럼추가
                        SELECT
                          WM_CONCAT(
                            CASE WHEN B.DMBO_CD IN ('01','02','03','13') THEN
                                ROUND(B.BASIC_PREM*(TO_DATE('20160331', 'YYYYMMDD') - TO_DATE(V_ISTAR_CONT_DATE))/366 +
                                     (SELECT C.BASIC_PREM*(366-(TO_DATE('20160331', 'YYYYMMDD') - TO_DATE(V_ISTAR_CONT_DATE)))/366
                                        FROM TBIB0203 C
                                       WHERE B.DMBO_ENT_AMT_GB = C.DMBO_ENT_AMT_GB
                                         AND B.DMBO_CD = C.DMBO_CD
                                         AND C.I_KIND_CD = V_I_KIND_CD
                                         AND B.CAR_KIND = C.CAR_KIND
                                         AND B.CAR_KIND2 = C.CAR_KIND2
                                         AND C.APLY_FYMD >= TO_DATE(V_ISTAR_CONT_DATE)
                                         AND C.APLY_EYMD >= TO_DATE(V_IEND_CONT_DATE))
                                )
                            ELSE
                              B.BASIC_PREM
                            END   ||'|' || B.NEW_RT ||'|' || B.DMBO_CD ||'|' || '1'  ||'|' || A.GRP_DMBO_RATE
                          )
                          INTO V_0203_INFO
                          FROM TBIB0013 A ,
                               TBIB0203 B
                         WHERE A.ENT_DGN_NO = I_ENTER_NO
                               AND A.INSUR_AMT_GB = B.DMBO_ENT_AMT_GB
                               AND A.DMBO_CD = B.DMBO_CD
                               AND B.I_KIND_CD = V_I_KIND_CD
                               AND B.CO_GB = '0'
                               AND B.CAR_KIND = V_CAR_KIND_CD
                               AND B.CAR_KIND2 = V_CAR_TYPE_CD
                               /*AND A.DMBO_CD = '01'*/
                               AND B.APLY_FYMD <= TO_DATE(V_ISTAR_CONT_DATE) /* 20130422 TO_DATE 처리 최재혁 */
                               AND B.APLY_EYMD >= TO_DATE(V_ISTAR_CONT_DATE) /* 20130422 TO_DATE 처리 최재혁 */
                      ;

                          EXCEPTION WHEN OTHERS THEN
                                  S_ERR_MSG := 'TBIB0013 SELECT ERROR: '||SQLERRM ;
                                  RAISE E_ERR;

                      END;

                  ELSE

                  PR_INSERT_LOG(L_LOG_DATE,L_LOG_SP_NAME ,L_LOG_NO ,L_LOG_GUBUN,'가입설계_구간1',TO_DATE('20160331', 'YYYYMMDD') - TO_DATE(V_ISTAR_CONT_DATE) );
                  PR_INSERT_LOG(L_LOG_DATE,L_LOG_SP_NAME ,L_LOG_NO ,L_LOG_GUBUN,'가입설계_구간2',365-(TO_DATE('20160331', 'YYYYMMDD') - TO_DATE(V_ISTAR_CONT_DATE)) );

                      BEGIN
   --2017.02.08 담보별단체특성율 추가
                        SELECT
                          WM_CONCAT(
                            CASE WHEN B.DMBO_CD IN ('01','02','03','13') THEN
                                ROUND(B.BASIC_PREM*(TO_DATE('20160331', 'YYYYMMDD') - TO_DATE(V_ISTAR_CONT_DATE))/365 +
                                     (SELECT C.BASIC_PREM*(365-(TO_DATE('20160331', 'YYYYMMDD') - TO_DATE(V_ISTAR_CONT_DATE)))/365
                                        FROM TBIB0203 C
                                       WHERE B.DMBO_ENT_AMT_GB = C.DMBO_ENT_AMT_GB
                                         AND B.DMBO_CD = C.DMBO_CD
                                         AND C.I_KIND_CD = V_I_KIND_CD
                                         AND B.CAR_KIND = C.CAR_KIND
                                         AND B.CAR_KIND2 = C.CAR_KIND2
                                         AND C.APLY_FYMD >= TO_DATE(V_ISTAR_CONT_DATE)
                                         AND C.APLY_EYMD >= TO_DATE(V_IEND_CONT_DATE))
                                )
                            ELSE
                              B.BASIC_PREM
                            END   ||'|' || B.NEW_RT ||'|' || B.DMBO_CD ||'|' || '1'  ||'|'|| A.GRP_DMBO_RATE
                          )
                          INTO V_0203_INFO
                          FROM TBIB0013 A ,
                               TBIB0203 B
                         WHERE A.ENT_DGN_NO = I_ENTER_NO
                               AND A.INSUR_AMT_GB = B.DMBO_ENT_AMT_GB
                               AND A.DMBO_CD = B.DMBO_CD
                               AND B.I_KIND_CD = V_I_KIND_CD
                               AND B.CO_GB = '0'
                               AND B.CAR_KIND = V_CAR_KIND_CD
                               AND B.CAR_KIND2 = V_CAR_TYPE_CD
                               /*AND A.DMBO_CD = '01'*/
                               AND B.APLY_FYMD <= TO_DATE(V_ISTAR_CONT_DATE) /* 20130422 TO_DATE 처리 최재혁 */
                               AND B.APLY_EYMD >= TO_DATE(V_ISTAR_CONT_DATE) /* 20130422 TO_DATE 처리 최재혁 */
                      ;

                          EXCEPTION WHEN OTHERS THEN
                                  S_ERR_MSG := 'TBIB0013 SELECT ERROR: '||SQLERRM ;
                                  RAISE E_ERR;

                      END;

                  END IF;

              ELSE

                IF '20160229' BETWEEN TO_CHAR(V_ISTAR_CONT_DATE,'YYYYMMDD') AND TO_CHAR(V_IEND_CONT_DATE,'YYYYMMDD') THEN

                      BEGIN
   --2017.02.08 담보별단체특성율 컬럼추가
                        SELECT
                          WM_CONCAT(
                            CASE WHEN B.DMBO_CD IN ('01','02','03','13') THEN
                                ROUND(B.BASIC_PREM*(TO_DATE('20160331', 'YYYYMMDD') - TO_DATE(V_ISTAR_CONT_DATE))/366 +
                                     (SELECT C.BASIC_PREM*(TO_DATE(V_IEND_CONT_DATE) - TO_DATE('20160331', 'YYYYMMDD'))/366
                                        FROM TBIB0203 C
                                       WHERE B.DMBO_ENT_AMT_GB = C.DMBO_ENT_AMT_GB
                                         AND B.DMBO_CD = C.DMBO_CD
                                         AND C.I_KIND_CD = V_I_KIND_CD
                                         AND B.CAR_KIND = C.CAR_KIND
                                         AND B.CAR_KIND2 = C.CAR_KIND2
                                         AND C.APLY_FYMD >= TO_DATE(V_ISTAR_CONT_DATE)
                                         AND C.APLY_EYMD >= TO_DATE(V_IEND_CONT_DATE))
                                )
                            ELSE
                              B.BASIC_PREM
                            END   ||'|' || B.NEW_RT ||'|' || B.DMBO_CD ||'|' || '1'  ||'|' || A.GRP_DMBO_RATE
                          )
                          INTO V_0203_INFO
                          FROM TBIB0013 A ,
                               TBIB0203 B
                         WHERE A.ENT_DGN_NO = I_ENTER_NO
                               AND A.INSUR_AMT_GB = B.DMBO_ENT_AMT_GB
                               AND A.DMBO_CD = B.DMBO_CD
                               AND B.I_KIND_CD = V_I_KIND_CD
                               AND B.CO_GB = '0'
                               AND B.CAR_KIND = V_CAR_KIND_CD
                               AND B.CAR_KIND2 = V_CAR_TYPE_CD
                               /*AND A.DMBO_CD = '01'*/
                               AND B.APLY_FYMD <= TO_DATE(V_ISTAR_CONT_DATE) /* 20130422 TO_DATE 처리 최재혁 */
                               AND B.APLY_EYMD >= TO_DATE(V_ISTAR_CONT_DATE) /* 20130422 TO_DATE 처리 최재혁 */
                      ;

                          EXCEPTION WHEN OTHERS THEN
                                  S_ERR_MSG := 'TBIB0013 SELECT ERROR: '||SQLERRM ;
                                  RAISE E_ERR;

                      END;

                  ELSE

                      BEGIN
   --2017.02.08 담보별 단체특성율 컬럼추가
                        SELECT
                          WM_CONCAT(
                            CASE WHEN B.DMBO_CD IN ('01','02','03','13') THEN
                                ROUND(B.BASIC_PREM*(TO_DATE('20160331', 'YYYYMMDD') - TO_DATE(V_ISTAR_CONT_DATE))/365 +
                                     (SELECT C.BASIC_PREM*(TO_DATE(V_IEND_CONT_DATE) - TO_DATE('20160331', 'YYYYMMDD'))/365
                                        FROM TBIB0203 C
                                       WHERE B.DMBO_ENT_AMT_GB = C.DMBO_ENT_AMT_GB
                                         AND B.DMBO_CD = C.DMBO_CD
                                         AND C.I_KIND_CD = V_I_KIND_CD
                                         AND B.CAR_KIND = C.CAR_KIND
                                         AND B.CAR_KIND2 = C.CAR_KIND2
                                         AND C.APLY_FYMD >= TO_DATE(V_ISTAR_CONT_DATE)
                                         AND C.APLY_EYMD >= TO_DATE(V_IEND_CONT_DATE))
                                )
                            ELSE
                              B.BASIC_PREM
                            END   ||'|' || B.NEW_RT ||'|' || B.DMBO_CD ||'|' || '1'  ||'|' || A.GRP_DMBO_RATE
                          )
                          INTO V_0203_INFO
                          FROM TBIB0013 A ,
                               TBIB0203 B
                         WHERE A.ENT_DGN_NO = I_ENTER_NO
                               AND A.INSUR_AMT_GB = B.DMBO_ENT_AMT_GB
                               AND A.DMBO_CD = B.DMBO_CD
                               AND B.I_KIND_CD = V_I_KIND_CD
                               AND B.CO_GB = '0'
                               AND B.CAR_KIND = V_CAR_KIND_CD
                               AND B.CAR_KIND2 = V_CAR_TYPE_CD
                               /*AND A.DMBO_CD = '01'*/
                               AND B.APLY_FYMD <= TO_DATE(V_ISTAR_CONT_DATE) /* 20130422 TO_DATE 처리 최재혁 */
                               AND B.APLY_EYMD >= TO_DATE(V_ISTAR_CONT_DATE) /* 20130422 TO_DATE 처리 최재혁 */
                      ;

                          EXCEPTION WHEN OTHERS THEN
                                  S_ERR_MSG := 'TBIB0013 SELECT ERROR: '||SQLERRM ;
                                  RAISE E_ERR;

                      END;

                  END IF;

              END IF;


           ELSE

             PR_INSERT_LOG(L_LOG_DATE,L_LOG_SP_NAME ,L_LOG_NO ,L_LOG_GUBUN,'가입설계','일반설계' );
   --2017.02.08 담보별 단체특성율추가
             BEGIN
                   SELECT WM_CONCAT(B.BASIC_PREM ||'|' ||
                                    B.NEW_RT     ||'|' ||
                                    B.DMBO_CD    ||'|' ||
                                    '1'      ||'|' ||  A.GRP_DMBO_RATE)
                    INTO V_0203_INFO
                    FROM TBIB0013 A
                       , TBIB0203 B
                   WHERE A.ENT_DGN_NO      = I_ENTER_NO
                     AND A.INSUR_AMT_GB    = B.DMBO_ENT_AMT_GB
                     AND A.DMBO_CD         = B.DMBO_CD
                     AND B.I_KIND_CD       = V_I_KIND_CD
                     AND B.CO_GB           = '0'
                     AND B.CAR_KIND        = V_CAR_KIND_CD
                     AND B.CAR_KIND2       = V_CAR_TYPE_CD
                     AND B.APLY_FYMD      <= TO_DATE(V_ISTAR_CONT_DATE)   /* 20130422 TO_DATE 처리 최재혁 */
                     AND B.APLY_EYMD      >= TO_DATE(V_ISTAR_CONT_DATE);  /* 20130422 TO_DATE 처리 최재혁 */

                  EXCEPTION WHEN OTHERS THEN
                          S_ERR_MSG := 'TBIB0013 SELECT ERROR: '||SQLERRM ;
                          RAISE E_ERR;

              END;



            END IF;

            S_IDX1 := LENGTH(V_0203_INFO) - LENGTH(REPLACE(V_0203_INFO,',','')) + 1;
            S_IDX2 :=0;

      /***************************************************************/
      /*                                                             */
      /**** 배서설계 보험료 계산을 위한 DATA SELECT                  */
      /*                                                             */
      /***************************************************************/
      ELSIF I_JOB_GUBUN = '2' AND I_ENTER_NO IS NOT NULL THEN
            /******************************************************************/
            /**LOG START                        *******************************/
            /******************************************************************/
            IF    L_LOG_LEVEL = 1 OR NVL(REGEXP_SUBSTR(L_LOG_STEP,'99'),' ') = '99' THEN
                  PR_INSERT_LOG(L_LOG_DATE,L_LOG_SP_NAME ,L_LOG_NO ,L_LOG_GUBUN,'배서설계','출발 합니다....' );
            END IF;

            DELETE FROM TBID0014 WHERE POL_NO =  I_ENTER_NO AND ENDOR_NO = I_ENDOR_NO ;
            DELETE FROM TBID0015 WHERE POL_NO =  I_ENTER_NO AND ENDOR_NO = I_ENDOR_NO ;
            DELETE FROM TBID0016 WHERE POL_NO =  I_ENTER_NO AND ENDOR_NO = I_ENDOR_NO ;

            /*****************************************************************/
            /*** 특별약관 코드 및 특별요율 코드 조회 *************************/
            /*****************************************************************/
            BEGIN
                 SELECT TO_CHAR(REPLACE(WM_CONCAT(RATE_CD),',','|'))
                   INTO V_0012_INFO
                   FROM TBID0012
                  WHERE POL_NO   = I_ENTER_NO
                    AND ENDOR_NO = I_ENDOR_NO;

                 EXCEPTION WHEN OTHERS THEN
                        S_ERR_MSG := 'TBID0012 SELECT ERROR: '||SQLERRM ;
                        RAISE E_ERR;

            END;

            /*****************************************************************/
            /*** 보험(공제) 설계 기본 정보 조회      *************************/
            /*****************************************************************/
            BEGIN
                 SELECT I_KIND_CD                            , CAR_KIND_CD           , CAR_TYPE_CD           , CAR_OLD_R                   , CAR_GAEK
                      , CAR_UNIT_GAEK                        , CAR_ACC_GAEK          , CAR_Y_TYPE            , NA_MTH                      , ISTAR_CONT_DATE
                      , IEND_CONT_DATE                       , SPCIAL_INC_APPY       , DSC_INC_CD            , IENT_CARR_CD                , NVL(SHORT_DAY_GB, '1')
                      , INDGRP_GB                            , IENT_CARR_R           , GRPCONT_DSC_R         , GRPCONT_DSC_CAR_R           , DSC_INC_R                   , SPCIAL_INC_R
                      , NVL(DSC_INC_R,0)+NVL(SPCIAL_INC_R,0) , SHORT_R               , BNP_CNT               , MUL_ACCI_RATE_CD            , CAR_AMT
                      , CAR_PASS_YEAR                        , CAR_UNIT_AMT          , CAR_ACC_AMT           , NVL(CAR_AMT,0)+NVL(CAR_UNIT_AMT,0)+NVL(CAR_ACC_AMT,0)
                      , BASIS_FROM                           , BASIS_TO              , APPY_FROM             , APPY_TO
                      , USER_ID                              , TREATY_HQ_CD          , TREATY_BRH_CD         , TREATY_CD                   , END_NAB_NO
                      , TRUNC(ALL_CLIAM_DATE)
                  INTO  V_I_KIND_CD                         /* [IN] 보험종목    **************/
                      , V_CAR_KIND_CD                       /* [IN] 차종코드    **************/
                      , V_CAR_TYPE_CD                       /* [IN] 차형태코드-차종세분코드 **/
                      , V_CAR_OLD_R                         /* [IN] 중고차요율  **************/
                      , V_CAR_GAEK                          /* [IN] 차량가액    **************/

                      , V_CAR_UNIT_GAEK                     /* [IN] 기계장치총가액 ***********/
                      , V_CAR_ACC_GAEK                      /* [IN] 부속품총가액   ***********/
                      , V_CAR_Y_TYPE                        /* [IN] 년식     *****************/
                      , V_NA_MTH                            /* [IN] 납입방법 *****************/
                      , V_ISTAR_CONT_DATE                   /* [IN] 보험시기 *****************/

                      , V_IEND_CONT_DATE                    /* [IN] 보험종기 *****************/
                      , V_SPCIAL_INC_APPY                   /* [IN] 특별할증코드 *************/
                      , V_DSC_INC_CD                        /* [IN] 할인할증등급 *************/
                      , V_IENT_CARR_CD                      /* [IN] 가입경력코드 *************/
                      , V_SHORT_DAY_GB                      /* [IN] 단기일할구분 *************/

                      , V_INDGRP_GB                         /* [IN] 개별단체구분 *************/
                      , V_IENT_CARR_R                       /* [IN] 가입경력요율 *************/
                      , V_GRPCONT_DSC_R                     /* [IN] 단체특성범위율(기타)******/
                      , V_GRPCONT_DSC_CAR_R                 /* [IN] 단체특성범위율(자차)******/
                      , V_DSC_INC_R                         /* [IN] 할인할증율   *************/
                      , V_SPCIAL_INC_R                      /* [IN] 특별할증요율 *************/

                      , V_DSC_TOT_R                         /* [IN] 할인할증율+특별할증율 ****/
                      , V_SHORT_R                           /* [IN] 단기요율     *************/
                      , V_BNP_CNT                           /* [IN] 분납횟수     *************/
                      , V_MUL_ACCI_RATE_CD                  /* [IN] 물적사고 할증기준금액코드*/
                      , V_CAR_AMT                           /* [IN] 차량가입금액   ***********/

                      , V_CAR_PASS_YEAR                     /* [IN] 차량 경과년수  ***********/
                      , V_CAR_UNIT_AMT                      /* [IN] 기계장치 가입금액 ********/
                      , V_CAR_ACC_AMT                       /* [IN] 부속품 가입금액   ********/
                      , V_CAR_TOT_AMT                       /* [IN] 차량+기계장치+부품 가입금액 **/

                      , V_BASIS_FROM                        /* [IN] 배서기준 시작일자   **/
                      , V_BASIS_TO                          /* [IN] 배서기준 종료일자   **/
                      , V_APPY_FROM                         /* [IN] 적용기준 시작일자   **/
                      , V_APPY_TO                           /* [IN] 적용기준 종료일자   **/

                      , V_USER_ID
                      , V_TREATY_HQ_CD
                      , V_TREATY_BRH_CD
                      , V_TREATY_CD
                      , V_END_NAB_NO

                      , V_ALL_CLIAM_DATE                    /* [IN] 전손처리일자(차량대체시 전차량종료일자 **/
                  FROM  TBID0001
                 WHERE  POL_NO   = I_ENTER_NO
                   AND  ENDOR_NO = I_ENDOR_NO;

                 EXCEPTION WHEN OTHERS THEN
                        S_ERR_MSG := 'TBID0001 SELECT ERROR: '||SQLERRM ;
                        RAISE E_ERR;
            END;

            BEGIN
                 /****************************/
                 /* 회차별 분납률 조회       */
                 /****************************/
                 SELECT  MAX(DVDADD_RATE)
                   INTO  V_DVDADD_RATE
                   FROM  TBIB0205
                  WHERE  I_KIND_CD  = V_I_KIND_CD
                    AND  BUNAP_GB   = V_NA_MTH
                    AND  DVDPAY_GB  = V_BNP_CNT
                    AND  APLY_FYMD <= TO_DATE(V_ISTAR_CONT_DATE)
                    AND  APLY_EYMD >= TO_DATE(V_ISTAR_CONT_DATE);


                 /****************************/
                 /* 분납회차 MAX SEQ         */
                 /****************************/
                 SELECT  NVL(MAX(SEQ_NO),0) + 1
                   INTO  V_BEF_15_SEQ_NO
                   FROM  TBID0015
                  WHERE  POL_NO   = I_ENTER_NO
                    AND  ENDOR_NO = I_ENDOR_NO -1;

                 /*******************************************************************************/
                 /* 기준일 제외 MAX ENDOR_NO                                                    */
                 /* 기준일 제외했다가 그냥 바로 직전 배서와 비교하도록 변경. 2013.06.03 JHCHOI  */
                 /*******************************************************************************/
                 SELECT  NVL(MAX(ENDOR_NO),0)
                   INTO  V_ENDOR_NO_BEF_MAX
                   FROM  TBID0001
                  WHERE  POL_NO         = I_ENTER_NO
                    AND  ENDOR_NO       < I_ENDOR_NO
                    AND  ENDOR_STATUS   = '3';
                /*
                 SELECT  NVL(MAX(ENDOR_NO),0)
                   INTO  V_ENDOR_NO_BEF_MAX
                   FROM  TBID0001
                  WHERE  POL_NO         = I_ENTER_NO
                    AND  ENDOR_NO       < I_ENDOR_NO
                    AND  ((BASIS_FROM   < V_BASIS_FROM)  OR (BASIS_FROM  = V_BASIS_FROM AND ENDOR_NO = 0))
                    AND  ENDOR_STATUS   = '3';         */

                 /*******************************************************************************/
                 /* 기준일 제외 MAX ENDOR_NO                                                    */
                 /* 기준일 제외했다가 그냥 바로 직전 배서와 비교하도록 변경. 2013.06.03 JHCHOI  */
                 /*******************************************************************************/
                 SELECT NVL(COUNT(*), 0)
                   INTO V_DAY_ENDOR_CNT
                   FROM TBID0001
                  WHERE POL_NO     = I_ENTER_NO
                    AND ENDOR_NO   < I_ENDOR_NO
                    AND BASIS_FROM = TO_DATE(TO_CHAR(V_BASIS_FROM, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');

                 EXCEPTION WHEN OTHERS THEN
                        S_ERR_MSG := 'TBIB0205 OR TBID0015 OR TBID0001 SELECT ERROR: '||SQLERRM ;
                        RAISE E_ERR;

            END;


            BEGIN
                 /****************************/
                 /* 배서코드를 검색한다.     */
                 /****************************/
                 SELECT ENDOR_CD
                   INTO V_ENDOR_CD
                   FROM TBIC0203
                  WHERE POL_NO   = I_ENTER_NO
                    AND ENDOR_NO = I_ENDOR_NO
                  GROUP BY ENDOR_CD;

                 EXCEPTION WHEN NO_DATA_FOUND THEN
                      V_ENDOR_CD := '000';
            END;


            /*IF '20160401' BETWEEN TO_CHAR(V_ISTAR_CONT_DATE,'YYYYMMDD') AND TO_CHAR(V_IEND_CONT_DATE,'YYYYMMDD') THEN*/
            /*IF '20160401' BETWEEN TO_CHAR(V_ISTAR_CONT_DATE,'YYYYMMDD') AND TO_CHAR(ADD_MONTHS(V_ISTAR_CONT_DATE,12), 'YYYYMMDD') THEN*/
            /* 20160328 4월1일 일반로직으로 변경( 로직오류에 따른 수정)*/
            IF '20160331' BETWEEN TO_CHAR(V_ISTAR_CONT_DATE,'YYYYMMDD') AND TO_CHAR(ADD_MONTHS(V_ISTAR_CONT_DATE,12), 'YYYYMMDD') THEN

              IF (TO_DATE(V_IEND_CONT_DATE) - TO_DATE(V_ISTAR_CONT_DATE)) < 365 AND  V_SHORT_DAY_GB = 2 THEN

                PR_INSERT_LOG(L_LOG_DATE,L_LOG_SP_NAME ,L_LOG_NO ,L_LOG_GUBUN,'배서설계','단기 구간' );

                  IF '20160229' BETWEEN TO_CHAR(V_ISTAR_CONT_DATE,'YYYYMMDD') AND TO_CHAR(V_IEND_CONT_DATE,'YYYYMMDD') THEN

                      BEGIN
   --2017.02.08 담보별 단체특성율추가
                          SELECT
                                WM_CONCAT(
                                  CASE WHEN B.DMBO_CD IN ('01','02','03','13') THEN
                                      ROUND(B.BASIC_PREM*(TO_DATE('20160331', 'YYYYMMDD') - TO_DATE(V_ISTAR_CONT_DATE))/366 +
                                           (SELECT C.BASIC_PREM*(366-(TO_DATE('20160331', 'YYYYMMDD') - TO_DATE(V_ISTAR_CONT_DATE)))/366
                                              FROM TBIB0203 C
                                             WHERE B.DMBO_ENT_AMT_GB = C.DMBO_ENT_AMT_GB
                                               AND B.DMBO_CD = C.DMBO_CD
                                               AND C.I_KIND_CD = V_I_KIND_CD
                                               AND B.CAR_KIND = C.CAR_KIND
                                               AND B.CAR_KIND2 = C.CAR_KIND2
                                               AND C.APLY_FYMD >= TO_DATE(V_ISTAR_CONT_DATE)
                                               AND C.APLY_EYMD >= TO_DATE(V_IEND_CONT_DATE)
      AND C.APLY_FYMD < TO_DATE('20170301'))
                                      )
                                  ELSE
                                    B.BASIC_PREM
                                  END   ||'|' || B.NEW_RT ||'|' || B.DMBO_CD ||'|' || NVL(A.CANCEL_CALC_GB, '1')  ||'|' || A.GRP_DMBO_RATE
                                )
                                INTO V_0203_INFO
                                FROM TBID0013 A ,
                                      ,V_DAY_ENDOR_CNT    ,V_SHORT_DAY_GB        ,s_basic_year_prem               ,s_appy_year_prem           ,i_work_date
                                      ,r_return );

            END IF;

            r_return_ok       := regexp_substr(r_return,'[^|]+',1,1);

            if  r_return_ok = 'OK' then
                s_dmbo_basic_prem := s_dmbo_basic_prem + to_number(regexp_substr(r_return_ok,'[^|]+',1,2));
                s_dmbo_appy_prem  := s_dmbo_appy_prem  + to_number(regexp_substr(r_return_ok,'[^|]+',1,3));
            end if;

            s_tot_appy_prem  := s_tot_appy_prem + s_dmbo_appy_prem;

        end if;
    /********************************************************************************/
    /* Loop End    ******************************************************************/
    /********************************************************************************/
    end loop;

    if  i_job_gubun = '2' then
        /***************************************************************************************************************************/
        /* 99. 담보별보험료(TBID0013), 담보기간별보험료(TBID0014), 담보별분납계획(TBID0015) 해지후 배서시 데이터 누락되지 않도록   */
        /***************************************************************************************************************************/
        PR_RENT_C_ENDOR_BUNAP_TERM(i_enter_no       ,i_endor_no        ,V_ENDOR_NO_BEF_MAX        ,V_USER_ID
                                  ,V_TREATY_HQ_CD   ,V_TREATY_BRH_CD   ,V_TREATY_CD               ,V_END_NAB_NO
                                  ,V_BEF_15_SEQ_NO  ,i_work_date);

        PR_RENT_C_ENDOR_BUNAP_TOT_RATE(i_enter_no      ,i_endor_no        ,V_ENDOR_NO_BEF_MAX     ,V_I_KIND_CD      ,'0'
                                      ,V_BNP_CNT       ,V_USER_ID         ,V_TREATY_HQ_CD         ,V_TREATY_BRH_CD  ,V_TREATY_CD
                                      ,V_ENDOR_CD      ,V_END_NAB_NO      ,V_BEF_15_SEQ_NO        ,i_work_date);

        begin
            select sum(decode(ENDOR_NO, i_endor_no         ,APPY_PREM, 0))   as APPY_PREM_AFT
                 , sum(decode(ENDOR_NO, V_ENDOR_NO_BEF_MAX ,APPY_PREM, 0))   as APPY_PREM_BEF
                 , sum(decode(ENDOR_NO, i_endor_no         ,APPY_PREM, 0)) - sum(decode(ENDOR_NO, V_ENDOR_NO_BEF_MAX, APPY_PREM, 0)) as DIFF_AMT
              into V_APPY_PREM_AFT, V_APPY_PREM_BEF, V_DIFF_AMT
              from TBID0013T
             where POL_NO    = i_enter_no
               and ENDOR_NO  between V_ENDOR_NO_BEF_MAX and i_endor_no
               and WORK_DATE = to_date(i_work_date, 'YYYYMMDD');

            update TBIC0202T
               set ENDOR_BEFORE_PREM = nvl(V_APPY_PREM_BEF, 0)
                 , ENDOR_AFTER_PREM  = nvl(V_APPY_PREM_AFT, 0)
                 , PREM_DIFF_AMT     = nvl(V_DIFF_AMT,0)
                 , GET_GB            = decode(sign(V_DIFF_AMT), -1, '4', 0, '9', '3')
             where POL_NO    = i_enter_no
               and ENDOR_NO  = i_endor_no
               and WORK_DATE = to_date(i_work_date, 'YYYYMMDD');

            exception when others then
                s_err_msg := 'TBIC0202T UPDATE ERROR: '||sqlerrm ;
                raise e_err;
        end;

        begin
            update TBID0001T A
               set APPY_SUM_PREM = ( select sum(APPY_PREM)
                                       from TBID0014T
                                      where POL_NO = i_enter_no
                                        and ENDOR_NO = i_endor_no
                                        and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                                        and DMBO_CD not in ( '21', '22', '23') ) ,
                   RIDER_PREM    = ( select sum(APPY_PREM)
                                       from TBID0014T
                                      where POL_NO = i_enter_no
                                        and ENDOR_NO = i_endor_no
                                        and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
                                        and DMBO_CD     in ( '21', '22', '23') ) ,
                   SUM_PREM      = ( select sum(APPY_PREM)
                                       from TBID0014T
                                      where POL_NO = i_enter_no
                                        and ENDOR_NO = i_endor_no
                                        and WORK_DATE = to_date(i_work_date, 'YYYYMMDD') )
             where POL_NO        = i_enter_no
               and ENDOR_NO      = i_endor_no
               and WORK_DATE     = to_date(i_work_date, 'YYYYMMDD');

            exception when others then
                s_err_msg := 'TBID0001T UPDATE ERROR: '||sqlerrm ;
                raise e_err;
        end;

        V_CHANGE_OK := 'OK';

        o_return := V_CHANGE_OK;

    end if;

    /***************************************************************************************/
    /**99. Last Log Table                     **********************************************/
    /***************************************************************************************/
    if  l_log_level = 1 or nvl(regexp_substr(l_log_step,'99'),' ') = '99' then
        PR_INSERT_LOG(l_log_date,l_log_sp_name ,l_log_no ,l_log_gubun,'End','Good By ~~~~~~~~' );
    end if;

    exception
        when e_err then
            o_return := s_err_msg;
            raise_application_error(-20010, 'pr_rent_c_amt Main Error: '||sqlerrm);
        when others then
            dbms_output.put_line('pr_rent_amt Main Error: '||sqlerrm);
            raise_application_error(-20010, 'pr_rent_c_amt Main Error: '||sqlerrm);
            o_return := sqlerrm;
end;
CREATE OR replace
PROCEDURE          KRMA_APP.PR_RENT_C_AMT( i_job_gubun in varchar2, i_enter_no in varchar2 ,i_endor_no in number, i_work_date in varchar2, o_return out varchar2) as

/***************************************************************************************************/
/* Procedure Name :  PR_RENT_C_AMT                                                                 */
/* Function       :  소급배서 보험료 계산. 20130627 최재혁                                         */
/* Parameter      :  i_job_gubun       [ IN] 작업구분(1: 가입설계 2: 배서)                         */
/*                   i_enter_no        [ IN] 설계번호 또는 계약번호                                */
/*                   i_endor_no        [ IN] 배서번호                                              */
/*                   i_work_date       [ IN] 소급배서일                                            */
/***************************************************************************************************/
    /******************************************************************************************/
    /**** TBIB0001[설계 Maseter-계약조건*******************************************************/
    /******************************************************************************************/
    V_I_KIND_CD                         TBIB0001.I_KIND_CD%TYPE;                 /*[IN] 보험종목*/
    V_NA_MTH                            TBIB0001.NA_MTH%TYPE;                    /*[IN] 납입방법*/
    V_ISTAR_CONT_DATE                   TBIB0001.ISTAR_CONT_DATE%TYPE;           /*[IN] 보험시기     (보험료 계산 기준 일자)*/
    V_IEND_CONT_DATE                    TBIB0001.IEND_CONT_DATE%TYPE;            /*[IN] 보험종기     (보험료 계산 종료 일자 )*/
    V_SPCIAL_INC_APPY                   TBIB0001.SPCIAL_INC_APPY%TYPE;           /*[IN] 특별할증코드*/
    V_DSC_INC_CD                        TBIB0001.DSC_INC_CD%TYPE;                /*[IN] 할인할증등급*/
    V_IENT_CARR_CD                      TBIB0001.IENT_CARR_CD%TYPE;              /*[IN] 가입경력코드*/
    V_SHORT_DAY_GB                      TBIB0001.SHORT_DAY_GB%TYPE;              /*[IN] 단기일할구분 (보험료계산시 일할 :1,단기 :2 구분으로 사용함)*/
    V_INDGRP_GB                         TBIB0001.INDGRP_GB%TYPE;                 /*[IN] 개별단체구분 (개별 1: 단체 :  2)*/
    V_IENT_CARR_R                       TBIB0001.IENT_CARR_R%TYPE := 0.0;        /*[IN] 가입경력요율*/
    V_GRPCONT_DSC_R                     TBIB0001.GRPCONT_DSC_R%TYPE := 0.0;      /*[IN] 단체특성범위율(기타)*/
    V_GRPCONT_DSC_CAR_R                 TBIB0001.GRPCONT_DSC_CAR_R%TYPE := 0.0;  /*[IN] 단체특성범위율(자차)*/
    V_DSC_INC_R                         TBIB0001.DSC_INC_R%TYPE := 0.0;          /*[IN] 할인할증율*/
    V_SPCIAL_INC_R                      TBIB0001.SPCIAL_INC_R%TYPE := 0.0;       /*[IN] 특별할증요율*/
    V_DSC_TOT_R                         TBIB0001.SPCIAL_INC_R%TYPE := 0.0;       /*[IN] 할인할증율 + 특별할증율*/
    V_SHORT_R                           TBIB0001.SHORT_R%TYPE := 0.0;            /*[OUT]단기요율      (일할 단기 구분에서 단기일때 단기요율 적용한다)*/
    V_BNP_CNT                           TBIB0001.BNP_CNT%TYPE;                   /*[IN] 납입횟차*/
    V_MUL_ACCI_RATE_CD                  TBIB0001.MUL_ACCI_RATE_CD%TYPE;          /*[IN] 물적사고 할증기준금액코드*/
    V_CAR_KIND_CD                       TBIB0001.CAR_KIND_CD%TYPE;               /*[IN] 차종코드*/
    V_CAR_TYPE_CD                       TBIB0001.CAR_TYPE_CD%TYPE;               /*[IN] 차형태코드-차종세분코드*/
    V_CAR_OLD_R                         TBIB0001.CAR_OLD_R%TYPE := 0.0;          /*[IN] 중고차요율*/
    V_CAR_GAEK                          TBIB0001.CAR_GAEK%TYPE := 0;             /*[IN] 차량가액*/
    V_CAR_UNIT_GAEK                     TBIB0001.CAR_UNIT_GAEK%TYPE := 0;        /*[IN] 기계장치총가액*/
    V_CAR_ACC_GAEK                      TBIB0001.CAR_ACC_GAEK%TYPE := 0;         /*[IN] 부속품총가액*/
    V_CAR_Y_TYPE                        TBIB0001.CAR_Y_TYPE%TYPE;                /*[IN] 년식*/
    V_CAR_AMT                           TBIB0001.CAR_AMT%TYPE;                   /*[IN] 차량가입금액*/
    V_CAR_PASS_YEAR                     TBIB0001.CAR_PASS_YEAR%TYPE;             /*[IN] 차량 경과년수*/
    V_CAR_UNIT_AMT                      TBIB0001.CAR_UNIT_AMT%TYPE;              /*[IN] 기계장치 가입금액*/
    V_CAR_ACC_AMT                       TBIB0001.CAR_ACC_AMT%TYPE;               /*[IN] 부속품 가입금액*/
    V_CAR_TOT_AMT                       TBIB0001.CAR_AMT%TYPE;                   /*[IN] 차량총가입 금액*/

    V_APPY_FROM                         TBID0001.APPY_FROM%TYPE;                 /*[IN] 적용기준시작일자*/
    V_APPY_TO                           TBID0001.APPY_TO%TYPE;                   /*[IN] 적용기준종료일자*/
    V_BASIS_FROM                        TBID0001.BASIS_FROM%TYPE;                /*[IN] 배서기준시작일자*/
    V_BASIS_TO                          TBID0001.BASIS_TO%TYPE;                  /*[IN] 배서기준종료일자*/
    V_ENDOR_NO_BEF_MAX                  TBID0001.ENDOR_NO%TYPE;                  /*[IN] 기준일 이전의  배서중 배서기준일 중 가장 가장큰 ENDOR_NO*/
    V_ALL_CLIAM_DATE                    TBID0001.ALL_CLIAM_DATE%TYPE;            /*[IN] 차량대체시 전차량 종료일자*/
    V_COR_ENDOR_NO                      TBID0001T.COR_ENDOR_NO%TYPE;             /*[IN] 소급배서기준배서번호*/
    V_MAX_ENDOR_NO                      TBID0001T.MAX_ENDOR_NO%TYPE;             /*[IN] 배서-최종배서번호*/

    V_USER_ID                           TBID0001.USER_ID%TYPE;
    V_TREATY_HQ_CD                      TBID0001.TREATY_HQ_CD%TYPE;
    V_TREATY_BRH_CD                     TBID0001.TREATY_BRH_CD%TYPE;
    V_TREATY_CD                         TBID0001.TREATY_CD%TYPE;
    V_END_NAB_NO                        TBID0001.END_NAB_NO%TYPE;
    V_ENDOR_CD                          TBIC0203.ENDOR_CD%TYPE;                  /*배서코드*/

    V_APPY_PREM_AFT                     number;
    V_APPY_PREM_BEF                     number;
    V_DIFF_AMT                          number;
    /******************************************************************************************/
    /*** TBIB0205 [가입설계-분납율기준]******************************************************/
    /******************************************************************************************/
    V_DVDADD_RATE                       TBIB0205.DVDADD_RATE%TYPE;               /*[IN] 분납율*/
    V_0012_INFO                         varchar2(300);
    V_CHANGE_OK                         varchar2(20);
    V_BEF_15_SEQ_NO                     number;
    V_DAY_ENDOR_CNT                     number;

    /******************************************************************************************/
    /*** 년간보험료  변수******************************************************************/
    /******************************************************************************************/
    s_basic_year_prem                  number(13);
    s_appy_year_prem                   number(13);
    /******************************************************************************************/
    /*** 적용보험료 계산 변수******************************************************************/
    /******************************************************************************************/
    s_dmbo_appy_prem                    number := 0 ;                            /*[OUT] [적용보험료]*/

    /******************************************************************************************/
    /*** 기본보험료 계산 변수******************************************************************/
    /******************************************************************************************/
    s_dmbo_basic_prem                   number := 0 ;                            /*[OUT] [기본보험료]*/
    s_dmbo_new_rt                       number := 0 ;                            /*[OUT] [기본보험료] 자동차요율*/

    /******************************************************************************************/
    /*** 보험료 계산 관련 내부 처리 Logic 변수*************************************************/
    /******************************************************************************************/
    s_tot_appy_prem                     number := 0;                             /* 총보험료*/

    /***특별요율 변수 *******/
    s_special_rate                      number := 100;                           /* [특별요율]*/
    s_treat_rate                        number := 1.0;

    /***계약년수 계산 *******/
    s_cont_yy                           number;                                  /*계약년수*/
    s_cont_mm                           number;                                  /*계약월수*/
    s_cont_dd                           number;                                  /*계약일수*/

    s_gijun_from                        date;
    s_gijun_to                          date;
    r_return                            varchar2(100);
    r_return_ok                         varchar2(50);
    /***Function 호출 Return 값*******/
    f_fn_rent_mul_acci_rate             number;                                  /*fn_rent_mul_acci_rate 함수 수행 결과값(*/
    f_fn_rent_old_car_rate              number;                                  /*fn_rent_old_car_rate  함수 수행 결과값(중고차 요율 )*/
    f_fn_rent_part_car_amt              number;                                  /*fn_rent_part_car_amt  함수 수행 결과값(부속품)*/
    f_fn_rent_vip_car_rate              number;                                  /*fn_rent_vip_car_rate  함수 수행 결과값(고과차량)*/
    f_fn_rent_short_rate                number;                                  /*fn_rent_short_rate    함수 수행 결과값(단기요율)*/
    /***************************************************************/
    /*** lOG 변수 *************************************************/
    /***************************************************************/
    l_log_level                         number := 0;                             /*로그레벨[0~1]: 0->l_log_step에 정의된 항목과 찍는다..  1->모두찍는다.)*/
    l_log_sp_name                       varchar2(50)  := 'PR_RENT_AMT' ;         /*로그 Stored Procedure Name*/
    l_log_no                            varchar2(20);
    l_log_gubun                         varchar2(20);
    l_log_data                          varchar2(4000);
    l_log_date                          varchar2(16)  := to_char(sysdate,'yyyymmddhh24miss');
    l_log_step                          varchar2(100) :='01 02 03 13 04 05 06 07 21 22 23 99';   /*'01 02 03 13 04 05 06 07 21 22 23 99'*/

    /***************************************************************/
    /*** Cursor를 사용하지 않고 Loop를 하기 위해 추가 변수 정의 ****/
    /***************************************************************/
    V_0203_INFO                         varchar2(1000);
    s_0203_sub                          varchar2(100);  /*처리할 담보코드 정보(컬럼|컬럼|컬럼,컬럼|컬럼|컬럼,...)*/

    s_0203_basic_prem                   number;         /*기본보험료*/
    s_0203_new_rt                       number;         /*신차특성율*/
    s_0203_dmbo_cd                      varchar2(100);  /*담보코드*/
    s_0203_dmbo_rate                      varchar2(100);  /*2017.02.08 담보별단체특성율*/
    s_0203_calc_gb                      varchar2(2);    /*계산방법(1:일할, 2:단기, 3:단기자차)*/

    s_idx1                              number;         /*로우인덱스수*/
    s_idx2                              number;         /*컬럼인덱스수*/

    /************************************************/
    /*** 공제시기, 공제종기에 시분초 제거한 변수 ****/
    /************************************************/
    s_istar_cont_date                   date;
    s_iend_cont_date                    date;

    e_err                               exception;
    s_err_msg                           varchar2(5000);

begin

    o_return := 'NOT_OK';

    if  i_job_gubun = '2' then
        l_log_sp_name := l_log_sp_name || '[배서]' ;
        l_log_gubun   := '배서설계';
        l_log_no      := i_enter_no    ||'-' || i_endor_no;
    end if;

    /***************************************************************/
    /*                                                             */
    /**** 배서설계 보험료 계산을 위한 Data Select                  */
    /*                                                             */
    /***************************************************************/
    if i_job_gubun = '2' and i_enter_no is not null then
        /******************************************************************/
        /**Log Start                        *******************************/
        /******************************************************************/
        if  l_log_level = 1 or nvl(regexp_substr(l_log_step,'99'),' ') = '99' then
            PR_INSERT_LOG(l_log_date,l_log_sp_name ,l_log_no ,l_log_gubun,'배서설계','출발 합니다....' );
        end if;

        delete from TBID0014T where POL_NO = i_enter_no and ENDOR_NO = i_endor_no and WORK_DATE = to_date(i_work_date, 'YYYYMMDD');
        delete from TBID0015T where POL_NO = i_enter_no and ENDOR_NO = i_endor_no and WORK_DATE = to_date(i_work_date, 'YYYYMMDD');
        delete from TBID0016T where POL_NO = i_enter_no and ENDOR_NO = i_endor_no and WORK_DATE = to_date(i_work_date, 'YYYYMMDD');

        /*****************************************************************/
        /*** 특별약관 코드 및 특별요율 코드 조회 *************************/
        /*****************************************************************/
        begin
            select to_char(replace(WM_CONCAT(RATE_CD),',','|'))
              into V_0012_INFO
              from TBID0012T
             where POL_NO    = i_enter_no
               and ENDOR_NO  = i_endor_no
               and WORK_DATE = to_date(i_work_date, 'YYYYMMDD');

            exception when others then
                s_err_msg := 'TBID0012T SELECT ERROR: '||sqlerrm ;
                raise e_err;
        end;

        /*****************************************************************/
        /*** 보험(공제) 설계 기본 정보 조회      *************************/
        /*****************************************************************/
        begin
            select I_KIND_CD                            , CAR_KIND_CD           , CAR_TYPE_CD           , CAR_OLD_R                   , CAR_GAEK
                 , CAR_UNIT_GAEK                        , CAR_ACC_GAEK          , CAR_Y_TYPE            , NA_MTH                      , ISTAR_CONT_DATE
                 , IEND_CONT_DATE                       , SPCIAL_INC_APPY       , DSC_INC_CD            , IENT_CARR_CD                , nvl(SHORT_DAY_GB, '1')
                 , INDGRP_GB                            , IENT_CARR_R           , GRPCONT_DSC_R         , GRPCONT_DSC_CAR_R           , DSC_INC_R                   , SPCIAL_INC_R
                 , nvl(DSC_INC_R,0)+nvl(SPCIAL_INC_R,0) , SHORT_R               , BNP_CNT               , MUL_ACCI_RATE_CD            , CAR_AMT
                 , CAR_PASS_YEAR                        , CAR_UNIT_AMT          , CAR_ACC_AMT           , nvl(CAR_AMT,0)+nvl(CAR_UNIT_AMT,0)+nvl(CAR_ACC_AMT,0)
                 , BASIS_FROM                           , BASIS_TO              , APPY_FROM             , APPY_TO
                 , USER_ID                              , TREATY_HQ_CD          , TREATY_BRH_CD         , TREATY_CD                   , END_NAB_NO
                 , trunc(ALL_CLIAM_DATE)                , COR_ENDOR_NO          , MAX_ENDOR_NO
             into  V_I_KIND_CD                         /* [IN] 보험종목    **************/
                 , V_CAR_KIND_CD                       /* [IN] 차종코드    **************/
                 , V_CAR_TYPE_CD                       /* [IN] 차형태코드-차종세분코드 **/
                 , V_CAR_OLD_R                         /* [IN] 중고차요율  **************/
                 , V_CAR_GAEK                          /* [IN] 차량가액    **************/

                 , V_CAR_UNIT_GAEK                     /* [IN] 기계장치총가액 ***********/
                 , V_CAR_ACC_GAEK                      /* [IN] 부속품총가액   ***********/
                 , V_CAR_Y_TYPE                        /* [IN] 년식     *****************/
                 , V_NA_MTH                            /* [IN] 납입방법 *****************/
                 , V_ISTAR_CONT_DATE                   /* [IN] 보험시기 *****************/

                 , V_IEND_CONT_DATE                    /* [IN] 보험종기 *****************/
                 , V_SPCIAL_INC_APPY                   /* [IN] 특별할증코드 *************/
                 , V_DSC_INC_CD                        /* [IN] 할인할증등급 *************/
                 , V_IENT_CARR_CD                      /* [IN] 가입경력코드 *************/
                 , V_SHORT_DAY_GB                      /* [IN] 단기일할구분 *************/

                 , V_INDGRP_GB                         /* [IN] 개별단체구분 *************/
                 , V_IENT_CARR_R                       /* [IN] 가입경력요율 *************/
                 , V_GRPCONT_DSC_R                     /* [IN] 단체특성범위율(기타)******/
                 , V_GRPCONT_DSC_CAR_R                 /* [IN] 단체특성범위율(자차)******/
                 , V_DSC_INC_R                         /* [IN] 할인할증율   *************/
                 , V_SPCIAL_INC_R                      /* [IN] 특별할증요율 *************/

                 , V_DSC_TOT_R                         /* [IN] 할인할증율+특별할증율 ****/
                 , V_SHORT_R                           /* [IN] 단기요율     *************/
                 , V_BNP_CNT                           /* [IN] 분납횟수     *************/
                 , V_MUL_ACCI_RATE_CD                  /* [IN] 물적사고 할증기준금액코드*/
                 , V_CAR_AMT                           /* [IN] 차량가입금액   ***********/

                 , V_CAR_PASS_YEAR                     /* [IN] 차량 경과년수  ***********/
                 , V_CAR_UNIT_AMT                      /* [IN] 기계장치 가입금액 ********/
                 , V_CAR_ACC_AMT                       /* [IN] 부속품 가입금액   ********/
                 , V_CAR_TOT_AMT                       /* [IN] 차량+기계장치+부품 가입금액 **/

                 , V_BASIS_FROM                        /* [IN] 배서기준 시작일자   **/
                 , V_BASIS_TO                          /* [IN] 배서기준 종료일자   **/
                 , V_APPY_FROM                         /* [IN] 적용기준 시작일자   **/
                 , V_APPY_TO                           /* [IN] 적용기준 종료일자   **/

                 , V_USER_ID
                 , V_TREATY_HQ_CD
                 , V_TREATY_BRH_CD
                 , V_TREATY_CD
                 , V_END_NAB_NO

                 , V_ALL_CLIAM_DATE                    /* [IN] 전손처리일자(차량대체시 전차량종료일자 **/
                 , V_COR_ENDOR_NO                      /* [IN] 소급배서기준배서번호                    */
                 , V_MAX_ENDOR_NO                      /* [IN] 배서-최종배서번호                       */
             from  TBID0001T
            where  POL_NO    = i_enter_no
              and  ENDOR_NO  = i_endor_no
              and  WORK_DATE = to_date(i_work_date, 'YYYYMMDD');

            exception when others then
                s_err_msg := 'TBID0001T SELECT ERROR: '||sqlerrm ;
                raise e_err;
        end;

        begin
            /****************************/
            /* 회차별 분납률 조회       */
            /****************************/
            select  MAX(DVDADD_RATE)
              into  V_DVDADD_RATE
              from  TBIB0205
             where  I_KIND_CD  = V_I_KIND_CD
               and  BUNAP_GB   = V_NA_MTH
               and  DVDPAY_GB  = V_BNP_CNT
               and  APLY_FYMD <= to_date(V_ISTAR_CONT_DATE)
               and  APLY_EYMD >= to_date(V_ISTAR_CONT_DATE);

            /*******************************************************************************/
            /* 기준일 제외 Max Endor_no                                                    */
            /* 기준일 제외했다가 그냥 바로 직전 배서와 비교하도록 변경. 2013.06.03 JHCHOI  */
            /*******************************************************************************/
            select  nvl(max(ENDOR_NO),0)
              into  V_ENDOR_NO_BEF_MAX
              from  TBID0001T
             where  POL_NO         = i_enter_no
               and  ENDOR_NO       < i_endor_no
               and  WORK_DATE      = to_date(i_work_date, 'YYYYMMDD')
               and  ENDOR_STATUS   = '3';

            /****************************/
            /* 분납회차 Max Seq         */
            /****************************/
            select  nvl(max(SEQ_NO),0) + 1
              into  V_BEF_15_SEQ_NO
              from  TBID0015T
             where  POL_NO   = i_enter_no
               and  ENDOR_NO = V_ENDOR_NO_BEF_MAX
               and  WORK_DATE = to_date(i_work_date, 'YYYYMMDD');

            /*******************************************************************************/
            /* 기준일 제외 Max Endor_no                                                    */
            /* 기준일 제외했다가 그냥 바로 직전 배서와 비교하도록 변경. 2013.06.03 JHCHOI  */
            /*******************************************************************************/
            select nvl(count(*), 0)
              into V_DAY_ENDOR_CNT
              from TBID0001T
             where POL_NO     = i_enter_no
               and ENDOR_NO   < i_endor_no
               and WORK_DATE  = to_date(i_work_date, 'YYYYMMDD')
               and BASIS_FROM = to_date(to_char(V_BASIS_FROM, 'YYYYMMDD')||'235959', 'YYYYMMDDHH24MISS');

            exception when others then
                s_err_msg := 'TBIB0205 OR TBID0015T OR TBID0001T SELECT ERROR: '||sqlerrm ;
                raise e_err;
        end;

        begin
            /****************************/
            /* 배서코드를 검색한다.     */
            /****************************/
            select ENDOR_CD
              into V_ENDOR_CD
              from TBIC0203T
             where POL_NO    = i_enter_no
               and ENDOR_NO  = i_endor_no
               and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
             group by ENDOR_CD;

            exception when no_data_found then
                V_ENDOR_CD := '000';
        end;

     /*if '20160401' BETWEEN TO_CHAR(V_ISTAR_CONT_DATE,'YYYYMMDD') AND TO_CHAR(V_IEND_CONT_DATE,'YYYYMMDD') THEN*/
         if '20160331' BETWEEN TO_CHAR(V_ISTAR_CONT_DATE,'YYYYMMDD') AND ADD_MONTHS(V_ISTAR_CONT_DATE,12) THEN


            IF (to_date(V_IEND_CONT_DATE) - to_date(V_ISTAR_CONT_DATE)) < 365 THEN

                  if '20160229' BETWEEN TO_CHAR(V_ISTAR_CONT_DATE,'YYYYMMDD') AND TO_CHAR(V_IEND_CONT_DATE,'YYYYMMDD') then

                      BEGIN
   --2017.02.08 담보별 단체특성율
                          SELECT
                                wm_concat(
                                  CASE WHEN B.DMBO_CD IN ('01','02','03','13') THEN
                                      ROUND(B.BASIC_PREM*(TO_DATE('20160331') - to_date(V_ISTAR_CONT_DATE))/366 +
                                           (SELECT C.BASIC_PREM*(366-(TO_DATE('20160331') - to_date(V_ISTAR_CONT_DATE)))/366
                                              FROM TBIB0203 C
                                             WHERE B.DMBO_ENT_AMT_GB = C.DMBO_ENT_AMT_GB
                                               AND B.DMBO_CD = C.DMBO_CD
                                               AND C.I_KIND_CD = V_I_KIND_CD
                                               AND B.CAR_KIND = C.CAR_KIND
                                               AND B.CAR_KIND2 = C.CAR_KIND2
                                               AND C.APLY_FYMD >= TO_DATE(V_ISTAR_CONT_DATE)
                                               AND C.APLY_EYMD >= TO_DATE(V_IEND_CONT_DATE)
      AND C.APLY_FYMD < TO_DATE('20170301'))
                                      )
                                  ELSE
                                    B.BASIC_PREM
                                  END   ||'|' || B.NEW_RT ||'|' || B.DMBO_CD ||'|' || NVL(A.CANCEL_CALC_GB, '1')  ||'|' || A.GRP_DMBO_RATE
                                )
                                INTO V_0203_INFO
                                FROM TBID0013T A ,
                                     TBIB0203 B
                               WHERE  A.POL_NO          = i_enter_no
                                   and  ENDOR_NO         = i_endor_no
                                   and A.WORK_DATE       = to_date(i_work_date, 'YYYYMMDD')
                                     AND A.INSUR_AMT_GB = B.DMBO_ENT_AMT_GB
                                     AND A.DMBO_CD = B.DMBO_CD
                                     AND B.I_KIND_CD = V_I_KIND_CD
                                     AND B.CO_GB = '0'
                                     AND B.CAR_KIND = V_CAR_KIND_CD
                                     AND B.CAR_KIND2 = V_CAR_TYPE_CD
                                     AND B.APLY_FYMD <= to_date(V_ISTAR_CONT_DATE) /* 20130422 TO_DATE 처리 최재혁 */
                                     AND B.APLY_EYMD >= to_date(V_ISTAR_CONT_DATE) /* 20130422 TO_DATE 처리 최재혁 */
                            ;
                              exception
                              when no_data_found then
                                  s_err_msg := 'TBID0013T SELECT ERROR: '||sqlerrm ;
                                  raise e_err;
                              when others then
                                  s_err_msg := 'TBID0013T AND TBIB0203 SELECT ERROR: '||sqlerrm ;
                                  raise e_err;
                      END;

                  ELSE

                       BEGIN
   --2017.02.08 담보별단체특성율
                          SELECT
                                wm_concat(
                                  CASE WHEN B.DMBO_CD IN ('01','02','03','13') THEN
                                      ROUND(B.BASIC_PREM*(TO_DATE('20160331') - to_date(V_ISTAR_CONT_DATE))/365 +
                                           (SELECT C.BASIC_PREM*(365-(TO_DATE('20160331') - to_date(V_ISTAR_CONT_DATE)))/365
                                              FROM TBIB0203 C
                                             WHERE B.DMBO_ENT_AMT_GB = C.DMBO_ENT_AMT_GB
                                               AND B.DMBO_CD = C.DMBO_CD
                                               AND C.I_KIND_CD = V_I_KIND_CD
                                               AND B.CAR_KIND = C.CAR_KIND
                                               AND B.CAR_KIND2 = C.CAR_KIND2
                                               AND C.APLY_FYMD >= to_date(V_ISTAR_CONT_DATE)
                                               AND C.APLY_EYMD >= to_date(V_IEND_CONT_DATE))
                                      )
                                  ELSE
                                    B.BASIC_PREM
                                  END   ||'|' || B.NEW_RT ||'|' || B.DMBO_CD ||'|' || NVL(A.CANCEL_CALC_GB, '1')  ||'|' || A.GRP_DMBO_RATE
                                )
                                INTO V_0203_INFO
                                FROM TBID0013T A ,
                                     TBIB0203 B
                               WHERE  A.POL_NO          = i_enter_no
                                   and  ENDOR_NO         = i_endor_no
                                   and A.WORK_DATE       = to_date(i_work_date, 'YYYYMMDD')
                                     AND A.INSUR_AMT_GB = B.DMBO_ENT_AMT_GB
                                     AND A.DMBO_CD = B.DMBO_CD
                                     AND B.I_KIND_CD = V_I_KIND_CD
                                     AND B.CO_GB = '0'
                                     AND B.CAR_KIND = V_CAR_KIND_CD
                                     AND B.CAR_KIND2 = V_CAR_TYPE_CD
                                     AND B.APLY_FYMD <= to_date(V_ISTAR_CONT_DATE) /* 20130422 TO_DATE 처리 최재혁 */
                                     AND B.APLY_EYMD >= to_date(V_ISTAR_CONT_DATE) /* 20130422 TO_DATE 처리 최재혁 */
                            ;
                              exception
                              when no_data_found then
                                  s_err_msg := 'TBID0013T SELECT ERROR: '||sqlerrm ;
                                  raise e_err;
                              when others then
                                  s_err_msg := 'TBID0013T AND TBIB0203 SELECT ERROR: '||sqlerrm ;
                                  raise e_err;
                      END;

                  END IF;

            ELSE

                  if '20160229' BETWEEN TO_CHAR(V_ISTAR_CONT_DATE,'YYYYMMDD') AND TO_CHAR(V_IEND_CONT_DATE,'YYYYMMDD') then

                      BEGIN
   --2017.02.08 담보별 단체특성율
                          SELECT
                                wm_concat(
                                  CASE WHEN B.DMBO_CD IN ('01','02','03','13') THEN
                                      ROUND(B.BASIC_PREM*(TO_DATE('20160331') - to_date(V_ISTAR_CONT_DATE))/366 +
                                           (SELECT C.BASIC_PREM*(TO_DATE(V_IEND_CONT_DATE) - to_date('20160331'))/366
                                              FROM TBIB0203 C
                                             WHERE B.DMBO_ENT_AMT_GB = C.DMBO_ENT_AMT_GB
                                               AND B.DMBO_CD = C.DMBO_CD
                                               AND C.I_KIND_CD = V_I_KIND_CD
                                               AND B.CAR_KIND = C.CAR_KIND
                                               AND B.CAR_KIND2 = C.CAR_KIND2
                                               AND C.APLY_FYMD >= TO_DATE(V_ISTAR_CONT_DATE)
                                               AND C.APLY_EYMD >= TO_DATE(V_IEND_CONT_DATE)
      AND C.APLY_FYMD < TO_DATE('20170301'))
                                      )
                                  ELSE
                                    B.BASIC_PREM
                                  END   ||'|' || B.NEW_RT ||'|' || B.DMBO_CD ||'|' || NVL(A.CANCEL_CALC_GB, '1')  ||'|' || A.GRP_DMBO_RATE
                                )
                                INTO V_0203_INFO
                                FROM TBID0013T A ,
                                     TBIB0203 B
                               WHERE  A.POL_NO          = i_enter_no
                                   and  ENDOR_NO         = i_endor_no
                                   and A.WORK_DATE       = to_date(i_work_date, 'YYYYMMDD')
                                     AND A.INSUR_AMT_GB = B.DMBO_ENT_AMT_GB
                                     AND A.DMBO_CD = B.DMBO_CD
                                     AND B.I_KIND_CD = V_I_KIND_CD
                                     AND B.CO_GB = '0'
                                     AND B.CAR_KIND = V_CAR_KIND_CD
                                     AND B.CAR_KIND2 = V_CAR_TYPE_CD
                                     AND B.APLY_FYMD <= to_date(V_ISTAR_CONT_DATE) /* 20130422 TO_DATE 처리 최재혁 */
                                     AND B.APLY_EYMD >= to_date(V_ISTAR_CONT_DATE) /* 20130422 TO_DATE 처리 최재혁 */
                            ;
                              exception
                              when no_data_found then
                                  s_err_msg := 'TBID0013T SELECT ERROR: '||sqlerrm ;
                                  raise e_err;
                              when others then
                                  s_err_msg := 'TBID0013T AND TBIB0203 SELECT ERROR: '||sqlerrm ;
                                  raise e_err;
                      END;

                  ELSE

                       BEGIN
   --2017.02.08 담보별 단체특성율
                          SELECT
                                wm_concat(
                                  CASE WHEN B.DMBO_CD IN ('01','02','03','13') THEN
                                      ROUND(B.BASIC_PREM*(TO_DATE('20160331') - to_date(V_ISTAR_CONT_DATE))/365 +
                                           (SELECT C.BASIC_PREM*(TO_DATE(V_IEND_CONT_DATE) - to_date('20160331'))/365
                                              FROM TBIB0203 C
                                             WHERE B.DMBO_ENT_AMT_GB = C.DMBO_ENT_AMT_GB
                                               AND B.DMBO_CD = C.DMBO_CD
                                               AND C.I_KIND_CD = V_I_KIND_CD
                                               AND B.CAR_KIND = C.CAR_KIND
                                               AND B.CAR_KIND2 = C.CAR_KIND2
                                               AND C.APLY_FYMD >= to_date(V_ISTAR_CONT_DATE)
                                               AND C.APLY_EYMD >= to_date(V_IEND_CONT_DATE))
                                      )
                                  ELSE
                                    B.BASIC_PREM
                                  END   ||'|' || B.NEW_RT ||'|' || B.DMBO_CD ||'|' || NVL(A.CANCEL_CALC_GB, '1')  ||'|' || A.GRP_DMBO_RATE
                                )
                                INTO V_0203_INFO
                                FROM TBID0013T A ,
                                     TBIB0203 B
                               WHERE  A.POL_NO          = i_enter_no
                                   and  ENDOR_NO         = i_endor_no
                                   and A.WORK_DATE       = to_date(i_work_date, 'YYYYMMDD')
                                     AND A.INSUR_AMT_GB = B.DMBO_ENT_AMT_GB
                                     AND A.DMBO_CD = B.DMBO_CD
                                     AND B.I_KIND_CD = V_I_KIND_CD
                                     AND B.CO_GB = '0'
                                     AND B.CAR_KIND = V_CAR_KIND_CD
                                     AND B.CAR_KIND2 = V_CAR_TYPE_CD
                                     AND B.APLY_FYMD <= to_date(V_ISTAR_CONT_DATE) /* 20130422 TO_DATE 처리 최재혁 */
                                     AND B.APLY_EYMD >= to_date(V_ISTAR_CONT_DATE) /* 20130422 TO_DATE 처리 최재혁 */
                            ;
                              exception
                              when no_data_found then
                                  s_err_msg := 'TBID0013T SELECT ERROR: '||sqlerrm ;
                                  raise e_err;
                              when others then
                                  s_err_msg := 'TBID0013T AND TBIB0203 SELECT ERROR: '||sqlerrm ;
                                  raise e_err;
                      END;

                 END IF;

                END IF;

            ELSE
                                        l_log_data := l_log_data ||'111111111111111pol==>' ||i_enter_no||'  endor==>'||i_endor_no||'   i_work_date==>'||i_work_date||'   V_ISTAR_CONT_DATE==>'||V_ISTAR_CONT_DATE||chr(13)||chr(10);

                begin
  --2017.02.08 담보별단체특성율 추가
                  select wm_concat(B.BASIC_PREM ||'|' ||
                                   B.NEW_RT     ||'|' ||
                                   B.DMBO_CD    ||'|' ||
                                   NVL(A.CANCEL_CALC_GB, '1')   ||'|' ||
       A.GRP_DMBO_RATE
                                   )
                    into V_0203_INFO
                    from TBID0013T A
                       , TBIB0203 B
                   where A.POL_NO          = i_enter_no
                     and  ENDOR_NO         = i_endor_no
                     and A.WORK_DATE       = to_date(i_work_date, 'YYYYMMDD')
                     and A.INSUR_AMT_GB    = B.DMBO_ENT_AMT_GB
                     and A.DMBO_CD         = B.DMBO_CD
                     and B.I_KIND_CD       = V_I_KIND_CD
                     and B.CO_GB           = '0'
                     and B.CAR_KIND        = V_CAR_KIND_CD
                     and B.CAR_KIND2       = V_CAR_TYPE_CD
                     and B.APLY_FYMD      <= to_date(V_ISTAR_CONT_DATE)    /* 20130422 TO_DATE 처리 최재혁 */
                     and B.APLY_EYMD      >= to_date(V_ISTAR_CONT_DATE);   /* 20130422 TO_DATE 처리 최재혁 */

                    exception
                        when no_data_found then
                            s_err_msg := 'TBID0013T SELECT ERROR: '||sqlerrm ;
                            raise e_err;
                        when others then
                            s_err_msg := 'TBID0013T AND TBIB0203 SELECT ERROR: '||sqlerrm ;
                            raise e_err;
                END;

            END IF;

/*
        begin




            select wm_concat(B.BASIC_PREM ||'|' ||
                             B.NEW_RT     ||'|' ||
                             B.DMBO_CD    ||'|' ||
                             NVL(A.CANCEL_CALC_GB, '1')
                            )
              into V_0203_INFO
              from TBID0013T A
                 , TBIB0203 B
             where A.POL_NO          = i_enter_no
               and A.ENDOR_NO        = i_endor_no
               and A.WORK_DATE       = to_date(i_work_date, 'YYYYMMDD')
               and A.INSUR_AMT_GB    = B.DMBO_ENT_AMT_GB
               and A.DMBO_CD         = B.DMBO_CD
               and B.I_KIND_CD       = V_I_KIND_CD
               and B.CO_GB           = '0'
               and B.CAR_KIND        = V_CAR_KIND_CD
               and B.CAR_KIND2       = V_CAR_TYPE_CD
               and B.APLY_FYMD      <= to_date(V_ISTAR_CONT_DATE)
               and B.APLY_EYMD      >= to_date(V_ISTAR_CONT_DATE);

            exception
                when no_data_found then
                    s_err_msg := 'TBID0013T SELECT ERROR: '||sqlerrm ;
                    raise e_err;
                when others then
                    s_err_msg := 'TBID0013T AND TBIB0203 SELECT ERROR: '||sqlerrm ;
                    raise e_err;
        end;
        */

        s_idx1 := length(V_0203_INFO) - length(replace(V_0203_INFO,',','')) + 1;

        /*s_idx1 가 null 일 경우 무한루프 ㅡㅡ;;;;;;; 20130708 수정 */
        if s_idx1 is null then
            s_err_msg := 'TBID0013 SELECT ERROR ';
            raise e_err;
        end if;

        s_idx2 :=0;

    else
        s_idx1 :=0;
        s_idx2 :=0;
    end if;

    /******************************************************************/
    /**Loop Start                          ****************************/
    /******************************************************************/
    loop
        s_idx2 := s_idx2 +1;
        if  s_idx2 > s_idx1 then
            exit;
        end if;

        s_0203_sub          :=           regexp_substr(V_0203_INFO  ,'[^,]+',1,s_idx2 );

        s_0203_basic_prem   := to_number(regexp_substr(s_0203_sub   ,'[^|]+',1,1 ));
        s_0203_new_rt       := to_number(regexp_substr(s_0203_sub   ,'[^|]+',1,2 ));
        s_0203_dmbo_cd      :=           regexp_substr(s_0203_sub   ,'[^|]+',1,3 );
        s_0203_calc_gb      :=           regexp_substr(s_0203_sub   ,'[^|]+',1,4 );
        s_0203_dmbo_rate      :=           regexp_substr(s_0203_sub   ,'[^|]+',1,5 );  /*2017.02.08 담보별단체특성율*/

        /********************************/
        /* 00.기본보험료 세팅 **/
        /********************************/
        s_dmbo_basic_prem  :=   s_0203_basic_prem;
                                        l_log_data := l_log_data ||'000* [' || s_0203_basic_prem ||']=기본보험료' ||chr(13)||chr(10);

        if  s_0203_dmbo_cd  not in ('21','22','23') then
            /************************/
            /* 자차 (자기차량)담보 **/
            /************************/
            if  s_0203_dmbo_cd = '06' then
                s_dmbo_new_rt     := s_0203_new_rt;
                                        l_log_data := l_log_data || '012* [' || s_0203_new_rt         ||']=자동차할증율' ||chr(13)||chr(10);
                /*********************/
                /*10. 중고차률 산정  */
                /*********************/
                f_fn_rent_old_car_rate := FN_RENT_OLD_CAR_RATE( '00' , V_CAR_PASS_YEAR , to_date(V_ISTAR_CONT_DATE) );      -- 우선 적용 용. /* 20130422 TO_DATE 처리 최재혁 */
                                        l_log_data := l_log_data || '013* [' || V_CAR_PASS_YEAR       ||']=차량 경과년수'     ||chr(13)||chr(10);
                                        l_log_data := l_log_data || '014* [' || V_ISTAR_CONT_DATE     ||']=보험개시일'        ||chr(13)||chr(10);
                                        l_log_data := l_log_data || '015* [' || f_fn_rent_old_car_rate     ||']=중고차률'          ||chr(13)||chr(10);

                if  f_fn_rent_old_car_rate <= 0 then
                    s_err_msg := '중고차 요율이 없습니다';
                    raise e_err;
                end if;

                /***********************/
                /*20.일부공제요율 산정 */
                /***********************/
                f_fn_rent_part_car_amt := FN_RENT_C_PART_CAR_AMT( i_job_gubun  , i_enter_no , i_endor_no, i_work_date );
                                        l_log_daTa := l_log_data || '021* [' || f_fn_rent_part_car_amt    ||']=일부공제요율'                  ||chr(13)||chr(10);
                                        l_log_data := l_log_data || '022* [' || V_CAR_TOT_AMT        ||']=차량+기계장치+부품 가입금액'   ||chr(13)||chr(10);

                if  f_fn_rent_part_car_amt <= 0 and nvl(V_CAR_TOT_AMT, 0) <= 0 then
                    s_err_msg := '차량가액 및 가액가입금액 오류';
                    raise e_err;
                else
                    s_dmbo_basic_prem  := s_dmbo_new_rt * V_CAR_TOT_AMT * trunc(f_fn_rent_old_car_rate / 100, 2) * f_fn_rent_part_car_amt;
                                        l_log_data := l_log_data || '023* [' || s_dmbo_basic_prem  ||']=자동차할증율*차량가입금액*중고차률*일부공제요율' ||chr(13)||chr(10);
                end if;

            end if;

            /********************************/
            /* 30.(가입경력+법규율) 곱하기 **/
            /********************************/
                                        l_log_data := l_log_data || '031* [' || V_IENT_CARR_R    ||']=가입경력'              ||chr(13)||chr(10);
            if  V_IENT_CARR_R > 0 then  /* 가입경력이 0보다 클때*/
                s_dmbo_appy_prem := s_dmbo_basic_prem * trunc(V_IENT_CARR_R/100, 5);
                                        l_log_data := l_log_data || '032* [' || s_dmbo_appy_prem ||']=기본보험료 * 가입경력' ||chr(13)||chr(10);
            else
                s_dmbo_appy_prem := s_dmbo_basic_prem;
            end if;
                                        l_log_data := l_log_data || '033* [' || s_dmbo_appy_prem ||']=적용보험료'            ||chr(13)||chr(10);

            /*****************************************/
            /* 40.적용요율(할인할증+특별할증)곱하기 **/
            /*****************************************/
                                        l_log_data := l_log_data || '041* [' || V_DSC_TOT_R      ||']=할인할증+특별할증'     ||chr(13)||chr(10);
            if  V_DSC_TOT_R > 0 then    /* 할인할증이 0보다 클때*/
                s_dmbo_appy_prem := s_dmbo_appy_prem * trunc(V_DSC_TOT_R/100, 3);
            end if;
                                        l_log_data := l_log_data || '043* [' || s_dmbo_appy_prem ||']=적용보험료 * (할인할증+특별할증)'    ||chr(13)||chr(10);

            /**********************/
            /* 50. 특약/특별요율 **/
            /**********************/
            if   i_job_gubun = '1' then
                s_gijun_from := to_date(V_ISTAR_CONT_DATE);           /* 20130422 TO_DATE 처리 최재혁 */
            else
                --s_gijun_from := to_date(V_BASIS_FROM);              /* 20130422 TO_DATE 처리 최재혁 */
                s_gijun_from := to_date(V_ISTAR_CONT_DATE);           /* 20130422 TO_DATE 처리 최재혁 */
            end if;

            PR_RENT_SPECIAL_RATE(i_job_gubun           ,i_enter_no        ,i_endor_no           ,V_I_KIND_CD      ,V_CAR_KIND_CD
                                ,V_CAR_TYPE_CD         ,s_gijun_from      ,s_0203_dmbo_cd       ,V_0012_INFO      ,s_special_rate
                                ,s_treat_rate);

                                        l_log_data := l_log_data || '051* [' || s_special_rate    ||']=특별요율' ||chr(13)||chr(10);
                                        l_log_data := l_log_data || '052* [' || s_treat_rate      ||']=연령한정요율'   ||chr(13)||chr(10);

            if  s_0203_dmbo_cd in ('03' ,'13','06') then
                if  s_0203_dmbo_cd = '06' then
                    /******************/
                    /*  60. 고과차량 **/
                    /******************/
                    f_fn_rent_vip_car_rate := FN_RENT_C_VIP_CAR_RATE( i_job_gubun  ,i_enter_no  ,i_endor_no, i_work_date ) ;
                                        l_log_data :=  l_log_data || '061* [' || f_fn_rent_vip_car_rate  || ']=고가차량 특별요율' ||chr(13)||chr(10);

                    s_special_rate := s_special_rate + ( f_fn_rent_vip_car_rate  - 100 ) ;
                                        l_log_data :=  l_log_data || '062* [' || s_special_rate     || ']=특별요율 + ( 고가차량 특별요율  - 100 )' ||chr(13)||chr(10);
                end if;

                /***************/
                /* 70.물적할증**/
                /***************/
                f_fn_rent_mul_acci_rate := FN_RENT_MUL_ACCI_RATE(s_0203_dmbo_cd,V_MUL_ACCI_RATE_CD ,to_date(V_ISTAR_CONT_DATE));  /* 20130422 TO_DATE 처리 최재혁 */
                                        l_log_data := l_log_data || '071* [' || f_fn_rent_mul_acci_rate   ||']=물적할증요율'  ||chr(13)||chr(10);

                if  f_fn_rent_mul_acci_rate > 0 then  /* 특별할증이 0보다 클때*/
                    s_dmbo_appy_prem := s_dmbo_appy_prem * trunc(f_fn_rent_mul_acci_rate/100, 3);
                end if;
                                        l_log_data := l_log_data || '073* [' || s_dmbo_appy_prem ||']=적용보험료 * 물적할증요율' ||chr(13)||chr(10);

                s_dmbo_appy_prem := s_dmbo_appy_prem * trunc(s_special_rate/100, 3) * trunc(s_treat_rate, 3) ;
                                        l_log_data := l_log_data || '076* [' || s_dmbo_appy_prem ||']=적용보험료 * 특별요율 * 연령한정요율' ||chr(13)||chr(10);
            else
                s_dmbo_appy_prem := s_dmbo_appy_prem * trunc(s_special_rate/100, 3) * trunc(s_treat_rate, 3) ;
                                        l_log_data := l_log_data || '053* [' || s_dmbo_appy_prem  ||']=적용보험료*특별요율*연령한정요율'   ||chr(13)||chr(10);
            end if;

            /*****************************/
            /*  80. 단체업체특성범위요율 */
            /*****************************/
                                        l_log_data := l_log_data || '081* [' || V_GRPCONT_DSC_R     ||']=단체특성범위율' ||chr(13)||chr(10);
                                        l_log_data := l_log_data || '082* [' || V_INDGRP_GB         ||']=개별단체구분'   ||chr(13)||chr(10);
            /*2017.01.31 요율세분화 추가*/
    IF TO_CHAR(V_ISTAR_CONT_DATE,'YYYYMMDD')  < '20170401' THEN
                         IF  V_GRPCONT_DSC_R != 0  THEN
                                 /*20131119 자차담보일 경우 자차전용 단체계약할인율을 곱하고 그외 기존 계약할인율을 곱하도록 수정 LYH*/
                                 IF s_0203_dmbo_cd = '06' THEN
     s_dmbo_appy_prem := s_dmbo_appy_prem * (TRUNC(V_GRPCONT_DSC_CAR_R/100, 4) );
                                 ELSE
     s_dmbo_appy_prem := s_dmbo_appy_prem * (TRUNC(V_GRPCONT_DSC_R/100, 4) );
                                 END IF;
                          END IF;
     ELSE
   l_log_data := l_log_data || '999* [' || s_0203_dmbo_rate         ||']=담보별요율'   ||chr(13)||chr(10);
    s_dmbo_appy_prem := s_dmbo_appy_prem * (TRUNC(s_0203_dmbo_rate/100, 4) );
     END IF;
  /*요율세분화 끝.*/
                                        l_log_data := l_log_data || '084* [' || s_dmbo_appy_prem    ||']=적용보험료 * 단체특성범위율' ||chr(13)||chr(10);
            /*********************************************************************************************************/
            /*  81. 분납할증                                                                                         */
            /* 단기자차(s_0203_calc_gb='3')는 일시납이므로 계산하지 않는다. 20130513 추가                            */
            /* 분납할증 안하기로 했다가 다시 해달라 해서 원복처리함...20130514_최재혁                                */
            /*********************************************************************************************************/
            s_dmbo_appy_prem  := s_dmbo_appy_prem * (V_DVDADD_RATE/100);
                                        l_log_data := l_log_data || '085* [' || V_DVDADD_RATE/100     ||']=분납할증율/100' ||chr(13)||chr(10);

        else
            s_dmbo_appy_prem   := s_dmbo_basic_prem;
            s_basic_year_prem  := s_dmbo_basic_prem;
            s_appy_year_prem   := s_dmbo_basic_prem;

        end if;

        /****************************/
        /* 90. 일할/단기 적용       */
        /****************************/
                                        l_log_data := l_log_data || '091* [' || V_ISTAR_CONT_DATE ||']=보험시기'  ||chr(13)||chr(10);
                                        l_log_data := l_log_data || '092* [' || V_IEND_CONT_DATE  ||']=보험종기'  ||chr(13)||chr(10);

        /* 공제시기, 종기에 시분초 포함되어 변경. TO_DATE 할 항목이 많아서 변수 처리함. 20130422 최재혁 */
        s_istar_cont_date := to_date(V_ISTAR_CONT_DATE);
        s_iend_cont_date  := to_date(V_IEND_CONT_DATE);

        if  s_istar_cont_date is not null and s_iend_cont_date is not null and s_istar_cont_date <= s_iend_cont_date then
            s_cont_mm            := trunc(months_between(s_iend_cont_date, s_istar_cont_date), 0);
            s_cont_dd            := (s_iend_cont_date - s_istar_cont_date ) ;
                                        l_log_data := l_log_data || '093* [' || s_cont_mm         ||']=보험가입개월수' ||chr(13)||chr(10);
                                        l_log_data := l_log_data || '094* [' || s_cont_dd         ||']=보험가입일수'   ||chr(13)||chr(10);
                                        l_log_data := l_log_data || '095* [' || V_SHORT_DAY_GB    ||']=일할/단기 구분'       ||chr(13)||chr(10);

            if  V_SHORT_DAY_GB is not null and V_SHORT_DAY_GB = 1 then  /* 일할계산*/
                /*기본보험료 계산*/
                s_basic_year_prem := s_dmbo_basic_prem; /*년간기본보험료*/
                s_dmbo_basic_prem := s_dmbo_basic_prem * s_cont_dd;
                                        l_log_data := l_log_data || '096* [' || s_dmbo_basic_prem ||']=기본보험료 * 보험일수' ||chr(13)||chr(10);

                s_dmbo_basic_prem := trunc(s_dmbo_basic_prem/(add_months(s_istar_cont_date, 12) - ( s_istar_cont_date )), 2);
                                        l_log_data := l_log_data || '097* [' || to_char(add_months(s_istar_cont_date, 12) - ( s_istar_cont_date )) ||']=보험기간' ||chr(13)||chr(10);
                                        l_log_data := l_log_data || '098* [' || s_dmbo_basic_prem  ||']=기본보험료/보험기간' ||chr(13)||chr(10);

                /*적용보험료 계산*/
                s_appy_year_prem  := s_dmbo_appy_prem; /*년간적용보험료*/
                                        l_log_data := l_log_data || '100* [' || s_dmbo_appy_prem      ||']=적용보험료 * 분납할증율' ||chr(13)||chr(10);

                s_dmbo_appy_prem := s_dmbo_appy_prem * s_cont_dd;
                                        l_log_data := l_log_data || '101* [' || s_dmbo_appy_prem   ||']=적용보험료 * 보험가입일수 ' ||chr(13)||chr(10);

                s_dmbo_appy_prem := trunc(s_dmbo_appy_prem/(add_months(s_istar_cont_date, 12) - ( s_istar_cont_date )), 2);
                                        l_log_data := l_log_data || '103* [' || s_dmbo_appy_prem   ||']=적용보험료/보험기간' ||chr(13)||chr(10);

            elsif V_SHORT_DAY_GB is not null and V_SHORT_DAY_GB = 2 then /* 단기계산일때*/
                /*기본보험료 계산*/
                s_basic_year_prem := s_dmbo_basic_prem; /*년간기본보험료*/
                s_dmbo_basic_prem := round(s_dmbo_basic_prem,-1);
                                        l_log_data := l_log_data || '099* [' || s_dmbo_basic_prem  ||']=단기요율 기본보험료' ||chr(13)||chr(10);

                f_fn_rent_short_rate   := FN_RENT_SHORT_RATE(V_I_KIND_CD  ,s_istar_cont_date  ,s_iend_cont_date  ,s_istar_cont_date  ,s_iend_cont_date);
                f_fn_rent_short_rate   := trunc(f_fn_rent_short_rate / 100,2);

                /*여기서는 연간보험료만 계산하고 일할, 단기 계산은 은 분납 프로시저에서 처리한다.2013.06.17일 수정*/
                s_appy_year_prem  := s_dmbo_appy_prem;    /*년간적용보험료*/
                s_dmbo_appy_prem  := s_dmbo_appy_prem;
                                        l_log_data  := l_log_data || '104* [' || f_fn_rent_short_rate ||']=단기요율'         ||chr(13)||chr(10);
                                        l_log_data  := l_log_data || '105* [' || s_dmbo_appy_prem ||']=단기요율 적용보험료' ||chr(13)||chr(10);
            end if;
        end if;

        s_appy_year_prem := round(s_appy_year_prem/10, 0) * 10 ;  /*년간적용보험료(일할/단기 적용전)*/

        s_dmbo_appy_prem := round(s_dmbo_appy_prem/10, 0) ;
                                        l_log_data  := l_log_data || '111* [' || s_dmbo_appy_prem ||']=round(적용보험료/10, 0)' ||chr(13)||chr(10);

        s_dmbo_appy_prem := s_dmbo_appy_prem * 10;
                                        l_log_data  := l_log_data || '112* [' || s_dmbo_appy_prem ||']=적용보험료 * 10'         ||chr(13)||chr(10);

        /*********************************************/
        /* 110. Log Table Insert 하기   **************/
        /* l_log_step에 담보코드 있으면 로그남김******/
        /*********************************************/
        if  l_log_level = 1 or nvl(regexp_substr(l_log_step,s_0203_dmbo_cd),' ') = s_0203_dmbo_cd then
            PR_INSERT_LOG(l_log_date,l_log_sp_name,l_log_no,l_log_gubun,s_0203_dmbo_cd,l_log_data);
        end if;
                                        l_log_data  :='';

        if  i_job_gubun = '2' then
            /***************************************************/
            /* 120 .- 담보기간별분담금(TBID0014T)              */
            /*      - 담보별분납계획  (TBID0015T) Insert       */
            /***************************************************/
            if '20160331' BETWEEN TO_CHAR(V_ISTAR_CONT_DATE,'YYYYMMDD') AND ADD_MONTHS(V_ISTAR_CONT_DATE,12) AND  s_0203_dmbo_cd IN ('01','02','03','13')AND V_ENDOR_CD <> '701'  THEN
              PR_RENT_C_ENDOR_BUNAP_RATE_TRM(i_enter_no         ,i_endor_no            ,V_ENDOR_NO_BEF_MAX              ,s_0203_dmbo_cd              ,V_NA_MTH
                                           ,'0'                ,s_dmbo_basic_prem     ,s_dmbo_appy_prem                ,V_BNP_CNT                  ,to_date(V_ISTAR_CONT_DATE)
                                           ,0                  ,V_I_KIND_CD           ,to_date(V_IEND_CONT_DATE)       ,to_date(V_BASIS_FROM)      ,to_date(V_BASIS_TO)
                                           ,V_USER_ID          ,V_END_NAB_NO          ,V_BEF_15_SEQ_NO                 ,V_ENDOR_CD                 ,V_ALL_CLIAM_DATE
                                           ,V_DAY_ENDOR_CNT    ,V_SHORT_DAY_GB        ,s_basic_year_prem               ,s_appy_year_prem           ,V_CAR_KIND_CD
                                           ,V_CAR_TYPE_CD      ,V_IENT_CARR_R         ,V_DSC_TOT_R                     ,s_special_rate             ,s_treat_rate
                                           ,f_fn_rent_mul_acci_rate, V_GRPCONT_DSC_R  ,V_INDGRP_GB                     ,V_DVDADD_RATE              ,i_work_date, r_return );

            ELSE
             PR_RENT_C_ENDOR_BUNAP_RATE(i_enter_no         ,i_endor_no            ,V_ENDOR_NO_BEF_MAX              ,s_0203_dmbo_cd             ,V_NA_MTH
                                      ,'0'                ,s_dmbo_basic_prem     ,s_dmbo_appy_prem                ,V_BNP_CNT                  ,to_date(V_ISTAR_CONT_DATE)
                                      ,0                  ,V_I_KIND_CD           ,to_date(V_IEND_CONT_DATE)       ,to_date(V_BASIS_FROM)      ,to_date(V_BASIS_TO)
                                      ,V_USER_ID          ,V_END_NAB_NO          ,V_BEF_15_SEQ_NO                 ,V_ENDOR_CD                 ,V_ALL_CLIAM_DATE
-- GENERATED BY QueryOne AT 2017-02-28 17:46:11
-- USING krma_app@10.100.10.54:8629(krmadb)

CREATE OR REPLACE
procedure KRMA_APP.PR_RENT_C_DATA_TRANS ( i_trans_gb  in  varchar2
                                                          , i_pol_no    in  TBID0001.POL_NO%type
                                                          , i_endor_no  in  TBID0001.ENDOR_NO%type
                                                          , i_work_date in  varchar2
                                                          , o_err_msg   out varchar2 ) as
    /*********************************************************************/
    /* 생성일자 : 2013.06.19                                             */
    /* 생성자   : 최재혁                                                 */
    /* 업무내용 : 정정(소급) 배서 하기 위헤 배서 데이터를 옮긴다.        */
    /* Parameters: i_trans_gb = '1:배서->소급','2:소급->배서, '3:삭제"   */
    /*             i_pol_no = 증권번호                                   */
    /*             i_work_date = 소급배서일                              */
    /*             o_err_msg = 실행결과                                  */
    /*********************************************************************/

    V_ERRTITLE                          varchar2(100);                           --에러 TITLE
    V_ERRMESSAGE                        varchar2(300);                          --에러 메세지
    V_DMBO_CD                           varchar2(2);                            --연관성 부여시 담보코드
    V_DMBO_SEQ                          number(2);                              --연관성 부여시 순번
    V_NEW_ENDOR_NO                      number(3);                              --배서번호
    V_BEF_15_SEQ_NO                     number(5);                              --분납회차 순
    V_END_NAB_NO                        number(5);                              --최종납입회차
    V_MAX_ENDOR_NO                      number(5);                              --배서테이블 MAX 배서번호
    V_MAX_END_NAB_NO                    number(5);                              --배서테이블 최종납입회차
    V_COR_ENDOR_NO                      number(5);                              --소급배서 기준배서번호
    V_MAX_NEW_ENDOR_NO                  number(5);                              --소급배서 MAX 배서번호
    V_TRANS_CNT                         number(5);                              --소급완료되고 이관된 데이터 검색
    V_PAYMENT_CHECK                     number;                                 -- 미수납 건수 확인

    r_return                            varchar2(500);
    r_return_ok                         varchar2(50);
    e_err                               exception;
    e_dup                               exception;

     /***************************************************************/
     /*** lOG 변수 *************************************************/
     /***************************************************************/
     l_log_level                         number := 0;                              --로그레벨[0~1]: 0->l_log_step에 정의된 항목과 찍는다..  1->모두찍는다.)
     l_log_sp_name                       varchar2(50)  := 'PR_RENT_C_DATA_TRANS' ; --로그 Stored Procedure Name
     l_log_no                            varchar2(20);
     l_log_gubun                         varchar2(20);
     l_log_data                          varchar2(4000);
     l_log_date                          varchar2(16)  := to_char(sysdate,'yyyymmddhh24miss');


BEGIN

    o_err_msg := 'NOT_OK';
    V_ERRTITLE := 'START_TRANS';

    /*배서에서 소급으로 옮긴다.*/
    if i_trans_gb = '1' then

        V_ERRTITLE := '배서에서 소급으로(I_TRANS_GB=1)';

        /*배서(소급)-계약정보*/
        begin
            begin
                select max(ENDOR_NO)     , max(END_NAB_NO)
                  into V_MAX_ENDOR_NO    , V_MAX_END_NAB_NO
                  from TBID0001
                 where POL_NO       = i_pol_no
                   and ENDOR_STATUS = '3';
            exception
                when no_data_found then
                    V_ERRMESSAGE := '배서-계약정보(TBID0001T)에 등록된 데이터가 없습니다.'||'('||sqlerrm||')';
                    raise e_err;
                when others then
                    V_ERRMESSAGE := '배서-계약정보(TBID0001T) 검색 오류.'||'('||sqlerrm||')';
                    raise e_err;
            end;


            insert into TBID0001T
                 ( POL_NO                    , ENDOR_NO                  , WORK_DATE                 , ENDOR_STATUS              , ENT_DGN_NO
                 , CUST_NO                   , CO_NO                     , BCO_NO                    , OWN_CD                    , INDGRP_GB
                 , CONT_KIND                 , CONT_TYPE                 , B_ENT_AMT                 , BASIC_PREM                , NA_MTH
                 , ISTAR_CONT_DATE           , IEND_CONT_DATE            , I_KIND_CD                 , BNP_CNT                   , BNP_CNT_R
                 , CASH_MTH                  , CASH_ENT_TYPE             , TOT_INSUR_AMT             , APPY_SUM_PREM             , TOT_NAB_PREM
                 , RIDER_INSUR_AMT           , RIDER_PREM                , SUM_PREM                  , HOME_GB                   , CONT_YY
                 , CONT_MM                   , CONT_DD                   , TOT_NAB_CNT               , CONT_STATE                , STATE_ADD_DATE
                 , CLAIM_ACCUR_CNT           , CLAIM_LAST_DATE           , END_NAB_YM                , END_NAB_NO                , END_CASH_DATE
                 , FIRST_CASH_DATE           , END_CHANGE_DATE           , RCVD_STATE                , RENEW_GB                  , RENEW_DATE
                 , UNION_KIND                , SHORT_DAY_GB              , SHORT_R                   , GRPCONT_DSC_R             , GRPCONT_DSC_CAR_R             , IENT_CARR_CD
                 , IENT_CARR_R               , DSC_INC_CD                , DSC_INC_R                 , SPCIAL_INC_R              , SPCIAL_INC_APPY
                 , ALL_DMBO_R                , MUL_ACCI_RATE_CD          , ISD_P_CDGB                , ISD_CD                    , ISD_NAME
                 , ISD_CONT_RELATION_CD      , ISD_ZIP_CD_GB             , ISD_ZIP_CD_DM_GB          , ISD_ZIP_CD                , ISD_ADDR_1
                 , ISD_ADDR_2                , ISD_CALL_SITE_GB          , ISD_OFF_TEL_DDD           , ISD_OFF_TEL               , ISD_TEL_DDD
                 , ISD_TEL_NO                , ISD_HP_NO                 , ISD_E_MAIL                , ISD_FAX                   , ISD_ENRNER_RELATION_CD
                 , ISD_ENRNER_NAME           , ISD_ENRNER_PSN_NO         , CONT_CD_GB                , CONT_CD                   , CONT_NAME
                 , CONT_RELATION_CD          , CONT_ZIP_CD_GB            , CONT_ZIP_CD_DM_GB         , CONT_ZIP_CD               , CONT_ADDR_1
                 , CONT_ADDR_2               , CONT_CALL_SITE_GB         , CONT_OFF_TEL_DDD          , CONT_OFF_TEL              , CONT_TEL_DDD
                 , CONT_TEL_NO               , CONT_HP_NO                , CONT_E_MAIL               , CONT_FAX                  , CAR_SEQ
                 , CAR_HAN_NO                , CAR_ID_GB                 , CAR_ID                    , CAR_APPR_NUM_TON          , CAR_OLD_R
                 , CAR_GAEK                  , CAR_AMT                   , CAR_REG_DATE              , CAR_NO                    , CAR_OUT_NO
                 , CAR_NO_GB                 , CAR_NO_L                  , CAR_NO_S1                 , CAR_NO_S2                 , CAR_NO_CITY
                 , CAR_USE                   , CAR_NM_CD                 , CAR_KIND_CD               , CAR_TYPE_CD               , CAR_UNIT_GAEK
                 , CAR_UNIT_AMT              , CAR_Y_TYPE                , CAR_PASS_YEAR             , CAR_CC                    , CAR_ACC_GAEK
                 , CAR_ACC_AMT               , CAR_USE_USE               , CAR_AIRBAG                , CAR_NM                    , CAR_COUNTRY
                 , CAR_GRADE                 , CAR_RATE                  , CAR_ETC_GB                , CAR_ENG_TYPE              , PRE_CONT_CD
                 , CONT_NO                   , APP_DATE                  , ENT_DGN_DATE              , CONT_DATE                 , POL_PRINT_DATE
                 , APP_PRINT_DATE            , ENT_PRINT_DATE            , ENT_PATH                  , TRANS_APNT_DD             , END_GASU_CNT
                 , CASH_MTH_CHG_DATE         , ALL_CLIAM_DATE            , TREATY_HQ_CD              , TREATY_BRH_CD             , TREATY_CD
                 , APPY_FROM                 , APPY_TO                   , BASIS_FROM                , BASIS_TO                  , USER_ID
                 , IT_PROCESSING             , CAR_NEW_GB                , ISD_CUST_NO               , CONT_CUST_NO              , FILEKEY_FRONT
                 , FILEKEY_BACK              , FILEKEY_LEFT              , FILEKEY_RIGHT             , COR_ENDOR_NO              , FILEKEY_CONTRACT
                 , MAX_ENDOR_NO              , MAX_END_NAB_NO )
            select POL_NO                    , ENDOR_NO                  , trunc(sysdate)            , ENDOR_STATUS              , ENT_DGN_NO
                 , CUST_NO                   , CO_NO                     , BCO_NO                    , OWN_CD                    , INDGRP_GB
                 , CONT_KIND                 , CONT_TYPE                 , B_ENT_AMT                 , BASIC_PREM                , NA_MTH
                 , ISTAR_CONT_DATE           , IEND_CONT_DATE            , I_KIND_CD                 , BNP_CNT                   , BNP_CNT_R
                 , CASH_MTH                  , CASH_ENT_TYPE             , TOT_INSUR_AMT             , APPY_SUM_PREM             , TOT_NAB_PREM
                 , RIDER_INSUR_AMT           , RIDER_PREM                , SUM_PREM                  , HOME_GB                   , CONT_YY
                 , CONT_MM                   , CONT_DD                   , TOT_NAB_CNT               , CONT_STATE                , STATE_ADD_DATE
                 , CLAIM_ACCUR_CNT           , CLAIM_LAST_DATE           , END_NAB_YM                , V_MAX_END_NAB_NO          , END_CASH_DATE
                 , FIRST_CASH_DATE           , END_CHANGE_DATE           , RCVD_STATE                , RENEW_GB                  , RENEW_DATE
                 , UNION_KIND                , SHORT_DAY_GB              , SHORT_R                   , GRPCONT_DSC_R             , GRPCONT_DSC_CAR_R             , IENT_CARR_CD
                 , IENT_CARR_R               , DSC_INC_CD                , DSC_INC_R                 , SPCIAL_INC_R              , SPCIAL_INC_APPY
                 , ALL_DMBO_R                , MUL_ACCI_RATE_CD          , ISD_P_CDGB                , ISD_CD                    , ISD_NAME
                 , ISD_CONT_RELATION_CD      , ISD_ZIP_CD_GB             , ISD_ZIP_CD_DM_GB          , ISD_ZIP_CD                , ISD_ADDR_1
                 , ISD_ADDR_2                , ISD_CALL_SITE_GB          , ISD_OFF_TEL_DDD           , ISD_OFF_TEL               , ISD_TEL_DDD
                 , ISD_TEL_NO                , ISD_HP_NO                 , ISD_E_MAIL                , ISD_FAX                   , ISD_ENRNER_RELATION_CD
                 , ISD_ENRNER_NAME           , ISD_ENRNER_PSN_NO         , CONT_CD_GB                , CONT_CD                   , CONT_NAME
                 , CONT_RELATION_CD          , CONT_ZIP_CD_GB            , CONT_ZIP_CD_DM_GB         , CONT_ZIP_CD               , CONT_ADDR_1
                 , CONT_ADDR_2               , CONT_CALL_SITE_GB         , CONT_OFF_TEL_DDD          , CONT_OFF_TEL              , CONT_TEL_DDD
                 , CONT_TEL_NO               , CONT_HP_NO                , CONT_E_MAIL               , CONT_FAX                  , CAR_SEQ
                 , CAR_HAN_NO                , CAR_ID_GB                 , CAR_ID                    , CAR_APPR_NUM_TON          , CAR_OLD_R
                 , CAR_GAEK                  , CAR_AMT                   , CAR_REG_DATE              , CAR_NO                    , CAR_OUT_NO
                 , CAR_NO_GB                 , CAR_NO_L                  , CAR_NO_S1                 , CAR_NO_S2                 , CAR_NO_CITY
                 , CAR_USE                   , CAR_NM_CD                 , CAR_KIND_CD               , CAR_TYPE_CD               , CAR_UNIT_GAEK
                 , CAR_UNIT_AMT              , CAR_Y_TYPE                , CAR_PASS_YEAR             , CAR_CC                    , CAR_ACC_GAEK
                 , CAR_ACC_AMT               , CAR_USE_USE               , CAR_AIRBAG                , CAR_NM                    , CAR_COUNTRY
                 , CAR_GRADE                 , CAR_RATE                  , CAR_ETC_GB                , CAR_ENG_TYPE              , PRE_CONT_CD
                 , CONT_NO                   , APP_DATE                  , ENT_DGN_DATE              , CONT_DATE                 , POL_PRINT_DATE
                 , APP_PRINT_DATE            , ENT_PRINT_DATE            , ENT_PATH                  , TRANS_APNT_DD             , END_GASU_CNT
                 , CASH_MTH_CHG_DATE         , ALL_CLIAM_DATE            , TREATY_HQ_CD              , TREATY_BRH_CD             , TREATY_CD
                 , APPY_FROM                 , APPY_TO                   , BASIS_FROM                , BASIS_TO                  , USER_ID
                 , IT_PROCESSING             , CAR_NEW_GB                , ISD_CUST_NO               , CONT_CUST_NO              , FILEKEY_FRONT
                 , FILEKEY_BACK              , FILEKEY_LEFT              , FILEKEY_RIGHT             , ENDOR_NO                  , FILEKEY_CONTRACT
                 , V_MAX_ENDOR_NO            , V_MAX_END_NAB_NO
              from TBID0001
             where POL_NO   = i_pol_no
               and ENDOR_NO = i_endor_no;
        exception
            when dup_val_on_index then
                V_ERRMESSAGE := 'DUP';
                raise e_dup;
            when others then
                V_ERRMESSAGE := '배서(소급)-계약정보(TBID0001T) 데이터 등록시 오류'||'('||sqlerrm||')';
                raise e_err;
        END;

        /*배서(소급)-자동차정보*/
        begin
            insert into TBID0011T
                 ( POL_NO           , ENDOR_NO         , INS_AIM_GB       , MLGUN_SEQ_NO     , WORK_DATE
                 , MLGUN_CD         , MLGUN_NAME       , MADE_CO          , ITEM_SPEC        , QTY
                 , PRICE            , MLGUN_AMT        , MLGUN_ENT_AMT    , BUY_YM           , REMARK
                 , APPY_FROM        , APPY_TO          , BASIS_FROM       , BASIS_TO         , IT_PROCESSING
                 , USER_ID )
            select POL_NO           , ENDOR_NO         , INS_AIM_GB       , MLGUN_SEQ_NO     , trunc(sysdate)
                 , MLGUN_CD         , MLGUN_NAME       , MADE_CO          , ITEM_SPEC        , QTY
                 , PRICE            , MLGUN_AMT        , MLGUN_ENT_AMT    , BUY_YM           , REMARK
                 , APPY_FROM        , APPY_TO          , BASIS_FROM       , BASIS_TO         , IT_PROCESSING
                 , USER_ID
              from TBID0011
             where POL_NO   = i_pol_no
               and ENDOR_NO = i_endor_no;
        exception
            when dup_val_on_index then
                V_ERRMESSAGE := 'DUP';
                raise e_dup;
             when others then
                V_ERRMESSAGE := '배서(소급)-자동차정보(TBID0011T) 데이터 등록시 오류'||'('||sqlerrm||')';
                raise e_err;
        END;

        /*배서(소급)-특별특약정보*/
        begin
            insert into TBID0012T
                 ( POL_NO           , ENDOR_NO         , RIDER_ESP_GB     , RATE_CD          , WORK_DATE
                 , APPY_R           , PREM             , APPY_INS_AMT     , APPY_DUCT_AMT    , APPY_FROM
                 , APPY_TO          , BASIS_FROM       , BASIS_TO         , IT_PROCESSING    , USER_ID )
            select POL_NO           , ENDOR_NO         , RIDER_ESP_GB     , RATE_CD          , trunc(sysdate)
                 , APPY_R           , PREM             , APPY_INS_AMT     , APPY_DUCT_AMT    , APPY_FROM
                 , APPY_TO          , BASIS_FROM       , BASIS_TO         , IT_PROCESSING    , USER_ID
              from TBID0012
             where POL_NO   = i_pol_no
               and ENDOR_NO = i_endor_no;
        exception
            when dup_val_on_index then
                V_ERRMESSAGE := 'DUP';
                raise e_dup;
            when others then
                V_ERRMESSAGE := '배서(소급)-특별특약정보(TBID0012T) 데이터 등록시 오류'||'('||sqlerrm||')';
                raise e_err;
        END;

        /*배서(소급)-담보별보험료*/
        begin
            insert into TBID0013T
                 ( POL_NO                 , ENDOR_NO               , BASIC_SCONT_GB         , DMBO_CD                , APPY_FROM
                 , WORK_DATE              , ACDNT_RESP_WANT        , MAN_RESP_WANT          , INSUR_AMT              , INSUR_AMT_GB
                 , DUCT_AMT_GB            , BASIC_PREM             , DMBO_START_DATE        , DMBO_END_DATE          , APPY_PREM
                 , BASIC_RANGE_R          , CANCEL_CALC_GB         , APPY_TO                , BASIS_FROM             , BASIS_TO
                 , BASIC_YEAR_PREM        , APPY_YEAR_PREM         , CALC_YN                , CALC_TEMP              , IT_PROCESSING
                 , USER_ID , GRP_DMBO_RATE)
            select POL_NO                 , ENDOR_NO               , BASIC_SCONT_GB         , DMBO_CD                , APPY_FROM
                 , trunc(sysdate)         , ACDNT_RESP_WANT        , MAN_RESP_WANT          , INSUR_AMT              , INSUR_AMT_GB
                 , DUCT_AMT_GB            , BASIC_PREM             , DMBO_START_DATE        , DMBO_END_DATE          , APPY_PREM
                 , BASIC_RANGE_R          , CANCEL_CALC_GB         , APPY_TO                , BASIS_FROM             , BASIS_TO
                 , BASIC_YEAR_PREM        , APPY_YEAR_PREM         , NULL                   , NULL                   , IT_PROCESSING
                 , USER_ID, GRP_DMBO_RATE
              from TBID0013
             where POL_NO   = i_pol_no
               and ENDOR_NO = i_endor_no;
        exception
            when dup_val_on_index then
                V_ERRMESSAGE := 'DUP';
                raise e_dup;
            when others then
                V_ERRMESSAGE := '배서(소급)-담보별보험료(TBID0013T) 데이터 등록시 오류'||'('||sqlerrm||')';
                raise e_err;
        END;

        /*배서(소급)-담보기간별보험료*/
        begin
            insert into TBID0014T
                 ( POL_NO             , ENDOR_NO           , DMBO_CD            , CALC_FYMD          , WORK_DATE
                 , CALC_EYMD          , BASIC_PREM         , APPY_PREM          , APPY_FROM          , APPY_TO
                 , BASIS_FROM         , BASIS_TO           , BASIC_YEAR_PREM    , APPY_YEAR_PREM     , IT_PROCESSING
                 , USER_ID )
            select POL_NO             , ENDOR_NO           , DMBO_CD            , CALC_FYMD          , trunc(sysdate)
                 , CALC_EYMD          , BASIC_PREM         , APPY_PREM          , APPY_FROM          , APPY_TO
                 , BASIS_FROM         , BASIS_TO           , BASIC_YEAR_PREM    , APPY_YEAR_PREM     , IT_PROCESSING
                 , USER_ID
              from TBID0014
             where POL_NO   = i_pol_no
               and ENDOR_NO = i_endor_no;
        exception
            when dup_val_on_index then
                V_ERRMESSAGE := 'DUP';
                raise e_dup;
            when others then
                V_ERRMESSAGE := '배서(소급)-담보기간별보험료(TBID0014T) 데이터 등록시 오류'||'('||sqlerrm||')';
                raise e_err;
        END;

        /*배서(소급)-담보별분납계획*/
        begin
            insert into TBID0015T
                 ( POL_NO              , ENDOR_NO            , BNP_NO              , SEQ_NO              , DMBO_CD
                 , WORK_DATE           , BASIC_PREM          , DMBO_PREM           , ISTAR_VALID_DATE    , IEND_VALID_DATE
                 , OLD_ENDOR_NO        , APPY_FROM           , APPY_TO             , BASIS_FROM          , BASIS_TO
                 , IT_PROCESSING       , USER_ID )
            select POL_NO              , i_endor_no          , BNP_NO              , SEQ_NO              , DMBO_CD
                 , trunc(sysdate)      , BASIC_PREM          , DMBO_PREM           , ISTAR_VALID_DATE    , IEND_VALID_DATE
                 , OLD_ENDOR_NO        , APPY_FROM           , APPY_TO             , BASIS_FROM          , BASIS_TO
                 , IT_PROCESSING       , USER_ID
              from TBID0015
             where POL_NO   = i_pol_no
               and ENDOR_NO = V_MAX_ENDOR_NO;
        exception
            when dup_val_on_index then
                V_ERRMESSAGE := 'DUP';
                raise e_dup;
            when others then
                V_ERRMESSAGE := '배서(소급)-담보별분납계획(TBID0015T) 데이터 등록시 오류'||'('||sqlerrm||')';
                raise e_err;
        END;

        /*배서(소급)-분납계획*/
        begin
            insert into TBID0016T
                 ( POL_NO            , ENDOR_NO          , BNP_NO            , SEQ_NO            , WORK_DATE
                 , I_KIND_CD         , RCPT_CD           , NA_DATE           , ACCOUNT_MTH       , ACCOUNT_ID
                 , MANG_NO           , BNP_GUIDE_DATE    , BNP_RATION        , BNP_DATE          , BNP_PREM
                 , BNP_DEDUCT_AMT    , PROC_STATUS       , RCPT_GB           , RCPT_NO           , PRINT_CNT
                 , TREATY_HQ_CD      , TREATY_BRH_CD     , TREATY_CD         , APPY_FROM         , APPY_TO
                 , BASIS_FROM        , BASIS_TO          , IT_PROCESSING     , USER_ID )
            select POL_NO            , i_endor_no        , BNP_NO            , SEQ_NO            , trunc(sysdate)
                 , I_KIND_CD         , RCPT_CD           , NA_DATE           , ACCOUNT_MTH       , ACCOUNT_ID
                 , MANG_NO           , BNP_GUIDE_DATE    , BNP_RATION        , BNP_DATE          , BNP_PREM
                 , BNP_DEDUCT_AMT    , PROC_STATUS       , RCPT_GB           , RCPT_NO           , PRINT_CNT
                 , TREATY_HQ_CD      , TREATY_BRH_CD     , TREATY_CD         , APPY_FROM         , APPY_TO
                 , BASIS_FROM        , BASIS_TO          , IT_PROCESSING     , USER_ID
              from TBID0016
             where POL_NO   = i_pol_no
               and ENDOR_NO = V_MAX_ENDOR_NO;
        exception
            when dup_val_on_index then
                V_ERRMESSAGE := 'DUP';
                raise e_dup;
            when others then
                V_ERRMESSAGE := '배서(소급)-분납계획(TBID0016T) 데이터 등록시 오류'||'('||sqlerrm||')';
                raise e_err;
        END;

        /*배서(소급)-질권정보*/
        begin
            insert into TBID0103T
                 ( POL_NO            , ENDOR_NO          , PLG_SEQ           , WORK_DATE         , BCO_ENT_NO
                 , PLG_AMT           , PLG_SPEC          , PLG_SETUP_DATE    , PLG_CD            , PLG_NAME
                 , ZIP_CD            , ADDR_1            , ADDR_2            , PLG_GB            , APPY_FROM
                 , APPY_TO           , BASIS_FROM        , BASIS_TO          , IT_PROCESSING     , USER_ID )
            select POL_NO            , ENDOR_NO          , PLG_SEQ           , trunc(sysdate)    , BCO_ENT_NO
                 , PLG_AMT           , PLG_SPEC          , PLG_SETUP_DATE    , PLG_CD            , PLG_NAME
                 , ZIP_CD            , ADDR_1            , ADDR_2            , PLG_GB            , APPY_FROM
                 , APPY_TO           , BASIS_FROM        , BASIS_TO          , IT_PROCESSING     , USER_ID
              from TBID0103
             where POL_NO   = i_pol_no
               and ENDOR_NO = i_endor_no;
        exception
            when dup_val_on_index then
                V_ERRMESSAGE := 'DUP';
                raise e_dup;
            when others then
                V_ERRMESSAGE := '배서(소급)-질권정보(TBID0103T) 데이터 등록시 오류'||'('||sqlerrm||')';
                raise e_err;
        END;

        /*배서(소급)-운전자정보*/
        begin
            insert into TBID0104T
                 ( POL_NO           , ENDOR_NO         , DRV_SEQ          , WORK_DATE        , DRV_CARRER
                 , CONT_AGE         , LICENSE_GB       , LICENSE_NO       , LICENSE_DATE     , SEX_FM
                 , DRV_GB           , DRV_NAME         , DRV_ID           , ISD_P_REL        , APPY_FROM
                 , APPY_TO          , BASIS_FROM       , BASIS_TO         , IT_PROCESSING    , USER_ID )
            select POL_NO           , ENDOR_NO         , DRV_SEQ          , trunc(sysdate)   , DRV_CARRER
                 , CONT_AGE         , LICENSE_GB       , LICENSE_NO       , LICENSE_DATE     , SEX_FM
                 , DRV_GB           , DRV_NAME         , DRV_ID           , ISD_P_REL        , APPY_FROM
                 , APPY_TO          , BASIS_FROM       , BASIS_TO         , IT_PROCESSING    , USER_ID
              from TBID0104
             where POL_NO   = i_pol_no
               and ENDOR_NO = i_endor_no;
        exception
            when dup_val_on_index then
                V_ERRMESSAGE := 'DUP';
                raise e_dup;
            when others then
                V_ERRMESSAGE := '배서(소급)-운전자정보(TBID0104T) 데이터 등록시 오류'||'('||sqlerrm||')';
                raise e_err;
        END;

        /*계약(소급)-변경이력*/
        begin
            insert into TBIC0202T
                 ( POL_NO                , ENDOR_NO              , WORK_DATE             , ENDOR_STATUS          , ENDOR_RESION
                 , ENDOR_BEFORE_AMT      , ENDOR_BEFORE_PREM     , ENDOR_AFTER_AMT       , ENDOR_AFTER_PREM      , CHANGE_GB
                 , PREM_DIFF_AMT         , READY_AMT_DIFF        , PROC_TIME             , PROC_TREATY           , APPY_FROM
                 , APPY_TO               , BASIS_FROM            , BASIS_TO              , REQSTER               , CONT_RELATION
                 , ACPT_DATE             , CALC_GB               , GET_GB                , CALC_MTD              , ENDOR_GB
                 , CALC_FROM             , CALC_TO               , ENDOR_BEF_RD_AMT      , ENDOR_AFTER_RD_AMT    , ACDNT_NO
                 , BSN_DOC_NO            , I_KIND_CD             , TREATY_HQ_CD          , TREATY_BRH_CD         , TREATY_CD
                 , IT_PROCESSING         , USER_ID )
            select POL_NO                , ENDOR_NO              , trunc(sysdate)        , ENDOR_STATUS          , ENDOR_RESION
                 , ENDOR_BEFORE_AMT      , ENDOR_BEFORE_PREM     , ENDOR_AFTER_AMT       , ENDOR_AFTER_PREM      , CHANGE_GB
                 , PREM_DIFF_AMT         , READY_AMT_DIFF        , PROC_TIME             , PROC_TREATY           , APPY_FROM
                 , APPY_TO               , BASIS_FROM            , BASIS_TO              , REQSTER               , CONT_RELATION
                 , ACPT_DATE             , CALC_GB               , GET_GB                , CALC_MTD              , ENDOR_GB
                 , CALC_FROM             , CALC_TO               , ENDOR_BEF_RD_AMT      , ENDOR_AFTER_RD_AMT    , ACDNT_NO
                 , BSN_DOC_NO            , I_KIND_CD             , TREATY_HQ_CD          , TREATY_BRH_CD         , TREATY_CD
                 , IT_PROCESSING         , USER_ID
              from TBIC0202
             where POL_NO   = i_pol_no
               and ENDOR_NO = i_endor_no;
        exception
            when dup_val_on_index then
                V_ERRMESSAGE := 'DUP';
                raise e_dup;
            when others then
                V_ERRMESSAGE := '계약(소급)-변경이력(TBIC0202T) 데이터 등록시 오류'||'('||sqlerrm||')';
                raise e_err;
        END;

        /*계약(소급)-변경이력명세*/
        begin
            insert into TBIC0203T
                 ( POL_NO               , ENDOR_NO             , ENDOR_SUB_SEQ        , ENDOR_CD             , DETAIL_ITEM
                 , WORK_DATE            , ENDOR_ITEM           , ENDOR_AFTER_ITEM     , ENDOR_BEFORE_ITEM    , APPY_DATE
                 , IT_PROCESSING        , USER_ID )
            select POL_NO               , ENDOR_NO             , ENDOR_SUB_SEQ        , ENDOR_CD             , DETAIL_ITEM
                 , trunc(sysdate)       , ENDOR_ITEM           , ENDOR_AFTER_ITEM     , ENDOR_BEFORE_ITEM    , APPY_DATE
                 , IT_PROCESSING        , USER_ID
              from TBIC0203
             where POL_NO   = i_pol_no
               and ENDOR_NO = i_endor_no;
        exception
            when dup_val_on_index then
                V_ERRMESSAGE := 'DUP';
                raise e_dup;
            when others then
                V_ERRMESSAGE := '계약(소급)-변경이력명세(TBIC0203T) 데이터 등록시 오류'||'('||sqlerrm||')';
                raise e_err;
        END;

        o_err_msg := 'OK';

    /*소급에서 배서로 옮긴다. 소급 다 끝나고 배서로 데이터 옮기는 작업*/
    elsif i_trans_gb = '2' then

        V_ERRTITLE := '소급에서 배서로(I_TRANS_GB=2): 옮길 배서번호 찾기';

        /*****************************************************************/
        /* 기준배서번호, 소급배서 최대배서번호 ,최종납입회차             */
        /*****************************************************************/
        begin
            select min(COR_ENDOR_NO), max(ENDOR_NO), max(END_NAB_NO)
              into V_COR_ENDOR_NO, V_MAX_NEW_ENDOR_NO, V_END_NAB_NO
              from TBID0001T
             where POL_NO = i_pol_no
               and ENDOR_STATUS = '3'
               and WORK_DATE = to_date(i_work_date, 'YYYYMMDD');
        exception
            when others then
                V_ERRMESSAGE := '배서번호 검색 오류'||'('||sqlerrm||')';
                raise e_err;
        end;

        PR_INSERT_LOG(l_log_date,l_log_sp_name ,i_pol_no ,'--','--', '기준배서번호, 소급배서 최대배서번호 ,최종납입회차' || 'V_COR_ENDOR_NO:' || V_COR_ENDOR_NO || 'V_MAX_NEW_ENDOR_NO:' || V_MAX_NEW_ENDOR_NO || 'V_END_NAB_NO:' || V_END_NAB_NO);

        V_ERRTITLE := '분납계획 검색(I_TRANS_GB=2)';

        /*****************************************************************/
        /* 수납 최종처리여부 확인                                        */
        /*****************************************************************/
        begin
            select nvl(count(*), 0)
              into V_PAYMENT_CHECK
              from TBID0016T
             where POL_NO   = i_pol_no
               and ENDOR_NO = V_MAX_NEW_ENDOR_NO
               and WORK_DATE = to_date(i_work_date, 'YYYYMMDD')
               and BNP_NO   = V_END_NAB_NO
               and NA_DATE IS NULL;

            exception
                when no_data_found then
                    V_PAYMENT_CHECK := 0;
                when others then
                    V_ERRMESSAGE := '분납계획 검색 오류'||'('||sqlerrm||')';
                    raise e_err;
        end;

        PR_INSERT_LOG(l_log_date,l_log_sp_name ,i_pol_no ,'--','--', '수납 최종처리여부 확인' || 'V_PAYMENT_CHECK:' || V_PAYMENT_CHECK );

        if V_PAYMENT_CHECK = 0 then
            V_ERRTITLE := '소급에서 배서로(I_TRANS_GB=2)';

            /*배서-계약정보*/
            begin
                insert into TBID0001
                     ( POL_NO                    , ENDOR_NO                                              , ENDOR_STATUS              , ENT_DGN_NO
                     , CUST_NO                   , CO_NO                     , BCO_NO                    , OWN_CD                    , INDGRP_GB
                     , CONT_KIND                 , CONT_TYPE                 , B_ENT_AMT                 , BASIC_PREM                , NA_MTH
                     , ISTAR_CONT_DATE           , IEND_CONT_DATE            , I_KIND_CD                 , BNP_CNT                   , BNP_CNT_R
                     , CASH_MTH                  , CASH_ENT_TYPE             , TOT_INSUR_AMT             , APPY_SUM_PREM             , TOT_NAB_PREM
                     , RIDER_INSUR_AMT           , RIDER_PREM                , SUM_PREM                  , HOME_GB                   , CONT_YY
                     , CONT_MM                   , CONT_DD                   , TOT_NAB_CNT               , CONT_STATE                , STATE_ADD_DATE
                     , CLAIM_ACCUR_CNT           , CLAIM_LAST_DATE           , END_NAB_YM                , END_NAB_NO                , END_CASH_DATE
                     , FIRST_CASH_DATE           , END_CHANGE_DATE           , RCVD_STATE                , RENEW_GB                  , RENEW_DATE
                     , UNION_KIND                , SHORT_DAY_GB              , SHORT_R                   , GRPCONT_DSC_R             , IENT_CARR_CD
                     , IENT_CARR_R               , DSC_INC_CD                , DSC_INC_R                 , SPCIAL_INC_R              , SPCIAL_INC_APPY
                     , ALL_DMBO_R                , MUL_ACCI_RATE_CD          , ISD_P_CDGB                , ISD_CD                    , ISD_NAME
                     , ISD_CONT_RELATION_CD      , ISD_ZIP_CD_GB             , ISD_ZIP_CD_DM_GB          , ISD_ZIP_CD                , ISD_ADDR_1
                     , ISD_ADDR_2                , ISD_CALL_SITE_GB          , ISD_OFF_TEL_DDD           , ISD_OFF_TEL               , ISD_TEL_DDD
                     , ISD_TEL_NO                , ISD_HP_NO                 , ISD_E_MAIL                , ISD_FAX                   , ISD_ENRNER_RELATION_CD
                     , ISD_ENRNER_NAME           , ISD_ENRNER_PSN_NO         , CONT_CD_GB                , CONT_CD                   , CONT_NAME
                     , CONT_RELATION_CD          , CONT_ZIP_CD_GB            , CONT_ZIP_CD_DM_GB         , CONT_ZIP_CD               , CONT_ADDR_1
                     , CONT_ADDR_2               , CONT_CALL_SITE_GB         , CONT_OFF_TEL_DDD          , CONT_OFF_TEL              , CONT_TEL_DDD
                     , CONT_TEL_NO               , CONT_HP_NO                , CONT_E_MAIL               , CONT_FAX                  , CAR_SEQ
                     , CAR_HAN_NO                , CAR_ID_GB                 , CAR_ID                    , CAR_APPR_NUM_TON          , CAR_OLD_R
                     , CAR_GAEK                  , CAR_AMT                   , CAR_REG_DATE              , CAR_NO                    , CAR_OUT_NO
                     , CAR_NO_GB                 , CAR_NO_L                  , CAR_NO_S1                 , CAR_NO_S2                 , CAR_NO_CITY
                     , CAR_USE                   , CAR_NM_CD                 , CAR_KIND_CD               , CAR_TYPE_CD               , CAR_UNIT_GAEK
                     , CAR_UNIT_AMT              , CAR_Y_TYPE                , CAR_PASS_YEAR             , CAR_CC                    , CAR_ACC_GAEK
                     , CAR_ACC_AMT               , CAR_USE_USE               , CAR_AIRBAG                , CAR_NM                    , CAR_COUNTRY
                     , CAR_GRADE                 , CAR_RATE                  , CAR_ETC_GB                , CAR_ENG_TYPE              , PRE_CONT_CD
                     , CONT_NO                   , APP_DATE                  , ENT_DGN_DATE              , CONT_DATE                 , POL_PRINT_DATE
                     , APP_PRINT_DATE            , ENT_PRINT_DATE            , ENT_PATH                  , TRANS_APNT_DD             , END_GASU_CNT
                     , CASH_MTH_CHG_DATE         , ALL_CLIAM_DATE            , TREATY_HQ_CD              , TREATY_BRH_CD             , TREATY_CD
                     , APPY_FROM
                     , APPY_TO
                     , BASIS_FROM
                     , BASIS_TO
                     , USER_ID                   , IT_PROCESSING             , CAR_NEW_GB                , ISD_CUST_NO               , CONT_CUST_NO
                     , FILEKEY_FRONT             , FILEKEY_BACK              , FILEKEY_LEFT              , FILEKEY_RIGHT             , FILEKEY_CONTRACT
                     , GRPCONT_DSC_CAR_R         , CUST_CAR_NM )
                select POL_NO                    , ENDOR_NO                                              , ENDOR_STATUS              , ENT_DGN_NO
                     , CUST_NO                   , CO_NO                     , BCO_NO                    , OWN_CD                    , INDGRP_GB
                     , CONT_KIND                 , CONT_TYPE                 , B_ENT_AMT                 , BASIC_PREM                , NA_MTH
                     , ISTAR_CONT_DATE           , IEND_CONT_DATE            , I_KIND_CD                 , BNP_CNT                   , BNP_CNT_R
                     , CASH_MTH                  , CASH_ENT_TYPE             , TOT_INSUR_AMT             , APPY_SUM_PREM             , TOT_NAB_PREM
                     , RIDER_INSUR_AMT           , RIDER_PREM                , SUM_PREM                  , HOME_GB                   , CONT_YY
                     , CONT_MM                   , CONT_DD                   , TOT_NAB_CNT               , CONT_STATE                , STATE_ADD_DATE
                     , CLAIM_ACCUR_CNT           , CLAIM_LAST_DATE           , END_NAB_YM                , END_NAB_NO                , END_CASH_DATE
                     , FIRST_CASH_DATE           , END_CHANGE_DATE           , RCVD_STATE                , RENEW_GB                  , RENEW_DATE
                     , UNION_KIND                , SHORT_DAY_GB              , SHORT_R                   , GRPCONT_DSC_R             , IENT_CARR_CD
                     , IENT_CARR_R               , DSC_INC_CD                , DSC_INC_R                 , SPCIAL_INC_R              , SPCIAL_INC_APPY
                     , ALL_DMBO_R                , MUL_ACCI_RATE_CD          , ISD_P_CDGB                , ISD_CD                    , ISD_NAME
                     , ISD_CONT_RELATION_CD      , ISD_ZIP_CD_GB             , ISD_ZIP_CD_DM_GB          , ISD_ZIP_CD                , ISD_ADDR_1
                     , ISD_ADDR_2                , ISD_CALL_SITE_GB          , ISD_OFF_TEL_DDD           , ISD_OFF_TEL               , ISD_TEL_DDD
                     , ISD_TEL_NO                , ISD_HP_NO                 , ISD_E_MAIL                , ISD_FAX                   , ISD_ENRNER_RELATION_CD
                     , ISD_ENRNER_NAME           , ISD_ENRNER_PSN_NO         , CONT_CD_GB                , CONT_CD                   , CONT_NAME
                     , CONT_RELATION_CD          , CONT_ZIP_CD_GB            , CONT_ZIP_CD_DM_GB         , CONT_ZIP_CD               , CONT_ADDR_1
                     , CONT_ADDR_2               , CONT_CALL_SITE_GB         , CONT_OFF_TEL_DDD          , CONT_OFF_TEL              , CONT_TEL_DDD
                     , CONT_TEL_NO               , CONT_HP_NO                , CONT_E_MAIL               , CONT_FAX                  , CAR_SEQ
                     , CAR_HAN_NO                , CAR_ID_GB                 , CAR_ID                    , CAR_APPR_NUM_TON          , CAR_OLD_R
                     , CAR_GAEK                  , CAR_AMT                   , CAR_REG_DATE              , CAR_NO                    , CAR_OUT_NO
                     , CAR_NO_GB                 , CAR_NO_L                  , CAR_NO_S1                 , CAR_NO_S2                 , CAR_NO_CITY
                     , CAR_USE                   , CAR_NM_CD                 , CAR_KIND_CD               , CAR_TYPE_CD               , CAR_UNIT_GAEK
                     , CAR_UNIT_AMT              , CAR_Y_TYPE                , CAR_PASS_YEAR             , CAR_CC                    , CAR_ACC_GAEK
                     , CAR_ACC_AMT               , CAR_USE_USE               , CAR_AIRBAG                , CAR_NM                    , CAR_COUNTRY
                     , CAR_GRADE                 , CAR_RATE                  , CAR_ETC_GB                , CAR_ENG_TYPE              , PRE_CONT_CD
                     , CONT_NO                   , APP_DATE                  , ENT_DGN_DATE              , CONT_DATE                 , POL_PRINT_DATE
                     , APP_PRINT_DATE            , ENT_PRINT_DATE            , ENT_PATH                  , TRANS_APNT_DD             , END_GASU_CNT
                     , CASH_MTH_CHG_DATE         , ALL_CLIAM_DATE            , TREATY_HQ_CD              , TREATY_BRH_CD             , TREATY_CD
                     , APPY_FROM
                     , APPY_TO
                     , BASIS_FROM
                     , BASIS_TO
                     , USER_ID                   , IT_PROCESSING             , CAR_NEW_GB                , ISD_CUST_NO               , CONT_CUST_NO
                     , FILEKEY_FRONT             , FILEKEY_BACK              , FILEKEY_LEFT              , FILEKEY_RIGHT             , FILEKEY_CONTRACT
                     , GRPCONT_DSC_CAR_R         , CUST_CAR_NM
                  from TBID0001T
                 where POL_NO       = i_pol_no
                   and ENDOR_NO     > V_COR_ENDOR_NO
                   and ENDOR_STATUS = '3'
                   and WORK_DATE    = to_date(i_work_date, 'YYYYMMDD');
            exception
                when dup_val_on_index then
                    V_ERRMESSAGE := '배서-계약정보(TBID0001T->TBID0001) 시 중복오류';
                    raise e_dup;
                when others then
                    V_ERRMESSAGE := '배서-계약정보(TBID0001) 데이터 등록시 오류'||'('||sqlerrm||')';
                    raise e_err;
            END;

            /*배서-자동차정보*/
            begin
                insert into TBID0011
                     ( POL_NO           , ENDOR_NO         , INS_AIM_GB       , MLGUN_SEQ_NO
                     , MLGUN_CD         , MLGUN_NAME       , MADE_CO          , ITEM_SPEC        , QTY
                     , PRICE            , MLGUN_AMT        , MLGUN_ENT_AMT    , BUY_YM           , REMARK
                     , APPY_FROM        , APPY_TO          , BASIS_FROM       , BASIS_TO         , IT_PROCESSING
                     , USER_ID )
                select POL_NO           , ENDOR_NO         , INS_AIM_GB       , MLGUN_SEQ_NO
                     , MLGUN_CD         , MLGUN_NAME       , MADE_CO          , ITEM_SPEC        , QTY
                     , PRICE            , MLGUN_AMT        , MLGUN_ENT_AMT    , BUY_YM           , REMARK
                     , APPY_FROM        , APPY_TO          , BASIS_FROM       , BASIS_TO         , IT_PROCESSING
                     , USER_ID
                  from TBID0011T
                 where POL_NO    = i_pol_no
                   and ENDOR_NO  > V_COR_ENDOR_NO
                   and WORK_DATE = to_date(i_work_date, 'YYYYMMDD');
            exception
                when dup_val_on_index then
                    V_ERRMESSAGE := '배서-자동차정보(TBID0011T->TBID0011) 시 중복오류';
                    raise e_dup;
                 when others then
                    V_ERRMESSAGE := '배서-자동차정보(TBID0011) 데이터 등록시 오류'||'('||sqlerrm||')';
                    raise e_err;
            END;

            /*배서-특별특약정보*/
            begin
                insert into TBID0012
                     ( POL_NO           , ENDOR_NO         , RIDER_ESP_GB     , RATE_CD
                     , APPY_R           , PREM             , APPY_INS_AMT     , APPY_DUCT_AMT    , APPY_FROM
                     , APPY_TO          , BASIS_FROM       , BASIS_TO         , IT_PROCESSING    , USER_ID )
                select POL_NO           , ENDOR_NO         , RIDER_ESP_GB     , RATE_CD
                     , APPY_R           , PREM             , APPY_INS_AMT     , APPY_DUCT_AMT    , APPY_FROM
                     , APPY_TO          , BASIS_FROM       , BASIS_TO         , IT_PROCESSING    , USER_ID
                  from TBID0012T
                 where POL_NO    = i_pol_no
                   and ENDOR_NO  > V_COR_ENDOR_NO
                   and WORK_DATE = to_date(i_work_date, 'YYYYMMDD');
            exception
                when dup_val_on_index then
                    V_ERRMESSAGE := '배서-특별특약정보(TBID0012T->TBID0012) 시 중복오류';
                    raise e_dup;
                when others then
                    V_ERRMESSAGE := '배서-특별특약정보(TBID0012) 데이터 등록시 오류'||'('||sqlerrm||')';
                    raise e_err;
            END;

            /*배서-담보별보험료 */
            begin
                insert into TBID0013
                     ( POL_NO                 , ENDOR_NO               , BASIC_SCONT_GB         , DMBO_CD                , APPY_FROM
                                              , ACDNT_RESP_WANT        , MAN_RESP_WANT          , INSUR_AMT              , INSUR_AMT_GB
                     , DUCT_AMT_GB            , BASIC_PREM             , DMBO_START_DATE        , DMBO_END_DATE          , APPY_PREM
                     , BASIC_RANGE_R          , CANCEL_CALC_GB         , APPY_TO                , BASIS_FROM             , BASIS_TO
                     , BASIC_YEAR_PREM        , APPY_YEAR_PREM         , IT_PROCESSING          , USER_ID )
                select POL_NO                 , ENDOR_NO               , BASIC_SCONT_GB         , DMBO_CD                , APPY_FROM
                                              , ACDNT_RESP_WANT        , MAN_RESP_WANT          , INSUR_AMT              , INSUR_AMT_GB
                     , DUCT_AMT_GB            , BASIC_PREM             , DMBO_START_DATE        , DMBO_END_DATE          , APPY_PREM
                     , BASIC_RANGE_R          , CANCEL_CALC_GB         , APPY_TO                , BASIS_FROM             , BASIS_TO
                     , BASIC_YEAR_PREM        , APPY_YEAR_PREM         , IT_PROCESSING          , USER_ID
                  from TBID0013T
                 where POL_NO    = i_pol_no
                   and ENDOR_NO  > V_COR_ENDOR_NO
                   and WORK_DATE = to_date(i_work_date, 'YYYYMMDD');
            exception
                when dup_val_on_index then
                    V_ERRMESSAGE := '배서-담보별보험료(TBID0013T->TBID0013) 시 중복오류';
                    raise e_dup;
                when others then
                    V_ERRMESSAGE := '배서-담보별보험료(TBID0013) 데이터 등록시 오류'||'('||sqlerrm||')';
                    raise e_err;
            END;

            /*배서-담보기간별보험료*/
            begin
                insert into TBID0014
                     ( POL_NO             , ENDOR_NO           , DMBO_CD            , CALC_FYMD
                     , CALC_EYMD          , BASIC_PREM         , APPY_PREM          , APPY_FROM          , APPY_TO
                     , BASIS_FROM         , BASIS_TO           , BASIC_YEAR_PREM    , APPY_YEAR_PREM     , IT_PROCESSING
                     , USER_ID )
                select POL_NO             , ENDOR_NO           , DMBO_CD            , CALC_FYMD
                     , CALC_EYMD          , BASIC_PREM         , APPY_PREM          , APPY_FROM          , APPY_TO
                     , BASIS_FROM         , BASIS_TO           , BASIC_YEAR_PREM    , APPY_YEAR_PREM     , IT_PROCESSING
                     , USER_ID
                  from TBID0014T
                 where POL_NO    = i_pol_no
                   and ENDOR_NO  > V_COR_ENDOR_NO
                   and WORK_DATE = to_date(i_work_date, 'YYYYMMDD');
            exception
                when dup_val_on_index then
                    V_ERRMESSAGE := '배서-담보기간별보험료(TBID0014T->TBID0014) 시 중복오류';
                    raise e_dup;
                when others then
                    V_ERRMESSAGE := '배서-담보기간별보험료(TBID0014) 데이터 등록시 오류'||'('||sqlerrm||')';
                    raise e_err;
            END;

            /*배서 - 담보별분납계획*/
            begin
                insert into TBID0015
                     ( POL_NO              , ENDOR_NO            , BNP_NO              , SEQ_NO              , DMBO_CD
                                           , BASIC_PREM          , DMBO_PREM           , ISTAR_VALID_DATE    , IEND_VALID_DATE
                     , OLD_ENDOR_NO        , APPY_FROM           , APPY_TO             , BASIS_FROM          , BASIS_TO
                     , IT_PROCESSING       , USER_ID )
                select POL_NO              , ENDOR_NO            , BNP_NO              , SEQ_NO              , DMBO_CD
                                           , BASIC_PREM          , DMBO_PREM           , ISTAR_VALID_DATE    , IEND_VALID_DATE
                     , OLD_ENDOR_NO        , APPY_FROM           , APPY_TO             , BASIS_FROM          , BASIS_TO
                     , IT_PROCESSING       , USER_ID
                  from TBID0015T
                 where POL_NO    = i_pol_no
                   and ENDOR_NO  > V_COR_ENDOR_NO
                   and WORK_DATE = to_date(i_work_date, 'YYYYMMDD');
            exception
                when dup_val_on_index then
                    V_ERRMESSAGE := '배서-담보별분납계획(TBID0015T->TBID0015) 시 중복오류';
                    raise e_dup;
                when others then
                    V_ERRMESSAGE := '배서-담보별분납계획(TBID0015) 데이터 등록시 오류'||'('||sqlerrm||')';
                    raise e_err;
            END;

            /*배서-분납계획*/
            begin
                insert into TBID0016
                     ( POL_NO            , ENDOR_NO          , BNP_NO            , SEQ_NO
                     , I_KIND_CD         , RCPT_CD           , NA_DATE           , ACCOUNT_MTH       , ACCOUNT_ID
                     , MANG_NO           , BNP_GUIDE_DATE    , BNP_RATION        , BNP_DATE          , BNP_PREM
                     , BNP_DEDUCT_AMT    , PROC_STATUS       , RCPT_GB           , RCPT_NO           , PRINT_CNT
                     , TREATY_HQ_CD      , TREATY_BRH_CD     , TREATY_CD         , APPY_FROM         , APPY_TO
                     , BASIS_FROM        , BASIS_TO          , IT_PROCESSING     , USER_ID )
                select POL_NO            , ENDOR_NO          , BNP_NO            , SEQ_NO
                     , I_KIND_CD         , RCPT_CD           , NA_DATE           , ACCOUNT_MTH       , ACCOUNT_ID
                     , MANG_NO           , BNP_GUIDE_DATE    , BNP_RATION        , BNP_DATE          , BNP_PREM
                     , BNP_DEDUCT_AMT    , PROC_STATUS       , RCPT_GB           , RCPT_NO           , PRINT_CNT
                     , TREATY_HQ_CD      , TREATY_BRH_CD     , TREATY_CD         , APPY_FROM         , APPY_TO
                     , BASIS_FROM        , BASIS_TO          , IT_PROCESSING     , USER_ID
                  from TBID0016T
                 where POL_NO   = i_pol_no
                   and ENDOR_NO  > V_COR_ENDOR_NO
                   and WORK_DATE = to_date(i_work_date, 'YYYYMMDD');
            exception
                when dup_val_on_index then
                    V_ERRMESSAGE := '배서-분납계획(TBID0016T->TBID0016) 시 중복오류';
                    raise e_dup;
                when others then
                    V_ERRMESSAGE := '배서-분납계획(TBID0016) 데이터 등록시 오류'||'('||sqlerrm||')';
                    raise e_err;
            END;

            /*배서-질권정보    */
            begin
                insert into TBID0103
                     ( POL_NO            , ENDOR_NO          , PLG_SEQ                               , BCO_ENT_NO
                     , PLG_AMT           , PLG_SPEC          , PLG_SETUP_DATE    , PLG_CD            , PLG_NAME
                     , ZIP_CD            , ADDR_1            , ADDR_2            , PLG_GB            , APPY_FROM
                     , APPY_TO           , BASIS_FROM        , BASIS_TO          , IT_PROCESSING     , USER_ID )
                select POL_NO            , ENDOR_NO          , PLG_SEQ                               , BCO_ENT_NO
                     , PLG_AMT           , PLG_SPEC          , PLG_SETUP_DATE    , PLG_CD            , PLG_NAME
                     , ZIP_CD            , ADDR_1            , ADDR_2            , PLG_GB            , APPY_FROM
                     , APPY_TO           , BASIS_FROM        , BASIS_TO          , IT_PROCESSING     , USER_ID
                  from TBID0103T
                 where POL_NO    = i_pol_no
                   and ENDOR_NO  > V_COR_ENDOR_NO
                   and WORK_DATE = to_date(i_work_date, 'YYYYMMDD');
            exception
                when dup_val_on_index then
                    V_ERRMESSAGE := '배서-질권정보(TBID0103T->TBID0103) 시 중복오류';
                    raise e_dup;
                when others then
                    V_ERRMESSAGE := '배서-질권정보(TBID0103) 데이터 등록시 오류'||'('||sqlerrm||')';
                    raise e_err;
            END;

            /*배서-운전자정보  */
            begin
                insert into TBID0104
                     ( POL_NO           , ENDOR_NO         , DRV_SEQ                             , DRV_CARRER
                     , CONT_AGE         , LICENSE_GB       , LICENSE_NO       , LICENSE_DATE     , SEX_FM
                     , DRV_GB           , DRV_NAME         , DRV_ID           , ISD_P_REL        , APPY_FROM
                     , APPY_TO          , BASIS_FROM       , BASIS_TO         , IT_PROCESSING    , USER_ID )
                select POL_NO           , ENDOR_NO         , DRV_SEQ                             , DRV_CARRER
                     , CONT_AGE         , LICENSE_GB       , LICENSE_NO       , LICENSE_DATE     , SEX_FM
                     , DRV_GB           , DRV_NAME         , DRV_ID           , ISD_P_REL        , APPY_FROM
                     , APPY_TO          , BASIS_FROM       , BASIS_TO         , IT_PROCESSING    , USER_ID
                  from TBID0104T
                 where POL_NO    = i_pol_no
                   and ENDOR_NO  > V_COR_ENDOR_NO
                   and WORK_DATE = to_date(i_work_date, 'YYYYMMDD');
            exception
                when dup_val_on_index then
                    V_ERRMESSAGE := '배서-운전자정보(TBID0104T->TBID0104) 시 중복오류';
                    raise e_dup;
                when others then
                    V_ERRMESSAGE := '배서-운전자정보(TBID0104) 데이터 등록시 오류'||'('||sqlerrm||')';
                    raise e_err;
            END;

            /*계약-변경이력  */
            begin
                insert into TBIC0202
                     ( POL_NO                , ENDOR_NO                                      , ENDOR_STATUS          , ENDOR_RESION
                     , ENDOR_BEFORE_AMT      , ENDOR_BEFORE_PREM     , ENDOR_AFTER_AMT       , ENDOR_AFTER_PREM      , CHANGE_GB
                     , PREM_DIFF_AMT         , READY_AMT_DIFF        , PROC_TIME             , PROC_TREATY           , APPY_FROM
                     , APPY_TO               , BASIS_FROM            , BASIS_TO              , REQSTER               , CONT_RELATION
                     , ACPT_DATE             , CALC_GB               , GET_GB                , CALC_MTD              , ENDOR_GB
                     , CALC_FROM             , CALC_TO               , ENDOR_BEF_RD_AMT      , ENDOR_AFTER_RD_AMT    , ACDNT_NO
                     , BSN_DOC_NO            , I_KIND_CD             , TREATY_HQ_CD          , TREATY_BRH_CD         , TREATY_CD
                     , IT_PROCESSING         , USER_ID )
                select POL_NO                , ENDOR_NO                                      , '3'                   , ENDOR_RESION
                     , ENDOR_BEFORE_AMT      , ENDOR_BEFORE_PREM     , ENDOR_AFTER_AMT       , ENDOR_AFTER_PREM      , CHANGE_GB
                     , PREM_DIFF_AMT         , READY_AMT_DIFF        , PROC_TIME             , PROC_TREATY           , APPY_FROM
                     , APPY_TO               , BASIS_FROM            , BASIS_TO              , REQSTER               , CONT_RELATION
                     , ACPT_DATE             , CALC_GB               , GET_GB                , CALC_MTD              , ENDOR_GB
                     , CALC_FROM             , CALC_TO               , ENDOR_BEF_RD_AMT      , ENDOR_AFTER_RD_AMT    , ACDNT_NO
                     , BSN_DOC_NO            , I_KIND_CD             , TREATY_HQ_CD          , TREATY_BRH_CD         , TREATY_CD
                     , IT_PROCESSING         , USER_ID
                  from TBIC0202T
                 where POL_NO    = i_pol_no
                   and ENDOR_NO  > V_COR_ENDOR_NO
                   and WORK_DATE = to_date(i_work_date, 'YYYYMMDD');
            exception
                when dup_val_on_index then
                    V_ERRMESSAGE := '배서-변경이력(TBIC0202T->TBIC0202) 시 중복오류';
                    raise e_dup;
                when others then
                    V_ERRMESSAGE := '계약-변경이력(TBIC0202) 데이터 등록시 오류'||'('||sqlerrm||')';
                    raise e_err;
            END;

            /*계약-변경이력명세. 맨 마지막 소급배서 데이터만 개발원에 전송시키기 위에 IT_PROCESSING 변경처리함.*/
            begin
                insert into TBIC0203
                     ( POL_NO               , ENDOR_NO             , ENDOR_SUB_SEQ        , ENDOR_CD             , DETAIL_ITEM
                                            , ENDOR_ITEM           , ENDOR_AFTER_ITEM     , ENDOR_BEFORE_ITEM    , APPY_DATE
                     , USER_ID              , IT_PROCESSING )
                select POL_NO               , ENDOR_NO             , ENDOR_SUB_SEQ        , ENDOR_CD             , DETAIL_ITEM
                                            , ENDOR_ITEM           , ENDOR_AFTER_ITEM     , ENDOR_BEFORE_ITEM    , APPY_DATE
                     , USER_ID              , decode(ENDOR_NO, V_MAX_NEW_ENDOR_NO, IT_PROCESSING, '99999999999999')
                  from TBIC0203T
                 where POL_NO   = i_pol_no
                   and ENDOR_NO  > V_COR_ENDOR_NO
                   and WORK_DATE = to_date(i_work_date, 'YYYYMMDD');
            exception
                when dup_val_on_index then
                    V_ERRMESSAGE := '배서-변경이력명세(TBIC0203T->TBIC0203) 시 중복오류';
                    raise e_dup;
                when others then
                    V_ERRMESSAGE := '계약-변경이력명세(TBIC0203) 데이터 등록시 오류'||'('||sqlerrm||')';
                    raise e_err;
            END;

            /* 이관 완료 처리 */
            begin
                update TBID0001T
                   set ENDOR_STATUS = '4'
                 where POL_NO    = i_pol_no
                   and ENDOR_NO  > V_COR_ENDOR_NO
                   and WORK_DATE = to_date(i_work_date, 'YYYYMMDD');
            exception
                when others then
                    V_ERRMESSAGE := '배서(소급)-이관 완료 처리 (TBID0001T) 오류'||'('||sqlerrm||')';
                    raise e_err;
            END;

            /*TBIC 테이블로 맨 마지막 배서 데이터를 이관한다. */
            PR_ENDOR_TO_POL_INSERT(i_pol_no, V_MAX_NEW_ENDOR_NO, r_return_ok);

            if  r_return_ok = 'OK' then
                o_err_msg := 'OK';
            else
                o_err_msg := 'NOT_OK';
            end if;
        else
            o_err_msg := 'OK';
        end if;

    /*소급데이터를 삭제한다.*/
    elsif i_trans_gb = '3' then
        V_ERRTITLE := '소급데이터 삭제(I_TRANS_GB=3)';

        /*소급배서 완료후 배서테이블로 이관한 데이터가 있는지 확인. 있으면 오류처리해야함*/
        begin
            select COUNT(*)
              into V_TRANS_CNT
              from TBID0001T
             where POL_NO       = i_pol_no
               and WORK_DATE    = to_date(i_work_date, 'YYYYMMDD')
               and ENDOR_STATUS = '4';
        exception when others then
            V_ERRMESSAGE := '소급배서 데이터 검색 오류'||'('||sqlerrm||')';
            raise e_err;
        end;

        if V_TRANS_CNT > 0 then
            V_ERRMESSAGE := '소급배서 완료된 데이터 입니다. 삭제 불가합니다.';
            raise e_err;
        end if;

        /*배서(소급)-계약정보 데이터 삭제 */
        begin
            delete TBID0001T
             where POL_NO     = i_pol_no
               and WORK_DATE  = to_date(i_work_date, 'YYYYMMDD');
        exception when others then
            V_ERRMESSAGE := '배서(소급)-계약정보 데이터 삭제 오류'||'('||sqlerrm||')';
            raise e_err;
        end;

        /*배서(소급)-자동차정보 데이터 삭제 */
        begin
            delete TBID0011T
             where POL_NO     = i_pol_no
               and WORK_DATE  = to_date(i_work_date, 'YYYYMMDD');
        exception when others then
            V_ERRMESSAGE := '배서(소급)-자동차정보 데이터 삭제 오류'||'('||sqlerrm||')';
            raise e_err;
        end;

        /*배서(소급)-특별특약정보 데이터 삭제 */
        begin
            delete TBID0012T
             where POL_NO     = i_pol_no
               and WORK_DATE  = to_date(i_work_date, 'YYYYMMDD');
        exception when others then
            V_ERRMESSAGE := '배서(소급)-특별특약정보 데이터 삭제 오류'||'('||sqlerrm||')';
            raise e_err;
        end;

        /*배서(소급)-담보별보험료 데이터 삭제 */
        begin
            delete TBID0013T
             where POL_NO     = i_pol_no
               and WORK_DATE  = to_date(i_work_date, 'YYYYMMDD');
        exception when others then
            V_ERRMESSAGE := '배서(소급)-담보별보험료 데이터 삭제 오류'||'('||sqlerrm||')';
            raise e_err;
        end;

        /*배서(소급)-담보기간별보험료 데이터 삭제 */
        begin
            delete TBID0014T
             where POL_NO     = i_pol_no
               and WORK_DATE  = to_date(i_work_date, 'YYYYMMDD');
        exception when others then
            V_ERRMESSAGE := '배서(소급)-담보기간별보험료 데이터 삭제 오류'||'('||sqlerrm||')';
            raise e_err;
        end;

        /*배서(소급)-담보별분납계획 데이터 삭제 */
        begin
            delete TBID0015T
             where POL_NO     = i_pol_no
               and WORK_DATE  = to_date(i_work_date, 'YYYYMMDD');
        exception when others then
            V_ERRMESSAGE := '배서(소급)-담보별분납계획 데이터 삭제 오류'||'('||sqlerrm||')';
            raise e_err;
        end;

        /*배서(소급)-분납계획 데이터 삭제 */
        begin
            delete TBID0016T
             where POL_NO     = i_pol_no
               and WORK_DATE  = to_date(i_work_date, 'YYYYMMDD');
        exception when others then
            V_ERRMESSAGE := '배서(소급)-분납계획 데이터 삭제 오류'||'('||sqlerrm||')';
            raise e_err;
        end;

        /*배서(소급)-질권정보 데이터 삭제 */
        begin
            delete TBID0103T
             where POL_NO     = i_pol_no
               and WORK_DATE  = to_date(i_work_date, 'YYYYMMDD');
        exception when others then
            V_ERRMESSAGE := '배서(소급)-질권정보 데이터 삭제 오류'||'('||sqlerrm||')';
            raise e_err;
        end;

        /*배서(소급)-운전자정보 데이터 삭제 */
        begin
            delete TBID0104T
             where POL_NO     = i_pol_no
               and WORK_DATE  = to_date(i_work_date, 'YYYYMMDD');
        exception when others then
            V_ERRMESSAGE := '배서(소급)-운전자정보 데이터 삭제 오류'||'('||sqlerrm||')';
            raise e_err;
        end;

        /*계약(소급)-변경이력 데이터 삭제 */
        begin
            delete TBIC0202T
             where POL_NO     = i_pol_no
               and WORK_DATE  = to_date(i_work_date, 'YYYYMMDD');
        exception when others then
            V_ERRMESSAGE := '계약(소급)-변경이력 데이터 삭제 오류'||'('||sqlerrm||')';
            raise e_err;
        end;

        /*계약(소급)-변경이력명세 데이터 삭제 */
        begin
            delete TBIC0203T
             where POL_NO     = i_pol_no
               and WORK_DATE  = to_date(i_work_date, 'YYYYMMDD');
        exception when others then
            V_ERRMESSAGE := '계약(소급)-변경이력명세 데이터 삭제 오류'||'('||sqlerrm||')';
            raise e_err;
        end;

        o_err_msg := 'OK';

    END IF;

exception
    when e_dup then
        o_err_msg := V_ERRMESSAGE;
    when e_err then
        o_err_msg := V_ERRTITLE    || ' : ' ||    V_ERRMESSAGE;
    when others then
        o_err_msg := V_ERRTITLE || '    : '    || substr(sqlerrm, 1, 250);
END;
CREATE -- added during DDL generation.
procedure          PR_TEST2 as
v_data     long;
s_data     varchar2(20);
s_pol_no   varchar2(20);
s_endor_no number;
r_result   varchar2(1000);
idx1       number;
idx2       number;

begin

    select  wm_concat(pol_no || '|' || max(endor_no))
      into  v_data
      from  tbid0001
     where  endor_status = 3
     group  by pol_no;

  --   select wm_concat(pol_no || '|' || endor_no)
  --   into  v_data
  --   from tbid0001 where END_NAB_NO = 2;

     idx1 := length(v_data) - length(replace(v_data,',','')) + 1;
     idx2 :=0;

     loop
         idx2 := idx2 + 1;

         if idx2 > idx1 then
            exit;
         end if;

         s_data     := regexp_substr(v_data,'[^,]+',1,idx2);
         s_pol_no   := regexp_substr(s_data,'[^|]+',1,1);
         s_endor_no := to_number(regexp_substr(s_data,'[^|]+',1,2));

         PR_ENDOR_TO_POL_INSERT(s_pol_no,s_endor_no,r_result);

    --     PR_INSERT_LOG('11111','PR_TEST2',s_pol_no,s_endor_no,'',r_result);

     end loop;
     commit;

end ;
                  CASE WHEN V_FORIGN_CAR_GB = '1' AND RATE08 IS NOT NULL THEN TO_CHAR(RATE08) ELSE '100' END FORIGN_R,
                  CASE WHEN V_LONG_LENT_CAR_GB = '1' AND V_BCO_DRV_GB = '1' AND RATE09 IS NOT NULL THEN TO_CHAR(RATE09) ELSE '100' END BCO_R,
                  CASE WHEN V_SAFE_CAR_GB = '1' AND RATE10 IS NOT NULL THEN TO_CHAR(RATE10) ELSE '100' END SAFE_R
                 FROM TBAA0006 B
                  WHERE B.CUST_NO = v_cust_no
                  AND B.CODE_LIST = v_car_kind_cd||''||(SELECT RATE_CD FROM TBIC0012 C WHERE C.POL_NO = v_pol_no AND C.RIDER_ESP_GB = '1' AND C.RATE_CD IN ('41','42','43'))||'03'
                  AND B.LAST_YN = 'Y'
                  AND B.APPY_START <= v_istar_cont_date
                  AND B.APPY_END >= v_istar_cont_date
               )WHERE 1=1)
            WHEN DMBO_CD = '13' THEN
              (SELECT ROUND( (GRP_RATE*SPORT_R*FORIGN_R*BCO_R*SAFE_R) /100000000, 2)
              FROM (
                SELECT CASE WHEN V_LONG_LENT_CAR_GB = '1' AND RATE04 IS NOT NULL THEN TO_CHAR(RATE04)
                   WHEN V_SHARE_CAR_GB = '1' AND RATE05 IS NOT NULL THEN TO_CHAR(RATE05)
                    WHEN V_TOW_CAR_GB = '1' AND RATE06 IS NOT NULL THEN TO_CHAR(RATE06)
                    ELSE TO_CHAR(RATE01) END GRP_RATE,
                  CASE WHEN V_SPORT_CAR_GB = '1' AND RATE07 IS NOT NULL THEN TO_CHAR(RATE07)  ELSE '100' END SPORT_R,
                  CASE WHEN V_FORIGN_CAR_GB = '1' AND RATE08 IS NOT NULL THEN TO_CHAR(RATE08) ELSE '100' END FORIGN_R,
                  CASE WHEN V_LONG_LENT_CAR_GB = '1' AND V_BCO_DRV_GB = '1' AND RATE09 IS NOT NULL THEN TO_CHAR(RATE09) ELSE '100' END BCO_R,
                  CASE WHEN V_SAFE_CAR_GB = '1' AND RATE10 IS NOT NULL THEN TO_CHAR(RATE10) ELSE '100' END SAFE_R
                 FROM TBAA0006 B
                  WHERE B.CUST_NO = v_cust_no
                  AND B.CODE_LIST = v_car_kind_cd||''||(SELECT RATE_CD FROM TBIC0012 C WHERE C.POL_NO = v_pol_no AND C.RIDER_ESP_GB = '1' AND C.RATE_CD IN ('41','42','43'))||'03'
                  AND B.LAST_YN = 'Y'
                  AND B.APPY_START <= v_istar_cont_date
                  AND B.APPY_END >= v_istar_cont_date
               )WHERE 1=1)
            WHEN DMBO_CD = '04' THEN
              (SELECT ROUND( (GRP_RATE*SPORT_R*FORIGN_R*BCO_R*SAFE_R) /100000000, 2)
              FROM (
                SELECT CASE WHEN V_LONG_LENT_CAR_GB = '1' AND RATE04 IS NOT NULL THEN TO_CHAR(RATE04)
                   WHEN V_SHARE_CAR_GB = '1' AND RATE05 IS NOT NULL THEN TO_CHAR(RATE05)
                    WHEN V_TOW_CAR_GB = '1' AND RATE06 IS NOT NULL THEN TO_CHAR(RATE06)
                    ELSE TO_CHAR(RATE01) END GRP_RATE,
                  CASE WHEN V_SPORT_CAR_GB = '1' AND RATE07 IS NOT NULL THEN TO_CHAR(RATE07)  ELSE '100' END SPORT_R,
                  CASE WHEN V_FORIGN_CAR_GB = '1' AND RATE08 IS NOT NULL THEN TO_CHAR(RATE08) ELSE '100' END FORIGN_R,
                  CASE WHEN V_LONG_LENT_CAR_GB = '1' AND V_BCO_DRV_GB = '1' AND RATE09 IS NOT NULL THEN TO_CHAR(RATE09) ELSE '100' END BCO_R,
                  CASE WHEN V_SAFE_CAR_GB = '1' AND RATE10 IS NOT NULL THEN TO_CHAR(RATE10) ELSE '100' END SAFE_R
                 FROM TBAA0006 B
                  WHERE B.CUST_NO = v_cust_no
                  AND B.CODE_LIST = v_car_kind_cd||''||(SELECT RATE_CD FROM TBIC0012 C WHERE C.POL_NO = v_pol_no AND C.RIDER_ESP_GB = '1' AND C.RATE_CD IN ('41','42','43'))||'04'
                  AND B.LAST_YN = 'Y'
                  AND B.APPY_START <= v_istar_cont_date
                  AND B.APPY_END >= v_istar_cont_date
               )WHERE 1=1)
            WHEN DMBO_CD = '05' THEN
              (SELECT ROUND( (GRP_RATE*SPORT_R*FORIGN_R*BCO_R*SAFE_R) /100000000, 2)
              FROM (
                SELECT CASE WHEN V_LONG_LENT_CAR_GB = '1' AND RATE04 IS NOT NULL THEN TO_CHAR(RATE04)
                    WHEN V_SHARE_CAR_GB = '1' AND RATE05 IS NOT NULL THEN TO_CHAR(RATE05)
                     WHEN V_TOW_CAR_GB = '1' AND RATE06 IS NOT NULL THEN TO_CHAR(RATE06)
                     ELSE TO_CHAR(RATE01) END GRP_RATE,
                  CASE WHEN V_SPORT_CAR_GB = '1' AND RATE07 IS NOT NULL THEN TO_CHAR(RATE07)  ELSE '100' END SPORT_R,
                  CASE WHEN V_FORIGN_CAR_GB = '1' AND RATE08 IS NOT NULL THEN TO_CHAR(RATE08) ELSE '100' END FORIGN_R,
                  CASE WHEN V_LONG_LENT_CAR_GB = '1' AND V_BCO_DRV_GB = '1' AND RATE09 IS NOT NULL THEN TO_CHAR(RATE09) ELSE '100' END BCO_R,
                  CASE WHEN V_SAFE_CAR_GB = '1' AND RATE10 IS NOT NULL THEN TO_CHAR(RATE10) ELSE '100' END SAFE_R
                 FROM TBAA0006 B
                  WHERE B.CUST_NO = v_cust_no
                  AND B.CODE_LIST = v_car_kind_cd||''||(SELECT RATE_CD FROM TBIC0012 C WHERE C.POL_NO = v_pol_no AND C.RIDER_ESP_GB = '1' AND C.RATE_CD IN ('41','42','43'))||'05'
                  AND B.LAST_YN = 'Y'
                  AND B.APPY_START <= v_istar_cont_date
                  AND B.APPY_END >= v_istar_cont_date
               )WHERE 1=1)
            WHEN DMBO_CD = '06' THEN
              (SELECT ROUND( (GRP_RATE*SPORT_R*FORIGN_R*BCO_R*SAFE_R) /100000000, 2)
              FROM (
                SELECT CASE WHEN V_LONG_LENT_CAR_GB = '1' AND RATE04 IS NOT NULL THEN TO_CHAR(RATE04)
                   WHEN V_SHARE_CAR_GB = '1' AND RATE05 IS NOT NULL THEN TO_CHAR(RATE05)
                    WHEN V_TOW_CAR_GB = '1' AND RATE06 IS NOT NULL THEN TO_CHAR(RATE06)
                    ELSE TO_CHAR(RATE01) END GRP_RATE,
                  CASE WHEN V_SPORT_CAR_GB = '1' AND RATE07 IS NOT NULL THEN TO_CHAR(RATE07)  ELSE '100' END SPORT_R,
                  CASE WHEN V_FORIGN_CAR_GB = '1' AND RATE08 IS NOT NULL THEN TO_CHAR(RATE08) ELSE '100' END FORIGN_R,
                  CASE WHEN V_LONG_LENT_CAR_GB = '1' AND V_BCO_DRV_GB = '1' AND RATE09 IS NOT NULL THEN TO_CHAR(RATE09) ELSE '100' END BCO_R,
                  CASE WHEN V_SAFE_CAR_GB = '1' AND RATE10 IS NOT NULL THEN TO_CHAR(RATE10) ELSE '100' END SAFE_R
                 FROM TBAA0006 B
                  WHERE B.CUST_NO = v_cust_no
                  AND B.CODE_LIST = v_car_kind_cd||''||(SELECT RATE_CD FROM TBIC0012 C WHERE C.POL_NO = v_pol_no AND C.RIDER_ESP_GB = '1' AND C.RATE_CD IN ('41','42','43'))||'06'
                  AND B.LAST_YN = 'Y'
                  AND B.APPY_START <= v_istar_cont_date
                  AND B.APPY_END >= v_istar_cont_date
               )WHERE 1=1)
            WHEN DMBO_CD = '08' THEN
              (SELECT ROUND( (GRP_RATE*SPORT_R*FORIGN_R*BCO_R*SAFE_R) /100000000, 2)
              FROM (
                SELECT CASE WHEN V_LONG_LENT_CAR_GB = '1' AND RATE04 IS NOT NULL THEN TO_CHAR(RATE04)
                   WHEN V_SHARE_CAR_GB = '1' AND RATE05 IS NOT NULL THEN TO_CHAR(RATE05)
                    WHEN V_TOW_CAR_GB = '1' AND RATE06 IS NOT NULL THEN TO_CHAR(RATE06)
                    ELSE TO_CHAR(RATE01) END GRP_RATE,
                  CASE WHEN V_SPORT_CAR_GB = '1' AND RATE07 IS NOT NULL THEN TO_CHAR(RATE07)  ELSE '100' END SPORT_R,
                  CASE WHEN V_FORIGN_CAR_GB = '1' AND RATE08 IS NOT NULL THEN TO_CHAR(RATE08) ELSE '100' END FORIGN_R,
                  CASE WHEN V_LONG_LENT_CAR_GB = '1' AND V_BCO_DRV_GB = '1' AND RATE09 IS NOT NULL THEN TO_CHAR(RATE09) ELSE '100' END BCO_R,
                  CASE WHEN V_SAFE_CAR_GB = '1' AND RATE10 IS NOT NULL THEN TO_CHAR(RATE10) ELSE '100' END SAFE_R
                 FROM TBAA0006 B
                  WHERE B.CUST_NO = v_cust_no
                  AND B.CODE_LIST = v_car_kind_cd||''||(SELECT RATE_CD FROM TBIC0012 C WHERE C.POL_NO = v_pol_no AND C.RIDER_ESP_GB = '1' AND C.RATE_CD IN ('41','42','43'))||'08'
                  AND B.LAST_YN = 'Y'
                  AND B.APPY_START <= v_istar_cont_date
                  AND B.APPY_END >= v_istar_cont_date
               )WHERE 1=1)
           END
    WHERE ENT_DGN_NO = v_new_ent_dgn_no;
     END IF;


      /*************************************************/
      /* 보험료산출프로시저호출                         */
      /*************************************************/
      v_proc_title := '보험료산출프로시저호출(PR_RENT_AMT)';

      PR_RENT_AMT('1', v_new_ent_dgn_no,'',o_result);


      /*********************************************/
      /* TBIC0103 --> TBIB0103 INSERT (질권정보)   */
      /*********************************************/
      v_proc_title := '질권정보_TBIB0103등록';

      INSERT INTO TBIB0103(
             ENT_DGN_NO,
             PLG_SEQ,                 BCO_ENT_NO,              PLG_AMT,                  PLG_SPEC,                PLG_SETUP_DATE,
             PLG_CD,                  PLG_NAME,                ZIP_CD,                   ADDR_1,                  ADDR_2
             )
      SELECT
             v_new_ent_dgn_no,
             PLG_SEQ,                 BCO_ENT_NO,              PLG_AMT,                  PLG_SPEC,                PLG_SETUP_DATE,
             PLG_CD,                  PLG_NAME,                ZIP_CD,                   ADDR_1,                  ADDR_2
        FROM TBIC0103
       WHERE POL_NO = v_pol_no;


      /*********************************************/
      /* TBIC0104 --> TBIB0104 INSERT (운전자정보) */
      /*********************************************/
      v_proc_title := '운전자정보_TBIB0104등록';

      INSERT INTO TBIB0104(
             ENT_DGN_NO,
             DRV_SEQ,                 DRV_CARRER,              CONT_AGE,                 LICENSE_GB,               LICENSE_NO,
             LICENSE_DATE,            SEX_FM,                  DRV_GB,                   DRV_NAME,                 DRV_ID,
             ISD_P_REL
             )
      SELECT
             v_new_ent_dgn_no,
             DRV_SEQ,                 DRV_CARRER,              CONT_AGE,                 LICENSE_GB,               LICENSE_NO,
             LICENSE_DATE,            SEX_FM,                  DRV_GB,                   DRV_NAME,                 DRV_ID,
             ISD_P_REL
        FROM TBIC0104
       WHERE POL_NO = v_pol_no
         /*AND (DRV_GB IS NULL OR DRV_GB = '1')*/
         AND APPY_FROM <=  TO_DATE(i_base_date,'YYYY/MM/DD')
         AND APPY_TO >=  TO_DATE(i_base_date,'YYYY/MM/DD');



      /*************************************************/
      /*  성공시 Commit 및  카운트 계산                */
      /*************************************************/
      commit;
      o_succ_cnt := o_succ_cnt + 1;
      PR_INSERT_BATCH_LOG(i_bat_id, 'PR_BATCH_ENT_RENEW','[만료계약건에대한자동갱신성공]','증권번호 ' || v_pol_no || '인 계약에 대해 새로운 설계번호 ' || v_new_ent_dgn_no || '로 설계정보가 새롭게 만들어졌습니다.');

      exception when others then
                rollback;
                o_fail_cnt := o_fail_cnt + 1;
                o_result := sqlerrm;
                PR_INSERT_BATCH_LOG(i_bat_id, 'PR_BATCH_ENT_RENEW','[' || v_proc_title || '실패][증권번호:' || v_pol_no || ']','오류메시지:' || sqlerrm );
    end;

    end loop;

    /*처리할 데이터가 없을 경우 로그 처리*/
    if o_tota_cnt = 0 then
      PR_INSERT_BATCH_LOG(i_bat_id, 'PR_BATCH_ENT_RENEW','[만료계약건에대한자동갱신성공]','만료계약건이 존재하지 않습니다.');
    end if;

    exception when others then
              rollback;
              o_result := sqlerrm ;
              /*실패처리*/
              PR_INSERT_BATCH_LOG(i_bat_id, 'PR_BATCH_ENT_RENEW','[' || v_proc_title || '실패][증권번호:' || v_pol_no || ']','오류메시지:' || sqlerrm );

 end;
-- GENERATED BY QueryOne AT 2017-04-21 13:55:00
-- USING krma_app@10.100.10.54:8629(krmadb)

-- GENERATED BY QueryOne AT 2017-03-31 08:55:36
-- USING krma_app@10.100.10.54:8629(krmadb)

CREATE OR replace
PROCEDURE          KRMA_APP.PR_BATCH_ENT_RENEW(i_bat_id varchar2, i_base_date varchar2,o_tota_cnt out number, o_succ_cnt out number, o_fail_cnt out number, o_result   out   varchar2) as

/**************************************************************************************/
/* 생성일자 : 2013.05.30                                                              */
/* 생성자   : 이용한                                                                  */
/* 업무내용 : 만기 한달건(갱신건)을 대상으로 자동 설계 데이터 생성                    */
/* 수정내용 : 차량가액 부분 대표차명 테이블 사용 변경                                 */
/* Parameter: [in]i_bat_id          : 배치ID                                          */
/*            [in]i_base_date       : 기준일                                          */
/*            [out]o_tota_cnt       : 전체건수                                        */
/*            [out]o_succ_cnt       : 성공건수                                        */
/*            [out]o_fail_cnt       : 실패건수                                        */
/*            [out]o_result         : 모두성공(''), 오류발생시 해당 오류건과 내용     */
/**************************************************************************************/
    v_ent_dgn_no TBIC0001.ENT_DGN_NO%TYPE;
    v_new_ent_dgn_no TBIC0001.ENT_DGN_NO%TYPE;
    v_pol_no TBIC0001.POL_NO%TYPE;
    v_var_pass_year TBIC0001.CAR_PASS_YEAR%TYPE;
    v_istar_cont_date TBIC0001.ISTAR_CONT_DATE%TYPE;
    v_iend_cont_date TBIC0001.IEND_CONT_DATE%TYPE;
    v_proc_title VARCHAR(100);
    v_base_date TBIC0001.ISTAR_CONT_DATE%TYPE;
    v_base_date2 TBIC0001.ISTAR_CONT_DATE%TYPE;
    v_car_amt TBIC0001.CAR_AMT%TYPE;
    v_car_gaek TBIC0001.CAR_GAEK%TYPE;
    v_car_reg_date TBIC0001.CAR_REG_DATE%TYPE;
    v_car_y_type TBIC0001.CAR_Y_TYPE%TYPE;
    v_base_day NUMBER;
    v_ent_carr_cd NUMBER;
    v_ent_carr_r NUMBER(5,2);
    v_car_decrease_rate NUMBER(5,4);         /*차량금액감소율*/
    v_unit_decrease_rate NUMBER(5,4);        /*장치금액감소율*/
    v_acc_decrease_rate NUMBER(5,4);         /*부속품금액감소율*/
    v_car_kind_cd varchar2(2);
    v_cust_no varchar2(9);
    v_car_nm_cd varchar(50);
    v_calc_date varchar(8);
    v_indgrp_gb TBIC0001.INDGRP_GB%TYPE;
    v_rate_cd_02 varchar2(4);
    V_LONG_LENT_CAR_GB VARCHAR2(1); /*20170302 장기대여*/
    V_SHARE_CAR_GB VARCHAR2(1);  /*20170302 카셰어링*/
    V_TOW_CAR_GB VARCHAR2(1);   /*20170302 견인장치*/
    V_SPORT_CAR_GB VARCHAR2(1);  /*20170302 스포츠카가입여부*/
    V_FORIGN_CAR_GB VARCHAR2(1);  /*20170302 외제차가입여부*/
    V_SAFE_CAR_GB VARCHAR2(1);   /*20170302 안전장치장착 가입여부*/
    V_BCO_DRV_GB VARCHAR2(1);   /*20170302 법인운전자여부*/


 begin
    o_result             := '';
    o_tota_cnt           := 0;
    o_succ_cnt           := 0;
    o_fail_cnt           := 0;
    v_base_day           := 45;  /*만료일 30일전 기준*/
    v_car_decrease_rate  := 1;   /*검색이 안될 경우를 대비해서 초기값 설정*/
    v_unit_decrease_rate := 1;   /*검색이 안될 경우를 대비해서 초기값 설정*/
    v_acc_decrease_rate  := 1;   /*검색이 안될 경우를 대비해서 초기값 설정*/
    v_car_nm_cd          := '';

    /*기준일 설정*/
    v_base_date := TO_DATE(TO_CHAR(TO_DATE(i_base_date,'YYYYMMDD') + 70,'YYYYMMDD') || '235959', 'YYYYMMDDHH24MISS');
    v_base_date2 := TO_DATE(TO_CHAR(TO_DATE(i_base_date,'YYYYMMDD') + v_base_day,'YYYYMMDD') || '000000', 'YYYYMMDDHH24MISS');

    begin
         select code_cd
          into v_calc_date
           from tbzz1000 where codetype = 'A0082' and code_etc2 is NULL;

          IF(TO_CHAR(v_base_date2, 'YYYYMMDD') >= v_calc_date) THEN

            PR_INSERT_BATCH_LOG(i_bat_id, 'PR_BATCH_ENT_RENEW','[설계 실패][일자오류 설계가능 일자:' || v_calc_date || ']','오류메시지:' || sqlerrm );

            RETURN;
          END IF;


    end;

    for REC in (SELECT ENT_DGN_NO                                                                        /*설계번호*/
                     , (SELECT FN_GET_SEQ(SUBSTR(ENT_DGN_NO,0,3) || '2') FROM DUAL) AS NEW_ENT_DGN_NO    /*갱신된설계번호*/
                     , POL_NO                                                                            /*증권번호*/
                     , CAR_PASS_YEAR                                                                     /*경과년수*/
                     , IEND_CONT_DATE AS ISTAR_CONT_DATE                                                 /*갱신될공제시기*/
                     , ADD_MONTHS(IEND_CONT_DATE, 12) AS IEND_CONT_DATE                                  /*갱신될공제종기*/
                     /*, IENT_CARR_CD                                                                      --가입경력코드*/
                     , CAR_NM_CD
                     , CAR_KIND_CD
                     , CUST_NO
                     , CAR_SEQ
                     , (SELECT DECODE(SUBT1.CAR_AMT_R,NULL,1,'',1,SUBT1.CAR_AMT_R/100) AS CAR_AMT_R FROM TBAA0101 SUBT1 WHERE SUBT1.CUST_NO = A.CUST_NO AND SUBT1.CAR_SEQ = A.CAR_SEQ) AS CAR_AMT_R
                     , CAR_REG_DATE
                     , (SELECT CASE WHEN CEIL((MONTHS_BETWEEN(TO_DATE(TO_CHAR(IEND_CONT_DATE,'YYYYMM'),'YYYYMM'),TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(COMP_ENT_YM,'YYYYMM'),-1),'YYYYMM'),'YYYYMM')))/12) >= 4 THEN 4
                        ELSE DECODE(CEIL((MONTHS_BETWEEN(TO_DATE(TO_CHAR(IEND_CONT_DATE,'YYYYMM'),'YYYYMM'),TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(COMP_ENT_YM,'YYYYMM'),-1),'YYYYMM'),'YYYYMM')))/12), 0, 1, CEIL((MONTHS_BETWEEN(TO_DATE(TO_CHAR(IEND_CONT_DATE,'YYYYMM'),'YYYYMM'),TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(COMP_ENT_YM,'YYYYMM'),-1),'YYYYMM'),'YYYYMM')))/12))
                    END AS IENT_CARR_CD                                                                       /*설립일기준으로 가입경력코드 생성(1: 1미만 , 2: 2년 미만 , 3: 3년 미만 4: 3년이상)*/
                 FROM TBAA0001 C
                   WHERE A.CUST_NO = C.CUST_NO) AS IENT_CARR_CD
                  FROM TBIC0001 A
                 WHERE CONT_STATE in ('02','03')
                   AND I_KIND_CD = '11'
     AND IEND_CONT_DATE >= v_base_date2                                                      /*갱신대상 계약정보검색(만료일 30일전 기준)*/
                   AND IEND_CONT_DATE <= v_base_date                                                      /*갱신대상 계약정보검색(만료일 30일전 기준)*/
                   --and a.pol_no in (select b.pol_no from x_temp_pol b where a.pol_no = b.pol_no)
                   AND CAR_NM_CD = ( SELECT CAR_REP_CD
           FROM TBIB0202 B
             WHERE TO_CHAR(B.appy_start,'YYYYMMDD') <= TO_CHAR(A.IEND_CONT_DATE,'YYYYMMDD')
            AND TO_CHAR(B.appy_end,'YYYYMMDD') >= TO_CHAR(A.IEND_CONT_DATE,'YYYYMMDD')
            AND A.CAR_NM_CD = B.CAR_REP_CD
       )
   AND ROWNUM < 10
                )
    loop

    /*차량,장치,부속품 감소율 검색*/
    SELECT TO_NUMBER(NVL(CODE_NAME,1)) into v_car_decrease_rate FROM TBZZ1000 A WHERE A.CODETYPE = 'A0093' AND CODE_CD = '1';   /*차량금액감소율*/
    SELECT TO_NUMBER(NVL(CODE_NAME,1)) into v_acc_decrease_rate FROM TBZZ1000 A WHERE A.CODETYPE = 'A0093' AND CODE_CD = '2';   /*부속품금액감소율*/
    SELECT TO_NUMBER(NVL(CODE_NAME,1)) into v_unit_decrease_rate FROM TBZZ1000 A WHERE A.CODETYPE = 'A0093' AND CODE_CD = '3';  /*장치금액감소율*/

    o_tota_cnt := o_tota_cnt + 1;
    v_ent_dgn_no := REC.ENT_DGN_NO;
    v_new_ent_dgn_no := REC.NEW_ENT_DGN_NO;
    v_pol_no := REC.POL_NO;
    /*v_var_pass_year := REC.CAR_PASS_YEAR + 1;*/
    v_istar_cont_date := REC.ISTAR_CONT_DATE;
    v_iend_cont_date := REC.IEND_CONT_DATE;
    v_car_nm_cd := REC.CAR_NM_CD;
    v_car_kind_cd := REC.CAR_KIND_CD;
    v_cust_no := REC.CUST_NO;
    --v_car_reg_date := REC.CAR_REG_DATE;

    SELECT CAR_REG_DATE into v_car_reg_date FROM TBAA0101 A WHERE A.CUST_NO = v_cust_no AND CAR_SEQ = REC.CAR_SEQ;

    IF(TO_CHAR(TO_DATE(v_istar_cont_date), 'YYYY')-TO_CHAR(TO_DATE(v_car_reg_date), 'YYYY')) = '1' THEN

     IF(TO_NUMBER(MONTHS_BETWEEN(TO_DATE(v_istar_cont_date), TO_DATE(v_car_reg_date))) <= 6) THEN

       v_car_y_type := TO_CHAR(TO_DATE(v_car_reg_date), 'YYYY')||'A';
        v_var_pass_year := 1 ;

      ELSE

        v_car_y_type := TO_CHAR(TO_DATE(v_car_reg_date), 'YYYY')||'B';
        v_var_pass_year := 2 ;
      END IF;
    ELSE
     IF(TO_CHAR(TO_DATE(v_istar_cont_date), 'YYYY')-TO_CHAR(TO_DATE(v_car_reg_date), 'YYYY')) = '0' THEN
       v_var_pass_year := 0;
      ELSE
       v_var_pass_year := TO_NUMBER(TO_CHAR(TO_DATE(v_istar_cont_date), 'YYYY')-TO_CHAR(TO_DATE(v_car_reg_date), 'YYYY'))+1;
      END IF;
     v_car_y_type := TO_CHAR(TO_DATE(v_car_reg_date), 'YYYY');
    END IF;

    if(v_var_pass_year > 15) then
       v_var_pass_year := 15;
    end if;

--    SELECT CAR_RATE
--      INTO v_car_amt
--      FROM
--          (
--          SELECT 0  AS COUNT, CAR_SURVIVAL_RATE_1  AS CAR_RATE FROM TBIB0202 WHERE TO_CHAR(appy_start ,'YYYYMMDD') <= TO_CHAR(v_istar_cont_date,'YYYYMMDD') AND TO_CHAR(appy_end,'YYYYMMDD') >= TO_CHAR(v_istar_cont_date, 'YYYYMMDD') AND CAR_REP_CD = v_car_nm_cd UNION ALL
--          SELECT 1  AS COUNT, CAR_SURVIVAL_RATE_1  AS CAR_RATE FROM TBIB0202 WHERE TO_CHAR(appy_start ,'YYYYMMDD') <= TO_CHAR(v_istar_cont_date,'YYYYMMDD') AND TO_CHAR(appy_end,'YYYYMMDD') >= TO_CHAR(v_istar_cont_date, 'YYYYMMDD') AND CAR_REP_CD = v_car_nm_cd UNION ALL
--          SELECT 2  AS COUNT, CAR_SURVIVAL_RATE_2  AS CAR_RATE FROM TBIB0202 WHERE TO_CHAR(appy_start ,'YYYYMMDD') <= TO_CHAR(v_istar_cont_date,'YYYYMMDD') AND TO_CHAR(appy_end,'YYYYMMDD') >= TO_CHAR(v_istar_cont_date, 'YYYYMMDD') AND CAR_REP_CD = v_car_nm_cd UNION ALL
--          SELECT 3  AS COUNT, CAR_SURVIVAL_RATE_3  AS CAR_RATE FROM TBIB0202 WHERE TO_CHAR(appy_start ,'YYYYMMDD') <= TO_CHAR(v_istar_cont_date,'YYYYMMDD') AND TO_CHAR(appy_end,'YYYYMMDD') >= TO_CHAR(v_istar_cont_date, 'YYYYMMDD') AND CAR_REP_CD = v_car_nm_cd UNION ALL
--          SELECT 4  AS COUNT, CAR_SURVIVAL_RATE_4  AS CAR_RATE FROM TBIB0202 WHERE TO_CHAR(appy_start ,'YYYYMMDD') <= TO_CHAR(v_istar_cont_date,'YYYYMMDD') AND TO_CHAR(appy_end,'YYYYMMDD') >= TO_CHAR(v_istar_cont_date, 'YYYYMMDD') AND CAR_REP_CD = v_car_nm_cd UNION ALL
--          SELECT 5  AS COUNT, CAR_SURVIVAL_RATE_5  AS CAR_RATE FROM TBIB0202 WHERE TO_CHAR(appy_start ,'YYYYMMDD') <= TO_CHAR(v_istar_cont_date,'YYYYMMDD') AND TO_CHAR(appy_end,'YYYYMMDD') >= TO_CHAR(v_istar_cont_date, 'YYYYMMDD') AND CAR_REP_CD = v_car_nm_cd UNION ALL
--          SELECT 6  AS COUNT, CAR_SURVIVAL_RATE_6  AS CAR_RATE FROM TBIB0202 WHERE TO_CHAR(appy_start ,'YYYYMMDD') <= TO_CHAR(v_istar_cont_date,'YYYYMMDD') AND TO_CHAR(appy_end,'YYYYMMDD') >= TO_CHAR(v_istar_cont_date, 'YYYYMMDD') AND CAR_REP_CD = v_car_nm_cd UNION ALL
--          SELECT 7  AS COUNT, CAR_SURVIVAL_RATE_7  AS CAR_RATE FROM TBIB0202 WHERE TO_CHAR(appy_start ,'YYYYMMDD') <= TO_CHAR(v_istar_cont_date,'YYYYMMDD') AND TO_CHAR(appy_end,'YYYYMMDD') >= TO_CHAR(v_istar_cont_date, 'YYYYMMDD') AND CAR_REP_CD = v_car_nm_cd UNION ALL
--          SELECT 8  AS COUNT, CAR_SURVIVAL_RATE_8  AS CAR_RATE FROM TBIB0202 WHERE TO_CHAR(appy_start ,'YYYYMMDD') <= TO_CHAR(v_istar_cont_date,'YYYYMMDD') AND TO_CHAR(appy_end,'YYYYMMDD') >= TO_CHAR(v_istar_cont_date, 'YYYYMMDD') AND CAR_REP_CD = v_car_nm_cd UNION ALL
--          SELECT 9  AS COUNT, CAR_SURVIVAL_RATE_9  AS CAR_RATE FROM TBIB0202 WHERE TO_CHAR(appy_start ,'YYYYMMDD') <= TO_CHAR(v_istar_cont_date,'YYYYMMDD') AND TO_CHAR(appy_end,'YYYYMMDD') >= TO_CHAR(v_istar_cont_date, 'YYYYMMDD') AND CAR_REP_CD = v_car_nm_cd UNION ALL
--          SELECT 10 AS COUNT, CAR_SURVIVAL_RATE_10 AS CAR_RATE FROM TBIB0202 WHERE TO_CHAR(appy_start ,'YYYYMMDD') <= TO_CHAR(v_istar_cont_date,'YYYYMMDD') AND TO_CHAR(appy_end,'YYYYMMDD') >= TO_CHAR(v_istar_cont_date, 'YYYYMMDD') AND CAR_REP_CD = v_car_nm_cd UNION ALL
--          SELECT 11 AS COUNT, CAR_SURVIVAL_RATE_11 AS CAR_RATE FROM TBIB0202 WHERE TO_CHAR(appy_start ,'YYYYMMDD') <= TO_CHAR(v_istar_cont_date,'YYYYMMDD') AND TO_CHAR(appy_end,'YYYYMMDD') >= TO_CHAR(v_istar_cont_date, 'YYYYMMDD') AND CAR_REP_CD = v_car_nm_cd UNION ALL
--          SELECT 12 AS COUNT, CAR_SURVIVAL_RATE_12 AS CAR_RATE FROM TBIB0202 WHERE TO_CHAR(appy_start ,'YYYYMMDD') <= TO_CHAR(v_istar_cont_date,'YYYYMMDD') AND TO_CHAR(appy_end,'YYYYMMDD') >= TO_CHAR(v_istar_cont_date, 'YYYYMMDD') AND CAR_REP_CD = v_car_nm_cd UNION ALL
--          SELECT 13 AS COUNT, CAR_SURVIVAL_RATE_13 AS CAR_RATE FROM TBIB0202 WHERE TO_CHAR(appy_start ,'YYYYMMDD') <= TO_CHAR(v_istar_cont_date,'YYYYMMDD') AND TO_CHAR(appy_end,'YYYYMMDD') >= TO_CHAR(v_istar_cont_date, 'YYYYMMDD') AND CAR_REP_CD = v_car_nm_cd UNION ALL
--          SELECT 14 AS COUNT, CAR_SURVIVAL_RATE_14 AS CAR_RATE FROM TBIB0202 WHERE TO_CHAR(appy_start ,'YYYYMMDD') <= TO_CHAR(v_istar_cont_date,'YYYYMMDD') AND TO_CHAR(appy_end,'YYYYMMDD') >= TO_CHAR(v_istar_cont_date, 'YYYYMMDD') AND CAR_REP_CD = v_car_nm_cd UNION ALL
--          SELECT 15 AS COUNT, CAR_SURVIVAL_RATE_15 AS CAR_RATE FROM TBIB0202 WHERE TO_CHAR(appy_start ,'YYYYMMDD') <= TO_CHAR(v_istar_cont_date,'YYYYMMDD') AND TO_CHAR(appy_end,'YYYYMMDD') >= TO_CHAR(v_istar_cont_date, 'YYYYMMDD') AND CAR_REP_CD = v_car_nm_cd
--          )
--      WHERE COUNT = v_var_pass_year;
--LJM 상단 차량가액 구하기 주석처리 하단 로직으로 변경 20160713
  SELECT
   ( CASE WHEN CAR_AMT = 0 OR CAR_REG_DATE IS NULL THEN
0
       ELSE
    CASE WHEN FN_RENT_USE_CAR_AMT(REC.ISTAR_CONT_DATE,CAR_REG_DATE,CAR_AMT,Y_HIS_CNT) < 0 THEN 0
                ELSE FN_RENT_USE_CAR_AMT(REC.ISTAR_CONT_DATE,CAR_REG_DATE,CAR_AMT,Y_HIS_CNT) END
       END
       ) INTO v_car_amt
  FROM
  (
   SELECT Y_HIS_CNT -- 내용년수
   ,TO_CHAR(CAR_REG_DATE,'YYYYMMDD') AS CAR_REG_DATE
   ,CASE WHEN T1.CAR_VALUE = 0 OR T1.CAR_VALUE IS NULL THEN
            ( SELECT DECODE(CAR_PRICE,NULL,0,'',0,'0',0,CAR_PRICE *1.1) FROM TBIB0202
             WHERE CAR_REP_CD = T1.CAR_NM_CD
             AND  REC.ISTAR_CONT_DATE BETWEEN APPY_START AND APPY_END
            )
         ELSE T1.CAR_VALUE *1.1
    END AS CAR_AMT
    ,DECODE(CAR_AMT_R,NULL,1,'',1,CAR_AMT_R/100) AS CAR_AMT_R
   FROM TBAA0101 T1
   WHERE CUST_NO = REC.CUST_NO
   AND CAR_SEQ = REC.CAR_SEQ
  );

  v_proc_title := '차령'||v_var_pass_year;

    /*가입경력이 4미만이면 +1을 하고 아니면 4로 설정한다.*/
    /* 고객테이블에서 가입경력 셋팅*/
    v_ent_carr_cd := REC.IENT_CARR_CD;
    /*if REC.IENT_CARR_CD < 4 then*/
    /*   v_ent_carr_cd := REC.IENT_CARR_CD + 1;*/
    /*else*/
    /*   v_ent_carr_cd := 4;*/
    /*end if;*/

    /*가입경력율을 가져온다.*/
    SELECT APLY_RATE
      into v_ent_carr_r
      FROM TBIB0207
     WHERE GUBUN = '2'
       AND DAMBO_CD = '0'
       AND AP_PREM_CD = v_ent_carr_cd;

    v_proc_title := '고객번호 : '||v_cust_no||' 시기 : '||TO_DATE(v_istar_cont_date) || ' 차종 : '||v_car_kind_cd || ' 증번 : '||v_pol_no;

    SELECT RATE_CD_02
      into v_rate_cd_02
      FROM TBAA0006 B
     WHERE B.CUST_NO = v_cust_no
       AND B.APPY_START <= TO_DATE(v_istar_cont_date)
       AND B.APPY_END >= TO_DATE(v_istar_cont_date)
       AND B.CODE_LIST = v_car_kind_cd||''||(SELECT RATE_CD FROM TBIC0012 C WHERE C.POL_NO = v_pol_no AND C.RIDER_ESP_GB = '1' AND C.RATE_CD IN ('41','42','43'))||'00'
       AND B.LAST_YN = 'Y';

    v_proc_title := 'v_rate_cd_02 : '||v_rate_cd_02;

    IF (v_rate_cd_02 IS NULL or v_rate_cd_02 = '1' or v_rate_cd_02 = '01' or v_rate_cd_02 = '단체') THEN v_indgrp_gb := '2';
      ELSE v_indgrp_gb := '1';
    END IF;

  v_proc_title := 'v_indgrp_gb : '||v_indgrp_gb;

    begin

      /*****************************************************/
      /* TBIC0001 --> TBIB0001 INSERT (가입설계마스터)     */
      /*****************************************************/
      v_proc_title := '가입설계마스터_TBIB0001등록';

      INSERT INTO TBIB0001(
             ENT_DGN_NO,              CUST_NO,                 CO_NO,                   BCO_NO,                  OWN_CD,
             INDGRP_GB,               CONT_KIND,               CONT_TYPE,               B_ENT_AMT,               BASIC_PREM,
             NA_MTH,                  ISTAR_CONT_DATE,         IEND_CONT_DATE,          I_KIND_CD,               BNP_CNT,
             BNP_CNT_R,               CASH_MTH,                CASH_ENT_TYPE,           TOT_INSUR_AMT,           APPY_SUM_PREM,
             TOT_NAB_PREM,            RIDER_INSUR_AMT,         RIDER_PREM,              SUM_PREM,                HOME_GB,
             CONT_YY,                 CONT_MM,                 CONT_DD,                 TOT_NAB_CNT,             UNION_KIND,
             SHORT_DAY_GB,            SHORT_R,                 IENT_CARR_CD,            IENT_CARR_R,             ALL_DMBO_R,
             MUL_ACCI_RATE_CD,        ISD_P_CDGB,              ISD_CD,                  ISD_NAME,                ISD_CONT_RELATION_CD,
             ISD_ZIP_CD_GB,           ISD_ZIP_CD_DM_GB,        ISD_ZIP_CD,              ISD_ADDR_1,              ISD_ADDR_2,
             ISD_CALL_SITE_GB,        ISD_OFF_TEL_DDD,         ISD_OFF_TEL,             ISD_TEL_DDD,             ISD_TEL_NO,
             ISD_HP_NO,               ISD_E_MAIL,              ISD_FAX,                 ISD_ENRNER_RELATION_CD,  ISD_ENRNER_NAME,
             ISD_ENRNER_PSN_NO,       CONT_CD_GB,              CONT_CD,                 CONT_NAME,               CONT_RELATION_CD,
             CONT_ZIP_CD_GB,          CONT_ZIP_CD_DM_GB,       CONT_ZIP_CD,             CONT_ADDR_1,             CONT_ADDR_2,
             CONT_CALL_SITE_GB,       CONT_OFF_TEL_DDD,        CONT_OFF_TEL,            CONT_TEL_DDD,            CONT_TEL_NO,
             CONT_HP_NO,              CONT_E_MAIL,             CONT_FAX,                CAR_HAN_NO,              CAR_ID_GB,
             CAR_ID,                  CAR_APPR_NUM_TON,        CAR_OLD_R,
             CAR_GAEK,
             CAR_AMT,
             CAR_UNIT_GAEK,
             CAR_UNIT_AMT,
             CAR_ACC_GAEK,
             CAR_ACC_AMT,
             CAR_REG_DATE,            CAR_NO,                  CAR_OUT_NO,              CAR_NO_GB,               CAR_NO_L,
             CAR_NO_S1,               CAR_NO_S2,               CAR_NO_CITY,             CAR_USE,                 CAR_NM_CD,
             CAR_KIND_CD,             CAR_TYPE_CD,
             CAR_Y_TYPE,
             CAR_PASS_YEAR,           CAR_CC,
             CAR_USE_USE,
             CAR_AIRBAG,              CAR_NM,                  CAR_COUNTRY,             CAR_GRADE,               CAR_RATE,
             CAR_ETC_GB,              CAR_ENG_TYPE,            PRE_CONT_CD,                                      APP_DATE,
             ENT_DGN_DATE,            CONT_DATE,               APP_PRINT_DATE,          ENT_PRINT_DATE,          ENT_PATH,
             TREATY_HQ_CD,            TREATY_BRH_CD,           TREATY_CD,               CAR_SEQ,                 ENT_STATUS,
             USER_ID,                 CAR_NEW_GB,              ISD_CUST_NO,             CONT_CUST_NO,
             DSC_INC_CD,              DSC_INC_R,               SPCIAL_INC_R,            SPCIAL_INC_APPY,         GRPCONT_DSC_R,
             GRPCONT_DSC_CAR_R
             )
      SELECT
             v_new_ent_dgn_no,        CUST_NO,                 CO_NO,                   BCO_NO,                  OWN_CD,
             v_indgrp_gb,
             /*(SELECT C.INDGRP_GB FROM TBAA0001 C WHERE A.CUST_NO = C.CUST_NO),*/
             /*INDGRP_GB,*/
             CONT_KIND,               CONT_TYPE,               B_ENT_AMT,               BASIC_PREM,
             NA_MTH,                  v_istar_cont_date,       v_iend_cont_date,        I_KIND_CD,               BNP_CNT,
             BNP_CNT_R,               CASH_MTH,                CASH_ENT_TYPE,           TOT_INSUR_AMT,           APPY_SUM_PREM,
             0,            RIDER_INSUR_AMT,         RIDER_PREM,              SUM_PREM,                HOME_GB,
             CONT_YY,                 CONT_MM,                 CONT_DD,                 '',             UNION_KIND,
             '1',            SHORT_R,                 v_ent_carr_cd,           v_ent_carr_r,            ALL_DMBO_R,
             DECODE(v_indgrp_gb, '2', '',MUL_ACCI_RATE_CD),        ISD_P_CDGB,              ISD_CD,                  ISD_NAME,                ISD_CONT_RELATION_CD,
             ISD_ZIP_CD_GB,           ISD_ZIP_CD_DM_GB,        ISD_ZIP_CD,              ISD_ADDR_1,              ISD_ADDR_2,
             ISD_CALL_SITE_GB,        ISD_OFF_TEL_DDD,         ISD_OFF_TEL,             ISD_TEL_DDD,             ISD_TEL_NO,
             ISD_HP_NO,               ISD_E_MAIL,              ISD_FAX,                 ISD_ENRNER_RELATION_CD,  ISD_ENRNER_NAME,
             ISD_ENRNER_PSN_NO,       CONT_CD_GB,              CONT_CD,                 CONT_NAME,               CONT_RELATION_CD,
             CONT_ZIP_CD_GB,          CONT_ZIP_CD_DM_GB,       CONT_ZIP_CD,             CONT_ADDR_1,             CONT_ADDR_2,
             CONT_CALL_SITE_GB,       CONT_OFF_TEL_DDD,        CONT_OFF_TEL,            CONT_TEL_DDD,            CONT_TEL_NO,
             CONT_HP_NO,              CONT_E_MAIL,             CONT_FAX,                CAR_HAN_NO,              CAR_ID_GB,
             CAR_ID,                  CAR_APPR_NUM_TON,        CAR_OLD_R,
             /*ROUND((NVL(CAR_GAEK,0) * v_car_decrease_rate/10000),0) * 10000,*/
             /*ROUND((NVL(CAR_AMT,0) * v_car_decrease_rate/10000),0) * 10000,*/
             /*ROUND((NVL(CAR_UNIT_GAEK,0) * v_unit_decrease_rate/10000),0) * 10000,*/
             /*ROUND((NVL(CAR_UNIT_AMT,0) * v_unit_decrease_rate/10000),0) * 10000,*/
             /*ROUND((NVL(CAR_ACC_GAEK,0) * v_acc_decrease_rate/10000),0) * 10000,*/
             /*ROUND((NVL(CAR_ACC_AMT,0) * v_acc_decrease_rate/10000),0) * 10000,*/
             --v_car_amt,               v_car_amt* REC.CAR_AMT_R,
             v_car_amt,               regexp_substr(v_car_amt*REC.CAR_AMT_R/10000  ,'[^.]+',1,1)*10000,
             CAR_UNIT_GAEK,           CAR_UNIT_AMT,            CAR_ACC_GAEK,            CAR_ACC_AMT,
             v_car_reg_date,            CAR_NO,                  CAR_OUT_NO,              CAR_NO_GB,               CAR_NO_L,
             CAR_NO_S1,               CAR_NO_S2,               CAR_NO_CITY,             CAR_USE,                 CAR_NM_CD,
             CAR_KIND_CD,             CAR_TYPE_CD,
             /*DECODE(v_var_pass_year,2,SUBSTR(CAR_Y_TYPE,0,4) || 'B',SUBSTR(CAR_Y_TYPE,0,4)),       --경과년수가 2일 경우 년식에 상반기(B)로 설정*/
             v_car_y_type,
             v_var_pass_year,         CAR_CC,
             CAR_USE_USE,
             CAR_AIRBAG,              CAR_NM,                  CAR_COUNTRY,             CAR_GRADE,               CAR_RATE,
             CAR_ETC_GB,              CAR_ENG_TYPE,            PRE_CONT_CD,                                      APP_DATE,
             SYSDATE,                 NULL,                    NULL,                    NULL,                    ENT_PATH,
             TREATY_HQ_CD,            TREATY_BRH_CD,           TREATY_CD,               CAR_SEQ,                 '1',
             'SYSTEM',                 NULL,              ISD_CUST_NO,             CONT_CUST_NO,
             (SELECT RATE_CD_02
                FROM TBAA0006 B
               WHERE B.CUST_NO = A.CUST_NO
                 AND B.APPY_START <= A.IEND_CONT_DATE
                 AND B.APPY_END >= A.IEND_CONT_DATE
                 AND B.CODE_LIST = A.CAR_KIND_CD||''||(SELECT RATE_CD FROM TBIC0012 C WHERE C.POL_NO = A.POL_NO AND C.RIDER_ESP_GB = '1' AND C.RATE_CD IN ('41','42','43'))||'00'
                 AND B.LAST_YN = 'Y'
              ) AS DSC_INC_CD,
              (SELECT RATE02
                FROM TBAA0006 B
               WHERE B.CUST_NO = A.CUST_NO
                 AND B.APPY_START <= A.IEND_CONT_DATE
                 AND B.APPY_END >= A.IEND_CONT_DATE
                 AND B.CODE_LIST = A.CAR_KIND_CD||''||(SELECT RATE_CD FROM TBIC0012 C WHERE C.POL_NO = A.POL_NO AND C.RIDER_ESP_GB = '1' AND C.RATE_CD IN ('41','42','43'))||'00'
                 AND B.LAST_YN = 'Y'
              ) AS DSC_INC_R,
              (SELECT RATE03
                FROM TBAA0006 B
               WHERE B.CUST_NO = A.CUST_NO
                 AND B.APPY_START <= A.IEND_CONT_DATE
                 AND B.APPY_END >= A.IEND_CONT_DATE
                 AND B.CODE_LIST = A.CAR_KIND_CD||''||(SELECT RATE_CD FROM TBIC0012 C WHERE C.POL_NO = A.POL_NO AND C.RIDER_ESP_GB = '1' AND C.RATE_CD IN ('41','42','43'))||'00'
                 AND B.LAST_YN = 'Y'
              ) AS SPCIAL_INC_R,
              (SELECT RATE_CD_03
                FROM TBAA0006 B
               WHERE B.CUST_NO = A.CUST_NO
                 AND B.APPY_START <= A.IEND_CONT_DATE
                 AND B.APPY_END >= A.IEND_CONT_DATE
                 AND B.CODE_LIST = A.CAR_KIND_CD||''||(SELECT RATE_CD FROM TBIC0012 C WHERE C.POL_NO = A.POL_NO AND C.RIDER_ESP_GB = '1' AND C.RATE_CD IN ('41','42','43'))||'00'
                 AND B.LAST_YN = 'Y'
              ) AS SPCIAL_INC_APPY,
              (SELECT RATE01
                FROM TBAA0006 B
               WHERE B.CUST_NO = A.CUST_NO
                 AND B.APPY_START <= A.IEND_CONT_DATE
                 AND B.APPY_END >= A.IEND_CONT_DATE
                 AND B.CODE_LIST = A.CAR_KIND_CD||''||(SELECT RATE_CD FROM TBIC0012 C WHERE C.POL_NO = A.POL_NO AND C.RIDER_ESP_GB = '1' AND C.RATE_CD IN ('41','42','43'))||'00'
                 AND B.LAST_YN = 'Y'
              ) AS GRPCONT_DSC_R,
              (SELECT RATE01
                FROM TBAA0006 B
               WHERE B.CUST_NO = A.CUST_NO
                 AND B.APPY_START <= A.IEND_CONT_DATE
                 AND B.APPY_END >= A.IEND_CONT_DATE
                 AND B.CODE_LIST = A.CAR_KIND_CD||''||(SELECT RATE_CD FROM TBIC0012 C WHERE C.POL_NO = A.POL_NO AND C.RIDER_ESP_GB = '1' AND C.RATE_CD IN ('41','42','43'))||'06'
                 AND B.LAST_YN = 'Y'
              ) AS GRPCONT_DSC_CAR_R
        FROM TBIC0001 A
       WHERE POL_NO = v_pol_no;


      /************************************************/
      /* TBIB0011 --> TBIB0011 INSERT (자동차추가정보)*/
      /************************************************/
      v_proc_title := '자동차추가정보_TBIB0011등록';

      INSERT INTO TBIB0011(
             ENT_DGN_NO,
             INS_AIM_GB,              MLGUN_SEQ_NO,            MLGUN_CD,                MLGUN_NAME,              MADE_CO,
             ITEM_SPEC,               QTY,                     PRICE,                   MLGUN_AMT,               MLGUN_ENT_AMT,
             BUY_YM,                  REMARK
             )
      SELECT
             v_new_ent_dgn_no,
             INS_AIM_GB,              MLGUN_SEQ_NO,            MLGUN_CD,                MLGUN_NAME,              MADE_CO,
             ITEM_SPEC,               QTY,                     PRICE,                   MLGUN_AMT,               MLGUN_ENT_AMT,
             BUY_YM,                  REMARK
       FROM TBIC0011
      WHERE POL_NO = v_pol_no;


      /***********************************************/
      /* TBIB0012 --> TBIB0012 INSERT (특약특별요율) */
      /***********************************************/
      v_proc_title := '특약특별요율_TBIB0012등록';

      INSERT INTO TBIB0012(
             ENT_DGN_NO,
             RIDER_ESP_GB,            RATE_CD,                 APPY_R,                  PREM,                    APPY_INS_AMT,
             APPY_DUCT_AMT
             )
      SELECT
             v_new_ent_dgn_no,
             RIDER_ESP_GB,
             CASE WHEN RATE_CD IN('68','73','74','75','76','77','78','79')
                  THEN (
                      SELECT RATE_CD_04
                            FROM TBAA0006 B
                           WHERE B.CUST_NO = v_cust_no
                             AND B.APPY_START <= v_iend_cont_date
                             AND B.APPY_END >= v_iend_cont_date
                             AND B.CODE_LIST = v_car_kind_cd||''||(SELECT RATE_CD FROM TBIC0012 C WHERE C.POL_NO = A.POL_NO AND C.RIDER_ESP_GB = '1' AND C.RATE_CD IN ('41','42','43'))||'00'
                             AND B.LAST_YN = 'Y'
                       )
             ELSE RATE_CD
             END,
             APPY_R,                  PREM,                    APPY_INS_AMT,
             APPY_DUCT_AMT
        FROM TBIC0012 A
       WHERE POL_NO = v_pol_no
         AND RATE_CD <> '70';

      /***********************************************/
      /* TBIB0012 --> TBIB0012 INSERT (고가차량 특별요율) */
      /***********************************************/
      v_proc_title := '특약특별요율_TBIB0012등록(고가차량)';

      INSERT INTO TBIB0012(
             ENT_DGN_NO,
             RIDER_ESP_GB,            RATE_CD,                 APPY_R,                  PREM,                    APPY_INS_AMT,
             APPY_DUCT_AMT
             )
      SELECT
             v_new_ent_dgn_no,
             RIDER_ESP_GB,
             CASE WHEN RATE_CD IN ('68','73','74','75','76','77','78','79')
                  THEN (
                      SELECT RATE_CD_04
                            FROM TBAA0006 B
                           WHERE B.CUST_NO = v_cust_no
                             AND B.APPY_START <= v_iend_cont_date
                             AND B.APPY_END >= v_iend_cont_date
                             AND B.CODE_LIST = v_car_kind_cd||''||(SELECT RATE_CD FROM TBIC0012 C WHERE C.POL_NO = A.POL_NO AND C.RIDER_ESP_GB = '1' AND C.RATE_CD IN ('41','42','43'))||'00'
                             AND B.LAST_YN = 'Y'
                       )
             ELSE RATE_CD
             END,
             APPY_R,                  PREM,                    APPY_INS_AMT,
             APPY_DUCT_AMT
        FROM TBIC0012 A
       WHERE POL_NO = v_pol_no
         AND RATE_CD = '70'
         AND 'Y'= CASE WHEN 50000000 > v_car_amt THEN 'N' ELSE 'Y' END;

      /***********************************************/
      /* TBIB0012 --> TBIB0012 INSERT (특약특별요율) */
      /***********************************************/
      v_proc_title := '특약특별요율_TBIB0012 삭제로직 추가';

      DELETE FROM TBIB0012 WHERE ENT_DGN_NO = v_new_ent_dgn_no AND RATE_CD = '00';

      /*************************************************/
      /* TBIC0013 --> TBIB0013 INSERT (담보별분담금)   */
      /*************************************************/
      v_proc_title := '담보별분담금_TBIB0013등록';


  INSERT INTO TBIB0013(
     ENT_DGN_NO,
     BASIC_SCONT_GB,          DMBO_CD,                 ACDNT_RESP_WANT,         MAN_RESP_WANT,            INSUR_AMT,
     INSUR_AMT_GB,
     DUCT_AMT_GB,             BASIC_PREM,
     APPY_PREM,               BASIC_RANGE_R,
     DMBO_START_DATE,         DMBO_END_DATE
     )
    SELECT
     v_new_ent_dgn_no,
     BASIC_SCONT_GB,          DMBO_CD,                 ACDNT_RESP_WANT,         MAN_RESP_WANT,            INSUR_AMT,
     CASE WHEN v_var_pass_year-1 >= 8 THEN DECODE(DMBO_CD,'21',substr(INSUR_AMT_GB,0,1)||'8',INSUR_AMT_GB)
       WHEN DMBO_CD = '02' THEN DECODE(INSUR_AMT_GB, substr(INSUR_AMT_GB,0,1)||'0', substr(INSUR_AMT_GB,0,1)||'1',INSUR_AMT_GB)
       ELSE DECODE(DMBO_CD,'21',DECODE(v_var_pass_year,0,substr(INSUR_AMT_GB,0,1)||'0',substr(INSUR_AMT_GB,0,1)|| TO_CHAR(v_var_pass_year-1)),INSUR_AMT_GB)
     END,
     DUCT_AMT_GB,             BASIC_PREM,
     APPY_PREM,               BASIC_RANGE_R,
     v_istar_cont_date,       v_iend_cont_date
   FROM TBIC0013 A
     WHERE POL_NO = v_pol_no
    AND (DMBO_CD,APPY_FROM) IN (SELECT DMBO_CD, MAX(APPY_FROM) FROM TBIC0013 WHERE POL_NO = v_pol_no GROUP BY DMBO_CD)
    AND DMBO_END_DATE >= TO_DATE(i_base_date,'YYYYMMDD');

      /*2017.03.02 요율세분화*/
      IF TO_CHAR(v_iend_cont_date,'YYYYMMDD')  >= '20170401' THEN
   BEGIN
    SELECT MAX(LONG_LENT_GB), MAX(SHARE_GB), MAX(TOW_GB), MAX(SPORT_CAR_GB), MAX(FORIGN_CAR_GB), MAX(SAFE_CAR_GB), MAX(BCO_DRV_GB)
      INTO V_LONG_LENT_CAR_GB
       , V_SHARE_CAR_GB
       , V_TOW_CAR_GB
       , V_SPORT_CAR_GB
       , V_FORIGN_CAR_GB
       , V_SAFE_CAR_GB
       , V_BCO_DRV_GB
   FROM ( SELECT CASE WHEN RATE_CD IN( SELECT DMBO_CD
           from tbib0210
             WHERE DMBO_NAME LIKE '%장기대여%') THEN '1' ELSE '0' END LONG_LENT_GB
     , CASE WHEN RATE_CD IN( SELECT DMBO_CD
           from tbib0210
             WHERE DMBO_NAME LIKE '%카셰어링%') THEN '1' ELSE '0' END SHARE_GB
     , CASE WHEN RATE_CD IN( SELECT DMBO_CD
           from tbib0210
             WHERE DMBO_NAME LIKE '%견인장치%') THEN '1' ELSE '0' END TOW_GB
     , CASE WHEN RATE_CD = '65' THEN '1' ELSE '0' END SPORT_CAR_GB
     , CASE WHEN RATE_CD = '71' THEN '1' ELSE '0' END FORIGN_CAR_GB
     , CASE WHEN RATE_CD = '94' THEN '1' ELSE '0' END SAFE_CAR_GB
     , (SELECT DECODE(COUNT(*), 0, '0', '1') FROM TBIC0104 WHERE POL_NO = v_pol_no AND ISD_P_REL = '1') AS BCO_DRV_GB
      FROM TBIC0012
      WHERE POL_NO = v_pol_no
  ) WHERE 1=1;
 END;
 UPDATE TBIB0013 SET GRP_DMBO_RATE = CASE WHEN DMBO_CD = '01' THEN
            (SELECT ROUND( (GRP_RATE*SPORT_R*FORIGN_R*BCO_R*SAFE_R) /100000000, 2)
             FROM (
               SELECT CASE WHEN V_LONG_LENT_CAR_GB = '1' AND RATE04 IS NOT NULL THEN TO_CHAR(RATE04)
                  WHEN V_SHARE_CAR_GB = '1' AND RATE05 IS NOT NULL THEN TO_CHAR(RATE05)
                  WHEN V_TOW_CAR_GB = '1' AND RATE06 IS NOT NULL THEN TO_CHAR(RATE06)
                  ELSE TO_CHAR(RATE01) END GRP_RATE,
                 CASE WHEN V_SPORT_CAR_GB = '1' AND RATE07 IS NOT NULL THEN TO_CHAR(RATE07)  ELSE '100' END SPORT_R,
                 CASE WHEN V_FORIGN_CAR_GB = '1' AND RATE08 IS NOT NULL THEN TO_CHAR(RATE08) ELSE '100' END FORIGN_R,
                 CASE WHEN V_LONG_LENT_CAR_GB = '1' AND V_BCO_DRV_GB = '1' AND RATE09 IS NOT NULL THEN TO_CHAR(RATE09) ELSE '100' END BCO_R,
                 CASE WHEN V_SAFE_CAR_GB = '1' AND RATE10 IS NOT NULL THEN TO_CHAR(RATE10) ELSE '100' END SAFE_R
                FROM TBAA0006 B
                 WHERE B.CUST_NO = v_cust_no
                 AND B.CODE_LIST = v_car_kind_cd||''||(SELECT RATE_CD FROM TBIC0012 C WHERE C.POL_NO = v_pol_no AND C.RIDER_ESP_GB = '1' AND C.RATE_CD IN ('41','42','43'))||'00'
                 AND B.LAST_YN = 'Y'
                 AND B.APPY_START <= v_istar_cont_date
                 AND B.APPY_END >= v_istar_cont_date
               )WHERE 1=1)
           WHEN DMBO_CD = '02' THEN
             (SELECT ROUND( (GRP_RATE*SPORT_R*FORIGN_R*BCO_R*SAFE_R) /100000000, 2)
              FROM (
                SELECT CASE WHEN V_LONG_LENT_CAR_GB = '1' AND RATE04 IS NOT NULL THEN TO_CHAR(RATE04)
                   WHEN V_SHARE_CAR_GB = '1' AND RATE05 IS NOT NULL THEN TO_CHAR(RATE05)
                    WHEN V_TOW_CAR_GB = '1' AND RATE06 IS NOT NULL THEN TO_CHAR(RATE06)
                    ELSE TO_CHAR(RATE01) END GRP_RATE,
                  CASE WHEN V_SPORT_CAR_GB = '1' AND RATE07 IS NOT NULL THEN TO_CHAR(RATE07)  ELSE '100' END SPORT_R,
                  CASE WHEN V_FORIGN_CAR_GB = '1' AND RATE08 IS NOT NULL THEN TO_CHAR(RATE08) ELSE '100' END FORIGN_R,
                  CASE WHEN V_LONG_LENT_CAR_GB = '1' AND V_BCO_DRV_GB = '1' AND RATE09 IS NOT NULL THEN TO_CHAR(RATE09) ELSE '100' END BCO_R,
                  CASE WHEN V_SAFE_CAR_GB = '1' AND RATE10 IS NOT NULL THEN TO_CHAR(RATE10) ELSE '100' END SAFE_R
                 FROM TBAA0006 B
                  WHERE B.CUST_NO = v_cust_no
                  AND B.CODE_LIST = v_car_kind_cd||''||(SELECT RATE_CD FROM TBIC0012 C WHERE C.POL_NO = v_pol_no AND C.RIDER_ESP_GB = '1' AND C.RATE_CD IN ('41','42','43'))||'02'
                  AND B.LAST_YN = 'Y'
                  AND B.APPY_START <= v_istar_cont_date
                  AND B.APPY_END >= v_istar_cont_date
               )WHERE 1=1)
           WHEN DMBO_CD = '03' THEN
             (SELECT ROUND( (GRP_RATE*SPORT_R*FORIGN_R*BCO_R*SAFE_R) /100000000, 2)
              FROM (
                SELECT CASE WHEN V_LONG_LENT_CAR_GB = '1' AND RATE04 IS NOT NULL THEN TO_CHAR(RATE04)
                   WHEN V_SHARE_CAR_GB = '1' AND RATE05 IS NOT NULL THEN TO_CHAR(RATE05)
                    WHEN V_TOW_CAR_GB = '1' AND RATE06 IS NOT NULL THEN TO_CHAR(RATE06)
                    ELSE TO_CHAR(RATE01) END GRP_RATE,
                  CASE WHEN V_SPORT_CAR_GB = '1' AND RATE07 IS NOT NULL THEN TO_CHAR(RATE07)  ELSE '100' END SPORT_R,
CREATE or replace
procedure PR_RENT_SPECIAL_RATE_2( i_job_gubun            in varchar2
                                                          , i_enter_no             in varchar2
                                                          , i_endor_no             in number
                                                          , i_i_kind_cd            in TBID0001.I_KIND_CD%TYPE
                                                          , i_car_kind_cd          in TBID0001.CAR_KIND_CD%TYPE
                                                          , i_car_type_cd          in TBID0001.CAR_TYPE_CD%TYPE
                                                          , i_aply_date            in TBID0001.ISTAR_CONT_DATE%TYPE
                                                          , i_dmbo_cd              in TBIB0203.DMBO_CD%TYPE
                                                          , i_0012_info            in varchar2
                                                          , o_special_rate         out number
                                                          , o_treat_rate           out number ) as
/******************************************************************************************************/
/* Procedure Name :  PR_RENT_SPECIAL_RATE                                                             */
/* Function       :  특약 및 특별요율 산정                                                            */
/* Parameter  i_job_gubun          [ IN] 작업구분(1:가입설계 2: 배서)                                 */
/*            i_pol_no             [ IN] 증권번호                                                     */
/*            i_endor_no           [ IN] 배서번호                                                     */
/*            i_i_kind_cd          [ IN] 보험종목                                                     */
/*            i_car_kind_cd        [ IN] '0'                                                          */
/*            i_car_type_cd        [ IN] 차종코드                                                     */
/*            i_aply_date          [ IN] 차형태코드                                                   */
/*            i_dmbo_cd            [ IN] 담보코드                                                     */
/*            i_0012_info          [ IN] 특약 및 특별 담보 코드 정보                                  */
/*            o_special_rate       [Out] 특별요율                                                     */
/*            o_treat_rate         [Out] 연령한정 요율                                                */
/******************************************************************************************************/
V_SPECIAL_INFO        varchar2(1000);

s_special_info        varchar2(100);
s_rate_cd             varchar2(10);
s_aply_rate           number;
s_idx1                number;
s_idx2                number;

s_treat_age_rt        TBID0012.APPY_R%TYPE := 1.0;
s_special_rate        TBID0012.APPY_R%TYPE := 100;

BEGIN
      if    i_0012_info is not null then
          begin
               select WM_CONCAT(RATE_CD || '|' || APLY_RATE)
                 into V_SPECIAL_INFO
                 from TBIB0206
                where I_KIND_CD         = i_i_kind_cd
                  and CO_GB             = '0'
                  and SPCL_AGRE_KEY_GB1 = '00'
                  and SPCL_AGRE_KEY_GB2 = '00'
                  and CAR_KIND          = i_car_kind_cd
                  and CAR_KIND2         = i_car_type_cd
                  and DMBO_CD           = i_dmbo_cd
                  and APLY_FYMD        <= to_date(i_aply_date)
                  and APLY_EYMD        >= to_date(i_aply_date)
                  and regexp_like(RATE_CD,i_0012_info);

                exception when no_data_found then V_SPECIAL_INFO :=null;
                          when others        then dbms_output.put_line('PR_RENT_SPECIAL_RATE Main Error: '||sqlerrm);
                                                  raise_application_error(-20011, 'PR_RENT_SPECIAL_RATE Main Error: '||sqlerrm);
          end;

          if    V_SPECIAL_INFO is not null then
                s_idx1 :=  length(V_SPECIAL_INFO) - length(replace(V_SPECIAL_INFO,',','')) + 1 ;
                s_idx2 :=  0;

                Loop
                     s_idx2 := s_idx2 +1;

                     if    s_idx2 > s_idx1 then
                           exit;
                     end if;

                     s_special_info  := regexp_substr(V_SPECIAL_INFO,'[^,]+',1,s_idx2);

                     s_rate_cd       := regexp_substr(s_special_info,'[^|]+',1,1);
                     s_aply_rate     := to_number(regexp_substr(s_special_info,'[^|]+',1,2));

                     if    s_rate_cd in ( '41', '42', '43') then
                           s_treat_age_rt  := nvl(s_aply_rate, 100)/100;
                     else
                           s_special_rate  := s_special_rate + (nvl(s_aply_rate,100) - 100 ) ;
                     end if;

                end Loop;

           end if;

      end if;

      o_special_rate := s_special_rate;
      o_treat_rate   := s_treat_age_rt;

      exception when others then dbms_output.put_line('PR_RENT_SPECIAL_RATE Main Error: '||sqlerrm);
                                 raise_application_error(-20011, 'PR_RENT_SPECIAL_RATE Main Error: '||sqlerrm);
END;
CREATE OR REPLACE
PROCEDURE PR_BATCH_CLM_EAT_DCAMT(i_bat_id in varchar, o_tota_cnt out number, o_succ_cnt out number, o_fail_cnt out number, o_result out varchar2) as

/**************************************************************************************/
/* 생성일자 : 2017.03.21                                                                */
/* 생성자 : 김영인                                                                                                                                             */
/* 업무내용 : 전달기준 보상 추산대비 결정비 집계(BATCH)                                        */
/* Parameter : [out]o_result : 결과 정상(OK), 비정상(해당메시지)                           */
/**************************************************************************************/

v_std_yymm VARCHAR2(6);     --기준년도
v_from_dt VARCHAR2(8);      --기준일 from
v_to_dt VARCHAR2(8);        --기준일 to
v_max_sno VARCHAR2(3);      --MAX 순번
v_new_sno VARCHAR2(3);      --신규 순번

begin
    o_result := '';
    o_tota_cnt := 0;
    o_succ_cnt := 0;
    o_fail_cnt := 0;

    FOR REC IN(
            SELECT TO_CHAR(ADD_MONTHS(SYSDATE,-1)-1,'YYYYMM') AS STD_YYMM, TO_CHAR(ADD_MONTHS(SYSDATE,-1)-1,'YYYYMM')||'01' AS FROM_DT, TO_CHAR(LAST_DAY(ADD_MONTHS(SYSDATE,-1)-1),'YYYYMMDD') AS TO_DT FROM DUAL
             UNION ALL
            SELECT TO_CHAR(ADD_MONTHS(SYSDATE,-2)-1,'YYYYMM') AS STD_YYMM, TO_CHAR(ADD_MONTHS(SYSDATE,-2)-1,'YYYYMM')||'01' AS FROM_DT, TO_CHAR(LAST_DAY(ADD_MONTHS(SYSDATE,-2)-1),'YYYYMMDD') AS TO_DT FROM DUAL
             UNION ALL
            SELECT TO_CHAR(ADD_MONTHS(SYSDATE,-3)-1,'YYYYMM') AS STD_YYMM, TO_CHAR(ADD_MONTHS(SYSDATE,-3)-1,'YYYYMM')||'01' AS FROM_DT, TO_CHAR(LAST_DAY(ADD_MONTHS(SYSDATE,-3)-1),'YYYYMMDD') AS TO_DT FROM DUAL
             UNION ALL
            SELECT TO_CHAR(ADD_MONTHS(SYSDATE,-4)-1,'YYYYMM') AS STD_YYMM, TO_CHAR(ADD_MONTHS(SYSDATE,-4)-1,'YYYYMM')||'01' AS FROM_DT, TO_CHAR(LAST_DAY(ADD_MONTHS(SYSDATE,-4)-1),'YYYYMMDD') AS TO_DT FROM DUAL
             UNION ALL
            SELECT TO_CHAR(ADD_MONTHS(SYSDATE,-5)-1,'YYYYMM') AS STD_YYMM, TO_CHAR(ADD_MONTHS(SYSDATE,-5)-1,'YYYYMM')||'01' AS FROM_DT, TO_CHAR(LAST_DAY(ADD_MONTHS(SYSDATE,-5)-1),'YYYYMMDD') AS TO_DT FROM DUAL
             UNION ALL
            SELECT TO_CHAR(ADD_MONTHS(SYSDATE,-6)-1,'YYYYMM') AS STD_YYMM, TO_CHAR(ADD_MONTHS(SYSDATE,-6)-1,'YYYYMM')||'01' AS FROM_DT, TO_CHAR(LAST_DAY(ADD_MONTHS(SYSDATE,-6)-1),'YYYYMMDD') AS TO_DT FROM DUAL
             UNION ALL
            SELECT TO_CHAR(ADD_MONTHS(SYSDATE,-7)-1,'YYYYMM') AS STD_YYMM, TO_CHAR(ADD_MONTHS(SYSDATE,-7)-1,'YYYYMM')||'01' AS FROM_DT, TO_CHAR(LAST_DAY(ADD_MONTHS(SYSDATE,-7)-1),'YYYYMMDD') AS TO_DT FROM DUAL
             UNION ALL
            SELECT TO_CHAR(ADD_MONTHS(SYSDATE,-8)-1,'YYYYMM') AS STD_YYMM, TO_CHAR(ADD_MONTHS(SYSDATE,-8)-1,'YYYYMM')||'01' AS FROM_DT, TO_CHAR(LAST_DAY(ADD_MONTHS(SYSDATE,-8)-1),'YYYYMMDD') AS TO_DT FROM DUAL
             UNION ALL
            SELECT TO_CHAR(ADD_MONTHS(SYSDATE,-9)-1,'YYYYMM') AS STD_YYMM, TO_CHAR(ADD_MONTHS(SYSDATE,-9)-1,'YYYYMM')||'01' AS FROM_DT, TO_CHAR(LAST_DAY(ADD_MONTHS(SYSDATE,-9)-1),'YYYYMMDD') AS TO_DT FROM DUAL
             UNION ALL
            SELECT TO_CHAR(ADD_MONTHS(SYSDATE,-10)-1,'YYYYMM') AS STD_YYMM, TO_CHAR(ADD_MONTHS(SYSDATE,-10)-1,'YYYYMM')||'01' AS FROM_DT, TO_CHAR(LAST_DAY(ADD_MONTHS(SYSDATE,-10)-1),'YYYYMMDD') AS TO_DT FROM DUAL
             UNION ALL
            SELECT TO_CHAR(ADD_MONTHS(SYSDATE,-11)-1,'YYYYMM') AS STD_YYMM, TO_CHAR(ADD_MONTHS(SYSDATE,-11)-1,'YYYYMM')||'01' AS FROM_DT, TO_CHAR(LAST_DAY(ADD_MONTHS(SYSDATE,-11)-1),'YYYYMMDD') AS TO_DT FROM DUAL
             UNION ALL
            SELECT TO_CHAR(ADD_MONTHS(SYSDATE,-12)-1,'YYYYMM') AS STD_YYMM, TO_CHAR(ADD_MONTHS(SYSDATE,-12)-1,'YYYYMM')||'01' AS FROM_DT, TO_CHAR(LAST_DAY(ADD_MONTHS(SYSDATE,-12)-1),'YYYYMMDD') AS TO_DT FROM DUAL
 )
    LOOP
        BEGIN
            o_tota_cnt := o_tota_cnt + 1;
            v_std_yymm := REC.STD_YYMM;
            v_from_dt := REC.FROM_DT;
            v_to_dt := REC.TO_DT;

            --MAX SERIAL_NO 구하기
            SELECT MAX(SERIAL_NO) into v_max_sno FROM TBZZ8005 WHERE STD_YYMM = v_std_yymm;

            --LAST 상태 업데이트
            if v_max_sno is null then
                v_new_sno := '001';
            else
             begin
                UPDATE TBZZ8005
                   SET LAST = ''
                 WHERE STD_YYMM = v_std_yymm
                   AND SERIAL_NO = v_max_sno;
                v_new_sno := LPAD(v_max_sno+1,3,0);
                end;
            end if;

            --추가 INSERT
            INSERT INTO TBZZ8005(STD_YYMM, SERIAL_NO, LAST, USER_ID) values (v_std_yymm, v_new_sno, 'Y', 'SYSTEM');

   INSERT INTO TBZZ8006(STD_YYMM, SERIAL_NO, ACCIDENT_NO, HND_COVER, DMGE_NO, CENTER, TEAM, PART, STAFF
                        , FST_EAT_AMT, PM_EAT_AMT , FST_TOT_EAT_AMT, ADD_EAT_AMT, TOT_EAT_AMT
                        , P_DC_AMT, M_DC_AMT, FST_TOT_DC_AMT, ADD_DC_AMT, TOT_DC_AMT, USER_ID
   )
   WITH END_TEMP AS (
        SELECT CE01.*
          FROM TBCE0001 CE01
         WHERE 1=1
           AND CE01.DC_DIV = '2'
           AND CE01.ACNT_YMD  BETWEEN v_std_yymm AND v_to_dt
        )
   SELECT v_std_yymm, v_new_sno
        , ACCIDENT_NO, HND_COVER, DMGE_NO , CENTER, TEAM, PART, STAFF
        , FST_EAT_AMT, PM_EAT_AMT, (FST_EAT_AMT+PM_EAT_AMT) AS FST_TOT_EAT_AMT
        , ADD_EAT_AMT
        , (FST_EAT_AMT+PM_EAT_AMT+ADD_EAT_AMT) AS TOT_EAT_AMT
        , P_DC_AMT, M_DC_AMT, (P_DC_AMT+M_DC_AMT) AS FST_TOT_DC_AMT
        , ADD_DC_AMT
        , (P_DC_AMT+M_DC_AMT+ADD_DC_AMT) AS TOT_DC_AMT
        , 'BATCH'
     FROM (
           SELECT ET.ACCIDENT_NO
                , ET.HND_COVER
                , ET.DMGE_NO
                , ET.CENTER
                , ET.TEAM
                , ET.PART
                , ET.STAFF
                , CASE WHEN ET.HND_COVER IN ('33','66','77') THEN
                  NVL((SELECT OCCU_TOT_AMT
                             FROM TBCD0001 CD01
                            WHERE CD01.ACCIDENT_NO = ET.ACCIDENT_NO
                              AND CD01.HND_COVER = ET.HND_COVER
                              AND CD01.DMGE_NO = ET.DMGE_NO
                              AND CD01.SERIAL_NO = (SELECT MIN(CD01_IN.SERIAL_NO) FIRST_SERIAL
                                                      FROM TBCD0001 CD01_IN
                                                     WHERE CD01_IN.ACCIDENT_NO = CD01.ACCIDENT_NO
                                                       AND CD01_IN.HND_COVER = CD01.HND_COVER
                                                       AND CD01_IN.DMGE_NO = CD01.DMGE_NO
                                                       AND CD01_IN.INPUT_DIV = '5'
                                                       AND CD01_IN.OCCU_TOT_AMT >0
                                                     GROUP BY CD01_IN.ACCIDENT_NO, CD01_IN.HND_COVER, CD01_IN.DMGE_NO)
                              AND CD01.INPUT_DIV = '5'), 0)
                       ELSE
                  NVL((SELECT OCCU_TOT_AMT
                             FROM TBCC0002 CC02
                            WHERE CC02.ACCIDENT_NO = ET.ACCIDENT_NO
                              AND CC02.HND_COVER = ET.HND_COVER
                              AND CC02.DMGE_NO = ET.DMGE_NO
                              AND CC02.INPUT_DIV = '4'
                              AND CC02.SERIAL_NO = '001'), 0)
                   END FST_EAT_AMT
                , CASE WHEN ET.HND_COVER IN ('33','66','77') THEN
                  NVL((SELECT SUM(OCCU_TOT_AMT)
                             FROM TBCD0001 CD01
                            WHERE CD01.ACCIDENT_NO = ET.ACCIDENT_NO
                              AND CD01.HND_COVER = ET.HND_COVER
                              AND CD01.DMGE_NO = ET.DMGE_NO
                              AND CD01.INPUT_DIV = '5'
                              AND CD01.SERIAL_NO > (SELECT MIN(CD01_IN.SERIAL_NO) FIRST_SERIAL
                                                      FROM TBCD0001 CD01_IN
                                                     WHERE CD01_IN.ACCIDENT_NO = CD01.ACCIDENT_NO
                                                       AND CD01_IN.HND_COVER = CD01.HND_COVER
                                                       AND CD01_IN.DMGE_NO = CD01.DMGE_NO
                                                       AND CD01_IN.INPUT_DIV = '5'
                                                       AND CD01_IN.OCCU_TOT_AMT >0
                                                     GROUP BY CD01_IN.ACCIDENT_NO, CD01_IN.HND_COVER, CD01_IN.DMGE_NO)
                              AND CD01.SERIAL_NO <= ET.CD01_SER_NO
                              AND CD01.OCCU_TOT_AMT <> 0), 0)
                       ELSE
                  NVL((SELECT SUM(OCCU_TOT_AMT)
                             FROM TBCC0002 CC02
                            WHERE CC02.ACCIDENT_NO = ET.ACCIDENT_NO
                              AND CC02.HND_COVER = ET.HND_COVER
                              AND CC02.DMGE_NO = ET.DMGE_NO
                              AND CC02.INPUT_DIV = '4'
                              AND CC02.SERIAL_NO > '001'
                              AND CC02.SERIAL_NO <= ET.CC02_SER_NO
                              AND CC02.OCCU_TOT_AMT <> 0), 0)
                   END PM_EAT_AMT
                , CASE WHEN ET.HND_COVER IN ('33','66','77') THEN
                  NVL((SELECT SUM(OCCU_TOT_AMT)
                             FROM TBCD0001 CD01
                            WHERE CD01.ACCIDENT_NO = ET.ACCIDENT_NO
                              AND CD01.HND_COVER = ET.HND_COVER
                              AND CD01.DMGE_NO = ET.DMGE_NO
                              AND CD01.INPUT_DIV = '5'
                              AND CD01.SERIAL_NO > ET.CD01_SER_NO
                              AND CD01.OCCU_TOT_AMT <> 0), 0)
                       ELSE
                  NVL((SELECT SUM(OCCU_TOT_AMT)
                             FROM TBCC0002 CC02
                            WHERE CC02.ACCIDENT_NO = ET.ACCIDENT_NO
                              AND CC02.HND_COVER = ET.HND_COVER
                              AND CC02.DMGE_NO = ET.DMGE_NO
                              AND CC02.INPUT_DIV = '4'
                              AND CC02.SERIAL_NO > ET.CC02_SER_NO
                              AND CC02.OCCU_TOT_AMT <> 0), 0)
                   END ADD_EAT_AMT
                , NVL((SELECT SUM(DC_AMT)
                             FROM TBCE0001 CE01
                            WHERE CE01.ACCIDENT_NO = ET.ACCIDENT_NO
                              AND CE01.HND_COVER = ET.HND_COVER
                              AND CE01.DMGE_NO = ET.DMGE_NO
                              AND CE01.DC_NO <= ET.DC_NO
                              AND CE01.ACNT_YMD IS NOT NULL
                              AND CE01.DC_AMT > 0), 0) P_DC_AMT
                , NVL((SELECT SUM(DC_AMT)
                             FROM TBCE0001 CE01
                            WHERE CE01.ACCIDENT_NO = ET.ACCIDENT_NO
                              AND CE01.HND_COVER = ET.HND_COVER
                              AND CE01.DMGE_NO = ET.DMGE_NO
                              AND CE01.DC_NO <= ET.DC_NO
                              AND CE01.ACNT_YMD IS NOT NULL
                              AND CE01.DC_AMT < 0), 0) M_DC_AMT
                , NVL((SELECT SUM(DC_AMT)
                             FROM TBCE0001 CE01
                            WHERE CE01.ACCIDENT_NO = ET.ACCIDENT_NO
                              AND CE01.HND_COVER = ET.HND_COVER
                              AND CE01.DMGE_NO = ET.DMGE_NO
                              AND CE01.DC_NO > ET.DC_NO
                              AND CE01.ACNT_YMD IS NOT NULL
                              AND CE01.DC_AMT <> 0), 0) ADD_DC_AMT
             FROM END_TEMP AS ET
          )
    where 1=1;

            o_succ_cnt := o_succ_cnt + 1;
            COMMIT;

        EXCEPTION WHEN OTHERS THEN
            o_fail_cnt := o_fail_cnt + 1;
            ROLLBACK;
            --실패처리상세배치저장
            PR_INSERT_BATCH_LOG(i_bat_id, 'PR_BATCH_CLM_EAT_DCAMT', v_std_yymm||'/'||v_from_dt||','||v_to_dt, '[실패][오류메시지:' || sqlerrm || ']');
            --Server LOG
            o_result := o_result || chr(13) || chr(10) || '[실패]['||v_std_yymm||'/'||v_from_dt||','||v_to_dt||']';

        END;
    END LOOP;
    exception when others then
        RAISE_APPLICATION_ERROR(-20010, 'PR_BATCH_CLM_EAT_DCAMT ERROR: ' || sqlerrm);
        o_result := sqlerrm ;
        --실패처리
        PR_INSERT_BATCH_LOG(i_bat_id, 'PR_BATCH_CLM_EAT_DCAMT','ERROR' ,'[실패][오류메시지:' || sqlerrm ||']' );

end;
CREATE OR REPLACE
PROCEDURE PR_BATCH_CLM_EAT_DCAMT1(i_bat_id in varchar, i_std_dt in varchar, o_succ_cnt out number, o_result out varchar2) as

/**************************************************************************************/
/* 생성일자 : 2017.03.21                                                                */
/* 생성자 : 김영인                                                                                                                                             */
/* 업무내용 : 전달기준 보상 추산대비 결정비 집계(BATCH)                                        */
/* Parameter : [out]o_result : 결과 정상(OK), 비정상(해당메시지)                           */
/**************************************************************************************/

v_std_yymm VARCHAR2(6);     --기준년도
v_from_dt VARCHAR2(8);      --기준일 from
v_to_dt VARCHAR2(8);        --기준일 to
v_max_sno VARCHAR2(3);      --MAX 순번
v_new_sno VARCHAR2(3);      --신규 순번

begin
    SELECT SUBSTR(i_std_dt,0,6) into v_std_yymm FROM DUAL;
    SELECT i_std_dt into v_from_dt FROM DUAL;
    SELECT TO_CHAR(LAST_DAY(i_std_dt),'YYYYMMDD') into v_to_dt FROM DUAL;

    o_result := '';
    o_succ_cnt := 0;

    --MAX SERIAL_NO 구하기
    SELECT MAX(SERIAL_NO) into v_max_sno FROM TBZZ8005 WHERE STD_YYMM = v_std_yymm;

    --LAST 상태 업데이트
    if v_max_sno is null then
        v_new_sno := '001';
    else
     begin
            UPDATE TBZZ8005
               SET LAST = ''
             WHERE STD_YYMM = v_std_yymm
               AND SERIAL_NO = v_max_sno;
            v_new_sno := LPAD(v_max_sno+1,3,0);
        end;
    end if;

    --추가 INSERT
    INSERT INTO TBZZ8005(STD_YYMM, SERIAL_NO, LAST, USER_ID) values (v_std_yymm, v_new_sno, 'Y', 'SYSTEM');

 INSERT INTO TBZZ8006(STD_YYMM, SERIAL_NO, ACCIDENT_NO, HND_COVER, DMGE_NO, CENTER, TEAM, PART, STAFF
                      , FST_EAT_AMT, PM_EAT_AMT , FST_TOT_EAT_AMT, ADD_EAT_AMT, TOT_EAT_AMT
                      , P_DC_AMT, M_DC_AMT, FST_TOT_DC_AMT, ADD_DC_AMT, TOT_DC_AMT, USER_ID
 )
 WITH END_TEMP AS (
      SELECT CE01.*
        FROM TBCE0001 CE01
       WHERE 1=1
         AND CE01.DC_DIV = '2'
         AND CE01.ACNT_YMD  BETWEEN v_from_dt AND v_to_dt
      )
 SELECT v_std_yymm, v_new_sno
      , ACCIDENT_NO, HND_COVER, DMGE_NO , CENTER, TEAM, PART, STAFF
      , FST_EAT_AMT, PM_EAT_AMT, (FST_EAT_AMT+PM_EAT_AMT) AS FST_TOT_EAT_AMT
      , ADD_EAT_AMT
      , (FST_EAT_AMT+PM_EAT_AMT+ADD_EAT_AMT) AS TOT_EAT_AMT
      , P_DC_AMT, M_DC_AMT, (P_DC_AMT+M_DC_AMT) AS FST_TOT_DC_AMT
      , ADD_DC_AMT
      , (P_DC_AMT+M_DC_AMT+ADD_DC_AMT) AS TOT_DC_AMT
      , 'BATCH'
   FROM (
         SELECT ET.ACCIDENT_NO
              , ET.HND_COVER
              , ET.DMGE_NO
              , ET.CENTER
              , ET.TEAM
              , ET.PART
              , ET.STAFF
              , CASE WHEN ET.HND_COVER IN ('33','66','77') THEN
                NVL((SELECT OCCU_TOT_AMT
                           FROM TBCD0001 CD01
                          WHERE CD01.ACCIDENT_NO = ET.ACCIDENT_NO
                            AND CD01.HND_COVER = ET.HND_COVER
                            AND CD01.DMGE_NO = ET.DMGE_NO
                            AND CD01.SERIAL_NO = (SELECT MIN(CD01_IN.SERIAL_NO) FIRST_SERIAL
                                                    FROM TBCD0001 CD01_IN
                                                   WHERE CD01_IN.ACCIDENT_NO = CD01.ACCIDENT_NO
                                                     AND CD01_IN.HND_COVER = CD01.HND_COVER
                                                     AND CD01_IN.DMGE_NO = CD01.DMGE_NO
                                                     AND CD01_IN.INPUT_DIV = '5'
                                                     AND CD01_IN.OCCU_TOT_AMT >0
                                                   GROUP BY CD01_IN.ACCIDENT_NO, CD01_IN.HND_COVER, CD01_IN.DMGE_NO)
                            AND CD01.INPUT_DIV = '5'), 0)
                     ELSE
                NVL((SELECT OCCU_TOT_AMT
                           FROM TBCC0002 CC02
                          WHERE CC02.ACCIDENT_NO = ET.ACCIDENT_NO
                            AND CC02.HND_COVER = ET.HND_COVER
                            AND CC02.DMGE_NO = ET.DMGE_NO
                            AND CC02.INPUT_DIV = '4'
                            AND CC02.SERIAL_NO = '001'), 0)
                 END FST_EAT_AMT
              , CASE WHEN ET.HND_COVER IN ('33','66','77') THEN
                NVL((SELECT SUM(OCCU_TOT_AMT)
                           FROM TBCD0001 CD01
                          WHERE CD01.ACCIDENT_NO = ET.ACCIDENT_NO
                            AND CD01.HND_COVER = ET.HND_COVER
                            AND CD01.DMGE_NO = ET.DMGE_NO
                            AND CD01.INPUT_DIV = '5'
                            AND CD01.SERIAL_NO > (SELECT MIN(CD01_IN.SERIAL_NO) FIRST_SERIAL
                                                    FROM TBCD0001 CD01_IN
                                                   WHERE CD01_IN.ACCIDENT_NO = CD01.ACCIDENT_NO
                                                     AND CD01_IN.HND_COVER = CD01.HND_COVER
                                                     AND CD01_IN.DMGE_NO = CD01.DMGE_NO
                                                     AND CD01_IN.INPUT_DIV = '5'
                                                     AND CD01_IN.OCCU_TOT_AMT >0
                                                   GROUP BY CD01_IN.ACCIDENT_NO, CD01_IN.HND_COVER, CD01_IN.DMGE_NO)
                            AND CD01.SERIAL_NO <= ET.CD01_SER_NO
                            AND CD01.OCCU_TOT_AMT <> 0), 0)
                     ELSE
                NVL((SELECT SUM(OCCU_TOT_AMT)
                           FROM TBCC0002 CC02
                          WHERE CC02.ACCIDENT_NO = ET.ACCIDENT_NO
                            AND CC02.HND_COVER = ET.HND_COVER
                            AND CC02.DMGE_NO = ET.DMGE_NO
                            AND CC02.INPUT_DIV = '4'
                            AND CC02.SERIAL_NO > '001'
                            AND CC02.SERIAL_NO <= ET.CC02_SER_NO
                            AND CC02.OCCU_TOT_AMT <> 0), 0)
                 END PM_EAT_AMT
              , CASE WHEN ET.HND_COVER IN ('33','66','77') THEN
                NVL((SELECT SUM(OCCU_TOT_AMT)
                           FROM TBCD0001 CD01
                          WHERE CD01.ACCIDENT_NO = ET.ACCIDENT_NO
                            AND CD01.HND_COVER = ET.HND_COVER
                            AND CD01.DMGE_NO = ET.DMGE_NO
                            AND CD01.INPUT_DIV = '5'
                            AND CD01.SERIAL_NO > ET.CD01_SER_NO
                            AND CD01.OCCU_TOT_AMT <> 0), 0)
                     ELSE
                NVL((SELECT SUM(OCCU_TOT_AMT)
                           FROM TBCC0002 CC02
                          WHERE CC02.ACCIDENT_NO = ET.ACCIDENT_NO
                            AND CC02.HND_COVER = ET.HND_COVER
                            AND CC02.DMGE_NO = ET.DMGE_NO
                            AND CC02.INPUT_DIV = '4'
                            AND CC02.SERIAL_NO > ET.CC02_SER_NO
                            AND CC02.OCCU_TOT_AMT <> 0), 0)
                 END ADD_EAT_AMT
              , NVL((SELECT SUM(DC_AMT)
                           FROM TBCE0001 CE01
                          WHERE CE01.ACCIDENT_NO = ET.ACCIDENT_NO
                            AND CE01.HND_COVER = ET.HND_COVER
                            AND CE01.DMGE_NO = ET.DMGE_NO
                            AND CE01.DC_NO <= ET.DC_NO
                            AND CE01.ACNT_YMD IS NOT NULL
                            AND CE01.DC_AMT > 0), 0) P_DC_AMT
              , NVL((SELECT SUM(DC_AMT)
                           FROM TBCE0001 CE01
                          WHERE CE01.ACCIDENT_NO = ET.ACCIDENT_NO
                            AND CE01.HND_COVER = ET.HND_COVER
                            AND CE01.DMGE_NO = ET.DMGE_NO
                            AND CE01.DC_NO <= ET.DC_NO
                            AND CE01.ACNT_YMD IS NOT NULL
                            AND CE01.DC_AMT < 0), 0) M_DC_AMT
              , NVL((SELECT SUM(DC_AMT)
                           FROM TBCE0001 CE01
                          WHERE CE01.ACCIDENT_NO = ET.ACCIDENT_NO
                            AND CE01.HND_COVER = ET.HND_COVER
                            AND CE01.DMGE_NO = ET.DMGE_NO
                            AND CE01.DC_NO > ET.DC_NO
                            AND CE01.ACNT_YMD IS NOT NULL
                            AND CE01.DC_AMT <> 0), 0) ADD_DC_AMT
           FROM END_TEMP AS ET
        )
  where 1=1;

    o_succ_cnt := o_succ_cnt + 1;
    COMMIT;

    EXCEPTION WHEN OTHERS THEN
        ROLLBACK;
        --실패처리상세배치저장
        PR_INSERT_BATCH_LOG(i_bat_id, 'PR_BATCH_CLM_EAT_DCAMT', v_std_yymm||'/'||v_from_dt||','||v_to_dt, '[실패][오류메시지:' || sqlerrm || ']');
        --Server LOG
        o_result := o_result || chr(13) || chr(10) || '[실패]['||v_std_yymm||'/'||v_from_dt||','||v_to_dt||']';

end;
             , CONT_ADDR_1       =v_addr_1
             , CONT_ADDR_2       =v_addr_2
             , CONT_OFF_TEL_DDD   =v_off_tel_ddd
             , CONT_OFF_TEL        =v_off_tel
             , CONT_TEL_DDD        =v_tel_ddd
             , CONT_TEL_NO         =v_tel_no
             , CONT_HP_NO          =v_hp_no
             , CONT_FAX            =v_isd_fax
         where CONT_CD = v_cust_cd
           and TO_CHAR(sysdate,'YYYYMMDD') between TO_CHAR(ENT_DGN_DATE,'YYYYMMDD') and TO_CHAR(IEND_CONT_DATE,'YYYYMMDD');
    end;


    --계약 테이블 업데이트
    begin
        --계약마스터(TBIC0001)의 계약자 정보 업데이트
         update TBIC0001
           set CONT_ZIP_CD_GB      =v_zip_cd_gb
             , CONT_ZIP_CD       =v_zip_cd
             , CONT_ADDR_1       =v_addr_1
             , CONT_ADDR_2       =v_addr_2
             , CONT_OFF_TEL_DDD   =v_off_tel_ddd
             , CONT_OFF_TEL        =v_off_tel
             , CONT_TEL_DDD        =v_tel_ddd
             , CONT_TEL_NO         =v_tel_no
             , CONT_HP_NO          =v_hp_no
             , CONT_FAX            =v_isd_fax
         where CONT_CD = v_cust_cd
           and TO_CHAR(sysdate,'YYYYMMDD') between TO_CHAR(ENT_DGN_DATE,'YYYYMMDD') and TO_CHAR(IEND_CONT_DATE,'YYYYMMDD');
    end;




    --정상처리결과반환
    o_result := 'OK';

    exception when others then
              dbms_output.put_line('PR_CONT_UPDATE_CUST ERROR: ' || sqlerrm);
              raise_application_error(-20010, 'PR_CONT_UPDATE_CUST ERROR: ' || sqlerrm);
              o_result := sqlerrm ;

    --Commit과 Rollback은 JAVA Business 로직에서 처리함으로 프로시저에서는 정의하지 않는다.

end ;
CREATE OR REPLACE
procedure          PR_CONT_UPDATE_CUST_test (i_cust_no              in  varchar2,
                                                 o_result               out varchar2 ) as

/****************************************************************************************/
/* 생성일자 : 2013.04.25                                                                */
/* 생성자   : 이정원                                                                    */
/* 업무내용 : 고객관리 화면에서 아래 명시한 파라메터값에 해당하는 정보가 수정처리될     */
/*            시 가입설계,배서,계약마스터 테이블의 피공제자,조합원에 동일하게 해당하는  */
/*            필드들을 수정된 값으로 동일하게 업데이트 처리                             */
/* Parameter: [in] i_cust_no              : 고객번호-조합원고유키                       */
/*            [out]o_result               : 결과 정상(OK), 비정상(해당메시지)           */
/****************************************************************************************/

v_zip_cd_gb                           TBAA0001.ZIP_CD_GB%TYPE;          --고객우편번호신구구분
v_zip_cd                              TBAA0001.ZIP_CD%TYPE;             --고객우편번호
v_addr_1                              TBAA0001.ADDR_1%TYPE;             --고객주소1
v_addr_2                              TBAA0001.ADDR_2%TYPE;             --고객주소2(상세주소)
v_off_tel_ddd                         TBAA0001.OFF_TEL_DDD%TYPE;        --고객직장전화지역번호
v_off_tel                             TBAA0001.OFF_TEL%TYPE;            --고객직장전화번호
v_tel_ddd                             TBAA0001.OFF_TEL_DDD1%TYPE;       --고객전화번호지역번호(자택)
v_tel_no                              TBAA0001.OFF_TEL1%TYPE;           --고객전화번호(자택)
v_hp_no                               TBAA0001.HP_NO1%TYPE;             --고객휴대폰번호
v_isd_fax                             TBAA0001.ISD_FAX%TYPE;            --고객팩스번호

v_cust_gb                             TBAA0001.CUST_GB%TYPE;            --개인,조합원,비조합원 구분
v_bco_no                              TBAA0001.BCO_NO%TYPE;             --조합원사업자등록번호
v_co_no                               TBAA0001.CO_NO%TYPE;              --조합원주민등록번호

v_cust_cd                             varchar2(13);                     --조합원코드


begin
    --반환 초기값 설정
    o_result := 'NOT_OK';

    begin
       --고객정보 SELECT
       select ZIP_CD_GB,              ZIP_CD,           ADDR_1,         ADDR_2,          OFF_TEL_DDD,
              OFF_TEL,                OFF_TEL_DDD1,     OFF_TEL1,       HP_NO1,          ISD_FAX,
              CUST_GB,                BCO_NO,           CO_NO
         into v_zip_cd_gb,            v_zip_cd,         v_addr_1,       v_addr_2,        v_off_tel_ddd,
              v_off_tel,              v_tel_ddd,        v_tel_no,       v_hp_no,         v_isd_fax,
              v_cust_gb,              v_bco_no,         v_co_no
         from TBAA0001
        where CUST_NO  = i_cust_no;

        if    v_cust_gb  = '1' then          --개인일 경우 v_cust_cd 는 주민등록번호
              v_cust_cd := v_co_no;
        else                                 --조합원,비조합원일 경우 v_cust_cd 는 사업자번호
              v_cust_cd := v_bco_no;
        end if;

        exception when no_data_found then
              o_result := '고객정보(TBAA0001) 데이터를 찾을 수 없습니다.';
    end;


    --설계/청약관련 테이블 업데이트
    begin
        --가입설계마스터(TBIB0001)의 피공제자 정보 업데이트
        update TBIB0001
           set ISD_ZIP_CD_GB       =v_zip_cd_gb
             , ISD_ZIP_CD         =v_zip_cd
             , ISD_ADDR_1         =v_addr_1
             , ISD_ADDR_2         =v_addr_2
             , ISD_OFF_TEL_DDD   =v_off_tel_ddd
             , ISD_OFF_TEL         =v_off_tel
             , ISD_TEL_DDD         =v_tel_ddd
             , ISD_TEL_NO          =v_tel_no
             , ISD_HP_NO           =v_hp_no
             , ISD_FAX             =v_isd_fax
         where CUST_NO = i_cust_no
           and TO_CHAR(sysdate,'YYYYMMDD') between TO_CHAR(ENT_DGN_DATE,'YYYYMMDD') and TO_CHAR(IEND_CONT_DATE,'YYYYMMDD');
    end;


    --배서 테이블 업데이트
    begin
        --배서마스터(TBID0001)의 피공제자 정보 업데이트
         update TBID0001
           set ISD_ZIP_CD_GB       =v_zip_cd_gb
             , ISD_ZIP_CD         =v_zip_cd
             , ISD_ADDR_1         =v_addr_1
             , ISD_ADDR_2         =v_addr_2
             , ISD_OFF_TEL_DDD   =v_off_tel_ddd
             , ISD_OFF_TEL         =v_off_tel
             , ISD_TEL_DDD         =v_tel_ddd
             , ISD_TEL_NO          =v_tel_no
             , ISD_HP_NO           =v_hp_no
             , ISD_FAX             =v_isd_fax
         where CUST_NO = i_cust_no
           and TO_CHAR(sysdate,'YYYYMMDD') between TO_CHAR(ENT_DGN_DATE,'YYYYMMDD') and TO_CHAR(IEND_CONT_DATE,'YYYYMMDD');
    end;


    --계약 테이블 업데이트
    begin
        --계약마스터(TBIC0001)의 피공제자 정보 업데이트
         update TBIC0001
           set ISD_ZIP_CD_GB       =v_zip_cd_gb
             , ISD_ZIP_CD         =v_zip_cd
             , ISD_ADDR_1         =v_addr_1
             , ISD_ADDR_2         =v_addr_2
             , ISD_OFF_TEL_DDD   =v_off_tel_ddd
             , ISD_OFF_TEL         =v_off_tel
             , ISD_TEL_DDD         =v_tel_ddd
             , ISD_TEL_NO          =v_tel_no
             , ISD_HP_NO           =v_hp_no
             , ISD_FAX             =v_isd_fax
         where CUST_NO = i_cust_no
           and TO_CHAR(sysdate,'YYYYMMDD') between TO_CHAR(ENT_DGN_DATE,'YYYYMMDD') and TO_CHAR(IEND_CONT_DATE,'YYYYMMDD');
    end;



    --설계/청약관련 테이블 업데이트
    begin
        --가입설계마스터(TBIB0001)의 계약자 정보 업데이트
        update TBIB0001
           set CONT_ZIP_CD_GB      =v_zip_cd_gb
             , CONT_ZIP_CD       =v_zip_cd
             , CONT_ADDR_1       =v_addr_1
             , CONT_ADDR_2       =v_addr_2
             , CONT_OFF_TEL_DDD   =v_off_tel_ddd
             , CONT_OFF_TEL        =v_off_tel
             , CONT_TEL_DDD        =v_tel_ddd
             , CONT_TEL_NO         =v_tel_no
             , CONT_HP_NO          =v_hp_no
             , CONT_FAX            =v_isd_fax
         where CONT_CD = v_cust_cd
           and TO_CHAR(sysdate,'YYYYMMDD') between TO_CHAR(ENT_DGN_DATE,'YYYYMMDD') and TO_CHAR(IEND_CONT_DATE,'YYYYMMDD');
    end;


    --배서 테이블 업데이트
    begin
        --배서마스터(TBID0001)의 계약자 정보 업데이트
         update TBID0001
           set CONT_ZIP_CD_GB      =v_zip_cd_gb
             , CONT_ZIP_CD       =v_zip_cd
